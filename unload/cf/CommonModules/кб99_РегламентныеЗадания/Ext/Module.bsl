#Область ПроцедурыРегламентныхЗаданий

Процедура кб99_ВСД_УдалитьСтарыеЗапросы() Экспорт
	
	Организация = кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Организация );	
	КоличествоДней = ПараметрыОрганизации["КоличествоДнейХраненияЗапросов"];
	КоличествоДней = ?(КоличествоДней = 0, 30, КоличествоДней);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	кб99_Запросы.*
	|ИЗ
	|	РегистрСведений.кб99_Запросы КАК кб99_Запросы
	|ГДЕ
	|	кб99_Запросы.Период < &ПериодОчистки";
	Запрос.УстановитьПараметр("ПериодОчистки", ТекущаяДата() - КоличествоДней*86400);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.кб99_Запросы.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Прочитать();
		Запись.Запрос = "";
		Запись.Ответ  = "";
		Запись.Ошибки = "";
		Запись.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура кб99_ВСД_УдалитьЗапросы_XML() Экспорт
	
	Попытка
		Организация = кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();	
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Организация );	
		КаталогЛогов = ПараметрыОрганизации["КаталогЛогов"];
		КоличествоДней = ПараметрыОрганизации["КоличествоДнейХраненияЗапросов"];
		КоличествоДней = ?(КоличествоДней = 0, 30, КоличествоДней);
		ДатаГраницы = ТекущаяДата() - КоличествоДней*86400;
		Файлы = НайтиФайлы(КаталогЛогов, "*.xml");
		Для Каждого Файл Из Файлы Цикл
			Если Файл.ПолучитьВремяИзменения() < ДатаГраницы Тогда
				УдалитьФайлы(Файл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;	
	Исключение
		кб99_ВСД.СообщитьОбОшибке(ОписаниеОшибки(),,"ВСД Ошибка при очистке файлов логов");
	КонецПопытки;
	
КонецПроцедуры

Процедура кб99_ПолучитьАктуальныеПартии(МассивПараметров) Экспорт
	
	Попытка
		Если ТипЗнч(МассивПараметров) <> Тип("Структура") Тогда
			кб99_ВСД.СообщитьОбОшибке(ОписаниеОшибки(),,"Ошибка при выполнение регламентного задания: Получить актуальные партии.");
			Возврат;
		КонецЕсли;
		
		СписокПлощадок = МассивПараметров.Площадки;
		Если СписокПлощадок.Количество() = 0 Тогда
			Возврат;	
		КонецЕсли;
		
		Организация = кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();	
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Организация );
		
		ПараметрыОрганизации.Вставить("ПартииСмещение", 0);
		ПараметрыОрганизации.Вставить("УдалятьПартии", Ложь);
		ПараметрыОрганизации.Вставить("ТолькоАктуальныеПартии", Ложь);
		ПараметрыОрганизации.Вставить("ПартияКонПериода", ТекущаяДата());
		
		Для Каждого Площадка Из СписокПлощадок Цикл
			ПараметрыОрганизации.Вставить("ВыбПлощадка", Площадка.Значение);
			ПараметрыОрганизации.Вставить("ПартияНачПериода", Площадка.Значение.ДатаАктуальностиПартий);
			
			ИдентификаторЗадания = Неопределено;	
			
			НаименованиеЗадания = НСтр("ru = 'Регламентное задание - Ветис загрузка партий по площадке: '" + Площадка.Значение.Наименование);
			Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( , 
			"кб99_ВСД_Запросы.Партии2_Запрос_Отправить_ВФоне",
			ПараметрыОрганизации,
			НаименованиеЗадания);
			
			ВСД_Площадка = Площадка.Значение.ПолучитьОбъект();
			ВСД_Площадка.ДатаАктуальностиПартий = ТекущаяДата();
			ВСД_Площадка.Записать();
		КонецЦикла;
	Исключение
		кб99_ВСД.СообщитьОбОшибке(ОписаниеОшибки(),,"Ошибка при выполнение регламентного задания: Получить актуальные партии.");
	КонецПопытки;

КонецПроцедуры

Процедура кб99_ОбновитьСтатусыВСД(МассивПараметров) Экспорт
	
	Попытка
		Если ТипЗнч(МассивПараметров) <> Тип("Структура") Тогда
			кб99_ВСД.СообщитьОбОшибке(ОписаниеОшибки(),,"Ошибка при выполнение регламентного задания: Обновить статусы ВСД");
			Возврат;
		КонецЕсли;
		
		Организация = кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();	
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Организация);	

		КоличествоДней = МассивПараметров.КоличествоДней;
		НачалоПериода = ТекущаяДата() - КоличествоДней*86400;
		
		#Область ОбновлениеВСДПоИсходящимДокументам
			//Запрос = Новый Запрос;
			//Запрос.Текст = "
			//|ВЫБРАТЬ
			//|	ВСД2_транзакция.Ссылка КАК ДокументОтгрузки
			//|ПОМЕСТИТЬ втСписокДокументов
			//|ИЗ
			//|	Документ.ВСД2_транзакция КАК ВСД2_транзакция
			//|ГДЕ
			//|	НЕ ВСД2_транзакция.ПометкаУдаления
			//|	И ВСД2_транзакция.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			//|
			//|ИНДЕКСИРОВАТЬ ПО
			//|	ДокументОтгрузки
			//|;
			//|
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ
			//|	кб99_ВСД2.Ссылка КАК Док
			//|ИЗ
			//|	Справочник.кб99_ВСД2 КАК кб99_ВСД2
			//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписокДокументов КАК втСписокДокументов
			//|		ПО кб99_ВСД2.ДокументОснование = втСписокДокументов.ДокументОтгрузки";
			//Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
			//Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ТекущаяДата()));
			//тзВСД = Запрос.Выполнить().Выгрузить();
			//кб99_ВСД_Запросы.ВСД2_ЗагрузитьПоUUID(ПараметрыОрганизации, , тзВСД);
		#КонецОбласти
		
		#Область ЗагрузкаСпискаТранспортныхВСДСФильтромПоДатеОформления
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ПолучательПлощадка", 	ПараметрыОрганизации.Отправитель_Площадка);	
			ПараметрыЗапроса.Вставить("vetDocumentType", 		"TRANSPORT");	
			ПараметрыЗапроса.Вставить("vetDocumentStatus", 		"");	
			ПараметрыЗапроса.Вставить("Смещение", 				0);	
			ПараметрыЗапроса.Вставить("ПоступилиС",  			НачалоПериода);	
			ПараметрыЗапроса.Вставить("ПоступилиПо",			КонецДня(ТекущаяДата()));	
			ПараметрыЗапроса.Вставить("ОтправительХозСубъект", 	ПараметрыОрганизации.Отправитель_ХозСубъект);
			ПараметрыЗапроса.Вставить("ОтправительПлощадка", 	ПараметрыОрганизации.Отправитель_Площадка);	
			
			кб99_ВСД_Запросы.ПолучитьСписокВСД(ПараметрыОрганизации, ПараметрыЗапроса)
		#КонецОбласти
		
	Исключение
		кб99_ВСД.СообщитьОбОшибке(ОписаниеОшибки(),,"Ошибка при выполнение регламентного задания: Обновить статусы ВСД");
	КонецПопытки;
	
КонецПроцедуры

Процедура кб99_ГашениеВСД(МассивПараметров) Экспорт
	
	Попытка
		Если ТипЗнч(МассивПараметров) <> Тип("Структура") Тогда
			кб99_ВСД.СообщитьОбОшибке("Ошибка при передаче параметров. Ожидалось: Структура, получили: "+ТипЗнч(МассивПараметров)+" ",,"Ошибка при выполнение регламентного задания: Гашение входящих ВСД");
			Возврат;
		КонецЕсли;
		
		Организация = МассивПараметров.Организация;
		СписокПлощадок = МассивПараметров.Площадки.ВыгрузитьЗначения();
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Организация);	
		ИскатьДокументПрихода = ПараметрыОрганизации["ПарамВсдВходящиеИскатьДокументПрихода"];
		
		Для Каждого ВСД_Площадка Из СписокПлощадок Цикл
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("vetDocumentType", "INCOMING");	
			ПараметрыЗапроса.Вставить("vetDocumentStatus", "CONFIRMED");	
			ПараметрыЗапроса.Вставить("Смещение", 0);	
			ПараметрыЗапроса.Вставить("ОтправительХозСубъект", Справочники.ВСД_ХозСубъект.ПустаяСсылка());	
			ПараметрыЗапроса.Вставить("ОтправительПлощадка", Справочники.ВСД_Площадка.ПустаяСсылка());	
			ПараметрыЗапроса.Вставить("ПолучательПлощадка", ВСД_Площадка);	
			
			Результат = кб99_ВСД_Запросы.ПолучитьСписокВСД( ПараметрыОрганизации, ПараметрыЗапроса );
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	кб99_ВСД2.Ссылка КАК ДокВСД,
		|	кб99_ЗапросыСрезПоследних.СтатусЗапроса,
		|	кб99_ЗапросыСрезПоследних.Пользователь,
		|	кб99_ЗапросыСрезПоследних.ApplicationID,
		|	кб99_ВСД2.Отправитель_ХозСубъект,
		|	кб99_ВСД2.Отправитель_Площадка,
		|	кб99_ВСД2.Получатель_ХозСубъект,
		|	кб99_ВСД2.Получатель_Площадка,
		|	кб99_ВСД2.Количество,
		|	кб99_ВСД2.ТтнСерия,
		|	кб99_ВСД2.ТтнНомер,
		|	кб99_ВСД2.ТтнДата,
		|	кб99_ВСД2.номерАвто,
		|	кб99_ВСД2.UUID,
		|	кб99_ВСД2.ФормаВСД,
		|	кб99_ВСД2.ЕдиницаИзмерения,
		|	кб99_ВСД2.ТермическоеСостояние,
		|	кб99_ВСД2.ОсобыеОтметки,
		|	кб99_ВСД2.cargoInspected,
		|	кб99_ВСД2.ВсдСерия,
		|	кб99_ВСД2.ВсдНомер,
		|	кб99_ВСД2.ВсдДата,
		|	кб99_ВСД2.Продукция,
		|	кб99_ВСД2.ВидПродукции,
		|	кб99_ВСД2.НаименованиеПродукции,
		|	кб99_ВСД2.Продукция_Элемент,
		|	кб99_ВСД2.ДокументОснование,
		|	кб99_ВСД2.ВидВСД,
		|	кб99_ВСД2.Скоропортящийся,
		|	кб99_ВСД2.Некачественный,
		|	кб99_ВСД2.ТипТС,
		|	кб99_ВСД2.Организация,
		|	кб99_ВСД2.ДатаИзготовления,
		|	кб99_ВСД2.ДатаСрокГодности,
		|	кб99_ВСД2.номерПолуприцепа,
		|	кб99_ВСД2.номерКонтейнера,
		|	кб99_ВСД2.ТипВСД,
		|	кб99_ВСД2.GTIN,
		|	кб99_ВСД2.Артикул,
		|	кб99_ВСД2.ФасовкаФормаУпаковки,
		|	кб99_ВСД2.ФасовкаНаименование,
		|	кб99_ВСД2.ФасовкаКоличество,
		|	кб99_ВСД2.ФасовкаЕдиницаИзм,
		|	кб99_ВСД2.ФасовкаОбъем,
		|	кб99_ВСД2.ВладелецХС,
		|	кб99_ВСД2.ТтнТип,
		|	кб99_ВСД2.КоличествоПринять,
		|	кб99_ВСД2.КоличествоВозврат,
		|	кб99_ВСД2.ТермическиеУсловияПеревозки,
		|	кб99_ВСД2.ДатаИзготовления1,
		|	кб99_ВСД2.ДатаИзготовления2,
		|	кб99_ВСД2.ДатаСрокГодности1,
		|	кб99_ВСД2.ДатаСрокГодности2,
		|	кб99_ВСД2.Страна,
		|	"""" КАК КодТНВЭД,
		|	"""" КАК Ошибки,
		|   Значение(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|   Значение(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка) КАК ДокументПрихода,
		|	0 КАК КоличествоПринято1С
		|ИЗ
		|	Справочник.кб99_ВСД2 КАК кб99_ВСД2
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кб99_Запросы.СрезПоследних КАК кб99_ЗапросыСрезПоследних
		|		ПО кб99_ВСД2.Ссылка = кб99_ЗапросыСрезПоследних.Объект
		|ГДЕ
		|	кб99_ВСД2.ПометкаУдаления = ЛОЖЬ
		|	И НЕ кб99_ЗапросыСрезПоследних.СтатусЗапроса = ""НЕТ""
		|	И кб99_ВСД2.СтатусВСД = &ВыбСтатус
		|	И кб99_ВСД2.Получатель_Площадка В (&ТзПлощадки)";
		
		Запрос.УстановитьПараметр( "ВыбСтатус", Перечисления.кб99_СтатусВСД.CONFIRMED );
		Запрос.УстановитьПараметр( "ТзПлощадки", СписокПлощадок );
		тзВыборка = Запрос.Выполнить().Выгрузить();
		
		СписокВСДкГашению = Новый Массив;
		Для Каждого строкаВыборка Из тзВыборка Цикл
			строкаВыборка.Номенклатура = кб99_ВСД.ПолучитьНоменклатуруПоПродукцияЭлемент( строкаВыборка.Продукция_Элемент, Истина );
			Если ИскатьДокументПрихода Тогда
				строкаВыборка.ДокументПрихода = кб99_ВСД_Общий.Гашение_НайтиДокументПоступлениеТоваров( строкаВыборка.ДокВСД.ТтнДата, строкаВыборка.ДокВСД.ТтнНомер, строкаВыборка.Отправитель_Хозсубъект.ИНН );
				строкаВыборка.КодТНВЭД = строкаВыборка.Продукция_Элемент.ВидПродукции.КодТНВЭД+"/"+строкаВыборка.Продукция_Элемент.Продукция.КодТНВЭД;
				Если ЗначениеЗаполнено(строкаВыборка.ДокументПрихода) И ЗначениеЗаполнено(строкаВыборка.Номенклатура) Тогда 
					тзТовары = строкаВыборка.ДокументПрихода.Товары.Выгрузить();
					
					ПараметрыОтбора = Новый Структура("Номенклатура", строкаВыборка.Номенклатура);
					Строки =  тзТовары.НайтиСтроки(ПараметрыОтбора);
					Если Строки.Количество()>0 Тогда
						КоличествоПринято = 0;	
						Для Каждого Стр Из Строки Цикл
							Попытка Коэфф = Стр.Коэффициент; Исключение Коэфф = 1 КонецПопытки;
							КоличествоПринято = КоличествоПринято + (Стр.Количество * Коэфф);	
						КонецЦикла;	
						строкаВыборка.КоличествоПринято1С = КоличествоПринято;					
					Иначе
						строкаВыборка.Ошибки = "Не найдена номенклатура ["+строкаВыборка.Номенклатура+"] в документе ["+строкаВыборка.ДокументПрихода+"]";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			кб99_ВСД_Общий.ГашениеПроверитьСтрокуТаблицы(строкаВыборка, ИскатьДокументПрихода);
			Если ПустаяСтрока(СтрокаВыборка.Ошибки) Тогда
				СписокВСДкГашению.Добавить(СтрокаВыборка.ДокВСД);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокВСДкГашению.Количество() > 0 Тогда
			ПараметрыОрганизации.Вставить("СписокДокументов", СписокВСДкГашению);
			ПараметрыОрганизации.Вставить("флАктНесоответствия", Ложь);
			ПараметрыОрганизации.Вставить("тПричинаАкта", "");
			ПараметрыОрганизации.Вставить("тОписаниеНесоответствия", "");
			кб99_ВСД_Запросы.ВСД2_Входящий_ОтправитьГашение_Параллельно( ПараметрыОрганизации, Неопределено );
		КонецЕсли;
	Исключение
		кб99_ВСД.СообщитьОбОшибке(ОписаниеОшибки(),,"Ошибка при выполнение регламентного задания: Гашение входящих ВСД");
	КонецПопытки;
	
КонецПроцедуры

Процедура кб99_ОтложеннаяОтправкаВСД2Транзакции(МассивПараметров) Экспорт
	
	Попытка
		Если ТипЗнч(МассивПараметров) <> Тип("Структура") Тогда
			кб99_ВСД.СообщитьОбОшибке("Ошибка при передаче параметров. Ожидалось: Структура, получили: "+ТипЗнч(МассивПараметров)+" ",,"Ошибка при выполнение регламентного задания: Отложенная отправка ВСД2 Транзакции");
			Возврат;
		КонецЕсли;
		
		Организация = МассивПараметров.Организация;
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Организация);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВСД2_транзакция.Ссылка КАК ДокВСД
		|ИЗ
		|	Документ.ВСД2_транзакция КАК ВСД2_транзакция
		|ГДЕ
		|	НЕ ВСД2_транзакция.ПометкаУдаления
		|	И ВСД2_транзакция.ОтправкаПоРасписанию
		|	И ВСД2_транзакция.ДатаОтправки < &Дата
		|	И ВСД2_транзакция.СтатусВСД = ЗНАЧЕНИЕ(Перечисление.кб99_СтатусВСД.ПустаяСсылка)
		|	И ВСД2_транзакция.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВСД2_транзакция.ДатаОтправки";
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		Запрос.УстановитьПараметр("Организация", Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			кб99_ВСД.ПолучитьУсловияПеревозки(Выборка.ДокВСД);
			кб99_ВСД.ОтправитьВСДвГИС(Выборка.ДокВСД);		
		КонецЦикла;
	Исключение
		кб99_ВСД.СообщитьОбОшибке(ОписаниеОшибки(),,"Ошибка при выполнение регламентного задания: Отложенная отправка ВСД2 Транзакции");
	КонецПопытки;
	
КонецПроцедуры
 
Процедура кб99_ОбработатьДокументыПроизводство(МассивПараметров) Экспорт
	
	Попытка
		Если ТипЗнч(МассивПараметров) <> Тип("Структура") Тогда
			кб99_ВСД.СообщитьОбОшибке("Ошибка при передаче параметров. Ожидалось: Структура, получили: "+ТипЗнч(МассивПараметров)+" ",,"Ошибка при выполнение регламентного задания: Обработка документов ВСД2 производство");
			Возврат;
		КонецЕсли;
		
		Организация = МассивПараметров.Организация;
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Организация);
		
		Запрос = Новый Запрос;
        Запрос.Текст =
		"ВЫБРАТЬ
		|	ВСД2_Производство.Ссылка КАК ВСДДок,
		|	ВЫБОР
		|		КОГДА НЕ кб99_ЗапросыСрезПоследних.СтатусЗапроса ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отправить
		|ИЗ
		|	Документ.ВСД2_Производство КАК ВСД2_Производство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кб99_Запросы.СрезПоследних(&Дата, ) КАК кб99_ЗапросыСрезПоследних
		|		ПО ВСД2_Производство.Ссылка = кб99_ЗапросыСрезПоследних.Объект
		|ГДЕ
		|	НЕ ВСД2_Производство.ПометкаУдаления
		|	И ВСД2_Производство.ОтправкаПоРасписанию
		|	И ВСД2_Производство.ДатаОтправки < &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВСД2_Производство.ДатаОтправки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВСД2_Производство.Ссылка КАК ВСДДок
		|ИЗ
		|	Документ.ВСД2_Производство КАК ВСД2_Производство
		|ГДЕ
		|	НЕ ВСД2_Производство.ПометкаУдаления
		|	И ВСД2_Производство.Организация = &Организация
		|	И ВСД2_Производство.ЗавершениеПоРасписанию
		|	И ВСД2_Производство.ДатаЗавершения < &Дата
		|	И НЕ ВСД2_Производство.ЗавершитьОперацию
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВСД2_Производство.ДатаЗавершения";
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		Запрос.УстановитьПараметр("Организация", Организация);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если Не РезультатЗапроса[0].Пустой() Тогда
			ДокументыКОтправке = РезультатЗапроса[0].Выбрать();
			Пока ДокументыКОтправке.Следующий() Цикл
				Если ДокументыКОтправке.Отправить Тогда
					кб99_ВСД.ОтправитьВСДвГИС(ДокументыКОтправке.ВСДДок);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не РезультатЗапроса[1].Пустой() Тогда
			ДокументыКЗавершению = РезультатЗапроса[1].Выбрать();
			Пока ДокументыКЗавершению.Следующий() Цикл
				ПараметрыОрганизации.Вставить( "ЗавершитьПроизводство", Истина );
				кб99_ВСД_Запросы.ЗавершитьПроизводство( ПараметрыОрганизации, ДокументыКЗавершению.ВСДДок );
			КонецЦикла;
		КонецЕсли;
	
	Исключение
		кб99_ВСД.СообщитьОбОшибке(ОписаниеОшибки(),,"Ошибка при выполнение регламентного задания: Обработка документов ВСД2 производство");
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПоРаботеСРегламентнымиЗаданиями

// Добавляет новое регламентное задание (без учета очереди заданий модели сервиса).
// 
// Параметры: 
//  Параметры - Структура - параметры добавляемого задания, возможные свойства:
//   * Использование - Булево - Истина, если регламентное задание должно выполняться автоматически согласно расписанию. 
//   * Метаданные    - ОбъектМетаданныхРегламентноеЗадание - обязательно для указания. Объект метаданных, на основе 
//                              которого будет создано регламентное задание.
//   * Параметры     - Массив - параметры регламентного задания. Количество и состав параметров должны соответствовать 
//                              параметрам метода регламентного задания.
//   * Ключ          - Строка - прикладной идентификатор регламентного задания.
//   * ИнтервалПовтораПриАварийномЗавершении - Число - интервал в секундах, через который нужно перезапускать задание 
//                              в случае его аварийного завершения.
//   * Расписание    - РасписаниеРегламентногоЗадания - расписание задания.
//   * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
//
// Возвращаемое значение:
//  РегламентноеЗадание
//
Функция ДобавитьРегламентноеЗадание(Параметры) Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	МетаданныеЗадания = Параметры.Метаданные;
	Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеЗадания);
	
	Если Параметры.Свойство("Наименование") Тогда
		Задание.Наименование = Параметры.Наименование;
	Иначе
		Задание.Наименование = МетаданныеЗадания.Наименование;
	КонецЕсли;
	
	Если Параметры.Свойство("Использование") Тогда
		Задание.Использование = Параметры.Использование;
	Иначе
		Задание.Использование = МетаданныеЗадания.Использование;
	КонецЕсли;
	
	Если Параметры.Свойство("Ключ") Тогда
		Задание.Ключ = Параметры.Ключ;
	Иначе
		Задание.Ключ = МетаданныеЗадания.Ключ;
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяПользователя") Тогда
		Задание.ИмяПользователя = Параметры.ИмяПользователя;
	КонецЕсли;
	
	Если Параметры.Свойство("ИнтервалПовтораПриАварийномЗавершении") Тогда
		Задание.ИнтервалПовтораПриАварийномЗавершении = Параметры.ИнтервалПовтораПриАварийномЗавершении;
	Иначе
		Задание.ИнтервалПовтораПриАварийномЗавершении = МетаданныеЗадания.ИнтервалПовтораПриАварийномЗавершении;
	КонецЕсли;
	
	Если Параметры.Свойство("КоличествоПовторовПриАварийномЗавершении") Тогда
		Задание.КоличествоПовторовПриАварийномЗавершении = Параметры.КоличествоПовторовПриАварийномЗавершении;
	Иначе
		Задание.КоличествоПовторовПриАварийномЗавершении = МетаданныеЗадания.КоличествоПовторовПриАварийномЗавершении;
	КонецЕсли;
	
	Если Параметры.Свойство("Параметры") Тогда
		Задание.Параметры = Параметры.Параметры;
	КонецЕсли;
	
	Если Параметры.Свойство("Расписание") Тогда
		Задание.Расписание = Параметры.Расписание;
	КонецЕсли;
	
	Задание.Записать();
	
	Возврат Задание;
	
КонецФункции

// Изменяет регламентное задание (без учета очереди заданий модели сервиса).
//
// Параметры: 
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                                     непредопределенного регламентного задания.
//                - Строка - имя метаданных предопределенного регламентного задания
//                           или строка уникального идентификатора регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - РегламентноеЗадание - регламентное задание.
//
//  Параметры - Структура - параметры, которые следует установить заданию, возможные свойства:
//   * Использование - Булево - Истина, если регламентное задание должно выполняться автоматически согласно расписанию.
//   * Параметры     - Массив - параметры регламентного задания. Количество и состав параметров должны соответствовать
//                              параметрам метода регламентного задания.
//   * Ключ          - Строка - прикладной идентификатор регламентного задания.
//   * ИнтервалПовтораПриАварийномЗавершении - Число - интервал в секундах, через который нужно перезапускать задание
//                              в случае его аварийного завершения.
//   * Расписание    - РасписаниеРегламентногоЗадания - расписание задания.
//   * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
//   
Процедура ИзменитьРегламентноеЗадание(Знач Идентификатор, Знач Параметры) Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Идентификатор = УточненныйИдентификаторЗадания(Идентификатор);
	ИдентификаторЗадания = УникальныйИдентификаторЗадания(Идентификатор);
	
	//Блокировка = Новый БлокировкаДанных;
	//ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
	//ЭлементБлокировки.УстановитьЗначение("Идентификатор", Строка(ИдентификаторЗадания));
	
	НачатьТранзакцию();
	Попытка
		//Блокировка.Заблокировать();
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если Задание <> Неопределено Тогда
			ЕстьИзменения = Ложь;
			
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"Наименование", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"Использование", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"Ключ", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"ИмяПользователя", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"ИнтервалПовтораПриАварийномЗавершении", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"КоличествоПовторовПриАварийномЗавершении", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"Параметры", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"Расписание", Параметры, ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				Задание.Записать();
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет регламентное задание (без учета очереди заданий модели сервиса).
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                                     непредопределенного регламентного задания.
//                - Строка - имя метаданных предопределенного регламентного задания
//                           или строка уникального идентификатора регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - РегламентноеЗадание - регламентное задание, уникальный идентификатор которого используется 
//                  для определения удаляемого экземпляра регламентного задания.
//
Процедура УдалитьРегламентноеЗадание(Знач Идентификатор) Экспорт
	
	Идентификатор = УточненныйИдентификаторЗадания(Идентификатор);
	
	СписокЗаданий = Новый Массив; // Массив из РегламентноеЗадание.
	
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И Идентификатор.Предопределенное Тогда
		ВызватьИсключение( НСтр("ru = 'Предопределенное регламентное задание удалить невозможно.'") );
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И Не Идентификатор.Предопределенное Тогда
		СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
		Если РегламентноеЗадание <> Неопределено Тогда
			СписокЗаданий.Добавить(РегламентноеЗадание);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого РегламентноеЗадание Из СписокЗаданий Цикл
		ИдентификаторЗадания = УникальныйИдентификаторЗадания(РегламентноеЗадание);
		
		//Блокировка = Новый БлокировкаДанных;
		//ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
		//ЭлементБлокировки.УстановитьЗначение("Идентификатор", Строка(ИдентификаторЗадания));
		//
		НачатьТранзакцию();
		Попытка
			//Блокировка.Заблокировать();
			Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
			Если Задание <> Неопределено Тогда
				Задание.Удалить();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция УточненныйИдентификаторЗадания(Знач Идентификатор)
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ОбъектМетаданных = Метаданные.РегламентныеЗадания.Найти(Идентификатор);
		Если ОбъектМетаданных = Неопределено Тогда
			Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
		Иначе
			Идентификатор = ОбъектМетаданных;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция УникальныйИдентификаторЗадания(Знач Идентификатор, ВРазделенномРежимеИдентификаторЗаданияОчереди = Ложь)
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Возврат Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Возврат Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Если ВРазделенномРежимеИдентификаторЗаданияОчереди
	   И ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
			ПараметрыЗадания = Новый Структура("Метаданные", Идентификатор);
			СписокЗаданий = НайтиЗадания(ПараметрыЗадания);
			Если СписокЗаданий = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Для Каждого Задание Из СписокЗаданий Цикл
				Возврат Задание.Идентификатор.УникальныйИдентификатор();
			КонецЦикла;
		ИначеЕсли ТипЗнч(Идентификатор) = Тип("СтрокаТаблицыЗначений") Тогда
			Возврат Идентификатор.Идентификатор.УникальныйИдентификатор();
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Идентификатор)) Тогда
			Возврат Идентификатор.УникальныйИдентификатор();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И Идентификатор.Предопределенное Тогда
			Возврат РегламентныеЗадания.НайтиПредопределенное(Идентификатор).УникальныйИдентификатор;
		ИначеЕсли ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И НЕ Идентификатор.Предопределенное Тогда
			СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
			Для каждого РегламентноеЗадание Из СписокЗаданий Цикл
				Возврат РегламентноеЗадание.УникальныйИдентификатор;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает РегламентноеЗадание из информационной базы.
//
// В модели сервиса работает с регламентными заданиями платформы, а не с заданиями очереди,
// одинаково как в разделенном, так и в неразделенном режимах.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание из которого нужно получить
//                  уникальный идентификатор для получения свежей копии регламентного задания.
// 
// Возвращаемое значение:
//  РегламентноеЗадание - прочитано из базы данных.
//
Функция ПолучитьРегламентноеЗадание(Знач Идентификатор) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
		РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Идентификатор);
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	КонецЕсли;
	
	Если РегламентноеЗадание = Неопределено Тогда
		ВызватьИсключение( НСтр("ru = 'Регламентное задание не существует.
		                              |Возможно оно удалено другим пользователем.'") );
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

Функция НайтиЗадания(Отбор) Экспорт
	
	КопияОтбора = ОбщегоНазначения.СкопироватьРекурсивно(Отбор); // см. НайтиЗадания.Отбор
	СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(КопияОтбора);
	
	Возврат СписокЗаданий;
			
КонецФункции

// Возвращает многострочную Строку содержащую Сообщения и ОписаниеИнформацииОбОшибке,
// последнее фоновое задание найдено по идентификатору регламентного задания
// и сообщения/ошибки есть.
//
// Параметры:
//  Задание      - РегламентноеЗадание
//               - Строка - УникальныйИдентификатор
//                 РегламентногоЗадания строкой.
//
// Возвращаемое значение:
//  Строка
//
Функция СообщенияИОписанияОшибокРегламентногоЗадания(Знач Задание) Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);

	ИдентификаторРегламентногоЗадания = ?(ТипЗнч(Задание) = Тип("РегламентноеЗадание"), Строка(Задание.УникальныйИдентификатор), Задание);
	СвойстваПоследнегоФоновогоЗадания = СвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(ИдентификаторРегламентногоЗадания);
	Возврат ?(СвойстваПоследнегоФоновогоЗадания = Неопределено,
	          "",
	          СообщенияИОписанияОшибокФоновогоЗадания(СвойстваПоследнегоФоновогоЗадания.Идентификатор));
	
КонецФункции

// Возвращает свойства последнего фонового задания выполненного при выполнении регламентного задания, если оно есть.
// Процедура работает, как в файл-серверном, так и в клиент-серверном режимах.
//
// Параметры:
//  РегламентноеЗадание - РегламентноеЗадание
//                      - Строка - строка уникального идентификатора РегламентногоЗадания.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений:
//     * Идентификатор - Строка
//     * Наименование - Строка
//     * Ключ - Строка
//     * Конец - Дата
//     * ИдентификаторРегламентногоЗадания - Строка
//     * Состояние - СостояниеФоновогоЗадания
//     * ИмяМетода - Строка
//     * Расположение - Строка
//     * ОписаниеИнформацииОбОшибке - Строка
//     * ПопыткаЗапуска - Число
//     * СообщенияПользователю - Массив
//     * НомерСеанса - Число
//     * НачалоСеанса - Дата
//
Функция СвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(РегламентноеЗадание)
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторРегламентногоЗадания = ?(ТипЗнч(РегламентноеЗадание) = Тип("РегламентноеЗадание"), Строка(РегламентноеЗадание.УникальныйИдентификатор), РегламентноеЗадание);
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторРегламентногоЗадания", ИдентификаторРегламентногоЗадания);
	Отбор.Вставить("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания");
	ТаблицаСвойствФоновыхЗаданий = СвойстваФоновыхЗаданий(Отбор);
	ТаблицаСвойствФоновыхЗаданий.Сортировать("Конец Возр");
	
	Если ТаблицаСвойствФоновыхЗаданий.Количество() = 0 Тогда
		СвойстваФоновогоЗадания = Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТаблицаСвойствФоновыхЗаданий[0].Конец) Тогда
		СвойстваФоновогоЗадания = ТаблицаСвойствФоновыхЗаданий[0];
	Иначе
		СвойстваФоновогоЗадания = ТаблицаСвойствФоновыхЗаданий[ТаблицаСвойствФоновыхЗаданий.Количество()-1];
	КонецЕсли;
	
	Возврат СвойстваФоновогоЗадания;
	
КонецФункции

// Возвращает таблицу свойств фоновых заданий.
//  Структуру таблицы смотри в функции ПустаяТаблицаСвойствФоновыхЗаданий().
// 
// Параметры:
//  Отбор        - Структура - допустимые поля:
//                 Идентификатор, Ключ, Состояние, Начало, Конец,
//                 Наименование, ИмяМетода, РегламентноеЗадание. 
//
// Возвращаемое значение:
//   см. НовыеСвойстваФоновыхЗаданий
//
Функция СвойстваФоновыхЗаданий(Отбор = Неопределено) Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = НовыеСвойстваФоновыхЗаданий();
	
	Если ЗначениеЗаполнено(Отбор) И Отбор.Свойство("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания") Тогда
		Отбор.Удалить("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания");
		ПолучитьПоследнее = Истина;
	Иначе
		ПолучитьПоследнее = Ложь;
	КонецЕсли;
	
	РегламентноеЗадание = Неопределено;
	
	// Добавление истории фоновых заданий, полученных с сервера.
	Если ЗначениеЗаполнено(Отбор) И Отбор.Свойство("ИдентификаторРегламентногоЗадания") Тогда
		Если Отбор.ИдентификаторРегламентногоЗадания <> "" Тогда
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(
				Новый УникальныйИдентификатор(Отбор.ИдентификаторРегламентногоЗадания));
			ТекущийОтбор = Новый Структура("Ключ", Отбор.ИдентификаторРегламентногоЗадания);
			ФоновыеЗаданияЗапущенныеВручную = ФоновыеЗадания.ПолучитьФоновыеЗадания(ТекущийОтбор);
			Если РегламентноеЗадание <> Неопределено Тогда
				ПоследнееФоновоеЗадание = РегламентноеЗадание.ПоследнееЗадание;
			КонецЕсли;
			Если НЕ ПолучитьПоследнее ИЛИ ПоследнееФоновоеЗадание = Неопределено Тогда
				ТекущийОтбор = Новый Структура("РегламентноеЗадание", РегламентноеЗадание);
				АвтоматическиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ТекущийОтбор);
			КонецЕсли;
			Если ПолучитьПоследнее Тогда
				Если ПоследнееФоновоеЗадание = Неопределено Тогда
					ПоследнееФоновоеЗадание = ПоследнееФоновоеЗаданиеВМассиве(АвтоматическиеФоновыеЗадания);
				КонецЕсли;
				
				ПоследнееФоновоеЗадание = ПоследнееФоновоеЗаданиеВМассиве(
					ФоновыеЗаданияЗапущенныеВручную, ПоследнееФоновоеЗадание);
				
				Если ПоследнееФоновоеЗадание <> Неопределено Тогда
					МассивФоновыхЗаданий = Новый Массив;
					МассивФоновыхЗаданий.Добавить(ПоследнееФоновоеЗадание);
					ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
				КонецЕсли;
				Возврат Таблица;
			КонецЕсли;
			ДобавитьСвойстваФоновыхЗаданий(ФоновыеЗаданияЗапущенныеВручную, Таблица);
			ДобавитьСвойстваФоновыхЗаданий(АвтоматическиеФоновыеЗадания, Таблица);
		Иначе
			МассивФоновыхЗаданий = Новый Массив;
			ВсеИдентификаторыРегламентныхЗаданий = Новый Соответствие;
			Для каждого ТекущееЗадание Из РегламентныеЗадания.ПолучитьРегламентныеЗадания() Цикл
				ВсеИдентификаторыРегламентныхЗаданий.Вставить(
					Строка(ТекущееЗадание.УникальныйИдентификатор), Истина);
			КонецЦикла;
			ВсеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания();
			Для каждого ТекущееЗадание Из ВсеФоновыеЗадания Цикл
				Если ТекущееЗадание.РегламентноеЗадание = Неопределено
				   И ВсеИдентификаторыРегламентныхЗаданий[ТекущееЗадание.Ключ] = Неопределено Тогда
				
					МассивФоновыхЗаданий.Добавить(ТекущееЗадание);
				КонецЕсли;
			КонецЦикла;
			ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Отбор) Тогда
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания();
		Иначе
			Если Отбор.Свойство("Идентификатор") Тогда
				Отбор.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор(Отбор.Идентификатор));
				Отбор.Удалить("Идентификатор");
			КонецЕсли;
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			Если Отбор.Свойство("УникальныйИдентификатор") Тогда
				Отбор.Вставить("Идентификатор", Строка(Отбор.УникальныйИдентификатор));
				Отбор.Удалить("УникальныйИдентификатор");
			КонецЕсли;
		КонецЕсли;
		ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор) И Отбор.Свойство("ИдентификаторРегламентногоЗадания") Тогда
		РегламентныеЗаданияДляОбработки = Новый Массив;
		Если Отбор.ИдентификаторРегламентногоЗадания <> "" Тогда
			Если РегламентноеЗадание = Неопределено Тогда
				РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(
					Новый УникальныйИдентификатор(Отбор.ИдентификаторРегламентногоЗадания));
			КонецЕсли;
			Если РегламентноеЗадание <> Неопределено Тогда
				РегламентныеЗаданияДляОбработки.Добавить(РегламентноеЗадание);
			КонецЕсли;
		КонецЕсли;
	Иначе
		РегламентныеЗаданияДляОбработки = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	КонецЕсли;
	
	Таблица.Сортировать("Начало Убыв, Конец Убыв");
	
	// Отбор фоновых заданий.
	Если ЗначениеЗаполнено(Отбор) Тогда
		Начало    = Неопределено;
		Конец     = Неопределено;
		Состояние = Неопределено;
		Если Отбор.Свойство("Начало") Тогда
			Начало = ?(ЗначениеЗаполнено(Отбор.Начало), Отбор.Начало, Неопределено);
			Отбор.Удалить("Начало");
		КонецЕсли;
		Если Отбор.Свойство("Конец") Тогда
			Конец = ?(ЗначениеЗаполнено(Отбор.Конец), Отбор.Конец, Неопределено);
			Отбор.Удалить("Конец");
		КонецЕсли;
		Если Отбор.Свойство("Состояние") Тогда
			Если ТипЗнч(Отбор.Состояние) = Тип("Массив") Тогда
				Состояние = Отбор.Состояние;
				Отбор.Удалить("Состояние");
			КонецЕсли;
		КонецЕсли;
		
		Если Отбор.Количество() <> 0 Тогда
			Строки = Таблица.НайтиСтроки(Отбор);
		Иначе
			Строки = Таблица;
		КонецЕсли;
		// Выполнение дополнительного отбора по периоду и состоянию (если отбор определен).
		НомерЭлемента = Строки.Количество() - 1;
		Пока НомерЭлемента >= 0 Цикл
			Если Начало    <> Неопределено И Начало > Строки[НомерЭлемента].Начало
				Или Конец     <> Неопределено И Конец  < ?(ЗначениеЗаполнено(Строки[НомерЭлемента].Конец), Строки[НомерЭлемента].Конец, ТекущаяДатаСеанса())
				Или Состояние <> Неопределено И Состояние.Найти(Строки[НомерЭлемента].Состояние) = Неопределено Тогда
				Строки.Удалить(НомерЭлемента);
			КонецЕсли;
			НомерЭлемента = НомерЭлемента - 1;
		КонецЦикла;
		// Удаление лишних строк из таблицы.
		Если ТипЗнч(Строки) = Тип("Массив") Тогда
			НомерСтроки = Таблица.Количество() - 1;
			Пока НомерСтроки >= 0 Цикл
				Если Строки.Найти(Таблица[НомерСтроки]) = Неопределено Тогда
					Таблица.Удалить(Таблица[НомерСтроки]);
				КонецЕсли;
				НомерСтроки = НомерСтроки - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает многострочную Строку содержащую Сообщения и ОписаниеИнформацииОбОшибке,
// если фоновое задание найдено по идентификатору и сообщения/ошибки есть.
//
// Параметры:
//  Задание      - Строка - УникальныйИдентификатор ФоновогоЗадания строкой.
//
// Возвращаемое значение:
//  Строка
//
Функция СообщенияИОписанияОшибокФоновогоЗадания(Идентификатор, СвойстваФоновогоЗадания = Неопределено) Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Если СвойстваФоновогоЗадания = Неопределено Тогда
		СвойстваФоновогоЗадания = ПолучитьСвойстваФоновогоЗадания(Идентификатор);
	КонецЕсли;
	
	Строка = "";
	Если СвойстваФоновогоЗадания <> Неопределено Тогда
		Для каждого Сообщение Из СвойстваФоновогоЗадания.СообщенияПользователю Цикл
			Строка = Строка + ?(Строка = "",
			                    "",
			                    "
			                    |
			                    |") + Сообщение.Текст;
		КонецЦикла;
		Если ЗначениеЗаполнено(СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке) Тогда
			Строка = Строка + ?(Строка = "",
			                    СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке,
			                    "
			                    |
			                    |" + СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

// Возвращает свойства ФоновогоЗадания по строке уникального идентификатора.
//
// Параметры:
//  Идентификатор - Строка - уникального идентификатора ФоновогоЗадания.
//  ИменаСвойств  - Строка - если заполнено, возвращается структура с указанными свойствами.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Структура - свойства ФоновогоЗадания.
//
Функция ПолучитьСвойстваФоновогоЗадания(Идентификатор, ИменаСвойств = "") Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Идентификатор", Идентификатор);
	ТаблицаСвойствФоновыхЗаданий = СвойстваФоновыхЗаданий(Отбор);
	
	Если ТаблицаСвойствФоновыхЗаданий.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(ИменаСвойств) Тогда
			Результат = Новый Структура(ИменаСвойств);
			ЗаполнитьЗначенияСвойств(Результат, ТаблицаСвойствФоновыхЗаданий[0]);
		Иначе
			Результат = ТаблицаСвойствФоновыхЗаданий[0];
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает новую таблицу свойств фоновых заданий.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//     * Идентификатор - Строка
//     * Наименование - Строка
//     * Ключ - Строка
//     * Конец - Дата
//     * ИдентификаторРегламентногоЗадания - Строка
//     * Состояние - СостояниеФоновогоЗадания
//     * ИмяМетода - Строка
//     * Расположение - Строка
//     * ОписаниеИнформацииОбОшибке - Строка
//     * ПопыткаЗапуска - Число
//     * СообщенияПользователю - Массив
//     * НомерСеанса - Число
//     * НачалоСеанса - Дата
//
Функция НовыеСвойстваФоновыхЗаданий()
	
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("Идентификатор",                     Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Наименование",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Ключ",                              Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Начало",                            Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("Конец",                             Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("ИдентификаторРегламентногоЗадания", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Состояние",                         Новый ОписаниеТипов("СостояниеФоновогоЗадания"));
	НоваяТаблица.Колонки.Добавить("ИмяМетода",                         Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Расположение",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ОписаниеИнформацииОбОшибке",        Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ПопыткаЗапуска",                    Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("СообщенияПользователю",             Новый ОписаниеТипов("Массив"));
	НоваяТаблица.Колонки.Добавить("НомерСеанса",                       Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("НачалоСеанса",                      Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Индексы.Добавить("Идентификатор, Начало");
	
	Возврат НоваяТаблица;
	
КонецФункции

// Параметры:
//   МассивФоновыхЗаданий - Массив из ФоновоеЗадание
//   ПоследнееФоновоеЗадание - ФоновоеЗадание
//                           - Неопределено
// Возвращаемое значение:
//   ФоновоеЗадание, Неопределено
//
Функция ПоследнееФоновоеЗаданиеВМассиве(МассивФоновыхЗаданий, ПоследнееФоновоеЗадание = Неопределено)
	
	Для каждого ТекущееФоновоеЗадание Из МассивФоновыхЗаданий Цикл
		Если ПоследнееФоновоеЗадание = Неопределено Тогда
			ПоследнееФоновоеЗадание = ТекущееФоновоеЗадание;
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПоследнееФоновоеЗадание.Конец) Тогда
			Если НЕ ЗначениеЗаполнено(ТекущееФоновоеЗадание.Конец)
			 ИЛИ ПоследнееФоновоеЗадание.Конец < ТекущееФоновоеЗадание.Конец Тогда
				ПоследнееФоновоеЗадание = ТекущееФоновоеЗадание;
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ТекущееФоновоеЗадание.Конец)
			   И ПоследнееФоновоеЗадание.Начало < ТекущееФоновоеЗадание.Начало Тогда
				ПоследнееФоновоеЗадание = ТекущееФоновоеЗадание;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоследнееФоновоеЗадание;
	
КонецФункции
  
Процедура ДобавитьСвойстваФоновыхЗаданий(Знач МассивФоновыхЗаданий, Знач ТаблицаСвойствФоновыхЗаданий)
	
	Индекс = МассивФоновыхЗаданий.Количество() - 1;
	Пока Индекс >= 0 Цикл
		ФоновоеЗадание = МассивФоновыхЗаданий[Индекс]; // ФоновоеЗадание
		Строка = ТаблицаСвойствФоновыхЗаданий.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ФоновоеЗадание);
		Строка.Идентификатор = ФоновоеЗадание.УникальныйИдентификатор;
		РегламентноеЗадание = ФоновоеЗадание.РегламентноеЗадание;
		
		Если РегламентноеЗадание = Неопределено
		   И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ФоновоеЗадание.Ключ) Тогда
			
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ФоновоеЗадание.Ключ));
		КонецЕсли;
		Строка.ИдентификаторРегламентногоЗадания = ?(
			РегламентноеЗадание = Неопределено,
			"",
			РегламентноеЗадание.УникальныйИдентификатор);
		
		Строка.ОписаниеИнформацииОбОшибке = ?(
			ФоновоеЗадание.ИнформацияОбОшибке = Неопределено,
			"",
			ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке));
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает представление регламентного задания,
// это по порядку исключения незаполненных реквизитов:
// Наименование, Метаданные.Синоним, Метаданные.Имя.
//
// Параметры:
//  Задание      - РегламентноеЗадание
//               - Строка - если строка, тогда УникальныйИдентификатор строкой.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеРегламентногоЗадания(Знач Задание) Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Задание) = Тип("РегламентноеЗадание") Тогда
		РегламентноеЗадание = Задание;
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Задание));
	КонецЕсли;
	
	Если РегламентноеЗадание <> Неопределено Тогда
		Если РегламентноеЗадание.Предопределенное Тогда
			Представление = РегламентноеЗадание.Метаданные.Синоним;
		Иначе
			Представление = РегламентноеЗадание.Наименование;
			
			Если ПустаяСтрока(РегламентноеЗадание.Наименование) Тогда
				Представление = РегламентноеЗадание.Метаданные.Синоним;
			КонецЕсли;
		КонецЕсли;
		Если ПустаяСтрока(Представление) Тогда
			Представление = РегламентноеЗадание.Метаданные.Имя;
		КонецЕсли
	Иначе
		Представление = ТекстНеОпределено();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает текст "<не определено>".
Функция ТекстНеОпределено() Экспорт
	
	Возврат НСтр("ru = '<не определено>'");
	
КонецФункции

// Для процедуры ИзменитьЗадание.
Процедура ОбновитьЗначениеСвойстваЗадания(Задание, ИмяСвойства, ПараметрыЗадания, ЕстьИзменения)
	
	Если Не ПараметрыЗадания.Свойство(ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	Если Задание[ИмяСвойства] = ПараметрыЗадания[ИмяСвойства]
	 Или ТипЗнч(Задание[ИмяСвойства]) = Тип("РасписаниеРегламентногоЗадания")
	   И ТипЗнч(ПараметрыЗадания[ИмяСвойства]) = Тип("РасписаниеРегламентногоЗадания")
	   И Строка(Задание[ИмяСвойства]) = Строка(ПараметрыЗадания[ИмяСвойства]) Тогда
		
		Возврат;
	КонецЕсли;
	
	Задание[ИмяСвойства] = ПараметрыЗадания[ИмяСвойства];
	ЕстьИзменения = Истина;
	
КонецПроцедуры

#КонецОбласти