Процедура СообщитьИнфо(ТекстСообщения, Ссылка = Неопределено)  Экспорт
	Отказ=Неопределено;
	Текст2 = "ru = '"+ТекстСообщения+"'";
	кб99_ВСД.СообщитьПользователю(ТекстСообщения, Ссылка,,,Отказ);
КонецПроцедуры

Процедура ПометитьНаУдалениеСправочник(ИмяСправочника) 
	СообщитьИнфо("Очистка справочника "+ИмяСправочника+" ..");
	НачатьТранзакцию();		
	Попытка
		Запрос = Новый Запрос("Выбрать Ссылка ИЗ Справочник."+ИмяСправочника);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение("Ошибка при установке пометки на удаление справочника "+ИмяСправочника+" "+ОписаниеОшибки());
	КонецПопытки;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция СтатусЗапроса( xdto, ДокСсылка=Неопределено, Параметры=Неопределено ) Экспорт
	Статус = "";
	Попытка
		application = xdto.Body.Последовательность().ПолучитьЗначение(0).application;
		applicationID = application.applicationID;
		Статус = application.Status;
		
		Если ЗначениеЗаполнено( ДокСсылка ) Тогда
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
			ДокОбъект.applicationID = applicationID;
			ДокОбъект.Статус 		= Статус;						
			
			Если ЗначениеЗаполнено( Параметры ) И Параметры["ОтладкаЗапросовXML"] Тогда 
				стр = Докобъект.Запросы.Добавить();
				стр.Дата = Текущаядата();
				стр.Файл = Параметры["XML_Запрос"];
				стр.Пользователь = ПараметрыСеанса.ТекущийПользователь;
				
				стр = Докобъект.Запросы.Добавить();
				стр.Дата = Текущаядата();
				стр.Файл = Параметры["XML_Ответ"];
				стр.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
			
			ДокОбъект.Записать();			
			СообщитьИнфо(""+ДокСсылка+" статус = "+ Статус, ДокСсылка);
		Иначе 
			СообщитьИнфо("Ответ = "+ Статус + " applicationID = " + applicationID );
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Статус;
КонецФункции

// https://htmlweb.ru/html/symbols.php
Функция ЗаменитьСпецСимволы(Стр) Экспорт
    Рез = СокрЛП(Стр);
	Рез = СтрЗаменить(Рез,"&" ,"&amp;" );
	Рез = СтрЗаменить(Рез,"""","&quot;");
	Рез = СтрЗаменить(Рез,"<" ,"&lt;"  );
	Рез = СтрЗаменить(Рез,">" ,"&gt;"  );
	Рез = СтрЗаменить(Рез,"'" ,"&#039;");
	Рез = СтрЗаменить(Рез,"№" ,"&#8470;");
	Возврат Рез;
КонецФункции

Функция НайтиОшибки( xdto, ДокСсылка=Неопределено ) Экспорт 
	
	Ответ = Ложь;	
	
	Если xdto = Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ВсеОшибки="";
	Попытка
		response = xdto.Body.Последовательность().ПолучитьЗначение(0);
		// КолвоОшибок = Число(response.application.errors.count);
		
		Если ТипЗнч(response.application.errors.error)=Тип("СписокXDTO") Тогда 		
			errorsList = response.application.errors.error;
			КолвоОшибок = response.application.errors.error.Количество();
		Иначе
			КолвоОшибок = 1;
			errorsList = Новый Массив;
			errorsList.Добавить(response.application.errors.error);
		КонецЕсли;
		
		СообщитьИнфо("Ошибок = "+КолвоОшибок);
		Для каждого errorItem ИЗ errorsList Цикл		
				
			ТекстОшибки = errorItem.Последовательность().ПолучитьТекст(0);
			кодОшибки = errorItem.code;
			Попытка 
				НомерСтроки = " в строке "+errorItem.qualifier;
			Исключение
				НомерСтроки = "";
			КонецПопытки;
			
			Ответ = Истина;
			СтрОшибки = "ОШИБКА " + КодОшибки + НомерСтроки + " : " + ТекстОшибки;			
			СообщитьИнфо(СтрОшибки);
			ВсеОшибки = ВсеОшибки + СтрОшибки;
		КонецЦикла;
		
		Попытка
			Если ЗначениеЗаполнено(ДокСсылка) Тогда
				ДокОбъект = ДокСсылка.ПолучитьОбъект();
				ДокОбъект.Комментарий = ВсеОшибки;
				ДокОбъект.Записать();
			КонецЕсли;	
		Исключение
		КонецПопытки;
	Исключение
		Ответ = Ложь;
	КонецПопытки;
		
	Возврат Ответ;

КонецФункции

Функция ПолучитьИНН(ВыбКлиент) 
	Попытка		
		ИННКПП = ВыбКлиент.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;
	Возврат СокрЛП(ИННКПП);
КонецФункции

Процедура Пауза(ЗадержкаСекунд) Экспорт 	
	Если НЕ ЗначениеЗаполнено(ЗадержкаСекунд) Тогда 
		ЗадержкаСекунд = 5;
	КонецЕсли;
	СообщитьИнфо("Пауза "+ЗадержкаСекунд+" сек");
	// СтрокаЗапроса = "ping -n 1 -w "+Формат(1000 * ЗадержкаСекунд, "ЧДЦ=0; ЧГ=") + " 127.255.255.255"; 
	СтрокаЗапроса = "Timeout /T " + Формат(ЗадержкаСекунд, "ЧГ=0") + " /NoBreak";
	WshShell = Новый COMОбъект("WScript.Shell"); 
	WshShell.Run(СтрокаЗапроса, 0, -1); 
КонецПроцедуры 

Функция Нашебулево(знЧисло) 
	//  Формат( знЧисло=0, "БЛ=false; БИ=true")
	Если знЧисло=0 Тогда
		Возврат "false";
	Иначе
		Возврат "true";
	КонецЕсли;
КонецФункции

Функция ПолучитьИдентификаторПеречисления(ЗначПеречисления) Экспорт
	// присвоим переменной значение перечисления
	// например перечисления.ставкиНДС.НДС18 
	// ИЛИ например Док.СтавкаНДС 
	// НужноеЗначение = Какое_то_Значение_Перечисления; 

	// теперь получаем как названо перечисление в конфигураторе
	ИмяПеречисления = ЗначПеречисления.Метаданные().Имя;

	// теперь получим индекс где хранится то что нам надо
	НужныйИндекс = Перечисления[ИмяПеречисления].Индекс(ЗначПеречисления);

	// И вот счастье. то что нам надо - идентификатор!!! всего-то четыре строчки кода
	// вместо Какое_то_Значение_Перечисления.Идентификатор() в 7.7
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[НужныйИндекс].Имя;
	
КонецФункции

Функция ПолучитьПорядковыйНомерПеречисления(ЗначПеречисления) Экспорт
	Возврат (Перечисления[ЗначПеречисления.Метаданные().Имя].Индекс(ЗначПеречисления) + 1 );
КонецФункции

#Область Функции_Дата
	
Функция ДатаXML(ВыбДата, Время="") Экспорт 
	стрДата = формат(ВыбДата, "ДФ=""гггг-ММ-дд""")+Время;
	Возврат стрДата;
КонецФункции

Функция ДатаВремяXML(ВыбДата) Экспорт
	стрДата = формат(ВыбДата, "ДФ=""гггг-ММ-дд""")+"T"+Формат(ВыбДата,"ДФ=ЧЧ:мм:сс");
	Возврат стрДата;
КонецФункции

Функция ДатаГод(ВыбДата)
	Возврат формат(выбДата, "ДФ=""гггг""");
КонецФункции

Функция ДатаМесяц(ВыбДата)
	Возврат формат(выбДата, "ДФ=""ММ""");
КонецФункции

Функция ДатаЧисло(ВыбДата)
	Возврат формат(выбДата, "ДФ=""дд""");
КонецФункции

Функция СтрокаВДату(ДатаСтрока) Экспорт
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	Возврат Дата(год, мес,день);	
КонецФункции

Функция СтрокаВДатаВремя(ДатаВремяСтрока)
	год = Лев(ДатаВремяСтрока,4 );
	мес = Сред(ДатаВремяСтрока,6,2);
	день = Сред(ДатаВремяСтрока,9,2);
	час = Число(Сред(ДатаВремяСтрока,12,2));
	мин = Сред(ДатаВремяСтрока,15,2);	
	сек = Сред(ДатаВремяСтрока,18,2);
	смещение = Число(Сред(ДатаВремяСтрока,21,2));
	Попытка результат = Дата(год, мес,день, (час+Смещение), мин, сек);	
	Исключение результат = Дата(год, мес,день);	
	КонецПопытки;
	Возврат Результат;

КонецФункции

Процедура Дата_из_XML(dateXML, Дата1, Дата2, ДатаСтрока )  
	Попытка			
		год = ""+dateXML.firstDate.year;		
		мес = ""+dateXML.firstDate.month;
		Дата1_2 = Неопределено;
		Попытка 
			день = ""+dateXML.firstDate.day; 
			Дата1 = Дата(год, мес, день);
		Исключение 
			// полный месяц = с 1 числа по 29/30/31
			Дата1 = Дата(год, мес, 1);
			Дата2 = КонецМесяца( Дата1 );
		КонецПопытки;
	Исключение
		Попытка
			ДатаСтрока = ""+dateXML.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	Попытка
		год = ""+dateXML.secondDate.year;
		мес = ""+dateXML.secondDate.month;
		Попытка 
			день = ""+dateXML.secondDate.day; 
			Дата2 = Дата(год, мес, день);
		Исключение 
			// Окончание полного месяца = КонецМесяца
			Дата2 = Дата(год, мес, 1);
			Дата2 = КонецМесяца(Дата2);
		КонецПопытки;
	Исключение			
	КонецПопытки;
КонецПроцедуры

Функция Преобразовать_СтрокаДата_в_XML(ДатаСтр) Экспорт
	// например 2018.11.01-03:00
	день1= Сред(ДатаСтр,9,2);
	мес1 = Сред(ДатаСтр,6,2);
	час1 = Сред(ДатаСтр,12,2);
	год1 = Лев(ДатаСтр,4);

	ОписаниеТипа = Новый ОписаниеТипов("Число");
	
	ТекстЗапроса="";
	Если ЗначениеЗаполнено( год1 ) Тогда
		ТекстЗапроса = " <dt:year>"+ Формат(ОписаниеТипа.ПривестиЗначение(год1),"ЧГ=") +"</dt:year>";
	КонецЕсли;
	Если ЗначениеЗаполнено( мес1 ) Тогда
		ТекстЗапроса = ТекстЗапроса + " <dt:month>"+ Формат(ОписаниеТипа.ПривестиЗначение(мес1),"ЧГ=") +"</dt:month> ";
	КонецЕсли;
	Если ЗначениеЗаполнено( день1 ) Тогда
		ТекстЗапроса = ТекстЗапроса + " <dt:day>"+ Формат(ОписаниеТипа.ПривестиЗначение(день1),"ЧГ=") +"</dt:day>";
	КонецЕсли;
	Если ЗначениеЗаполнено( час1 ) Тогда
		ТекстЗапроса = ТекстЗапроса + " <dt:hour>"+ ОписаниеТипа.ПривестиЗначение(час1) +"</dt:hour> ";
	КонецЕсли;

	Возврат ТекстЗапроса;
КонецФункции

Функция Преобразовать_ДатаXML_в_Строку( dateXML )
	Попытка
		год = dateXML.year;
	Исключение
		год ="    ";
	КонецПопытки;
	Попытка
		мес = Число( dateXML.month );
		мес = Формат( мес, "ЧЦ=2; ЧДЦ=0; ЧВН=" );
	Исключение
		мес = "  ";
	КонецПопытки;

	Попытка
		день = Число(dateXML.day);
		день = Формат( день, "ЧЦ=2; ЧДЦ=0; ЧН='00'; ЧВН=; ЧГ=" );
	Исключение
		день = "  ";
	КонецПопытки;

	Попытка
		час = Число(dateXML.hour);
		час = "-"+Формат( час, "ЧЦ=2; ЧДЦ=0; ЧН='00'; ЧВН=; ЧГ=" )+":00";
	Исключение
		час="  ";
	КонецПопытки;

	// формат "2018-10-01T14:00" = стандартное время
	Дата1 = ""+ год +"-"+ мес + "-" + день + час;
	Возврат Дата1;
КонецФункции

Функция ПустаяДата( ВыбСтрокаДата ) Экспорт 
	год1 = Лев(ВыбСтрокаДата,4);
	Возврат НЕ(ЗначениеЗаполнено( год1 ));
КонецФункции

Функция Изготовление_СрокГодности_Строка_в_XML(док, префикс="vd") Экспорт
    ТекстЗапроса = "";

	Попытка
		ДатаИзготовленияСтр	= док.ДатаИзготовления;
	Исключение
		ДатаИзготовленияСтр ="";
	КонецПопытки;

	Если НЕ( ПустаяДата( док.ДатаИзготовления1Строка ) ) ИЛИ ЗначениеЗаполнено(ДатаИзготовленияСтр) Тогда
		ТекстЗапроса = ТекстЗапроса + " <"+ префикс +":dateOfProduction>";
		Если НЕ( ПустаяДата(док.ДатаИзготовления1Строка) ) Тогда
			ТекстЗапроса = ТекстЗапроса + "<"+ префикс +":firstDate> ";
			ТекстЗапроса = ТекстЗапроса + Преобразовать_СтрокаДата_в_XML(док.ДатаИзготовления1Строка);
			ТекстЗапроса = ТекстЗапроса + " </"+ префикс +":firstDate>";
		КонецЕсли;
		Если НЕ ПустаяДата(док.ДатаИзготовления2Строка) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+ префикс +":secondDate>
			|" + Преобразовать_СтрокаДата_в_XML(док.ДатаИзготовления2Строка) + "
			|              </"+ префикс +":secondDate>";
		КонецЕсли;

		Если ЗначениеЗаполнено(ДатаИзготовленияСтр) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+ префикс +":informalDate>"+ СокрЛП(ДатаИзготовленияСтр) +"</"+префикс+":informalDate>";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " </"+ префикс +":dateOfProduction>";
	КонецЕсли;

	Попытка
		ДатаСрокГодностиСтр	= док.ДатаСрокГодности;
	Исключение
		ДатаСрокГодностиСтр = "";
	КонецПопытки;

	Если НЕ( ПустаяДата(док.ДатаСрокГодности1Строка) ) ИЛИ ЗначениеЗаполнено(ДатаСрокГодностиСтр)  Тогда
		ТекстЗапроса = ТекстЗапроса + " <"+префикс+":expiryDate>";
		Если Не( ПустаяДата(док.ДатаСрокГодности1Строка) ) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+префикс+":firstDate>
			|" + Преобразовать_СтрокаДата_в_XML(док.ДатаСрокГодности1Строка) + "
			|              </"+префикс+":firstDate>";
		КонецЕсли;
		Если НЕ( ПустаяДата(док.ДатаСрокГодности2Строка) ) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+префикс+":secondDate>
			|" + Преобразовать_СтрокаДата_в_XML(док.ДатаСрокГодности2Строка) + "
			|              </"+префикс+":secondDate>";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаСрокГодностиСтр) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+префикс+":informalDate>"+ СокрЛП(ДатаСрокГодностиСтр) +"</"+префикс+":informalDate>";
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + " </"+префикс+":expiryDate>";
	КонецЕсли;

	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#Область ИнициализацияХС_ЗагрузитьВсеСправочники
Функция ИнициализацияХС_ЗагрузитьВсеСправочники( Параметры, АдресХранилища ) Экспорт
		
	Отправитель_ХозСубъект = ХозСубъект_ЗагрузитьПоGUID( Параметры, Параметры["param_issuer_id"] );
	Если НЕ ЗначениеЗаполнено(Отправитель_ХозСубъект) Тогда
		СообщитьИнфо("Не удалось получить ХС по указанному Issuer_id - проверьте корректность введенных данных");
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросXML = ХозСубъект_ЗагрузитьПоGUID_Запрос( Параметры["param_issuer_id"] );
	Service = "platform/services/2.0/EnterpriseService";
	Action = "GetBusinessEntityByGUID";	
	
	СообщитьИнфо(" Запрос GetBusinessEntityByGUID [ "+ Параметры["param_issuer_id"] +" ]");
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;

	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Попытка
		businessEntity = xdto.Body.getBusinessEntityByGuidResponse.businessEntity; 
		
		_guid = businessEntity.guid;
		_uuid = businessEntity.uuid;
		active = businessEntity.active;
		Если НЕ(businessEntity.Свойства().Получить("name") = Неопределено) Тогда
			name = businessEntity.name;	
		ИначеЕсли НЕ(businessEntity.Свойства().Получить("fio") = Неопределено) Тогда
			name = businessEntity.fio;
		Иначе
			name = "";
			СообщитьИнфо("Имя ХС отсутствует в ответе");
		КонецЕсли;
		
		country = businessEntity.juridicalAddress.country.guid;
		countryName = businessEntity.juridicalAddress.country.name;
		
		Параметры["Страна"]	= НайтиСтрануПоGUID(country, countryName);
		ИнициализацияХС_ЗагрузитьРегионы( Параметры, Параметры["Страна"] );
		
		region = businessEntity.juridicalAddress.region.guid;
		regionName = businessEntity.juridicalAddress.region.name;		
		
		Параметры["Регион"]	= НайтиРегионПоGUID(region, regionName);			

		Попытка 
			locality = businessEntity.juridicalAddress.locality.guid;
			localityName = businessEntity.juridicalAddress.locality.name;
			Параметры["Город"] = НайтиГородПоGUID(locality, localityName);
		Исключение
			СообщитьИнфо("Город не указан в juridicalAddress. Загрузите города вручную");
		КонецПопытки;
			
		Если Параметры["param_issuer_id"] <> _guid Тогда 
			СообщитьИнфо("Ошибка в param_issuer_id, должно быть "+_guid);
		КонецЕсли;
	
		ИнициализацияХС_ЗагрузитьЦели( Параметры );
		ИнициализацияХС_ЗагрузитьЕдиницыИзмерения( Параметры );
		ЗаполнитьФормыУпаковки( Параметры, АдресХранилища );
		ИнициализацияХС_ЗагрузитьПродукцию_Все( Параметры, АдресХранилища );
		
		Площадка_ЗагрузитьПоХозСубъекту( Параметры, Отправитель_ХозСубъект );
		
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
		РезультатОбработки.Вставить("Параметры", Параметры);
	    СообщитьИнфо("Инициализация завершена. Выберите основную Площадку.");
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при Инициализации'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	
		СообщитьИнфо("Ошибка при Инициализации "+ОписаниеОшибки());
	КонецПопытки;
			
	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
	
КонецФункции
#КонецОбласти

#Область Продукция
Функция ЗагрузитьПродукцию_ЗапросXML(тип)
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/argus/production/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getProductByTypeListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <prod:productType>"+ тип +"</prod:productType>
	|    </ws:getProductByTypeListRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Процедура ИнициализацияХС_ЗагрузитьПродукцию_Все( Знач Параметры, АдресХранилища ) Экспорт
	
	ПометитьНаУдалениеСправочник("ВСД_ВидПродукции");
	ПометитьНаУдалениеСправочник("ВСД_Продукция");	
	
	Для А=1 По 8 Цикл
		Ответ = ИнициализацияХС_ЗагрузитьПродукцию( Параметры, А );
	КонецЦикла;
	
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	

КонецПроцедуры

Процедура ИнициализацияХС_ЗагрузитьПродукцию_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	Если ЗначениеЗаполнено(Параметры["Тип"]) Тогда 
		ТипПродукции = Параметры["Тип"];
	Иначе
		СообщитьИнфо("Значение ТИП не заполнено");
		ТипПродукции = 1;
	КонецЕсли;
	
	
	Ответ = ИнициализацияХС_ЗагрузитьПродукцию( Параметры, ТипПродукции );
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 

Функция ИнициализацияХС_ЗагрузитьПродукцию( Параметры, ТипПродукции )
	// http://help.vetrf.ru/wiki/ProductType
		
	СообщитьИнфо(" Запрос GetProductList "+ТипПродукции);		
	ЗапросXML = ЗагрузитьПродукцию_ЗапросXML(ТипПродукции);
    Service = "platform/services/ProductService";
    Action = "GetProductByTypeList";

	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Ответ = Ложь;
	НачатьТранзакцию();	
	Попытка
		productList = xdto.Body.getProductByTypeListResponse.productList.product;
		Для каждого product ИЗ productList Цикл		
				
			_guid = product.guid;
			_uuid = product.uuid;
			name = product.name;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция КАК ВСД_Продукция
		                      |ГДЕ
		                      |	ВСД_Продукция.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", _guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
				Спр.УстановитьПометкуУдаления(Ложь);
			Иначе
				СообщитьИнфо("ВСД_Продукция ["+name+"] GUID ["+_guid+"] добавлена");
				Спр = Справочники.ВСД_Продукция.СоздатьЭлемент();
			КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = _guid;
			Спр.UUID = _UUID;
			Попытка 
				Спр.КодТНВЭД =  ?(ТипЗнч(product.code) = Тип("Строка"), product.code, ""); 
			Исключение
				Спр.КодТНВЭД = "";
			КонецПопытки;
			
			Спр.Тип = product.ProductType;				
			Спр.Записать();
			Ответ = Спр.Ссылка;

			ИнициализацияХС_ЗагрузитьВидыПродукции( Параметры, _guid, Спр.Ссылка );
			
			Ответ = Истина;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		СообщитьИнфо("Загрузка ВСД_Продукция завершена");		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ВСД_Продукция'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		Ответ = Ложь;
		СообщитьИнфо("Ошибка при получении ВСД_Продукция "+ОписаниеОшибки() );
	КонецПопытки;
	
	Возврат Ответ;
КонецФункции

Функция НайтиПродукцию(guid)
	Если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция КАК ВСД_Продукция
		                      |ГДЕ
		                      |	ВСД_Продукция.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			СообщитьИнфо("ВСД_Продукция Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_Продукция.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Продукция");
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции

#КонецОбласти

#Область ВидыПродукции
Функция ЗагрузитьВидыПродукции_ЗапросXML( _guid, Смещение = 0 )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/argus/production/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getSubProductByProductListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>"+Формат( Смещение, "ЧДЦ=0; ЧН=0; ЧГ=" )+"</base:offset>
	|      </base:listOptions>
	|      <prod:productGuid>"+ _guid +"</prod:productGuid>
	|    </ws:getSubProductByProductListRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьВидыПродукции( Знач Параметры, ВидПродукцииGUID, Владелец, _Смещение=0 ) Экспорт
	
	Если НЕ ЗначениеЗаполнено( Владелец ) ИЛИ Владелец=Справочники.ВСД_Продукция.ПустаяСсылка() Тогда 
		СообщитьИнфо("Не указан владелец "+ ВидПродукцииGUID);
		Возврат Ложь;
	КонецЕсли;
	
	СообщитьИнфо(" Запрос GetProductList ");		
	ЗапросXML = ЗагрузитьВидыПродукции_ЗапросXML( ВидПродукцииGUID, _Смещение );
	Service = "platform/services/ProductService";
	Action = "GetSubProductByProductList";
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
	ПараметрыОтправки.Service = Service;
	ПараметрыОтправки.Action = Action;
	
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
		
	КолвоПолучено = Число(xdto.Body.getSubProductByProductListResponse.subProductList.count);
	Если КолвоПолучено>0 Тогда
		НачатьТранзакцию();
		Попытка			
			Если ТипЗнч(xdto.Body.getSubProductByProductListResponse.subProductList.subProduct)<>Тип("СписокXDTO") Тогда 
				subProductList = Новый Массив;
				subProductList.Добавить(xdto.Body.getSubProductByProductListResponse.subProductList.subProduct);
			Иначе
				subProductList = xdto.Body.getSubProductByProductListResponse.subProductList.subProduct;
			КонецЕсли;
			
			Для каждого subProduct ИЗ subProductList Цикл		
				
				_guid = subProduct.guid;
				_uuid = subProduct.uuid;
				name = subProduct.name;			
				
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	ВСД_ВидПродукции.Ссылка
				|ИЗ
				|	Справочник.ВСД_ВидПродукции КАК ВСД_ВидПродукции
				|ГДЕ
				|	ВСД_ВидПродукции.GUID = &GUID");
				Запрос.УстановитьПараметр("GUID", _guid );
				
				Результат = Запрос.Выполнить().Выбрать();
				
				Если Результат.Следующий() Тогда 
					Ответ = Результат.Ссылка;
					Спр = Результат.Ссылка.ПолучитьОбъект();
					Спр.УстановитьПометкуУдаления(Ложь);
					СообщитьИнфо("ВСД_ВидПродукции ["+name+"] GUID ["+_guid+"] обновлена");
				Иначе
					СообщитьИнфо("ВСД_ВидПродукции ["+name+"] GUID ["+_guid+"] добавлена");
					Спр = Справочники.ВСД_ВидПродукции.СоздатьЭлемент();
				КонецЕсли;		
				Спр.Владелец = Владелец;
				Спр.Наименование = name;
				Спр.GUID = _guid;
				Спр.UUID = _UUID;
				Попытка 
					Спр.КодТНВЭД =  ?(ТипЗнч(subProduct.code) = Тип("Строка"),subProduct.code,""); 
				Исключение 
					Спр.КодТНВЭД = "";
				КонецПопытки;
				
				Спр.Записать();
				Ответ = Спр.Ссылка;			
				
			КонецЦикла;
			ЗафиксироватьТранзакцию();
			
			Если КолвоПолучено=1000 Тогда 
				_Смещение = _Смещение + КолвоПолучено;			
				ИнициализацияХС_ЗагрузитьВидыПродукции( Параметры, ВидПродукцииGUID, Владелец, _Смещение  ); 
			КонецЕсли;
			
			Ответ = Истина;
		Исключение
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ВСД_Продукция "+_guid+" '"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОтменитьТранзакцию();
			
			Ответ = Ложь;
			СообщитьИнфо("Ошибка при получении ВСД_Продукция "+ОписаниеОшибки());
		КонецПопытки;
	Иначе
		СообщитьИнфо("Список ВСД_ВидПродукции Для "+ Владелец+ " пуст.");
		Ответ = Ложь;
	КонецЕсли;	
	
	Возврат Ответ;
КонецФункции

Функция НайтиВидПродукции(guid)
	Если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ВидПродукции.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ВидПродукции КАК ВСД_ВидПродукции
		                      |ГДЕ
		                      |	ВСД_ВидПродукции.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			СообщитьИнфо("ВСД_ВидПродукции Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_ВидПродукции.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ВидПродукции");
		Ответ = "";
	КонецЕсли;
	 	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ВСД_Продукция_Элемент

Процедура Продукция_Элемент_Получить_Инфо_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	Выб_ВСД_Продукция_Элемент = Параметры["Выб_ВСД_Продукция_Элемент"];
	Если НЕ ЗначениеЗаполнено(Выб_ВСД_Продукция_Элемент) Тогда
		СообщитьИнфо("Выберите ВСД_Продукция_Элемент Для получения информации о ней");
		Возврат;
	КонецЕсли;
	
	Ответ = Продукция_Элемент_Получить_Инфо( Параметры, Выб_ВСД_Продукция_Элемент );
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 

Функция Продукция_Элемент_Получить_Инфо_ЗапросXML( продукция )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getProductItemByGuidRequest>
	|      <base:guid>"+ СокрЛП(продукция.GUID) +"</base:guid>
	|    </ws:getProductItemByGuidRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	
	Возврат запрос;
КонецФункции

// Получить_Инфо_Продукции
Функция Продукция_Элемент_Получить_Инфо( Знач Параметры, ВыбПродукцияЭлемент ) Экспорт
	Если НЕ ЗначениеЗаполнено(ВыбПродукцияЭлемент) Тогда
		СообщитьИнфо("Укажите Продукцию Для получения информации о ней");
		Возврат Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ВыбПродукцияЭлемент.GUID) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросXML = Продукция_Элемент_Получить_Инфо_ЗапросXML( ВыбПродукцияЭлемент );

	Service = "platform/services/2.0/ProductService";
    Action = "GetProductItemByGuid";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Результат = ПолучитьРезультат_Список_Продукции( Параметры, xdto, ВыбПродукцияЭлемент );
	
	Возврат Результат;
	
КонецФункции

// ***** Продукция v2
Функция ПолучитьРезультат_Список_Продукции( Параметры, xdto, ВыбПродукцияЭлемент="") Экспорт
	
	Попытка 
		productItems = xdto.Body.getProductItemListResponse.productItemList.productItem; 
	Исключение 
		productItems = ""; 
	КонецПопытки;
		
	Если (ТипЗнч(productItems)<>Тип("СписокXDTO")) И (ТипЗнч(productItems)<>Тип("ОбъектXDTO")) Тогда
		// Изменение  / добавление
		Попытка	
			productItems = xdto.Body.result.modifyProducerStockListResponse.productItemList.productItem; 
		Исключение 
			productItems = "";	
		КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(productItems)<>Тип("СписокXDTO")) И (ТипЗнч(productItems)<>Тип("ОбъектXDTO")) Тогда
		// Изменение  / добавление
		Попытка	
			productItems = xdto.Body.receiveApplicationResultResponse.application.result.modifyProducerStockListResponse.productItemList.productItem; 
		Исключение 
			productItems = "";	
		КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(productItems)<>Тип("СписокXDTO")) И (ТипЗнч(productItems)<>Тип("ОбъектXDTO")) Тогда
		Попытка	
			productItems = xdto.Body.getProductItemByGuidResponse.productItem;	
		Исключение	
			productItems = ""; 
		КонецПопытки;
	КонецЕсли;	
	
	Если (ТипЗнч(productItems)<>Тип("СписокXDTO")) И (ТипЗнч(productItems)<>Тип("ОбъектXDTO")) Тогда
		СообщитьИнфо("Не удалось загрузить продукцию");
		Возврат Ложь;
	КонецЕсли;
		
	Если ТипЗнч(productItems)=Тип("СписокXDTO") Тогда 
		productItemМассив = productItems;
	Иначе 
		productItemМассив = Новый Массив;
		productItemМассив.Добавить(productItems);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для каждого productItem ИЗ productItemМассив Цикл		
			
			Продукция = НайтиПродукцию(productItem.product.guid);
			ВидПродукции = НайтиВидПродукции(productItem.subProduct.guid);
			
			Если ЗначениеЗаполнено(ВыбПродукцияЭлемент) Тогда
				СпрОбъект = ВыбПродукцияЭлемент.ПолучитьОбъект();
			Иначе
				СпрСсылка = Продукция_Элемент_Найти( Параметры, productItem, Ложь );
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			СпрОбъект.Активен = productItem.active;						
			СпрОбъект.UUID = productItem.uuid;			
			СпрОбъект.GUID = productItem.guid;		
			Попытка СпрОбъект.Наименование = productItem.name;  Исключение КонецПопытки;
			СпрОбъект.Продукция = Продукция;
			СпрОбъект.ВидПродукции = ВидПродукции;
			Попытка СпрОбъект.Артикул = productItem.code; Исключение КонецПопытки;
			Попытка СпрОбъект.GTIN = productItem.globalID; Исключение КонецПопытки;
			Попытка СпрОбъект.СоответствуетГОСТу = ?(productItem.correspondsToGost="true",1,0);	Исключение СпрОбъект.СоответствуетГОСТу = 0; КонецПопытки;
			Попытка СпрОбъект.Гост = ?(типзнч(productItem.gost) = Тип("Строка"),productItem.gost,"");	Исключение СпрОбъект.Гост = "";	КонецПопытки;

			// Фасовка
			Попытка packaging = productItem.packaging Исключение packaging=""	КонецПопытки; 	
			Попытка ФасовкаНаименование = packaging.packagingType.name;	Исключение ФасовкаНаименование=""	КонецПопытки;
			Попытка СпрОбъект.ФасовкаФормаУпаковки = НайтиФормуУпаковки( packaging.packagingType.guid,ФасовкаНаименование );	Исключение 	КонецПопытки;
			Попытка	СпрОбъект.ФасовкаКоличество = Число(packaging.quantity);	Исключение	КонецПопытки;
			Попытка	СпрОбъект.ФасовкаОбъем = Число(packaging.volume); Исключение	КонецПопытки;
			Попытка	СпрОбъект.ФасовкаЕдиницаИзмерения = НайтиЕдИзмерения(packaging.unit.guid);	Исключение 	КонецПопытки;			
			
			Если НЕ ЗначениеЗаполнено( СпрОбъект.ТермическиеУсловияПеревозки ) Тогда 
				СпрОбъект.ТермическиеУсловияПеревозки = Параметры["ТермическиеУсловияПеревозки"]; 
			КонецЕсли; 
			// productItem.producer.guid - ХС Производитель
			// productItem.producing.location.guid - Площадка-Производитель  - возможен список
			Попытка 
				Если ТипЗнч(productItem.producing)=Тип("СписокXDTO") Тогда 
					producingМассив = productItem.producing;
				Иначе 
					producingМассив  = Новый Массив;
					producingМассив.Добавить(productItem.producing);
				КонецЕсли;
				Для Каждого producing ИЗ producingМассив Цикл
					СпрОбъект.Площадка = Площадка_НайтиПоGUID( Параметры, producing.location.guid, Неопределено, Ложь, Истина); 
				КонецЦикла
			Исключение	КонецПопытки; 
			СпрОбъект.Записать();
			Если НЕ СпрОбъект.Активен Тогда
				СпрОбъект.УстановитьПометкуУдаления(Истина);
				СообщитьИнфо("Помечен на удаление ["+productItem.name+"] uuid =["+productItem.uuid+"], т.к. статус = НЕАКТИВЕН", СпрОбъект.Ссылка);
			Иначе	
				СообщитьИнфо("Записан ["+productItem.name+"] uuid =["+productItem.uuid+"]", СпрОбъект.Ссылка);
				Если СпрОбъект.ПометкаУдаления Тогда
					СпрОбъект.УстановитьПометкуУдаления(Ложь);	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		Ответ = Истина;
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ВСД_Продукция_Элемент "+productItem.guid+" '"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		
		Ответ = Ложь;
		СообщитьИнфо("Ошибка при получении ВСД_Продукция_Элемент "+ОписаниеОшибки());
	КонецПопытки;

	Возврат Ответ;
КонецФункции

// Функция Продукция_Элемент_Найти(Знач Параметры, productItem, ВСД_Продукция, ВСД_ВидПродукции, ОбновитьДанные=Ложь) Экспорт
Функция Продукция_Элемент_Найти( Знач Параметры, productItem, ОбновитьДанные=Истина ) 
	Попытка productItemName = productItem.name; Исключение	productItemName = ""; КонецПопытки;
	Попытка	productItemGuid = productItem.guid; Исключение	productItemGuid="";	КонецПопытки;
	Попытка productItemUuid = productItem.uuid; Исключение	productItemUuid=""; КонецПопытки;
	
	Ответ = "";
	Если ЗначениеЗаполнено(productItemGuid) Тогда			
		Запрос = Новый Запрос;
		ТекстЗапроса = "	  ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.GUID = &GUID";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("GUID", productItemGuid );
		Результат = Запрос.Выполнить().Выбрать();		
	Иначе // нет ГУИД			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.Наименование = &Название
		                      |	И ВСД_Продукция_Элемент.GUID = &GUID");
		Запрос.УстановитьПараметр("Название", Лев(productItemName,150) );    // ЖД до размера реквизита 1с8
		Запрос.УстановитьПараметр("GUID", productItemGuid ); // Обязательно пустой GUID
		
		Результат = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	Если Результат.Следующий() Тогда 
		Ответ = Результат.Ссылка;
	Иначе
		
		Спр = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
		Спр.Наименование = productItemName;
		Спр.guid = productItemGuid;
		Спр.Uuid = productItemUuid;
		Спр.ТермическиеУсловияПеревозки = Параметры["ТермическиеУсловияПеревозки"];
		Спр.Записать();	
		СообщитьИнфо("не найден ВСД_Продукция_Элемент ["+productItemName+"] GUID ["+productItemGuid+"]. Создан новый элемент справочника", Спр.Ссылка);
		Если ОбновитьДанные Тогда 
			Продукция_Элемент_Получить_Инфо( Параметры, спр.Ссылка );
		КонецЕсли;
		Ответ = спр.Ссылка;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции


Процедура Продукция_Элемент_Получить_Список_По_Площадке_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	ВыбПлощадка = Параметры["ВыбПлощадка"];
	Если НЕ ЗначениеЗаполнено(ВыбПлощадка) Тогда
		СообщитьИнфо("Выберите Площадку Для получения продукции");
		Возврат;
	КонецЕсли;
	
	Ответ = Продукция_Элемент_Получить_Список_По_Площадке( Параметры, ВыбПлощадка );
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 

Функция Продукция_Элемент_Получить_Список_По_Площадке_ЗапросXML( ВыбПлощадка )
	
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
    |<soapenv:Header/>
    |<soapenv:Body>
    |   <ws:getProductItemListRequest>
    |      <bs:listOptions>
    |         <bs:count>1000</bs:count>
    |         <bs:offset>0</bs:offset>
    |      </bs:listOptions>
    |      <dt:enterprise>
    |         <bs:guid>"+ СокрЛП(ВыбПлощадка.GUID) +"</bs:guid>
    |      </dt:enterprise>
    |   </ws:getProductItemListRequest>
    |</soapenv:Body>
	|</soapenv:Envelope>	
	|";
	Возврат Запрос;	
КонецФункции

Функция Продукция_Элемент_Получить_Список_По_Площадке( Знач Параметры, ВыбПлощадка ) Экспорт
	
	ЗапросXML = Продукция_Элемент_Получить_Список_По_Площадке_ЗапросXML( ВыбПлощадка );
	Service = "platform/services/2.0/ProductService";
    Action = "GetProductItemList";		
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto) Тогда 
		Возврат Ложь;
	КонецЕсли;		

	Результат = ПолучитьРезультат_Список_Продукции( Параметры, xdto );
	
	Возврат Результат;
			
КонецФункции

Функция Продукция_Элемент_Изменить_ЗапросXML( Параметры, ВыбПродукцияЭлемент, ВыбКоманда)

	Запрос ="<SOAP-ENV:Envelope 
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( Параметры["param_api_key"] ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( Параметры["param_issuer_id"] ) +"</apl:issuerId>
		|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
		|        <apl:data>
		|          <merc:modifyProducerStockListRequest>
		|            <merc:localTransactionId>" + "Id1" + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:modificationOperation>
	    |          <vd:type>"+ВыбКоманда+"</vd:type>";
		Если ВыбКоманда = "DELETE" Тогда
		    Запрос = Запрос + "
	        |      <vd:affectedList>
    	    |        <dt:productItem>
        	|          <bs:uuid>"+ СокрЛП( ВыбПродукцияЭлемент.UUID)+"</bs:uuid>
	        |        </dt:productItem>
    	    |      </vd:affectedList>";		
		Иначе
		    Запрос = Запрос + "
		    |          <vd:resultingList>
		    |            <dt:productItem>";
		    Если ЗначениеЗаполнено( ВыбПродукцияЭлемент.UUID ) Тогда
				Запрос = Запрос + "
	    		|              <bs:uuid>"+СокрЛП(ВыбПродукцияЭлемент.UUID)+"</bs:uuid>";
			КонецЕсли;
		    Если ЗначениеЗаполнено(ВыбПродукцияЭлемент.GTIN) Тогда
				Запрос = Запрос + "
	    		|              <dt:globalID>"+СокрЛП(ВыбПродукцияЭлемент.GTIN)+"</dt:globalID>";
			КонецЕсли;
			
			Запрос = Запрос + "
		    |              <dt:name>"+ЗаменитьСпецСимволы(ВыбПродукцияЭлемент.Наименование)+"</dt:name>";
		    Если ЗначениеЗаполнено(ВыбПродукцияЭлемент.Артикул) Тогда
				Запрос = Запрос + "
	    		|              <dt:code>"+СокрЛП(ВыбПродукцияЭлемент.Артикул)+"</dt:code>";
			КонецЕсли;
			
			Запрос = Запрос + "
		    |              <dt:productType>"+ВыбПродукцияЭлемент.Продукция.Тип+"</dt:productType>
	    	|              <dt:product>
		    |                <bs:guid>"+Сокрлп(ВыбПродукцияЭлемент.Продукция.GUID)+"</bs:guid>		
	    	|              </dt:product>
		    |              <dt:subProduct>
	    	|                <bs:guid>"+Сокрлп(ВыбПродукцияЭлемент.ВидПродукции.GUID)+"</bs:guid>
		    |              </dt:subProduct>
			|              <dt:correspondsToGost>"+НашеБулево(ВыбПродукцияЭлемент.СоответствуетГОСТу)+"</dt:correspondsToGost>";
		    Если ВыбПродукцияЭлемент.СоответствуетГОСТу = 1 Тогда
				Запрос = Запрос + "
		    	|              <dt:gost>"+СокрЛП(ВыбПродукцияЭлемент.Гост)+"</dt:gost>";
			КонецЕсли;
			// ХС Производитель И владелец ТМ		
			Запрос = Запрос + "
		    |              <dt:producer>
	    	|                <bs:guid>"+Сокрлп( Параметры["Отправитель_ХозСубъект"].GUID )+"</bs:guid>
		    |              </dt:producer>
		    |              <dt:tmOwner>
	    	|                <bs:guid>"+Сокрлп( Параметры["Отправитель_ХозСубъект"].GUID )+"</bs:guid>
		    |              </dt:tmOwner>";
			

	// 45 	·········<dt:producing> 	dt:ProductItemProducing 	[0..*] 	Список площадок, на которых выпускается данная продукция. 	
	// 46 	············<dt:location> 	dt:Enterprise 	[1..1] 	Площадка, осуществляющая выпуск продукции. 	
	// 47 	···············<bs:uuid> 	bs:UUID 	[1..1] 	Идентификатор версии предприятия. 	<bs:uuid>9c706614-b995-4bdd-bda3-8fa9de70803a</bs:uuid>
	// 48 	···············<bs:guid> 	bs:UUID 	[1..1] 	Глобальный идентификатор предприятия. 	<bs:guid>12f04ea3-e236-4b71-b427-e04d41b26de4</bs:guid>
	// 49 	············</dt:location> 				
	// 50 	·········</dt:producing> 			
			Запрос = Запрос + "
		    |              <dt:producing>
			|                <dt:location>
	    	|                   <bs:guid>"+Сокрлп(ВыбПродукцияЭлемент.Площадка.GUID)+"</bs:guid>
		    |                </dt:location>
		    |              </dt:producing>";
			// ЖД ФАСОВКА
			Если ЗначениеЗаполнено(ВыбПродукцияЭлемент.ФасовкаФормаУпаковки) И  ЗначениеЗаполнено(ВыбПродукцияЭлемент.ФасовкаЕдиницаИзмерения) Тогда
				Запрос = Запрос + "
				|              <dt:packaging>
			    |                <dt:packagingType>
	    		|                  <bs:guid>"+Сокрлп(ВыбПродукцияЭлемент.ФасовкаФормаУпаковки.GUID)+"</bs:guid>
			    |                </dt:packagingType>
	    		|                <dt:quantity>"+ВыбПродукцияЭлемент.ФасовкаКоличество+"</dt:quantity>
		    	|                <dt:volume>"+Формат(ВыбПродукцияЭлемент.ФасовкаОбъем, "ЧРД=.; ЧГ=0;ЧН=0")+"</dt:volume>
		    	|                <dt:unit>
			    |                  <bs:guid>"+Сокрлп(ВыбПродукцияЭлемент.ФасовкаЕдиницаИзмерения.GUID)+"</bs:guid>
	    		|                </dt:unit>
			    |              </dt:packaging>";
			КонецЕсли;
			Запрос = Запрос + "
			|            </dt:productItem>
		    |          </vd:resultingList>";
		КонецЕсли;
		Запрос = Запрос + "
	    |        </merc:modificationOperation>
	    |      </merc:modifyProducerStockListRequest>
	    |    </apl:data>
	    |  </apl:application>
	    |</apldef:submitApplicationRequest>
		|</SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>";	
	
	
	Возврат Запрос;	
КонецФункции

Функция  Продукция_Элемент_Изменить( Знач Параметры, ВыбПродукцияЭлемент , ВыбКоманда ) Экспорт
	Если НЕ ЗначениеЗаполнено(ВыбПродукцияЭлемент) Тогда
		СообщитьИнфо("Укажите Продукцию Для обработки в Меркурий");
		Возврат Ложь;
	КонецЕсли;	
	Если НЕ(ЗначениеЗаполнено(ВыбПродукцияЭлемент.Площадка.GUID)) Тогда 
		СообщитьИнфо("В продукцияЭлемент.Площадка пустой GUID");
		Возврат Ложь;
	КонецЕсли;
	Если (ВыбКоманда = "DELETE") И (НЕ(ЗначениеЗаполнено(ВыбПродукцияЭлемент.UUID))) Тогда
		СообщитьИнфо("Невозможно выполнить операцию удаления "+ВыбПродукцияЭлемент+" т.к. не указан ее UUID");
		Возврат Ложь;
	КонецЕсли;
	                 
	ЗапросXML = Продукция_Элемент_Изменить_ЗапросXML( Параметры, ВыбПродукцияЭлемент, ВыбКоманда );
	Service = "platform/services/2.0/ApplicationManagementService";	
    Action = "submitApplicationRequest";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto) Тогда 
		Возврат Ложь;
	КонецЕсли;		

	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );	

	Ответ = Продукция_Элемент_Изменить_ПолучитьОтвет(Параметры, ВыбПродукцияЭлемент, appID);
	
	Возврат Ответ;
	
КонецФункции

Процедура Продукция_Элемент_Изменить_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	Выб_ВСД_Продукция_Элемент = Параметры["Выб_ВСД_Продукция_Элемент"];
	Если НЕ ЗначениеЗаполнено(Выб_ВСД_Продукция_Элемент) Тогда
		СообщитьИнфо("Выберите ВСД_Продукция_Элемент ");
		Возврат;
	КонецЕсли;
	ВыбКоманда = Параметры["ВыбКоманда"];
	
	Ответ = Продукция_Элемент_Изменить( Параметры, Выб_ВСД_Продукция_Элемент, ВыбКоманда );
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 

Функция  Продукция_Элемент_Изменить_ПолучитьОтвет(Параметры, ВыбПродукцияЭлемент, appID) Экспорт

	Если ПустаяСтрока(appID) Тогда
		СообщитьИнфо("Пустая ссылка applicationID");
		Возврат Ложь;
	КонецЕсли;
	
	Пауза( Параметры["ПаузаСек"] );
	
	xdto = кб99_ВСД_Отправка.ПолучитьРезультатСервер( Параметры, appID );
	
	Если НайтиОшибки(xdto) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Статус = СтатусЗапроса( xdto );
	Если Статус = "IN_PROCESS" Тогда
		Ответ = ПолучитьРезультат_Список_Продукции( Параметры, xdto, ВыбПродукцияЭлемент);
		Возврат Ответ;
	Иначе
		Ответ = ПолучитьРезультат_Список_Продукции( Параметры, xdto, ВыбПродукцияЭлемент);
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции


Функция Продукция_Элемент_ПолучитьСписокПоПлощадке_ЗапросXML( Площадка)
	
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
    |<soapenv:Header/>
    |<soapenv:Body>
    |   <ws:getProductItemListRequest>
    |      <bs:listOptions>
    |         <bs:count>1000</bs:count>
    |         <bs:offset>0</bs:offset>
    |      </bs:listOptions>
    |      <dt:enterprise>
    |         <bs:guid>"+ СокрЛП(Площадка.GUID) +"</bs:guid>
    |      </dt:enterprise>
    |   </ws:getProductItemListRequest>
    |</soapenv:Body>
	|</soapenv:Envelope>	
	|";
	Возврат Запрос;	
КонецФункции

Функция Продукция_Элемент_ПолучитьСписокПоПлощадке( Знач Параметры, Площадка ) Экспорт
	ЗапросXML = Продукция_Элемент_ПолучитьСписокПоПлощадке_ЗапросXML( Площадка );
	Service = "platform/services/2.0/ProductService"; 
    Action = "GetProductItemList";		
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto) Тогда 
		Возврат Ложь;
	КонецЕсли;		

	Ответ = ПолучитьРезультат_Список_Продукции( Параметры, xdto );
	Возврат Ответ;	
			
КонецФункции


#КонецОбласти

#Область ЕдиницыИзмерения
Функция ЗагрузитьЕдиницыИзмерения_ЗапросXML()
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/argus/common/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getUnitListRequest>
	|        <base:listOptions>
	|           <base:count>1000</base:count>
	|           <base:offset>0</base:offset>
	|         </base:listOptions>
	|      </ws:getUnitListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Процедура ИнициализацияХС_ЗагрузитьЕдиницыИзмерения_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	
	Ответ = ИнициализацияХС_ЗагрузитьЕдиницыИзмерения( Параметры );
	
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 

Функция ИнициализацияХС_ЗагрузитьЕдиницыИзмерения( Знач Параметры ) Экспорт
	
	ПометитьНаУдалениеСправочник("ВСД_ЕдиницыИзмерения");
	
	СообщитьИнфо(" Запрос GetUnitList ");		
	ЗапросXML = ЗагрузитьЕдиницыИзмерения_ЗапросXML();
    Service = "platform/services/DictionaryService";
    Action = "GetUnitList";
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Ответ = Ложь;
	НачатьТранзакцию();
	Попытка
		unitList = xdto.Body.getUnitListResponse.UnitList.Unit;
		
		Для каждого unit ИЗ unitList Цикл		
				
			guid = unit.guid;
			_uuid = unit.uuid;
			name = unit.name;
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ЕдиницыИзмерения.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ЕдиницыИзмерения КАК ВСД_ЕдиницыИзмерения
		                      |ГДЕ
		                      |	ВСД_ЕдиницыИзмерения.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
				Спр.УстановитьПометкуУдаления(Ложь);
				СообщитьИнфо("ВСД_ЕдиницыИзмерения ["+name+"] GUID ["+guid+"] обновлена");
			Иначе
				СообщитьИнфо("ВСД_ЕдиницыИзмерения ["+name+"] GUID ["+guid+"] добавлена");
				Спр = Справочники.ВСД_ЕдиницыИзмерения.СоздатьЭлемент();
			КонецЕсли;		
			
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = _UUID;
			Спр.Коэффициент = unit.factor;			
			Спр.Записать();
			Ответ = Спр.Ссылка;			
							
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
		Ответ = Истина;
	    СообщитьИнфо("Загрузка ВСД_ЕдиницыИзмерения завершена");
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ВСД_ЕдиницыИзмерения'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		
		Ответ = Ложь;	
		СообщитьИнфо("Ошибка при получении ВСД_ЕдиницыИзмерения "+ОписаниеОшибки());
	КонецПопытки;
			
	Возврат Ответ;
	
КонецФункции

Функция НайтиЕдИзмерения(guid, _uuid="")	Экспорт
	Если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ЕдиницыИзмерения.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ЕдиницыИзмерения КАК ВСД_ЕдиницыИзмерения
		                      |ГДЕ
		                      |	ВСД_ЕдиницыИзмерения.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			СообщитьИнфо("ВСД_ЕдиницыИзмерения Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_ЕдиницыИзмерения.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ЕдиницыИзмерения");
		Ответ="";
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции

#КонецОбласти

#Область Цели
Функция ИнициализацияХС_ЗагрузитьЦели_ЗапросXML() Экспорт
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/argus/common/ws-definitions' 
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getPurposeListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|      </base:listOptions>
	|    </ws:getPurposeListRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Процедура ИнициализацияХС_ЗагрузитьЦели_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	
	Ответ = ИнициализацияХС_ЗагрузитьЦели( Параметры );
	
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 

Функция ИнициализацияХС_ЗагрузитьЦели( Знач Параметры ) Экспорт
	
	ПометитьНаУдалениеСправочник("ВСД_Цель");
	
	ЗапросXML = ИнициализацияХС_ЗагрузитьЦели_ЗапросXML();     
	Service = "platform/services/DictionaryService";
    Action = "GetPurposeList";	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	
	СообщитьИнфо("Отправляем запрос GetPurposeList");
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	НачатьТранзакцию();	
	Попытка
		List = xdto.Body.getPurposeListResponse.purposeList.purpose;
	    Для каждого item ИЗ List Цикл
			_uuid = item.uuid;
			guid = item.guid;
			name = item.name;
			Запрос = Новый Запрос("ВЫБРАТЬ
			                     |	ВСД_Цель.Ссылка
			                     |ИЗ
			                     |	Справочник.ВСД_Цель КАК ВСД_Цель
			                     |ГДЕ
			                     |	ВСД_Цель.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
				Спр.УстановитьПометкуУдаления(Ложь);
				СообщитьИнфо("ВСД_Цель ["+name+"] GUID ["+guid+"] обновлена");
			Иначе
				СообщитьИнфо("ВСД_Цель ["+name+"] GUID ["+guid+"] добавлена");
				Спр = Справочники.ВСД_Цель.СоздатьЭлемент();
			КонецЕсли;		
			
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = _UUID;
			Спр.Записать();
			Ответ = Спр.Ссылка;			
		    СообщитьИнфо("Записан ВСД_Цель ["+name+"] ");
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		Ответ = Истина;
	    СообщитьИнфо("ВСД_Цель загрузка завершена");
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ВСД_Цель'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		Ответ = Ложь;
	
		СообщитьИнфо("Ошибка при получении ВСД_Цель");
		СообщитьИнфо(ОписаниеОшибки());
	КонецПопытки;
			
	Возврат Ответ;
КонецФункции
#КонецОбласти

#Область ФормыУпаковки

Функция НайтиФормуУпаковки(guid, name, _uuid = "", КодУпаковки = "") Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	Если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ФормыУпаковки.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ФормыУпаковки КАК ВСД_ФормыУпаковки
		                      |ГДЕ
		                      |	ВСД_ФормыУпаковки.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
			Если НЕ(Ответ.Наименование = name) Тогда
				СообщитьИнфо("ВСД_ФормыУпаковки "+ Ответ.Наименование +" изменилось Наименование на ["+name+"] перезаписано");
				текСпр = Ответ.ПолучитьОбъект();
				текСпр.Наименование = name;
				текСпр.Записать();
				Ответ = текСпр.Ссылка;
			КонецЕсли;
			СпрОбъект = Ответ.ПолучитьОбъект();
			СпрОбъект.УстановитьПометкуУдаления(Ложь);
		Иначе
			СообщитьИнфо("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			Спр = Справочники.ВСД_ФормыУпаковки.СоздатьЭлемент();
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = _uuid;
			Попытка Спр.КодУпаковки = КодУпаковки; Исключение КонецПопытки; 
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ФормыУпаковки");
	КонецЕсли;
	
	Возврат Ответ;
		
КонецФункции

Процедура ЗаполнитьФормыУпаковки(Знач Параметры, АдресХранилища ) Экспорт
	// http://help.vetrf.ru/wiki/PackingForm
	
	НачатьТранзакцию();
	
	ПометитьНаУдалениеСправочник("ВСД_ФормыУпаковки");

	Попытка
		// Соответствие между старым справочником упаковок И новым классификатором. 
		 НайтиФормуУпаковки("fedf3e32-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
		 НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8","Мешок большой");
		 НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8","Бочка");
		 НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8","Банка, жестяная (консервная)");
		 НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8","Коробка, картонная");
		 НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8","Мешок бумажный многослойный");
		 НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8","Мешок");
		 НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8","Мешок ИЗ полимерной ткани");
		 НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8","Неупакованный ИЛИ нерасфасованный");
		 НайтиФормуУпаковки("fedf47ec-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
		 НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8","Пакет");
		 НайтиФормуУпаковки("fedf49cc-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
		 НайтиФормуУпаковки("fedf55e8-053c-11e1-99b4-d8d385fbc9e8","Коробка, пенопластовая");
		 НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8","Поддон");
		 НайтиФормуУпаковки("fedf57f0-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
		 НайтиФормуУпаковки("fedf58e0-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
		 НайтиФормуУпаковки("fedf59da-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
		 НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8","Коробка");
		 НайтиФормуУпаковки("fedf5bc4-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
		 НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8","Корзина");
		 НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8","Цистерна контейнер универсальный");
		 НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8","Мешок, бумажный");
		 НайтиФормуУпаковки("fedf5f70-053c-11e1-99b4-d8d385fbc9e8","Коробка, пенопластовая");
		 НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8","Контейнер средней грузоподъемности Для массовых грузов");
		 НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8","Поддон");
		 НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8","Крюк");
		 НайтиФормуУпаковки("fedf6344-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
		 НайтиФормуУпаковки("a99ecd22-d2e8-11e4-8109-d89d67148660","Упаковка не определена");
		 НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660","Коробка, пластмассовая");

		// Новый классификатор упаковок	
			
		 НайтиФормуУпаковки("5ad138ef-2493-4117-bf83-b76e4e5f609d","Ампула, защищенная");
		 НайтиФормуУпаковки("1f9a9273-be63-4e4b-b29b-dfee1f0da370","Ампула, незащищенная");
		 НайтиФормуУпаковки("975160ee-6cb0-4501-a821-9e3574f09446","Аэрозольная упаковка");
		 НайтиФормуУпаковки("ec29a5a8-17fa-480c-a1d5-333a4411e393","Багаж");
		 НайтиФормуУпаковки("0f4cc0b5-af48-4571-a06b-96504ec89012","Бадья");
		 НайтиФормуУпаковки("93bdc740-0f32-4019-a3fd-ed661f2bc3b9","Бак");
		 НайтиФормуУпаковки("bc29f22a-6086-4438-acd2-1f40a3b00a66","Балка");
		 НайтиФормуУпаковки("491e8863-7850-4b06-8abc-52c09dd05d0d","Балка в пакете/пачке/связке");
		 НайтиФормуУпаковки("6a10e7ae-b8ff-4249-a23d-1dec8128c4a1","Баллон, газовый");
		 НайтиФормуУпаковки("0fdf7f98-6595-480b-8988-5544d8ff40b3","Баллон, защищенный");
		 НайтиФормуУпаковки("49e8e70e-e539-4ce1-8d20-5a49ae276f77","Баллон, незащищенный");
		 НайтиФормуУпаковки("8a9c1190-aeeb-498d-8e80-5ddfbc3f7df2","Бандероль");
		 НайтиФормуУпаковки("0cc66f67-3111-4e77-9dcc-c9a9df725bed","Банка (емкостью менее 5 л) жестяная прямоугольная");
		 НайтиФормуУпаковки("18a67ab0-21a3-4e8c-9058-d8f42820938d","Банка (емкостью менее 5 л) жестяная с ручкой И выпускным отверстием");
		 НайтиФормуУпаковки("54ed0793-c32e-41c1-9321-608c1a224edc","Банка (емкостью менее 5 л) жестяная цилиндрическая");
		 НайтиФормуУпаковки("91f360ff-5731-4c1c-bf11-7ea3d6d1a3ca","Банка жестяная Для сухих продуктов (массой до 2,2 кг)");
		 НайтиФормуУпаковки("c1f40234-bff1-42c8-8e19-d6cad7f00fce","Банка широкогорлая (емкостью около 4,5 литров)");
		 НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8","Банка, жестяная (консервная)");
		 НайтиФормуУпаковки("13f13e66-adf4-431a-9cff-22cfd839047b","Барабан");
		 НайтиФормуУпаковки("2e53354c-4023-434b-926f-bbdd1af00a37","Барабан алюминиевый с несъемным днищем");
		 НайтиФормуУпаковки("970e40fd-3436-48ed-ac99-e78802f57119","Барабан алюминиевый со съемным днищем");
		 НайтиФормуУпаковки("eec09740-2c4c-460b-94ed-c4d4ef437f1b","Барабан пластмассовый с несъемным днищем");
		 НайтиФормуУпаковки("d565dd82-5fc1-4303-a55d-495c35ac22ec","Барабан пластмассовый со съемным днищем");
		 НайтиФормуУпаковки("02f1c682-8f53-47f8-b8dc-72404d986e66","Барабан стальной");
		 НайтиФормуУпаковки("c113fb0c-23eb-4ce5-ad44-8250598f173e","Барабан стальной с несъемным днищем");
		 НайтиФормуУпаковки("1852b14d-39a0-4712-9e55-90a7005d5469","Барабан стальной со съемным днищем");
		 НайтиФормуУпаковки("e5f7f98d-6a9c-4866-8cac-4819f71e41b3","Барабан фанерный");
		 НайтиФормуУпаковки("6bf25be3-0cf7-4dd8-a383-049a02862968","Барабан фибровый");
		 НайтиФормуУпаковки("ed90911b-d130-4d3b-ae0b-2f0754d23fd4","Барабан, алюминиевый");
		 НайтиФормуУпаковки("0ef53349-5258-4efc-ac2a-23d1e33f387b","Барабан, деревянный");
		 НайтиФормуУпаковки("bbe136bd-0da4-42fd-800a-79435f4dd2c0","Барабан, железный");
		 НайтиФормуУпаковки("dd7c7ba0-dbc3-435d-94f7-5b758ca36898","Барабан, пластмассовый");
		 НайтиФормуУпаковки("ae0b5e58-8771-48f7-8c3c-11dfdb17ebad","Без клети");
		 НайтиФормуУпаковки("34e245a7-cd7c-4d8b-a436-482dcbcf1f38","Бидон");
		 НайтиФормуУпаковки("41e9ff79-b6c4-46e7-a2d4-6f5bf3ee1002","Бобина");
		 НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8","Бочка");
		 НайтиФормуУпаковки("3630beae-fe03-49ff-9264-93925ca7ce80","Бочка (емкостью около 164 л)");
		 НайтиФормуУпаковки("5623e14a-903b-48e4-8afa-07db65991173","Бочка (емкостью около 164 л) деревянная");
		 НайтиФормуУпаковки("3c78e2e1-d19a-40d3-b970-4fe6d2b722d0","Бочка (емкостью около 164 л) деревянная со съемным днищем");
		 НайтиФормуУпаковки("021bc2d9-f514-4491-b21a-ffe63023236f","Бочка (емкостью около 164 л) деревянная шпунтованная");
		 НайтиФормуУпаковки("37495e99-e19f-4221-97e8-39565c0192b8","Бочка деревянная (емкостью около 200 л)");
		 НайтиФормуУпаковки("c8066a6e-5f19-4429-85e1-9b2df548afa1","Бочка Для вина ИЛИ пива");
		 НайтиФормуУпаковки("f1d48fb7-8536-4b99-8668-bd6a55167306","Бочка Для вина ИЛИ пива большая (емкостью около 1146 л) (тан)");
		 НайтиФормуУпаковки("6583f8bf-8317-4ba4-bf4b-fafcd1d13bc1","Бочка емкостью 238 л (хогсхед)");
		 НайтиФормуУпаковки("8915e7eb-4f39-48aa-8171-7a629c95b69e","Бочонок (емкостью около 41 л)");
		 НайтиФормуУпаковки("8fe0727a-b2ed-4040-9df5-a14e4ad7f6a8","Бочонок (емкостью около 46 л)");
		 НайтиФормуУпаковки("07f35ce7-6d5a-49e7-a7e2-659b6cf74def","Бревно");
		 НайтиФормуУпаковки("0e0ccdf4-8779-4d65-84e2-d9e689314630","Бревно в пакете/пачке/связке");
		 НайтиФормуУпаковки("d9afec35-b224-404f-a3ff-74a0496c128d","Брезент");
		 НайтиФормуУпаковки("0ed01082-9c8e-49fa-8ba4-a91879d4b192","Брус (брусок)");
		 НайтиФормуУпаковки("086a3064-ab16-4d38-a7fa-3a28ee66b58b","Брус (брусок) в пакете/пачке/связке");
		 НайтиФормуУпаковки("d2ed24d1-c72a-4dc6-b3a8-ff8ca179c5c4","Бункер");
		 НайтиФормуУпаковки("a23634f3-9e71-4c80-abc5-e4c77ac70c88","Бутылка оплетенная");
		 НайтиФормуУпаковки("f7183d0a-5cee-4de8-9d08-bd5c7512ea7c","Бутылка с выпуклыми стенками защищенная");
		 НайтиФормуУпаковки("883a32f4-984e-43c1-8e03-ad02929cbfe4","Бутылка с выпуклыми стенками незащищенная");
		 НайтиФормуУпаковки("9adfe441-f411-4fcc-9568-8274ec2a0697","Бутылка цилиндрическая защищенная");
		 НайтиФормуУпаковки("1b986c7e-dcff-452f-b9c5-bc47afa6ccdc","Бутылка цилиндрическая незащищенная");
		 НайтиФормуУпаковки("3e311a74-00dd-4554-b656-748aa45cc069","Бутыль оплетенная большая (емкостью от 9 до 54 л) защищенная");
		 НайтиФормуУпаковки("b654b00e-7601-408e-b059-783ab0371b35","Бутыль оплетенная большая (емкостью от 9 до 54 л) незащищенная");
		 НайтиФормуУпаковки("fc881dea-5868-43ea-8b84-768aad44bc39","Бутыль оплетенная защищенная");
		 НайтиФормуУпаковки("f8552b0c-1de2-4509-8de9-06284d01bdff","Бутыль оплетенная незащищенная");
		 НайтиФормуУпаковки("87cff419-7bd1-4a2a-b52e-3f6c358138c8","Бухта");
		 НайтиФормуУпаковки("04735711-516d-4331-92c6-b55e5f8e3710","В вакуумной упаковке");
		 НайтиФормуУпаковки("b49dbb7b-56b9-48e3-9fd3-74a328dbcea3","В термоусадочной пленке");
		 НайтиФормуУпаковки("165fd412-0bfa-4bb5-8993-bcfaa5d82e1b","Ведро");
		 НайтиФормуУпаковки("657fad4d-71a4-4939-90a4-3fb0c9aea7f7","Гильза");
		 НайтиФормуУпаковки("a423d25a-2a14-40b8-bf13-f6a85b8fc887","Гнездо (ячейка)");
		 НайтиФормуУпаковки("4a7ea673-c3ac-40b5-836f-cfdd066b8020","Горшок");
		 НайтиФормуУпаковки("668e236b-70b0-4afc-8ab3-3fb9335f909e","Грейферный ковш");
		 НайтиФормуУпаковки("17f78e53-8978-4b58-9be5-d919c049a239","Гроб");
		 НайтиФормуУпаковки("d2612f44-ca2a-4146-986d-6650e6fe9194","Грузовая партия (лот)");
		 НайтиФормуУпаковки("af4d4677-3ea7-46ba-9fe0-504ba81ebea7","Дозатор");
		 НайтиФормуУпаковки("b8d3ee58-c120-4c4e-bd31-0e1d3451f5de","Доска");
		 НайтиФормуУпаковки("c84cb473-a0cc-4433-8b56-c7beb88fc59b","Доска в пакете/пачке/связке");
		 НайтиФормуУпаковки("3dca7c38-3a10-4fb6-9c1f-0c64ab79d63b","Доска толстая в пакете/пачке/связке");
		 НайтиФормуУпаковки("4d5772a0-9fa4-47ab-8c32-9a07729740ad","Доска, толстая");
		 НайтиФормуУпаковки("5e5f4afb-d5f8-483a-999e-cb985af7580b","Единица");
		 НайтиФормуУпаковки("207dccd8-7a12-44c3-a77b-7dd945a7b0bd","Кадка");
		 НайтиФормуУпаковки("6046383e-9e59-40bc-a70b-a0538ef536ca","Кадка с крышкой");
		 НайтиФормуУпаковки("4d9bd778-5ce4-411c-8d78-a1959ac55590","Канистра пластмассовая с несъемным днищем");
		 НайтиФормуУпаковки("ba61904f-f946-448a-958b-518655d8f567","Канистра пластмассовая со съемным днищем");
		 НайтиФормуУпаковки("a2110164-70b4-49f6-afaa-f3abde1be0f1","Канистра стальная с несъемным днищем");
		 НайтиФормуУпаковки("72896fbf-b156-4c7b-868d-ac13c5a85c7e","Канистра стальная со съемным днищем");
		 НайтиФормуУпаковки("12829e8e-7983-4745-8d01-5425d0244df6","Канистра, пластмассовая");
		 НайтиФормуУпаковки("a17e05ea-2fd6-485f-8db6-5aed1606f851","Канистра, прямоугольная");
		 НайтиФормуУпаковки("315646b0-01b2-4728-ab20-39911b080c26","Канистра, стальная");
		 НайтиФормуУпаковки("a7eb10cf-5a71-4cd2-97eb-c7369a407ccf","Канистра, цилиндрическая");
		 НайтиФормуУпаковки("8bcdee71-cca5-4536-ae2e-8a423d7dab60","Капсула");
		 НайтиФормуУпаковки("0f402761-1d53-45dc-9566-d709cd1ccb4d","Кардная лента");
		 НайтиФормуУпаковки("8211a6d5-11ea-4a5e-96dd-b52c3fe0a801","Кассета");
		 НайтиФормуУпаковки("c7ee807d-56a9-47c5-95d7-72021f303167","Кассета с пленкой (фильмпак)");
		 НайтиФормуУпаковки("4b3478b2-bd43-4fe1-85bd-77a457a1cd72","Катушка");
		 НайтиФормуУпаковки("31ff0ebc-8b93-4ab4-9e6f-04dcab641eb2","Кипа, неспрессованная");
		 НайтиФормуУпаковки("90ae449d-76c3-47a2-a0ec-39febdc0c965","Кипа, спрессованная");
		 НайтиФормуУпаковки("6da6c216-abc1-4534-825c-821a41b2dbc2","Клеть");
		 НайтиФормуУпаковки("09f4ec10-6101-4c3d-b57a-251aa11e7752","Клеть (многооборотная) Общего фонда транспортировочного оборудования EC");
		 НайтиФормуУпаковки("4770cd27-c22b-4da6-bba5-c69dcd601b74","Клеть, роликовая");
		 НайтиФормуУпаковки("538f0705-e05d-4154-bfb5-0e63ab30122b","Кольцо");
		 НайтиФормуУпаковки("d0416c04-368d-48bf-b5fb-d3fe21f3977c","Комбинированная упаковка: пластмассовый сосуд");
		 НайтиФормуУпаковки("858efe47-f7d6-4f6e-9408-79b8e3d9ae83","Комбинированная упаковка: пластмассовый сосуд в барабане алюминиевом");
		 НайтиФормуУпаковки("b95eb3b6-d08a-441e-9a3a-6d3f9501cc99","Комбинированная упаковка: пластмассовый сосуд в барабане пластмассовом");
		 НайтиФормуУпаковки("6b8efc02-9611-451c-b215-503bc29301cd","Комбинированная упаковка: пластмассовый сосуд в барабане стальном");
		 НайтиФормуУпаковки("21246938-dd6f-49aa-8e2a-d1cb13b0be17","Комбинированная упаковка: пластмассовый сосуд в барабане фибровом");
		 НайтиФормуУпаковки("05e4976b-9504-44ac-8645-06bf6a24ad59","Комбинированная упаковка: пластмассовый сосуд в деревянной коробке");
		 НайтиФормуУпаковки("5e8755cb-a874-499d-bb4d-34e465df0978","Комбинированная упаковка: пластмассовый сосуд в коробке ИЗ твердой пластмассы");
		 НайтиФормуУпаковки("eb55f088-06cc-4bab-9f84-49f2f999f428","Комбинированная упаковка: пластмассовый сосуд в коробке ИЗ фибрового картона");
		 НайтиФормуУпаковки("ab579955-759f-4de1-b8b9-460ad80facfb","Комбинированная упаковка: пластмассовый сосуд в коробке фанерной");
		 НайтиФормуУпаковки("95307257-321c-4dd1-9a30-e30cbcffcfb1","Комбинированная упаковка: пластмассовый сосуд в ящике решетчатом (ИЛИ обрешетке) ИЗ алюминия");
		 НайтиФормуУпаковки("43c6ad00-832f-42c6-8e2a-fe2273814b66","Комбинированная упаковка: пластмассовый сосуд в ящике решетчатом (ИЛИ обрешетке) ИЗ стали");
		 НайтиФормуУпаковки("380c561e-749a-4408-88de-ad5399c8a53f","Комбинированная упаковка: стеклянный сосуд");
		 НайтиФормуУпаковки("2e460cc7-7c38-4bf4-aa19-7768cb14d234","Комбинированная упаковка: стеклянный сосуд в барабане алюминиевом");
		 НайтиФормуУпаковки("fa1d17e8-e12d-4544-9461-db80f49cfe4b","Комбинированная упаковка: стеклянный сосуд в барабане фанерном");
		 НайтиФормуУпаковки("40c8a0db-74c9-4190-9449-6f3f8ac2eaa7","Комбинированная упаковка: стеклянный сосуд в барабане фибровом");
		 НайтиФормуУпаковки("32936c38-e9fa-439b-8108-5b7e3c482f6c","Комбинированная упаковка: стеклянный сосуд в корзине плетеной с крышкой");
		 НайтиФормуУпаковки("4195a944-7c45-44e9-9cf9-d366386ad86e","Комбинированная упаковка: стеклянный сосуд в коробке деревянной");
		 НайтиФормуУпаковки("eabbfb7f-b3ea-4858-981a-201a18be8a0a","Комбинированная упаковка: стеклянный сосуд в коробке ИЗ фибрового картона");
		 НайтиФормуУпаковки("5a349e4c-ce4c-485e-81db-beec4aa09fa4","Комбинированная упаковка: стеклянный сосуд в пакете ИЗ твердой пластмассы");
		 НайтиФормуУпаковки("ce9f36bf-2f90-424c-b34f-e8715dd15e02","Комбинированная упаковка: стеклянный сосуд в пакете пенопластовом");
		 НайтиФормуУпаковки("57eeeadf-7c4b-4614-9731-6e47d4b273a9","Комбинированная упаковка: стеклянный сосуд в стальном барабане");
		 НайтиФормуУпаковки("6355c3ee-6d1c-4bc5-a6ff-2a808274f222","Комбинированная упаковка: стеклянный сосуд в ящике решетчатом (ИЛИ обрешетке) ИЗ алюминия");
		 НайтиФормуУпаковки("5893d315-48c8-49f7-9dc4-2dde43e090b9","Комбинированная упаковка: стеклянный сосуд в ящике решетчатом (ИЛИ обрешетке) ИЗ стали");
		 НайтиФормуУпаковки("b5cd2c76-152f-4d8f-a5c2-d196dd920426","Комплект");
		 НайтиФормуУпаковки("3cb38979-51da-44a5-8bdc-8f549bb0aa68","Конверт");
		 НайтиФормуУпаковки("dddd429e-0376-4030-bb9e-2ad9cba0f3c4","Конверт, стальной");
		 НайтиФормуУпаковки("d90e17f4-8bed-46be-a1d1-9bb7f0f4d736","Консоль Для оборудования, помещающаяся в минифургон");
		 НайтиФормуУпаковки("5d753d93-c512-4f55-8fc8-0c0f1461d6a0","Контейнер Для пищевых продуктов");
		 НайтиФормуУпаковки("9ef6b142-22e7-4a1c-bc5f-7945dc5a654f","Контейнер металлический");
		 НайтиФормуУпаковки("d273dbfd-c8ed-4637-9ad2-5e40d7ecbf3a","Контейнер наружный");
		 НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8","Контейнер средней грузоподъемности Для массовых грузов");
		 НайтиФормуУпаковки("b86afba4-7492-4910-b266-6ab67235095c","Контейнер средней грузоподъемности Для массовых грузов алюминиевый");
		 НайтиФормуУпаковки("6505c314-3e58-496e-becc-9ee71c08eacc","Контейнер средней грузоподъемности Для массовых грузов алюминиевый герметизированный свыше 10 КПа");
		 НайтиФормуУпаковки("caeda84d-f591-4ca8-888f-2b0857d6d66a","Контейнер средней грузоподъемности Для массовых грузов бумажный многослойный");
		 НайтиФормуУпаковки("566c12fc-5fc1-4189-8fc4-f4ff072c4897","Контейнер средней грузоподъемности Для массовых грузов бумажный многослойный влагонепроницаемый");
		 НайтиФормуУпаковки("800fc586-864c-4c29-ae15-d0d405e5d82a","Контейнер средней грузоподъемности Для массовых грузов герметизированный 10 Кпа");
		 НайтиФормуУпаковки("3a762c62-7b9e-4ccc-95e7-50fed26da877","Контейнер средней грузоподъемности Для массовых грузов герметизированный свыше 10 КПа");
		 НайтиФормуУпаковки("1061b465-9f46-48ba-8939-e4e14afd6270","Контейнер средней грузоподъемности Для массовых грузов гибкий");
		 НайтиФормуУпаковки("e143c99a-f5c3-4e66-a50b-52a5cabc6325","Контейнер средней грузоподъемности Для массовых грузов ИЗ древесного материала");
		 НайтиФормуУпаковки("828064d7-80be-4ba4-a13c-7a17476e763e","Контейнер средней грузоподъемности Для массовых грузов ИЗ древесного материала с внутренним вкладышем");
		 НайтиФормуУпаковки("057ea6ec-aab1-4e2c-be58-f976fd3bbb37","Контейнер средней грузоподъемности Для массовых грузов ИЗ естественной древесины");
		 НайтиФормуУпаковки("c5f0a52e-2496-45f0-9c5d-0cca7c1643a1","Контейнер средней грузоподъемности Для массовых грузов ИЗ естественной древесины с внутренним вкладышем");
		 НайтиФормуУпаковки("5cea30bc-bd13-4c2a-af79-90a2e1804b07","Контейнер средней грузоподъемности Для массовых грузов ИЗ жесткой пластмассы");
		 НайтиФормуУпаковки("e729238b-88ff-4991-a67e-8ec66cded23c","Контейнер средней грузоподъемности Для массовых грузов ИЗ жесткой пластмассы автономный герметизированный");
		 НайтиФормуУпаковки("2b58bc8f-b007-4ef4-808b-a4eedc9df54c","Контейнер средней грузоподъемности Для массовых грузов ИЗ жесткой пластмассы с конструкционным оснащением герметизированный");
		 НайтиФормуУпаковки("c159513f-dcf5-4402-ab16-8a1970e7b9d4","Контейнер средней грузоподъемности Для массовых грузов ИЗ пластикового волокна с покрытием И вкладышем");
		 НайтиФормуУпаковки("92765566-620c-4877-a58f-4107c3c6d468","Контейнер средней грузоподъемности Для массовых грузов ИЗ полимерной пленки");
		 НайтиФормуУпаковки("9c415e68-6f34-4e5c-81c2-696e994a77cc","Контейнер средней грузоподъемности Для массовых грузов ИЗ полимерной ткани без покрытия/вкладыша");
		 НайтиФормуУпаковки("fed6b6cb-60b7-4df5-b81e-37b7a2b2a24e","Контейнер средней грузоподъемности Для массовых грузов ИЗ полимерной ткани с вкладышем");
		 НайтиФормуУпаковки("3d3bf9e3-12bb-4f0c-82ab-c79df71fcfdf","Контейнер средней грузоподъемности Для массовых грузов ИЗ полимерной ткани с покрытием");
		 НайтиФормуУпаковки("778afe34-03a9-4255-89ce-78229c9d233c","Контейнер средней грузоподъемности Для массовых грузов ИЗ прочего металла, кроме стали");
		 НайтиФормуУпаковки("5a86d172-8b82-4992-b88c-8b1f80765ff5","Контейнер средней грузоподъемности Для массовых грузов ИЗ фибрового картона");
		 НайтиФормуУпаковки("769f3e00-3bc6-4b59-b201-8972cd649ccc","Контейнер средней грузоподъемности Для массовых грузов металлический");
		 НайтиФормуУпаковки("fab06db6-977d-48df-8822-fb5ef954434c","Контейнер средней грузоподъемности Для массовых грузов составной");
		 НайтиФормуУпаковки("a3ee4967-a24f-4815-8f07-9d49ffe1de53","Контейнер средней грузоподъемности Для массовых грузов составной ИЗ гибкой пластмассы герметизированный");
		 НайтиФормуУпаковки("fee9277d-adb9-4af6-aae9-3117412de104","Контейнер средней грузоподъемности Для массовых грузов составной ИЗ жесткой пластмассы герметизированный");
		 НайтиФормуУпаковки("a14e9f47-e745-4fb5-861e-642b8da576d9","Контейнер средней грузоподъемности Для массовых грузов стальной");
		 НайтиФормуУпаковки("cb247727-4eaf-49dd-85cf-6e2dd7f2a3ab","Контейнер средней грузоподъемности Для массовых грузов текстильный без покрытия/вкладыша");
		 НайтиФормуУпаковки("5c416509-50d7-464b-9455-9439604c2479","Контейнер средней грузоподъемности Для массовых грузов текстильный с вкладышем");
		 НайтиФормуУпаковки("111583f5-39e6-4b45-a941-b67d41ef4cae","Контейнер средней грузоподъемности Для массовых грузов текстильный с покрытием");
		 НайтиФормуУпаковки("0d51ebba-b636-4a01-9a3a-e1f10fcc73df","Контейнер средней грузоподъемности Для массовых грузов текстильный с покрытием И вкладышем");
		 НайтиФормуУпаковки("6bc17666-63d7-49fd-9a82-fd98ff408dff","Контейнер средней грузоподъемности Для массовых грузов фанерный");
		 НайтиФормуУпаковки("8015c596-6a81-40bc-bfca-f5961327bca4","Контейнер средней грузоподъемности Для массовых грузов фанерный с внутренним вкладышем");
		 НайтиФормуУпаковки("a41e2a9a-d9f8-43f7-8781-15da3e5713d8","Контейнер средней грузоподъемности Для наливных грузов алюминиевый");
		 НайтиФормуУпаковки("4dfaab91-aacd-4a1b-a052-f40f873e6a46","Контейнер средней грузоподъемности Для наливных грузов ИЗ жесткой пластмассы автономный");
		 НайтиФормуУпаковки("5389a88d-8a7d-4fc6-9758-4205df09bd30","Контейнер средней грузоподъемности Для наливных грузов ИЗ жесткой пластмассы с конструкционным оснащением");
		 НайтиФормуУпаковки("ceb9b05c-6a68-4663-ae9a-72c1f38e1ef8","Контейнер средней грузоподъемности Для наливных грузов металлический");
		 НайтиФормуУпаковки("dd97947e-4e78-41df-a4ef-1f34346db79e","Контейнер средней грузоподъемности Для наливных грузов составной ИЗ гибкой пластмассы");
		 НайтиФормуУпаковки("f9c0a4b5-0576-4aeb-9822-0a85f59b4c7f","Контейнер средней грузоподъемности Для наливных грузов составной ИЗ жесткой пластмассы");
		 НайтиФормуУпаковки("517d28bb-afa9-4a66-87e7-b707121a70fb","Контейнер средней грузоподъемности Для наливных грузов стальной");
		 НайтиФормуУпаковки("690e086c-89b8-4c17-8838-4478d4c2e4eb","Контейнер средней грузоподъемности Для твердых навалочных/насыпных грузов ИЗ жесткой пластмассы автономный");
		 НайтиФормуУпаковки("c979e057-03e8-4dda-8fcd-3dba27e4dfc5","Контейнер средней грузоподъемности Для твердых навалочных/насыпных грузов ИЗ жесткой пластмассы с конструкционным оснащением");
		 НайтиФормуУпаковки("9eba63f1-0e89-47a1-b75a-8c0cb099af3d","Контейнер средней грузоподъемности Для твердых навалочных/насыпных грузов составной ИЗ гибкой пластмассы");
		 НайтиФормуУпаковки("3850fb20-746c-4001-827c-5825630f7ce7","Контейнер средней грузоподъемности Для твердых навалочных/насыпных грузов составной ИЗ жесткой пластмассы");
		 НайтиФормуУпаковки("4258d946-8f37-43ac-90c2-ab29814daaeb","Контейнер, галлон");
		 НайтиФормуУпаковки("0239b3d5-ec19-498f-9379-013e4df8c882","Контейнер, гибкий");
		 НайтиФормуУпаковки("8f20bf8f-afd5-4e30-9e6b-b664f3973c16","Контейнер, прочее транспортировочное оборудование, кроме поименованного");
		 НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8","Корзина");
		 НайтиФормуУпаковки("2bbef079-d872-469a-9a38-37101bba2e07","Корзина ИЗ шпона Для ягод И фруктов");
		 НайтиФормуУпаковки("4be2b716-28a4-4d33-8d3e-266ce1e34942","Корзина с крышкой");
		 НайтиФормуУпаковки("497050a3-b994-4ba4-badd-8b7fd98426ac","Корзина с ручкой ИЗ древесины");
		 НайтиФормуУпаковки("02684a03-6f18-43d0-b79d-3ce05d562435","Корзина с ручкой, картонная");
		 НайтиФормуУпаковки("ecd94698-e572-4b54-91a8-54bccd9f5644","Корзина с ручкой, пластмассовая");
		 НайтиФормуУпаковки("e3c233ff-30d4-4ee1-89ac-c19062f1a09d","Корзина, рыбацкая");
		 НайтиФормуУпаковки("2b91c7f0-2705-40a1-a180-64e20626a2a0","Короб деревянный (лифтван) размером около 220 см (длина) x 115 см (ширина) x 220 см (высота)");
		 НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8","Коробка");
		 НайтиФормуУпаковки("5a5960a3-121e-4da1-8437-130b3cbc55c6","Коробка (многооборотная) ИЗ Общего фонда транспортировочного оборудования ЕС, Еврокоробка");
		 НайтиФормуУпаковки("ff3bfc50-0b9f-47cc-ada2-ac40a4a18cc0","Коробка деревянная ИЗ естественной древесины обыкновенная");
		 НайтиФормуУпаковки("fddc5698-8738-460f-b603-f49c7053b473","Коробка деревянная ИЗ естественной древесины с плотно пригнанными стенками");
		 НайтиФормуУпаковки("77b8f79a-6a69-4b4f-b0b2-a8a9f0f4ca12","Коробка Для жидкостей");
		 НайтиФормуУпаковки("9f0f9e11-cce0-4484-9a50-bc4fed7ee1e9","Коробка ИЗ древесного материала");
		 НайтиФормуУпаковки("89f4e420-504e-4b2e-9291-ae483d7e9bdd","Коробка ИЗ естественной древесины");
		 НайтиФормуУпаковки("8b1ffe26-1485-477f-8d2d-8050397beab2","Коробка ИЗ твердой пластмассы");
		 НайтиФормуУпаковки("aa308c04-0fe0-4a87-ab8c-7527b3f261f4","Коробка ИЗ фибрового картона");
		 НайтиФормуУпаковки("56e38905-209b-43cc-ac8f-3657f5ec2bdc","Коробка, алюминиевая");
		 НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8","Коробка, картонная");
		 НайтиФормуУпаковки("50c21cb9-3e09-4cc7-a30f-c724d248e996","Коробка, пенопластовая");
		 НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660","Коробка, пластмассовая");
		 НайтиФормуУпаковки("9c0e3d26-e6c5-4b8e-bb47-0a4ecf8867a3","Коробка, стальная");
		 НайтиФормуУпаковки("2c76df5b-bdf1-4c36-b136-41240961deb0","Коробка, фанерная");
		 НайтиФормуУпаковки("890d2d2d-9ed5-40a5-8d6f-bad8546bfee4","Кофр");
		 НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8","Крюк");
		 НайтиФормуУпаковки("3ae14a0a-3970-45ef-bd53-f278e217bf4f","Кувшин, большой");
		 НайтиФормуУпаковки("548062b8-8f49-4fe2-8e93-d6c5103a9113","Кувшин, маленький");
		 НайтиФормуУпаковки("5444b894-aa2b-456f-aa27-e1f470568338","Кулек");
		 НайтиФормуУпаковки("62120ab7-da8c-46f5-8d06-8cb3f9376a13","Лента");
		 НайтиФормуУпаковки("b9dec3d6-c0d8-4170-8b57-2f79042b9a8d","Лист");
		 НайтиФормуУпаковки("b883ff05-483d-4e82-be5f-c1b90d004d1c","Лист в пакете/пачке/связке");
		 НайтиФормуУпаковки("a2e60b9e-ee4d-47b5-956b-690bda852392","Лист с пластмассовым покрытием");
		 НайтиФормуУпаковки("d6831ad1-3dc9-48d0-8c92-402db32c4031","Лист, металлический");
		 НайтиФормуУпаковки("e49e5e21-09f1-4194-b637-655959ce5510","Лист, прокладной");
		 НайтиФормуУпаковки("3d72e4ec-f771-4c0d-a9b9-452dd7a08406","Лоток");
		 НайтиФормуУпаковки("ea504ad8-c159-449f-a752-1ab2eecc8fe1","Лоток");
		 НайтиФормуУпаковки("a5c9db95-0858-401c-a0f8-f1e17f44c156","Лоток с двумя настилами без покрытия деревянный");
		 НайтиФормуУпаковки("816aecc8-f89d-4bce-add3-bcea3782ebfa","Лоток с двумя настилами без покрытия картонный");
		 НайтиФормуУпаковки("2834ba2d-8030-4b5d-8812-186ff267f89c","Лоток с двумя настилами без покрытия пластмассовый");
		 НайтиФормуУпаковки("d5122def-d46e-4989-b845-9ed0754c2a07","Лоток с одним настилом без покрытия деревянный");
		 НайтиФормуУпаковки("b6b93b6c-286a-4c49-b646-bef408d4cf8b","Лоток с одним настилом без покрытия картонный");
		 НайтиФормуУпаковки("3614ce14-9970-453c-81df-9645c4c5fe2c","Лоток с одним настилом без покрытия пластмассовый");
		 НайтиФормуУпаковки("9c27dc4c-875d-4de5-af1f-d6d066e0d88f","Лоток с одним настилом без покрытия полистироловый");
		 НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8","Мешок");
		 НайтиФормуУпаковки("c8bc51d4-de57-44ee-9492-85360eada3a5","Мешок");
		 НайтиФормуУпаковки("803b1dd4-ea8b-464e-9f7e-1bfa573c90bc","Мешок (куль)");
		 НайтиФормуУпаковки("a71f0123-63c4-440b-bce8-eb46d7a854e2","Мешок (куль) многослойный");
		 НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8","Мешок большой");
		 НайтиФормуУпаковки("933312a8-dc11-43ee-9daa-abb240bf9e3f","Мешок большой Для крупноразмерных навалочных грузов");
		 НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8","Мешок бумажный многослойный");
		 НайтиФормуУпаковки("9f15aaba-d9e1-43ea-8cc7-0f0a29ed7be8","Мешок бумажный многослойный влагонепроницаемый");
		 НайтиФормуУпаковки("87da1e8c-2d92-4de6-8448-6ab233f3847e","Мешок ИЗ мешковины");
		 НайтиФормуУпаковки("5080bd27-e2b5-4c27-9cb0-7004109f362f","Мешок ИЗ полимерной пленки");
		 НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8","Мешок ИЗ полимерной ткани");
		 НайтиФормуУпаковки("c088e3b0-4d1f-4079-8ce3-eca7486da24f","Мешок ИЗ полимерной ткани без внутреннего покрытия/вкладыша");
		 НайтиФормуУпаковки("8d2b467f-d19a-49ad-9d4d-9769fc8adb68","Мешок ИЗ полимерной ткани влагонепроницаемый");
		 НайтиФормуУпаковки("c311b4f0-1f83-47ff-b5eb-085aa296a443","Мешок ИЗ полимерной ткани, плотный");
		 НайтиФормуУпаковки("f8296670-1b9b-42fa-9e29-76dc5ba0a8c0","Мешок текстильный");
		 НайтиФормуУпаковки("e50c3c66-a104-46d2-bf1c-b1fb6f649698","Мешок текстильный без внутреннего покрытия/вкладыша");
		 НайтиФормуУпаковки("84b62344-fe4f-4585-bdf2-efb3bc68d982","Мешок текстильный влагонепроницаемый");
		 НайтиФормуУпаковки("c97033bd-2cf6-4029-a570-0a59b238e68b","Мешок текстильный плотный");
		 НайтиФормуУпаковки("8bb62b02-1b8b-4d1e-8886-93c9484fa5c2","Мешок, большой");
		 НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8","Мешок, бумажный");
		 НайтиФормуУпаковки("fdbf9ad8-68d8-49ee-814f-b7d76d806545","Мешок, гибкий контейнер");
		 НайтиФормуУпаковки("198ddc36-88da-4659-a5a6-d9acb8416d9d","Мешок, джутовый");
		 НайтиФормуУпаковки("501e2c46-d364-44f5-9f7f-c9697115e4fd","Мешок, пластмассовый");
		 НайтиФормуУпаковки("e806470b-dcf2-447e-8394-b4144b9138df","Мешок, рогожный");
		 НайтиФормуУпаковки("577431f6-7f08-4f20-af71-7ede3ac2a564","Мягкий мешок, Гибкая цистерна");
		 НайтиФормуУпаковки("d2aeda76-b593-42c6-b6b0-dc1c8338dc54","Набор");
		 НайтиФормуУпаковки("3050ca0a-7e39-4cd4-a762-253b981bad21","Навалом металлолом");
		 НайтиФормуУпаковки("a521f8b3-eeeb-4027-941c-45928d0ecb16","Наливом газ (при 1031 мБар И 15°C)");
		 НайтиФормуУпаковки("791bd3df-24eb-466f-b575-57d9dd1f95b7","Наливом газ сжиженный (при температуре/давлении, отличающихся от нормальных)");
		 НайтиФормуУпаковки("22f90a6e-6872-4bd5-a143-063761da6e1a","Наливом жидкость");
		 НайтиФормуУпаковки("f8ca4252-9ca3-45bd-9a95-8b6a5b538208","Насыпью твердые гранулированные частицы (гранулы)");
		 НайтиФормуУпаковки("df053993-cf00-43c9-97ea-4c2fa0d07f96","Насыпью твердые крупные частицы (мелкие куски)");
		 НайтиФормуУпаковки("efb4b760-611d-4f20-80a8-273c315f4db0","Насыпью твердые мелкие частицы (порошки)");
		 НайтиФормуУпаковки("0e254eeb-d882-425d-85cf-ae68b8e50980","Нет сведений");
		 НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8","Неупакованный ИЛИ нерасфасованный");
		 НайтиФормуУпаковки("3fd40265-127d-4fc6-9999-1cdf62f25faf","Неупакованный ИЛИ нерасфасованный многоместный груз");
		 НайтиФормуУпаковки("2def57e9-6280-4d7d-8765-840aa86e45e1","Неупакованный ИЛИ нерасфасованный одноместный груз");
		 НайтиФормуУпаковки("ed9473f1-647c-4dfc-8ac2-3cba09217165","Октабин");
		 НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8","Пакет");
		 НайтиФормуУпаковки("cd449f46-29f4-42af-8d36-046f0954ae63","Пакет (мешочек)");
		 НайтиФормуУпаковки("f0b0ec9b-8341-4e95-bc0e-80898be598cb","Пакет (пачка/связка)");
		 НайтиФормуУпаковки("6fddb358-43dd-4030-a1a7-a1a3c8c489ad","Пакет бумажный многослойный");
		 НайтиФормуУпаковки("cf45058e-1f10-42fa-ae97-b2afefac9489","Пакетик");
		 НайтиФормуУпаковки("63c5ba04-a314-4d41-9a0f-d328fba0144a","Пачка (пакет/связка)");
		 НайтиФормуУпаковки("aeba3537-a7ed-4c11-8cfc-a05de5280f73","Пачка деревянная");
		 НайтиФормуУпаковки("240ef107-fad5-4fca-bad1-ae65ab388ac6","Плита");
		 НайтиФормуУпаковки("4b2de153-2c3e-499e-91f8-a7ce1926157a","Плиты в пакете/пачке/связке");
		 НайтиФормуУпаковки("a8e05c09-1c89-46a8-8362-b2388f820fdb","По взаимному определению");
		 НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8","Поддон");
		 НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8","Поддон");
		 НайтиФормуУпаковки("83ee9a1e-5c1c-438b-bb63-48ed654e63ef","Поддон 100 x 110 см");
		 НайтиФормуУпаковки("280069cf-3cff-4cb3-a96d-5632944e3f9c","Поддон в термоусадочной пленке");
		 НайтиФормуУпаковки("d520e4b3-dd9b-4f34-9148-ccac220b9c84","Поддон деревянный");
		 НайтиФормуУпаковки("82286818-b97d-42ef-b5e2-d1a1ac1c18cf","Поддон модульный с обечайкой 80 x 100 см");
		 НайтиФормуУпаковки("d1d65e12-85c6-4492-8407-de44d792ac1f","Поддон модульный с обечайкой 80 x 60 см");
		 НайтиФормуУпаковки("d79600b3-7498-4a9b-a873-d58fce2a667d","Поддон модульный с обечайкой 80 х 120 см");
		 НайтиФормуУпаковки("d9d55e79-0ba6-4c11-9761-0e10dc1c6c8e","Поддон, ящичный");
		 НайтиФормуУпаковки("81b74091-f9db-436f-b6a9-2438f3fbba32","Прут");
		 НайтиФормуУпаковки("cfc437d8-9bfe-4d56-8d0e-4f35e5ae3af6","Прут в пакете/пачке/связке");
		 НайтиФормуУпаковки("c91b91dc-6dff-49f6-90eb-19824f81b675","Пульверизатор");
		 НайтиФормуУпаковки("770d2025-1d5e-463a-82bc-ce7bceb3cc90","Рама");
		 НайтиФормуУпаковки("2d523fde-44a2-4c21-891b-4bccdcb1a33e","Рулон (обивочного ИЛИ настилочного материала)");
		 НайтиФормуУпаковки("f65e0788-1ba1-46f5-b677-d7590cc6c745","Рулон (полосового материала)");
		 НайтиФормуУпаковки("07aa7b0e-2a80-45ba-b3bd-6060eef8376b","Связка");
		 НайтиФормуУпаковки("ed7372ee-8b55-4e69-aa90-956a68b836ae","Сетка");
		 НайтиФормуУпаковки("5f3d0b50-196e-498d-8994-7dfd1d9661cc","Сетка типа используемой Для овощей ИЛИ фруктов");
		 НайтиФормуУпаковки("fe9cc400-101e-4dee-a90f-705c71bb560e","Сетка трубчатая пластмассовая");
		 НайтиФормуУпаковки("1943c156-b96c-4b64-8935-dfd11e95d495","Сетка трубчатая текстильная");
		 НайтиФормуУпаковки("29f1456b-e328-4f1b-b855-41eda829a9e1","Слитки в пакете/пачке/связке");
		 НайтиФормуУпаковки("c954a839-e145-40f0-8945-de8e4faad748","Слиток");
		 НайтиФормуУпаковки("000000f8-8e27-4cb0-9e34-6d99fd90d7df","Сляб");
		 НайтиФормуУпаковки("322566af-9e46-4f63-bf22-041d4d2d9c58","Сосуд с пластмассовым покрытием");
		 НайтиФормуУпаковки("bc592630-266f-425c-be8b-911425c04ccf","Сосуд, бумажный");
		 НайтиФормуУпаковки("a7a51764-3c6d-4dec-997d-c5b08d8e2d74","Сосуд, деревянный");
		 НайтиФормуУпаковки("0509b85d-01ca-4a62-bc40-283eff6ead2d","Сосуд, металлический");
		 НайтиФормуУпаковки("876203e4-1352-455a-8c97-92c3460acc3a","Сосуд, пластмассовый");
		 НайтиФормуУпаковки("251a4096-c3d6-4b0c-8534-65b31d41f633","Сосуд, стеклянный");
		 НайтиФормуУпаковки("ef542239-f46a-4552-a332-db330f73b646","Сосуд, фибровый");
		 НайтиФормуУпаковки("6bcddbae-2d7b-455c-83b3-6a65731d4e9f","Спичечный коробок");
		 НайтиФормуУпаковки("2f2ba5e2-c9ab-41af-83d8-592f65c01db4","Стеллаж");
		 НайтиФормуУпаковки("2d3b2408-d028-42e1-bc72-941b7fa149b5","Стойка");
		 НайтиФормуУпаковки("28f26068-5294-4c8a-b409-c0a7ae10efd9","Стойка, вешалка Для одежды");
		 НайтиФормуУпаковки("ed6ec9a4-fb93-420a-9e1d-884aa58849c4","Сундук");
		 НайтиФормуУпаковки("bf12e4f9-56be-4b62-a0d6-22f01585db25","Сундук, дорожный");
		 НайтиФормуУпаковки("022887ce-8f39-4b81-b26e-785f114c7ac7","Сундук, морской");
		 НайтиФормуУпаковки("dbff7b51-2571-451e-bf15-66e2ceed2fcb","Сундучок");
		 НайтиФормуУпаковки("730968d5-30e1-4cc8-b413-d5997e8898a5","Таблетка");
		 НайтиФормуУпаковки("7c585ad5-34f3-4975-a0aa-a78229e71808","Труба");
		 НайтиФормуУпаковки("f5144819-a94a-486d-91d7-eb38a074c6c1","Труба в пакете/пачке/связке");
		 НайтиФормуУпаковки("06eb9e3a-d6a8-49c3-809a-b4150b90e210","Трубка ИЛИ туба");
		 НайтиФормуУпаковки("54d1cc31-f51c-4e2a-9230-009c57aaa517","Трубка ИЛИ туба в пакете/пачке/связке");
		 НайтиФормуУпаковки("0c009153-57e0-4dfa-8e5f-ece82ae4dfef","Трубка ИЛИ туба с насадкой");
		 НайтиФормуУпаковки("6858e1ff-229f-43e0-9b3b-dd6ac0b41485","Трубка ИЛИ туба, складывающаяся");
		 НайтиФормуУпаковки("eb23a947-4fd9-46e6-8a6f-f258433500e7","Упаковка");
		 НайтиФормуУпаковки("7ca4b4f3-fcac-4c00-8d7a-b258acaa97f0","Упаковка в оберточной бумаге");
		 НайтиФормуУпаковки("b5dd6d4d-b99e-4245-8a92-abc119e1889f","Упаковка демонстрационная деревянная");
		 НайтиФормуУпаковки("67129e5f-36d2-4397-8122-0c18747d2344","Упаковка демонстрационная картонная");
		 НайтиФормуУпаковки("add23067-88c7-4cc0-a251-8c67953d00ce","Упаковка демонстрационная металлическая");
		 НайтиФормуУпаковки("dfe5cf21-dbc5-4f51-b7fd-ad45259f9677","Упаковка демонстрационная пластмассовая");
		 НайтиФормуУпаковки("c2645eda-085d-4ae7-bfc2-641fc380ebae","Упаковка картонная с отверстиями Для бутылок");
		 НайтиФормуУпаковки("9b0b180a-7cbb-4d9a-ba41-fd08b0eae3ba","Упаковка, выпрессованная");
		 НайтиФормуУпаковки("ec874c34-8d51-4e04-bd2c-9ec9642d1e0e","Упаковка, выставочная");
		 НайтиФормуУпаковки("a283d481-0a41-4d0a-9c38-e386caac0d70","Флакон");
		 НайтиФормуУпаковки("2ca9172d-edad-4d6f-a4b8-e4fbaae098cb","Фляга");
		 НайтиФормуУпаковки("07c59e7c-4a8c-4035-8048-2847491c88ea","Цилиндр");
		 НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8","Цистерна контейнер универсальный");
		 НайтиФормуУпаковки("a5e4fb2f-f40b-40ab-bd2d-f6ddabbd4460","Цистерна, прямоугольная");
		 НайтиФормуУпаковки("6fd54b8c-d35a-4655-b2f2-2491429b0931","Цистерна, цилиндрическая");
		 НайтиФормуУпаковки("59eac884-a3ee-4c87-86ef-2508d1328ee6","Чайная коробка");
		 НайтиФормуУпаковки("6eb46a7f-f1c0-49fd-b38c-47c8177aa9e1","Чан");
		 НайтиФормуУпаковки("bfbecab2-acff-4791-8f4f-b03d435d00c8","Чаша");
		 НайтиФормуУпаковки("8f4c7cbd-7d4a-48d6-873f-9f4a37bd576c","Чемодан");
		 НайтиФормуУпаковки("354aee98-06a3-4780-bc9a-00a57edd8ca7","Чехол");
		 НайтиФормуУпаковки("62f322c4-ce6d-4584-ba3f-4c771406f54d","Шар");
		 НайтиФормуУпаковки("0bf57833-4b9d-4d99-96a3-53c7263e01e6","Шина");
		 НайтиФормуУпаковки("dd7b8b5b-fcf3-46bf-9955-e2c5f9cc25f6","Шпиндель");
		 НайтиФормуУпаковки("969bfad0-be8f-43fe-84d8-32ebfe32d37d","Шпулька");
		 НайтиФормуУпаковки("25b9eab3-0f9f-42c1-912b-10f78bc63901","Штабель");
		 НайтиФормуУпаковки("6090531d-d038-4f6c-a8df-77ba92267ec4","Штука");
		 НайтиФормуУпаковки("bd8a4719-4595-4e82-a2e6-9ea20afcbf6e","Ящик");
		 НайтиФормуУпаковки("7c29a864-e469-4c64-89e7-153000939d61","Ящик");
		 НайтиФормуУпаковки("563fadd5-faa2-4d28-9139-1f23e08ae0af","Ящик автомобильный");
		 НайтиФормуУпаковки("61079f21-ef62-44bc-97a7-817029f4d251","Ящик деревянный");
		 НайтиФормуУпаковки("3d01bd9f-6629-4ec1-9ebe-532d82379a14","Ящик деревянный");
		 НайтиФормуУпаковки("d8f7a02c-5076-41a2-9258-cca3427993b4","Ящик металлический");
		 НайтиФормуУпаковки("668f1a9f-3b4c-496a-8c01-c6d1bd87d917","Ящик решетчатый (ИЛИ обрешетка) мелкий");
		 НайтиФормуУпаковки("aabbf190-ba1f-4611-8a97-6ce660a1dbc3","Ящик решетчатый (ИЛИ обрешетка) многослойный деревянный");
		 НайтиФормуУпаковки("f1a52766-b434-4e89-8440-60ba8df518c3","Ящик решетчатый (ИЛИ обрешетка) многослойный картонный");
		 НайтиФормуУпаковки("5fc55705-10dd-4071-a5ec-bd2337e98b95","Ящик решетчатый (ИЛИ обрешетка) многослойный пластмассовый");
		 НайтиФормуУпаковки("c1444369-7a47-4e53-8e62-c33c290d73c2","Ящик решетчатый (ИЛИ обрешетка) рамный");
		 НайтиФормуУпаковки("fe47d256-3d2b-4460-87e3-349ee65f6ac0","Ящик решетчатый Для бутылок");
		 НайтиФормуУпаковки("e879ae24-cac7-4dd1-a0e5-1d433b3493ab","Ящик решетчатый Для массовых грузов деревянный");
		 НайтиФормуУпаковки("ebf8776f-0e3d-4aff-bc64-28fb6e93a6fb","Ящик решетчатый Для массовых грузов картонный");
		 НайтиФормуУпаковки("7c4ea86f-477d-499e-b9b5-281c8d7cb2a5","Ящик решетчатый Для массовых грузов пластмассовый");
		 НайтиФормуУпаковки("dcf6eeb2-a0fd-4f1c-83db-7a85354a7c84","Ящик решетчатый Для молока");
		 НайтиФормуУпаковки("9e2b9bfb-8f54-4a66-ad38-d650ca479e44","Ящик решетчатый Для пива");
		 НайтиФормуУпаковки("3ea227b5-df09-40c2-b802-8abd1427c73e","Ящик решетчатый Для фруктов");
		 НайтиФормуУпаковки("93266aa3-4642-4162-8155-01851a5c0811","Ящик с поддоном");
		 НайтиФормуУпаковки("a106dd9b-f9ee-45d6-a4f7-d8c18a1c53ea","Ящик с поддоном деревянный");
		 НайтиФормуУпаковки("dbb7a1d0-aa1f-4141-90e2-1db559dd20f7","Ящик с поддоном картонный");
		 НайтиФормуУпаковки("4ad07608-39ee-4991-baac-9cd2bdb5b2b0","Ящик с поддоном металлический");
		 НайтиФормуУпаковки("215592ec-b08d-401b-800d-d36bda9ba0b5","Ящик с поддоном пластмассовый");
		 НайтиФормуУпаковки("a451a297-b510-48fc-8a31-a41e311a0d82","Ящик, изотермический");
		 НайтиФормуУпаковки("5bca0d26-c06d-4fbd-a75a-39b098f7a5d8","Ящик, каркасный");
		 НайтиФормуУпаковки("e2437340-c529-4655-9774-c61054d429a5","Ящик, решетчатый (ИЛИ обрешетка)");
		 НайтиФормуУпаковки("a4992438-8d0c-45b2-9ffd-669dff708417","Ящик, стальной");
		
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	    СообщитьИнфо("ВСД_ФормыУпаковки загрузка завершена");
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ВСД_ФормыУпаковки '"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	
		СообщитьИнфо("Ошибка при получении ВСД_ФормыУпаковки ");
		СообщитьИнфо(ОписаниеОшибки());
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
			
	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
	
КонецПроцедуры

#КонецОбласти

#Область КлассификаторАдресов
#Область Страны

Функция НайтиСтрануПоGUID(_GUID, name) Экспорт

	Ответ = Неопределено;
	_GUID = СокрЛП(_GUID);
	Если НЕ ПустаяСтрока(_GUID) Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Страна.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Страна КАК ВСД_Страна
		                      |ГДЕ
		                      |	ВСД_Страна.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", _GUID );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			СообщитьИнфо("ВСД_Страна ["+name+"] GUID ["+_GUID+"] добавлена");
			Спр = Справочники.ВСД_Страна.СоздатьЭлемент();
			Спр.Наименование = name;
			Спр.GUID = _GUID;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Страна");
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ЗагрузитьСтраны_ЗапросXML( )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/ikar/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getAllCountryListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|    </ws:getAllCountryListRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Процедура ИнициализацияХС_ЗагрузитьСтраны_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	
	Ответ = ИнициализацияХС_ЗагрузитьСтраны( Параметры );
	
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 

Функция ИнициализацияХС_ЗагрузитьСтраны( Параметры ) Экспорт
	
	ПометитьНаУдалениеСправочник("ВСД_Страна");
	
	СообщитьИнфо("Запрос GetAllCountryList ");		
	ЗапросXML = ЗагрузитьСтраны_ЗапросXML();
    Service = "platform/ikar/services/IkarService";
    Action = "GetAllCountryList";

	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		countryList = xdto.Body.getAllCountryListResponse.countryList.country;
		Для каждого country ИЗ countryList Цикл		
				
			guid = country.guid;
			_uuid = country.uuid;
			name = country.name;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Страна.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Страна КАК ВСД_Страна
		                      |ГДЕ
		                      |	ВСД_Страна.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				СпрОбъект = Ответ.ПолучитьОбъект();
				СпрОбъект.Наименование = name;
				СпрОбъект.GUID = guid;
				СпрОбъект.UUID = _UUID;
				СпрОбъект.Записать();
				СообщитьИнфо("ВСД_Страна ["+name+"] GUID ["+guid+"] изменена", СпрОбъект.Ссылка);
				СпрОбъект.УстановитьПометкуУдаления(Ложь);
			Иначе
				
				СпрОбъект = Справочники.ВСД_Страна.СоздатьЭлемент();
				СпрОбъект.Наименование = name;
				СпрОбъект.GUID = guid;
				СпрОбъект.UUID = _UUID;
				СпрОбъект.Записать();
				СообщитьИнфо("ВСД_Страна ["+name+"] GUID ["+guid+"] добавлена", СпрОбъект.Ссылка);
				Ответ = СпрОбъект.Ссылка;
			КонецЕсли;		
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	
		Ответ = Истина;
	    СообщитьИнфо("Загрузка ВСД_Стран завершена");
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ВСД_Страны'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		
		Ответ = Ложь;
		СообщитьИнфо("Ошибка при получении ВСД_Страны "+ ОписаниеОшибки());
	КонецПопытки;
			
	Возврат Ответ;		
КонецФункции
#КонецОбласти

#Область Регион

Функция НайтиРегионПоGUID(GUID, name) Экспорт

	Ответ = Неопределено;
	Guid = СокрЛП(Guid);
	Если НЕ ПустаяСтрока(Guid) Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Регион.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Регион КАК ВСД_Регион
		                      |ГДЕ
		                      |	ВСД_Регион.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			СообщитьИнфо("ВСД_Регион ["+name+"] GUID ["+guid+"] добавлена");
			Спр = Справочники.ВСД_Регион.СоздатьЭлемент();
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Регион");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ЗагрузитьРегионы_ЗапросXML( guid )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/ikar/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getRegionListByCountryRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <ikar:countryGuid>"+ guid +"</ikar:countryGuid>
	|    </ws:getRegionListByCountryRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Процедура ИнициализацияХС_ЗагрузитьРегионы_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	
	_Страна = Параметры["Страна"];
	
	Ответ = ИнициализацияХС_ЗагрузитьРегионы( Параметры, _Страна );
	
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 


Функция ИнициализацияХС_ЗагрузитьРегионы(Знач Параметры, _Страна ) Экспорт
		
	СообщитьИнфо("Запрос RegionListByCountry ["+СокрЛП(_Страна.GUID) +"]");		
	ЗапросXML = ЗагрузитьРегионы_ЗапросXML( _Страна.GUID );
    Service = "platform/ikar/services/IkarService";
    Action = "RegionListByCountry";

	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;	
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto) Тогда
		Возврат Ложь;
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		regionList = xdto.Body.getRegionListByCountryResponse.regionList.region;
		Для каждого region ИЗ regionList Цикл		
				
			guid = region.guid;
			_uuid = region.uuid;
			name = region.view;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Регион.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Регион КАК ВСД_Регион
		                      |ГДЕ
		                      |	ВСД_Регион.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				СпрОбъект = Ответ.ПолучитьОбъект();
				СпрОбъект.УстановитьПометкуУдаления(Ложь);
			Иначе
				СообщитьИнфо("ВСД_Регион ["+name+"] GUID ["+guid+"] добавлена");
				Спр = Справочники.ВСД_Регион.СоздатьЭлемент();
				Спр.Наименование = name;
				Спр.GUID = guid;
				Спр.UUID = _UUID;
				Спр.Записать();
				Ответ = Спр.Ссылка;
			КонецЕсли;		
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		Ответ = Истина;
	    СообщитьИнфо("ВСД_Регион загрузка завершена");
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ВСД_Регион'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		
		Ответ = Ложь;	
		СообщитьИнфо("Ошибка при получении ВСД_Регион "+ ОписаниеОшибки());
	КонецПопытки;
			
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Город

Функция НайтиГородПоGUID(GUID, name) Экспорт

	Ответ = Неопределено;
	Guid = СокрЛП(Guid);
	Если НЕ ПустаяСтрока(Guid) Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Город.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Город КАК ВСД_Город
		                      |ГДЕ
		                      |	ВСД_Город.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			СообщитьИнфо("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
			Спр = Справочники.ВСД_Город.СоздатьЭлемент();
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Город");
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

Функция ЗагрузитьГорода_ЗапросXML( guid )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/ikar/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getLocalityListByRegionRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <ikar:regionGuid>"+ guid +"</ikar:regionGuid>
	|    </ws:getLocalityListByRegionRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Процедура ИнициализацияХС_ЗагрузитьГорода_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	
	_Регион = Параметры["Регион"];
	
	Ответ = ИнициализацияХС_ЗагрузитьГорода( Параметры, _Регион );
	
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 

Функция ИнициализацияХС_ЗагрузитьГорода(Знач Параметры, _Регион ) Экспорт
		
	Если НЕ ЗначениеЗаполнено(_Регион.GUID) Тогда
		ВызватьИсключение("Пустое значение Регион.GUID");
	КонецЕсли;
	
	СообщитьИнфо(" Запрос GetLocalityListByRegion "+_Регион+" ["+СокрЛП(_Регион.GUID) +"]");		
	ЗапросXML = ЗагрузитьГорода_ЗапросXML( _Регион.GUID );
    Service = "platform/ikar/services/IkarService";
    Action = "GetLocalityListByRegion";

	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;	
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto) Тогда
		Возврат Ложь;
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		LocalityList = xdto.Body.getLocalityListByRegionResponse.LocalityList.Locality;
		Для каждого Locality ИЗ LocalityList Цикл		
				
			guid = Locality.guid;
			_uuid = Locality.uuid;
			name = Locality.view;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Город.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Город КАК ВСД_Город
		                      |ГДЕ
		                      |	ВСД_Город.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
			Иначе
				СообщитьИнфо("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
				Спр = Справочники.ВСД_Город.СоздатьЭлемент();
				Спр.Наименование = name;
				Спр.GUID = guid;
				Спр.UUID = _UUID;
				Спр.Записать();
				Ответ = Спр.Ссылка;
			КонецЕсли;		
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		Ответ = Истина;
	    СообщитьИнфо("ВСД_Город загрузка завершена");
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ВСД_Город'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();		
		Ответ = Ложь;
		СообщитьИнфо("Ошибка при получении ВСД_Город "+ ОписаниеОшибки());
	КонецПопытки;
			
	Возврат Ответ;
КонецФункции

#КонецОбласти

#Область  Районы
Функция ЗагрузитьРайоны_ЗапросXML( guid )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/ikar/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getDistrictListByRegionRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <ikar:regionGuid>"+ guid +"</ikar:regionGuid>
	|    </ws:getDistrictListByRegionRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьРайоны(Знач Параметры, АдресХранилища ) Экспорт
     _Регион = Параметры["Регион"];
	 
	 Если НЕ ЗначениеЗаполнено(_Регион.GUID) Тогда
		ВызватьИсключение("Пустое значение Регион.GUID");
	КонецЕсли;

	СообщитьИнфо(" Запрос GetDistrictListByRegion ["+СокрЛП(_Регион.GUID) +"]","i");

	ЗапросXML = ЗагрузитьРайоны_ЗапросXML( _Регион.GUID );	
    Service = "platform/ikar/services/IkarService";
    Action = "GetDistrictListByRegion";

	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;	
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto) Тогда
		Возврат Ложь;
	КонецЕсли;

	СообщитьИнфо("Загрузка завершена - нет кода");
КонецФункции

#КонецОбласти

#Область Улицы

Функция Список_Улиц_ЗапросXML( Город, Смещение )

	Запрос = "<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/ikar/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:getStreetListByLocalityRequest>
	|         <base:listOptions>
	|            <base:count>1000</base:count>
	|            <base:offset>"+Формат( Смещение, "ЧДЦ=0; ЧН=0; ЧГ=" )+"</base:offset>
	|         </base:listOptions>
	|         <ikar:localityGuid>" +СокрЛП(Город.GUID)+ "</ikar:localityGuid>
	|      </ws:getStreetListByLocalityRequest>
	|   </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	Возврат Запрос;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Площадки

Функция Площадка_НайтиПоGUID(Знач Параметры, guid, ХозСубъект=Неопределено, ОбновитьДанные=Ложь, СоздаватьНовый=Ложь)
	Ответ = Неопределено;
	Если НЕ ПустаяСтрока(Guid) Тогда			
		Запрос = Новый Запрос();
		ТекстЗапроса = "ВЫБРАТЬ
      	|	ВСД_Площадка.Ссылка
		|ИЗ
	    |	Справочник.ВСД_Площадка КАК ВСД_Площадка
	    |ГДЕ
	    |	ВСД_Площадка.GUID = &GUID
		|	@Отбор_по_ХС@
		| ";
		Если ЗначениеЗаполнено( ХозСубъект ) Тогда 
			ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "@Отбор_по_ХС@", " И ВСД_Площадка.ХозСубъект = &ВыбХозСубъект");
			Запрос.УстановитьПараметр("GUID_ХС", ХозСубъект.Guid );
			Запрос.УстановитьПараметр("ВыбХозСубъект", ХозСубъект );
		Иначе
			ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "@Отбор_по_ХС@", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Если ОбновитьДанные Тогда 
				Ответ = Площадка_ЗагрузитьПоGUID(Параметры, guid, ХозСубъект, Результат.Ссылка);	
			Иначе
				Ответ = Результат.Ссылка;
			КонецЕсли;
		Иначе			
			Если ОбновитьДанные ИЛИ СоздаватьНовый Тогда 
				Ответ = Площадка_ЗагрузитьПоGUID(Параметры, guid, ХозСубъект );	
			Иначе
				Ответ = Справочники.ВСД_Площадка.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	 	
	Возврат Ответ;
КонецФункции

Функция Площадка_ЗагрузитьПоGUID_Запрос(GUID)
	ЗапросXML = "
	|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/cerberus/enterprise/ws-definitions'
	|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>
	|<soapenv:Header/>
	|<soapenv:Body>
	|   <ws:getEnterpriseByGuidRequest>
	|      <bs:guid>"+GUID+"</bs:guid>
	|   </ws:getEnterpriseByGuidRequest>
	|</soapenv:Body>
	|</soapenv:Envelope>";
	Возврат ЗапросXML;
КонецФункции

Процедура Площадка_ЗагрузитьПоGUID_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	
	GUID = Параметры["ВыбGUID"];
	Если ПустаяСтрока(GUID) Тогда 
		СообщитьИнфо("Загрузка площадок не выполнено - пустой GUID");
		Возврат;
	КонецЕсли;
	
	Ответ = Площадка_ЗагрузитьПоGUID( Параметры, GUID );
	
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 

Функция Площадка_ЗагрузитьПоGUID(Знач Параметры, _guid, ХозСубъект=Неопределено, Ссылка_ВСД_Площадка=Неопределено) Экспорт

	СообщитьИнфо(" Запрос getEnterpriseByGuid [ "+(_guid)+" ]");
	ЗапросXML = Площадка_ЗагрузитьПоGUID_Запрос(_guid);
	Service = "platform/cerberus/services/EnterpriseService";
	Action = "GetEnterpriseByGUID";
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;	
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
			
	Если НайтиОшибки(xdto) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответ = Неопределено;
	Попытка	    
	    enterprise = xdto.Body.getEnterpriseByGuidResponse.enterprise ;	
		Если ЗначениеЗаполнено(Ссылка_ВСД_Площадка) Тогда 
			Площадка_Объект = Ссылка_ВСД_Площадка.ПолучитьОбъект(); 
		Иначе
			Площадка_Объект = Справочники.ВСД_Площадка.СоздатьЭлемент();
		КонецЕсли;
		Площадка_Объект.Наименование = enterprise.name;
		Попытка 
			Если ТипЗнч(enterprise.address.addressView) = Тип("Строка") Тогда 
				Площадка_Объект.Адрес = enterprise.address.addressView; 
			КонецЕсли;
		Исключение КонецПопытки;
		Попытка Площадка_Объект.Страна	= НайтиСтрануПоGUID( enterprise.address.country.GUID, enterprise.address.country.name); Исключение КонецПопытки;
		Попытка Площадка_Объект.Регион	= НайтиРегионПоGUID( enterprise.address.region.GUID, enterprise.address.region.name); Исключение КонецПопытки;
		Попытка Площадка_Объект.Город	= НайтиГородПоGUID( enterprise.address.locality.GUID, enterprise.address.locality.name); Исключение КонецПопытки;
		Площадка_Объект.GUID = enterprise.guid;
		Площадка_Объект.UUID = enterprise.uuid;	
		Площадка_Объект.Активен = enterprise.active;
		
		Если НЕ ЗначениеЗаполнено(ХозСубъект) Тогда
			СообщитьИнфо("Внимание: создана площадка ["+_guid+"] без указания ХозСубъекта ", Площадка_Объект.Ссылка);
		Иначе 
			Площадка_Объект.GUIDХозСубъекта = ХозСубъект.GUID;		
			Площадка_Объект.ХозСубъект = ХозСубъект;
		КонецЕсли;		
		Площадка_Объект.Записать();
		Ответ = Площадка_Объект.Ссылка;
		
		СообщитьИнфо("Записана ВСД_Площадка ["+Площадка_Объект.Наименование+"] GUID = "+ _guid, Площадка_Объект.Ссылка);		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ВСД_Площадки'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		СообщитьИнфо("Ошибка при получении ВСД_Площадки "+ ОписаниеОшибки());
	КонецПопытки;
			
	Возврат Ответ;
КонецФункции

Процедура Площадка_ЗагрузитьПоХозСубъекту_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	ВыбХозСубъект = Параметры["ВыбХозСубъект"];
	Если ЗначениеЗаполнено( Параметры["ЗагрузитьПлощадку"] )Тогда 
		ЗагрузитьПлощадку = Булево(Параметры["ЗагрузитьПлощадку"]);
	Иначе
		ЗагрузитьПлощадку = Ложь;
	КонецЕсли;
		
	Ответ = Площадка_ЗагрузитьПоХозСубъекту( Параметры, ВыбХозСубъект, ЗагрузитьПлощадку );
	
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 

Функция Площадка_ЗагрузитьПоХозСубъекту(Знач Параметры, ВыбХозСубъект, ЗагрузитьПлощадку=Ложь ) Экспорт	
	
	Если ПустаяСтрока(ВыбХозСубъект.GUID) Тогда 
		ХозСубъект_ПолучитьGuidПоИНН( Параметры, ВыбХозСубъект);
	КонецЕсли;
	
	Если ПустаяСтрока(ВыбХозСубъект.GUID)=1 Тогда 
		СообщитьИнфо("В ХозСубъекте ["+ВыбХозСубъект+"] не указан GUID");
		Возврат Ложь;
	КонецЕсли;
	
	СообщитьИнфо(" Запрос getBusinessEntityByGuid v1 [ "+(ВыбХозСубъект.GUID)+" ]");
	ЗапросXML = ХозСубъект_ЗагрузитьПоGUID_v1_Запрос(ВыбХозСубъект.GUID);
	Service = "platform/cerberus/services/EnterpriseService";
	Action= "GetBusinessEntityByGuid";
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
			
	Если НайтиОшибки(xdto) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Если xdto.Body.getBusinessEntityByGuidResponse.businessEntity.Свойства().получить("activityLocation")=Неопределено Тогда 
			СообщитьИнфо("Нет привязанных площадок");
			Возврат Ложь;
		КонецЕсли;
			
		List = xdto.Body.getBusinessEntityByGuidResponse.businessEntity.activityLocation;
		
		Если ТипЗнч(List)<>Тип("СписокXDTO") Тогда 
			activityLocationList = Новый Массив;
			activityLocationList.Добавить(List);
		Иначе
			activityLocationList = List;
		КонецЕсли;
		
		Для каждого activityLocation ИЗ activityLocationList Цикл		
			Попытка
				guid = activityLocation.enterprise.guid;
				Площадка_НайтиПоGUID(Параметры, guid, ВыбХозСубъект, ЗагрузитьПлощадку, Истина);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		
		Ответ = Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ВСД_Площадки'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Ответ = Ложь;
		СообщитьИнфо("Ошибка при получении ВСД_Площадки "+ ОписаниеОшибки());
	КонецПопытки;
			
	Возврат Ответ;
	
КонецФункции

Функция Площадки_ЗагрузитьСписокПоХозСубъекту( Знач Параметры, АдресХранилища )  Экспорт // !!!! 
	
	тзКонтрагенты = Параметры["тзКонтрагенты"];
	
	Результат=""; Ответ=Ложь;
	Для Каждого стр ИЗ тзКонтрагенты Цикл
		Если стр.Отметка Тогда 
			Если стр.ХозСубъект = Справочники.ВСД_ХозСубъект.ПустаяСсылка() Тогда 
				стр.ХозСубъект = кб99_ВСД.НайтиХозСубъект(стр.Контрагент);
			КонецЕсли;	
			
			Параметры.Вставить("ВыбХозСубъект", стр.ХозСубъект );
			Ответ = Площадка_ЗагрузитьПоХозСубъекту(Параметры, стр.ХозСубъект, Истина);							
						
		КонецЕсли;
	КонецЦикла;
	
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
	
	Возврат Ответ;
КонецФункции

Функция НайтиПлощадкиПоУсловиям_ЗапросXML(Парметры, СписокУсловий, Смещение=0)

	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getRussianEnterpriseListRequest>
	|     	<bs:listOptions>
	|            <bs:count>1000</bs:count>
	|            <bs:offset>"+ СтрЗаменить( Смещение , Символы.НПП ,"")+"</bs:offset>
	|        </bs:listOptions>
	|     	<dt:enterprise>";
	Если НЕ ПустаяСтрока( СписокУсловий.Получить("uuid") ) Тогда
	    Запрос = Запрос + "
		|            <dt:uuid>"+ СписокУсловий.Получить("uuid") +"</dt:uuid>";	
	КонецЕсли;
	Если НЕ ПустаяСтрока( СписокУсловий.Получить("guid") ) Тогда
	    Запрос = Запрос + "
		|            <dt:guid>"+ СписокУсловий.Получить("guid") +"</dt:guid>";	
	КонецЕсли;
	Если НЕ ПустаяСтрока( СписокУсловий.Получить("Название") )  Тогда
	    Запрос = Запрос + "
		|            <dt:name>"+ СписокУсловий.Получить("Название") +"</dt:name>";	
	КонецЕсли;
	Если НЕ ПустаяСтрока( СписокУсловий.Получить("НомерПлощадки") )  Тогда
	    Запрос = Запрос + "
		|        <dt:numberList>
		|            <dt:name>"+ СписокУсловий.Получить("НомерПлощадки") +"</dt:name>
		|        </dt:numberList> ";	
	КонецЕсли;
	Если НЕ ПустаяСтрока( СписокУсловий.Получить("Регион") ) Тогда
		Запрос = Запрос + "
		|            <dt:address>
		|               <dt:region>
		|                  <bs:guid>"+ СписокУсловий.Получить("Регион").GUID +"</bs:guid>
		|               </dt:region>
		|            </dt:address> ";
	КонецЕсли;
	Запрос = Запрос + "
	|        </dt:enterprise>
	|      </ws:getRussianEnterpriseListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>";	
	Возврат Запрос;
КонецФункции

Функция Площадки_НайтиПоУсловиям( Знач Параметры, СписокУсловий, Смещение=0) Экспорт
	Если НЕ(ЗначениеЗаполнено(СписокУсловий)) Тогда
		СообщитьИнфо("Не указаны условия поиска");
		Возврат Неопределено;
	КонецЕсли;
		
	СообщитьИнфо("Запрос GetRussianEnterpriseListByName ");
	ЗапросXML = НайтиПлощадкиПоУсловиям_ЗапросXML( Параметры, СписокУсловий, Смещение );

	Service = "platform/services/2.0/EnterpriseService";
	Action = "GetRussianEnterpriseList";	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
			
	Если НайтиОшибки(xdto) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат xdto;
КонецФункции

Функция Площадки_ЗагрузитьПоУсловиям(Параметры, СписокУсловий) Экспорт
	Площадки = Новый Массив;
	
	ПолученоЗаписей = 1000; 
	Пока ПолученоЗаписей = 1000 Цикл
		ПолученоЗаписей = 0;
		
		xdto = Площадки_НайтиПоУсловиям( Параметры, СписокУсловий );	
		Если xdto = Неопределено Тогда
			Возврат Площадки;	
		КонецЕсли;
		Если xdto.Body.getRussianEnterpriseListResponse.enterpriseList.count="0" Тогда 
			СообщитьИнфо("По данным условиям ничего не найдено");
			Возврат Площадки;
		КонецЕсли; 
		
			List = xdto.Body.getRussianEnterpriseListResponse.enterpriseList.enterprise;
		
			Если ТипЗнч(List)<>Тип("СписокXDTO") Тогда 
				enterpriseList = Новый Массив;
				enterpriseList.Добавить(List);
			Иначе
				enterpriseList = List;
			КонецЕсли;
			
			ПолученоЗаписей = enterpriseList.Количество();
			Для каждого enterprise ИЗ enterpriseList Цикл		
											
				ЭлементПлощадка = Новый Структура("GUID, UUID, GUIDХозСубъекта, ХозСубъект, Площадка, Наименование, Адрес, Активная, Отметка");
				ЭлементПлощадка.GUID = enterprise.guid;
				ЭлементПлощадка.UUID = enterprise.UUID;
				
				// Если есть owner то его ГУИД И пишем
				Попытка 
					ЭлементПлощадка.GUIDХозСубъекта = enterprise.owner.guid; 
					ЭлементПлощадка.ХозСубъект = ХозСубъект_НайтиПоGUID( Параметры, ЭлементПлощадка.GUIDХозСубъекта );
				Исключение 
					ЭлементПлощадка.GUIDХозСубъекта = СписокУсловий.Получить("ХозСубъект").GUID; 
					ЭлементПлощадка.ХозСубъект = СписокУсловий.Получить("ХозСубъект");
				КонецПопытки;  			
				
				ЭлементПлощадка.GUID = enterprise.guid;
				Если НЕ(enterprise.Свойства().Получить("name") = Неопределено) Тогда
					ЭлементПлощадка.Наименование = enterprise.name;	
				Иначе
					ЭлементПлощадка.Наименование = "";
				КонецЕсли;
				
				Попытка 
					ЭлементПлощадка.Адрес = enterprise.address.addressView; 
				Исключение 
					ЭлементПлощадка.Адрес = ""; 
				КонецПопытки;
				ЭлементПлощадка.Активная = enterprise.active;
				Если ЭлементПлощадка.Активная Тогда 
					ЭлементПлощадка.Отметка=Истина;
				КонецЕсли;
				
				ЭлементПлощадка.Площадка = Площадка_НайтиПоGUID( Параметры, ЭлементПлощадка.GUID, ЭлементПлощадка.ХозСубъект );
				Площадки.Добавить( ЭлементПлощадка );
			КонецЦикла;
	КонецЦикла;  // более 1000
	
	Возврат Площадки; 
КонецФункции

#Область СвязатьПлощадку
	
&НаСервере
Функция Площадка_СвязатьСХозСубъектом_Запрос( ПараметрыОрганизации, ВыбПлощадка ) 
	_guid = Новый УникальныйИдентификатор;
	ЗапросXML = "
	|<SOAP-ENV:Envelope 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+СокрЛП( ПараметрыОрганизации["param_api_key"] )+"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+СокрЛП( ПараметрыОрганизации["param_issuer_id"] )+"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(Текущаядата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:modifyActivityLocationsRequest>
	|            <merc:localTransactionId>"+_guid+"</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+СокрЛП( ПараметрыОрганизации["param_intiator_login"] )+"</vd:login>
	|            </merc:initiator>
	|            <merc:modificationOperation>
	|              <vd:type>CREATE</vd:type>
	|              <vd:businessEntity>
	|                <bs:guid>"+ВыбПлощадка.ХозСубъект.GUID+"</bs:guid>
	|              </vd:businessEntity>
	|              <vd:activityLocation>
//	|                <vd:globalID>7574894948562</vd:globalID>
//	|                <vd:globalID>5412345123453</vd:globalID>
	|                <vd:enterprise>
	|                  <bs:guid>"+ВыбПлощадка.GUID+"</bs:guid>
	|                </vd:enterprise>
	|              </vd:activityLocation>
	|            </merc:modificationOperation>
	|          </merc:modifyActivityLocationsRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";	
	
	Возврат ЗапросXML;
КонецФункции

&НаСервере
Процедура Площадка_СвязатьСХозСубъектом( ПараметрыОрганизации, ВыбПлощадка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОрганизации) Тогда 
		Организация = кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();	
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Организация );
	КонецЕсли;

	Если ПустаяСтрока(ВыбПлощадка.ХозСубъект.GUID) Тогда 
		кб99_ВСД.СообщитьИнфо("не указан GUID ХозСубъекта");
		Возврат;
	КонецЕсли;
		
	Если ПустаяСтрока(ВыбПлощадка.GUID) Тогда 
		кб99_ВСД.СообщитьИнфо("площадке не указан GUID");
		Возврат;
	КонецЕсли;
	
	Пауза( ПараметрыОрганизации["ПаузаСек"] );	
	
	кб99_ВСД.СообщитьИнфо(" Запрос CreateActivityLocationsOperation [ "+СокрЛП(ВыбПлощадка)+" ]");		
	ЗапросXML = Площадка_СвязатьСХозСубъектом_Запрос( ПараметрыОрганизации, ВыбПлощадка );	
	Service = "platform/services/ApplicationManagementService";
	Action = "modifyActivityLocations";
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( ПараметрыОрганизации );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Статус = СтатусЗапроса(xdto);
	Если НайтиОшибки( xdto ) Тогда
		Возврат ;
	КонецЕсли;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
	
	Если ЗначениеЗаполнено(appID) Тогда
		Площадка_СвязатьСХозСубъектом_Ответ( ПараметрыОрганизации, appID );
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Площадка_СвязатьСХозСубъектом_Ответ( ПараметрыОрганизации, appID )
	
	Если ПустаяСтрока(appID) Тогда
		кб99_ВСД.СообщитьИнфо("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	кб99_ВСД.СообщитьИнфо(" Запрос CreateActivityLocationsOperationResult [ "+СокрЛП(appID)+" ]");		
	
	Пауза( ПараметрыОрганизации["ПаузаСек"] );	
	
	кб99_ВСД.СообщитьИнфо(" Запрос CreateEnterpriseResult [ "+СокрЛП(appID)+" ]");		
	
	xdto = кб99_ВСД_Отправка.ПолучитьРезультатСервер( ПараметрыОрганизации, appID );
	
	Статус = СтатусЗапроса(xdto);
	Если НайтиОшибки(xdto) Тогда
		Возврат ;
	КонецЕсли;
		
	Если Статус = "COMPLETED" Тогда
		кб99_ВСД.СообщитьИнфо("Успешно установлена связь ВСД_Площадка ");
	КонецЕсли;	
	
КонецПроцедуры
#КонецОбласти

#Область СоздатьПлощадку

&НаСервере
Функция Площадка_Создать_Запрос( ПараметрыОрганизации, ВыбПлощадка ) 
	_guid = Новый УникальныйИдентификатор;

	ЗапросXML = "
	|<SOAP-ENV:Envelope 
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ ( ПараметрыОрганизации["param_api_key"] )+"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ ( ПараметрыОрганизации["param_issuer_id"] )+"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(Текущаядата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:modifyEnterpriseRequest>
	|            <merc:localTransactionId>"+_guid+"</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+( ПараметрыОрганизации["param_intiator_login"] )+"</vd:login>
	|            </merc:initiator>
	|            <merc:modificationOperation>
	|              <vd:type>CREATE</vd:type>
	|              <vd:resultingList>
	|                <dt:enterprise>
	|                  <dt:name>"+ ЗаменитьСпецСимволы(ВыбПлощадка.Наименование) +"</dt:name>
	|                  <dt:type>1</dt:type>
	|                  <dt:address>
	|                    <dt:country>
	|                      <bs:guid>"+ ВыбПлощадка.Страна.GUID+"</bs:guid>
	|                    </dt:country>
	|                    <dt:region>
	|                      <bs:guid>"+ ВыбПлощадка.Регион.GUID+"</bs:guid>
	|                    </dt:region>
	|                    <dt:locality>
	|                      <bs:guid>"+ ВыбПлощадка.Город.GUID+"</bs:guid>
	|                    </dt:locality>
	|                    <dt:addressView>"+ ВыбПлощадка.Адрес+"</dt:addressView>
	|                  </dt:address>
	|                  <dt:activityList>
	|                    <dt:activity>
	|                      <dt:name>Приготовление полуфабрикатов</dt:name>
	|                    </dt:activity>
	|                    <dt:activity>
	|                      <dt:name>Реализация пищевых продуктов</dt:name>
	|                    </dt:activity>
	|                    <dt:activity>
	|                      <dt:name>Реализация непищевых продуктов</dt:name>
	|                    </dt:activity>
	|                  </dt:activityList>
	|                  <dt:owner>
	|                    <bs:guid>"+ ВыбПлощадка.ХозСубъект.GUID+"</bs:guid>
	|                  </dt:owner>
	|                </dt:enterprise>
	|              </vd:resultingList>
	|              <vd:reason>Добавление предприятия в реестр.</vd:reason>
	|            </merc:modificationOperation>
	|          </merc:modifyEnterpriseRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";

	Возврат ЗапросXML;
КонецФункции

&НаСервере
Процедура Площадка_Создать( ПараметрыОрганизации, ВыбПлощадка ) Экспорт
	
	Если ПустаяСтрока(ВыбПлощадка.ХозСубъект.GUID) Тогда
		кб99_ВСД.СообщитьИнфо("Не указан Guid ХозСубъекта");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ВыбПлощадка.Адрес) Тогда
		кб99_ВСД.СообщитьИнфо("Не указан Адрес");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(ВыбПлощадка.Страна.GUID) Тогда
		кб99_ВСД.СообщитьИнфо("Не указан Страна.GUID");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(ВыбПлощадка.Регион.GUID) Тогда
		кб99_ВСД.СообщитьИнфо("Не указан Регион.GUID");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(ВыбПлощадка.Город.GUID) Тогда
		кб99_ВСД.СообщитьИнфо("Не указан Город.GUID");
		Возврат;
	КонецЕсли;
	
	кб99_ВСД.СообщитьИнфо(" Запрос CreateEnterprise [ "+СокрЛП(ВыбПлощадка)+" ]");		
	ЗапросXML = Площадка_Создать_Запрос(	ПараметрыОрганизации, ВыбПлощадка );	
	Service = "platform/services/ApplicationManagementService";
	Action = "modifyEnterprise";
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( ПараметрыОрганизации );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Статус = СтатусЗапроса(xdto);
	Если НайтиОшибки( xdto ) Тогда
		Возврат ;
	КонецЕсли;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
	
	Если ЗначениеЗаполнено(appID) Тогда
		Площадка_ПолучитьОтвет( ПараметрыОрганизации, appID, ВыбПлощадка );
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Площадка_ПолучитьОтвет( ПараметрыОрганизации, appID, ВыбПлощадка) Экспорт
	
	Если ПустаяСтрока(appID)=1 Тогда
		кб99_ВСД.СообщитьИнфо("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Пауза( ПараметрыОрганизации["ПаузаСек"] );	
	
	кб99_ВСД.СообщитьИнфо(" Запрос CreateEnterpriseResult [ "+СокрЛП(appID)+" ]");		
	
	xdto = кб99_ВСД_Отправка.ПолучитьРезультатСервер( ПараметрыОрганизации, appID );
	
	Статус = СтатусЗапроса(xdto);
	Если НайтиОшибки(xdto) Тогда
		Возврат ;
	КонецЕсли;
		
	Если Статус = "COMPLETED" Тогда
	    Попытка
			enterprise = xdto.Body.receiveApplicationResultResponse.application.result.modifyEnterpriseResponse.enterprise;
			guid = enterprise.guid;
			_uuid = enterprise.uuid;
			active = enterprise.active;
			Попытка name = enterprise.name; Исключение	name = enterprise.fio;	КонецПопытки;
			
			ОбъектПлощадка = ВыбПлощадка.ПолучитьОбъект();
			ОбъектПлощадка.guid = guid;
			ОбъектПлощадка.uuid = _uuid;
			ОбъектПлощадка.Записать();
			кб99_ВСД.СообщитьИнфо("Успешно записан ВСД_Площадка ["+ВыбПлощадка+"] GUID = "+GUID, ОбъектПлощадка.Ссылка);
		      			
			Площадка_СвязатьСХозСубъектом( ПараметрыОрганизации, ВыбПлощадка);
		Исключение
			кб99_ВСД.СообщитьИнфо("Ошибка "+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ХозСубъекты

Функция ХозСубъект_ПолучитьGuidПоИНН_Запрос( ИНН )
	ЗапросXML = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/cerberus/business-entity/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base' xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getBusinessEntityListRequest>
	|        <ent:businessEntity>
	|            <ent:inn>"+ (инн) +"</ent:inn>
	|        </ent:businessEntity>
	|    </ws:getBusinessEntityListRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	
	Возврат ЗапросXML;
КонецФункции

Процедура ХозСубъект_ПолучитьGuidПоИНН_ВФоне( Знач Параметры, АдресХранилища ) Экспорт
	ВыбХозСубъект = Параметры["ВыбХозСубъект"];
	
	Ответ = ХозСубъект_ПолучитьGuidПоИНН( Параметры, ВыбХозСубъект );
	
	РезультатОбработки = Новый Структура();
	Если Ответ Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецПроцедуры 

Функция ХозСубъект_ПолучитьGuidПоИНН(Знач Параметры, ХозСубъект) Экспорт
	
	ИНН = СокрЛП( ПолучитьИНН(ХозСубъект.Контрагент));   
	Если ПустаяСтрока(ИНН) Тогда 
		СообщитьИнфо("Неправильно указан ИНН");
		Возврат Ложь;
	КонецЕсли;	
	
	СообщитьИнфо(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]");		
	ЗапросXML = ХозСубъект_ПолучитьGuidПоИНН_Запрос( ИНН );
	Service = "platform/cerberus/services/EnterpriseService";
	Action = "GetBusinessEntityList";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
			
	Если НайтиОшибки(xdto) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Если Число(xdto.Body.getBusinessEntityListResponse.businessEntityList.total)>0 Тогда	
			Если  Число(xdto.Body.getBusinessEntityListResponse.businessEntityList.total)>1 тогда
				Для каждого стр ИЗ xdto.Body.getBusinessEntityListResponse.businessEntityList.businessEntity цикл
					guid = стр.guid;
					_uuid = стр.uuid;
					active = стр.active;
				КонецЦикла ;
			Иначе
				_guid = xdto.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.guid;
				_uuid = xdto.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.uuid;
				active = xdto.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.active;
			КонецЕсли;	
					
			ОбъектХС = ХозСубъект.ПолучитьОбъект();
			ОбъектХС.GUID = _GUID;
			ОбъектХС.UUID = _uuid;
			ОбъектХС.Записать();
			СообщитьИнфо("Записан ХозСубъект ["+ХозСубъект+"] GUID = "+_GUID);			
			
			ХозСубъект_ЗагрузитьПоGUID(Параметры, _GUID, ОбъектХС.Ссылка );
		Иначе
			СообщитьИнфо("ХозСубъект ["+ХозСубъект+"] с ИНН "+ИНН+" не найден в ГИС Меркурий");			
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
		Ответ = Истина;
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ХозСубъект'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();		
		Ответ = Ложь;	
		СообщитьИнфо("Ошибка при получении ХозСубъект "+ ОписаниеОшибки());
	КонецПопытки;
			
	Возврат Ответ;
	
КонецФункции

Функция ХозСубъект_ЗагрузитьПоGUID_Запрос(guid)
	
	ЗапросXML = "
	|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>
	|<soapenv:Header/>
	|<soapenv:Body>
	|   <ws:getBusinessEntityByGuidRequest>
	|      <bs:guid>"+GUID+"</bs:guid>
	|   </ws:getBusinessEntityByGuidRequest>
	|</soapenv:Body>
	|</soapenv:Envelope>";

	Возврат ЗапросXML;
КонецФункции

Функция ХозСубъект_ЗагрузитьПоGUID_v1_Запрос(guid)	
	//Для Ветис 1.5
	
	ЗапросXML = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/cerberus/business-entity/ws-definitions'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getBusinessEntityByGuidRequest>
	|      <base:guid>"+GUID+"</base:guid>
	|    </ws:getBusinessEntityByGuidRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";

	Возврат ЗапросXML;
КонецФункции

Функция ХозСубъект_НайтиПоGUID(Знач Параметры, GUID) Экспорт

	Ответ = "";
	Если НЕ ПустаяСтрока(Guid) Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ХозСубъект.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
		                      |ГДЕ
		                      |	ВСД_ХозСубъект.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Ответ = ХозСубъект_ЗагрузитьПоGUID( Параметры, GUID );
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ХозСубъекта");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ХозСубъект_ЗагрузитьПоGUID_ВФоне(Знач Параметры, АдресХранилища) Экспорт
	GUID = Параметры["ВыбGUID"];
	Ответ = ХозСубъект_ЗагрузитьПоGUID(Параметры, GUID);
	
	РезультатОбработки = Новый Структура();
	Если ЗначениеЗаполнено(Ответ) Тогда 
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе			
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецФункции

Функция ХозСубъект_ЗагрузитьПоGUID(Знач Параметры, GUID, Ссылка_ВСД_ХозСубъект=Неопределено) Экспорт
	Ответ = Неопределено;
	Если НЕ(ЗначениеЗаполнено(GUID)) Тогда 
		СообщитьИнфо("Пустой GUID Для поиска ХозСубъекта");
		Возврат Ответ;
	КонецЕсли;
	
	СообщитьИнфо(" Запрос GetBusinessEntityByGUID [ "+(GUID)+" ]");
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ХозСубъект_ЗагрузитьПоGUID_Запрос( GUID );
	ПараметрыОтправки.Service = "platform/services/2.0/EnterpriseService";
	ПараметрыОтправки.Action = "GetBusinessEntityByGUID";	
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto) Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка	
		businessEntity = xdto.Body.getBusinessEntityByGuidResponse.businessEntity;
		
		Попытка _name = businessEntity.name; Исключение _name=""; КонецПопытки;
		Если _name = "" тогда
			Попытка _name = businessEntity.fio; Исключение _name=""; КонецПопытки;	
		КонецЕсли;
		
		Попытка _Fullname = businessEntity.fullname;  Исключение _Fullname=""; КонецПопытки;
		
		Если ЗначениеЗаполнено(Ссылка_ВСД_ХозСубъект) Тогда 
			ХозСубъект_Объект = Ссылка_ВСД_ХозСубъект.ПолучитьОбъект(); 
		Иначе
			Спр = Новый("СправочникМенеджер.ВСД_ХозСубъект");
			Ссылка_ВСД_ХозСубъект = Спр.НайтиПоРеквизиту("GUID", businessEntity.guid);
			Если Ссылка_ВСД_ХозСубъект = Справочники.ВСД_ХозСубъект.ПустаяСсылка() Тогда 
				ХозСубъект_Объект = Справочники.ВСД_ХозСубъект.СоздатьЭлемент();
			Иначе
				ХозСубъект_Объект = Ссылка_ВСД_ХозСубъект.ПолучитьОбъект(); 
			КонецЕсли;
		КонецЕсли;
		
		ХозСубъект_Объект.Наименование = _name;
		Попытка ХозСубъект_Объект.Адрес = businessEntity.juridicalAddress.addressView; Исключение КонецПопытки; 
		ХозСубъект_Объект.GUID = businessEntity.guid;
		ХозСубъект_Объект.UUID = businessEntity.uuid;	
		ХозСубъект_Объект.ИНН = businessEntity.inn;
		Попытка ХозСубъект_Объект.КПП = businessEntity.kpp; Исключение КонецПопытки;
		Попытка ХозСубъект_Объект.ОГРН = businessEntity.ogrn; Исключение КонецПопытки;
		ХозСубъект_Объект.Активен = businessEntity.active;	
		Попытка ХозСубъект_Объект.Страна = НайтиСтрануПоGUID( businessEntity.juridicalAddress.country.GUID, businessEntity.juridicalAddress.country.name); Исключение КонецПопытки;
		Попытка ХозСубъект_Объект.Регион = НайтиРегионПоGUID( businessEntity.juridicalAddress.region.GUID, businessEntity.juridicalAddress.region.name); Исключение КонецПопытки;
		Попытка ХозСубъект_Объект.Город	= НайтиГородПоGUID( businessEntity.juridicalAddress.locality.GUID, businessEntity.juridicalAddress.locality.name); Исключение КонецПопытки;
		
		// Ищем контрагента
		Спр = Новый("СправочникМенеджер.Контрагенты");
		Ссылка_Контрагент = Спр.НайтиПоРеквизиту("ИНН", ХозСубъект_Объект.ИНН );
		Если Ссылка_Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СообщитьИнфо("Не найден в справочнике Контрагент "+ХозСубъект_Объект+" ИНН "+ХозСубъект_Объект.ИНН+" ХС запишем без указания контрагента 1С");
		Иначе // Нашли по ИНН
			ХозСубъект_Объект.Контрагент = Ссылка_Контрагент;
		КонецЕсли;	
		ХозСубъект_Объект.Записать();
		Ответ = ХозСубъект_Объект.Ссылка;
		
		Если НЕ businessEntity.active Тогда 
			СообщитьИнфо("ХозСубъект НЕ АКТИВЕН!", ХозСубъект_Объект.Ссылка);
		КонецЕсли;		
		СообщитьИнфо("Записан ВСД_Хозсубъект ["+ХозСубъект_Объект+"] GUID = "+ businessEntity.guid+" Адрес: "+ХозСубъект_Объект.Адрес, ХозСубъект_Объект.Ссылка);		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при получении ХозСубъект'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Ответ = Неопределено;
		СообщитьИнфо("Ошибка при получении ХозСубъект "+ ОписаниеОшибки());
	КонецПопытки;
				
	Возврат Ответ;
	
КонецФункции

#Область СоздатьХозСубъект

&НаСервере	
Функция ХозСубъект_Создать_Ответ( ПараметрыОрганизации, appID, ВыбХозСубъект)
	
	Если Не (ЗначениеЗаполнено(appID)) Тогда
		кб99_ВСД.СообщитьИнфо("Не указано applicationID");
		Возврат Ложь;
	КонецЕсли;
	
	Пауза( ПараметрыОрганизации["ПаузаСек"] );	
	
	кб99_ВСД.СообщитьИнфо(" Запрос CreateBusinessEntityResult [ "+(appID)+" ]");		
	
	xdto = кб99_ВСД_Отправка.ПолучитьРезультатСервер( ПараметрыОрганизации, appID );
	
	Статус = СтатусЗапроса(xdto);
	Если НайтиОшибки(xdto) Тогда
		Возврат Статус;
	КонецЕсли;
		
	Если Статус = "COMPLETED" Тогда
		Попытка
			be = xdto.Body.receiveApplicationResultResponse.application.result.modifyBusinessEntityResponse.businessEntity;
			guid = be.guid;
			_uuid = be.uuid;
			ОбъектХС = ВыбХозСубъект.ПолучитьОбъект();
			ОбъектХС.GUID = guid;
			ОбъектХС.UUID = _uuid;
			ОбъектХС.Записать();
			кб99_ВСД.СообщитьИнфо("Записан ХозСубъект ["+ВыбХозСубъект+"] GUID = "+GUID, ВыбХозСубъект);	
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при получении ответа Ветис'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			кб99_ВСД.СообщитьИнфо("Ошибка ХозСубъект ["+ВыбХозСубъект+"] "+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ХозСубъект_Создать_Запрос( ПараметрыОрганизации, ВыбХозСубъект ) 
	_guid = Новый УникальныйИдентификатор;
	ЗапросXML = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+СокрЛП( ПараметрыОрганизации["param_api_key"] )+"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+СокрЛП( ПараметрыОрганизации["param_issuer_id"] )+"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(Текущаядата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:modifyBusinessEntityRequest>
	|            <merc:localTransactionId>"+ _guid +"</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+СокрЛП( ПараметрыОрганизации["param_intiator_login"] )+"</vd:login>
	|            </merc:initiator>
	|            <merc:modificationOperation>
	|              <vd:type>FIND_OR_CREATE</vd:type>
	|              <vd:resultingList>
	|                <dt:businessEntity>";
	Если СтрДлина( ВыбХозСубъект.ИНН ) = 12 Тогда
		// ИП Тип = 3 ФЛ тип = 2
		ЗапросXML = ЗапросXML + "		
		|                  <dt:type>3</dt:type>
		|                  <dt:fio>"+ ЗаменитьСпецСимволы( ВыбХозСубъект.НаименованиеПолное ) +"</dt:fio>
		|                  <dt:inn>"+ВыбХозСубъект.ИНН+"</dt:inn>";
	Иначе
		ЗапросXML = ЗапросXML + "		
		|                  <dt:type>1</dt:type>
		|                  <dt:name>"+ ЗаменитьСпецСимволы( ВыбХозСубъект.Наименование ) +"</dt:name>
		|                  <dt:incorporationForm>
		|                    <dt:code>12300</dt:code>
		|                  </dt:incorporationForm>
		|                  <dt:fullName>"+ ЗаменитьСпецСимволы( ВыбХозСубъект.НаименованиеПолное ) +"</dt:fullName>
		|                  <dt:inn>"+ВыбХозСубъект.ИНН+"</dt:inn>";
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбХозСубъект.КПП) Тогда
  		ЗапросXML = ЗапросXML + "
		|                  <dt:kpp>"+ВыбХозСубъект.КПП+"</dt:kpp>";
	КонецЕсли;
  	ЗапросXML = ЗапросXML + "
	|                  <dt:ogrn>"+ВыбХозСубъект.ОГРН+"</dt:ogrn>
	|                  <dt:juridicalAddress>
	|                    <dt:country>
	|                      <bs:guid>"+ВыбХозСубъект.Страна.GUID+"</bs:guid>
	|                    </dt:country>
	|                    <dt:region>
	|                      <bs:guid>"+ВыбХозСубъект.Регион.GUID+"</bs:guid>
	|                    </dt:region>
	|                    <dt:locality>
	|                      <bs:guid>"+ВыбХозСубъект.Город.GUID+"</bs:guid>
	|                    </dt:locality>
	|                    <dt:addressView>"+ВыбХозСубъект.Адрес+"</dt:addressView>
	|                  </dt:juridicalAddress>
	|                </dt:businessEntity>
	|              </vd:resultingList>
	|              <vd:reason>Добавление субъекта в реестр.</vd:reason>
	|            </merc:modificationOperation>
	|          </merc:modifyBusinessEntityRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";
	
	Возврат ЗапросXML;
КонецФункции

&НаСервере
Процедура ХозСубъект_Создать(ПараметрыОрганизации, ВыбХозСубъект) Экспорт
	
	// СведенияОПлательщике = ПолучитьСведенияОКонтрагенте(ВыбХозСубъект.Контрагент, ТекущаяДата());	// в упп нет ф-ции
	// ИНН = СведенияОПлательщике.ИНН;	
	// КПП = СведенияОПлательщике.КПП;	
	// Попытка
	// 	ОГРН = ?(ЗначениеЗаполнено(СведенияОПлательщике.ОГРН),СведенияОПлательщике.ОГРН,ВыбХозСубъект.Контрагент.ОГРН);
	// Исключение
	//	ОГРН = СокрЛП(ВыбХозСубъект.ОГРН);
	// КонецПопытки;
	// Адрес = СведенияОПлательщике.ЮридическийАдрес;//ПолучитьАдрес(СведенияОПлательщике,"ЮридическийАдрес");//ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПлательщике, "ЮридическийАдрес");	
	// Наименование = СведенияОПлательщике.ПолноеНаименование;//хс.Контрагент.НаименованиеПолное;
	
	Если не(ЗначениеЗаполнено(ВыбХозСубъект.ИНН)) Тогда 
		кб99_ВСД.СообщитьИнфо("Неправильно указан ИНН");
		Возврат;
	КонецЕсли;	
	Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект.ОГРН)) Тогда 
		кб99_ВСД.СообщитьИнфо("Не указан ОГРН");
		Возврат;
	КонецЕсли;
	
	Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект.Адрес)) Тогда 
		кб99_ВСД.СообщитьИнфо("Не указан Адрес");
		Возврат;
	КонецЕсли;
		
	кб99_ВСД.СообщитьИнфо(" Запрос CreateBusinessEntity [ "+ВыбХозСубъект.ИНН+" ]");		
	ЗапросXML = ХозСубъект_Создать_Запрос( ПараметрыОрганизации, ВыбХозСубъект );
	Service = "platform/services/ApplicationManagementService";//"platform/cerberus/services/EnterpriseService";
	Action = "modifyBusinessEntity";
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( ПараметрыОрганизации );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Статус = СтатусЗапроса(xdto);
	Если НайтиОшибки( xdto ) Тогда
		Возврат ;
	КонецЕсли;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
	
	Если ЗначениеЗаполнено(appID) Тогда
		ХозСубъект_Создать_Ответ( ПараметрыОрганизации, appID, ВыбХозСубъект )
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область Партии

Функция Партии_ПоGUID_Запрос( Параметры, ВыбПартия )
	localTransactionId = Новый УникальныйИдентификатор;
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	
	|      <apldef:apiKey>"+ СокрЛП( Параметры["param_api_key"] ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( Параметры["param_issuer_id"] ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>	
	|        <apl:data>
	|          <merc:getStockEntryByGuidRequest>
	|            <merc:localTransactionId>"+localTransactionId+"</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
	|            </merc:initiator>
	|            <bs:guid>"+ ВыбПартия.guid +"</bs:guid>
	|            <dt:enterpriseGuid>"+ВыбПартия.Получатель_Площадка.GUID+"</dt:enterpriseGuid>
	|          </merc:getStockEntryByGuidRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";	
	Возврат Запрос;
КонецФункции

Функция Партии_ПолучитьПоGUID( Параметры, ВыбПартия ) Экспорт
	
	СообщитьИнфо("Отправляем запрос партий по GUID "+ВыбПартия);
	ЗапросXML = Партии_ПоGUID_Запрос( Параметры, ВыбПартия );	
	Service = "platform/services/2.0/ApplicationManagementService";
	Action = "submitApplicationRequest";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответ = Неопределено;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
	
	Ответ =  Партии2_Ответ_Получить( Параметры, appID );	
	Для А=1 По 10 Цикл
		Если Ответ="IN_PROCESS" Тогда 
			Ответ =  Партии2_Ответ_Получить( Параметры, appID );
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьПартии2_ЗапросXML( Параметры )
	
	Если ЗначениеЗаполнено( Параметры["Смещение"] ) Тогда 
		Смещение 	= Параметры["Смещение"];
	Иначе
		Смещение = 0;
	КонецЕсли;
	Если ЗначениеЗаполнено( Параметры["УдалятьПартии"] ) Тогда 
		УдалятьПартии 	= Параметры["УдалятьПартии"];
	Иначе
		УдалятьПартии = Ложь;
	КонецЕсли;	
	Если ЗначениеЗаполнено( Параметры["ТолькоАктуальныеПартии"] ) Тогда 
		ТолькоАктуальныеПартии 	= Параметры["ТолькоАктуальныеПартии"];
	Иначе
		ТолькоАктуальныеПартии = Ложь;
	КонецЕсли;	
	ПартияНачПериода = Параметры["ПартияНачПериода"];
	ПартияКонПериода = Параметры["ПартияКонПериода"];
	ВыбПлощадка = Параметры["ВыбПлощадка"];
	
	localTransactionId = Новый УникальныйИдентификатор;
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( Параметры["param_api_key"] ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( Параметры["param_issuer_id"] ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:getStockEntryListRequest>
	|            <merc:localTransactionId>"+localTransactionId+"</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
	|            </merc:initiator>
	|            <bs:listOptions>
	|              <bs:count>1000</bs:count>
	|              <bs:offset>"+ Формат(Смещение, "ЧДЦ=0; ЧН=0; ЧГ=") +"</bs:offset>
	|            </bs:listOptions>
	|            <dt:enterpriseGuid>"+ СокрЛП(ВыбПлощадка.GUID) +"</dt:enterpriseGuid>";
	Если (ЗначениеЗаполнено(ПартияНачПериода)) ИЛИ (ТолькоАктуальныеПартии) Тогда
		Запрос = Запрос +"
		|             <merc:searchPattern>";
		Если ТолькоАктуальныеПартии Тогда
			Запрос = Запрос +"
	    	|               <vd:blankFilter>NOT_BLANK</vd:blankFilter>";
		КонецЕсли;
		Если ЗначениеЗаполнено(ПартияНачПериода) Тогда
			Запрос = Запрос +"
	    	|              <vd:receiptDateInterval>
			|                 <bs:beginDate>"+ ДатаXML(ПартияНачПериода, "T00:00:00") +"</bs:beginDate>
			|                 <bs:endDate>"+ ДатаXML(ПартияКонПериода, "T23:59:59") +"</bs:endDate>
		    |              </vd:receiptDateInterval>";
		КонецЕсли;
		
		Запрос = Запрос +"	
    	|             </merc:searchPattern>";
	КонецЕсли;
	Запрос = Запрос +"
	|          </merc:getStockEntryListRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	Возврат Запрос;
КонецФункции

Функция Партии2_Запрос_Отправить_ВФоне(Знач Параметры, АдресХранилища) Экспорт
	
	Статус = Партии2_Запрос_Отправить( Параметры );	
		
	Если Статус = "COMPLETED" Тогда 
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе			
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецФункции

Функция  Партии2_Запрос_Отправить(Знач Параметры ) Экспорт	
	ВыбПлощадка = Параметры["ВыбПлощадка"];

	Если НЕ(ЗначениеЗаполнено(ВыбПлощадка.GUID)) Тогда 
		ВызватьИсключение("В выбранной Площадке пустой GUID");
	КонецЕсли;
	
	СообщитьИнфо("Отправляем запрос партий Ветис");
	ЗапросXML = ПолучитьПартии2_ЗапросXML( Параметры );	
	Service = "platform/services/2.1/ApplicationManagementService";
	Action = "submitApplicationRequest";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
	
	Ответ =  Партии2_Ответ_Получить( Параметры, appID );	
	Для А=1 По 10 Цикл
		Если Ответ="IN_PROCESS" Тогда 
			Ответ =  Партии2_Ответ_Получить( Параметры, appID );
		ИначеЕсли Ответ="REJECTED" Тогда 
			// Если возникает "Ошибка APLM0012An unexpected error has occurred while invoking target service operation."		
			// отправляем новый завпрос
			Ответ = Партии2_Запрос_Отправить( Параметры );
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Процедура УдалитьПартии(Параметры)
	
	Если ЗначениеЗаполнено( Параметры["УдалятьПартии"] ) Тогда 
		УдалятьПартии = Параметры["УдалятьПартии"];
	Иначе
		УдалятьПартии = Ложь;
	КонецЕсли;	
	Если ЗначениеЗаполнено( Параметры["ТолькоАктуальныеПартии"] ) Тогда 
		ТолькоАктуальныеПартии 	= Параметры["ТолькоАктуальныеПартии"];
	Иначе
		ТолькоАктуальныеПартии = Ложь;
	КонецЕсли;	
	ОчищатьСправочникВСД_Партии = Ложь;
	Предприятие = Параметры["ВыбПлощадка"];
	ПартияНачПериода = Параметры["ПартияНачПериода"];
	ПартияКонПериода = Параметры["ПартияКонПериода"];
	
	// При объединении партий в Меркурии - старые партии пропадают, появляются новые
	// поэтому в 1С остаются "остатки", которые нужно удалять
	// Если ОчищатьСправочникВСД_Партии Тогда
	Если УдалятьПартии И ОчищатьСправочникВСД_Партии И ТолькоАктуальныеПартии Тогда
		СообщитьИнфо("Плановая очистка справочника ВСД_Партии");
			Выборка = Справочники.ВСД_Партия.Выбрать();
			Пока Выборка.Следующий() Цикл			
				// ЖД Не стираем партии другой площадки
				Если Выборка.Получатель_Площадка = Предприятие Тогда
					Если ЗначениеЗаполнено(ПартияНачПериода) Тогда
						Если (Выборка.ВСДДата < ПартияНачПериода) ИЛИ (Выборка.ВСДДата > ПартияКонПериода) Тогда
							Продолжить;	
						КонецЕсли;
					КонецЕсли;
					СпрОбъект = Выборка.ПолучитьОбъект();
					СпрОбъект.УстановитьПометкуУдаления(Истина);
				КонецЕсли;				
			КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция Партии2_Ответ_Получить_ВФоне(Знач Параметры, АдресХранилища) Экспорт
	appID = Параметры["appID"];
	Если ЗначениеЗаполнено( Параметры["ПартииСмещение"] ) Тогда 
		ПартииСмещение 	= Параметры["ПартииСмещение"];
	Иначе
		ПартииСмещение = 0;
	КонецЕсли;
	Если ЗначениеЗаполнено( Параметры["УдалятьПартии"] ) Тогда 
		УдалятьПартии 	= Параметры["УдалятьПартии"];
	Иначе
		УдалятьПартии = Ложь;
	КонецЕсли;	
	Если ЗначениеЗаполнено( Параметры["ТолькоАктуальныеПартии"] ) Тогда 
		ТолькоАктуальныеПартии 	= Параметры["ТолькоАктуальныеПартии"];
	Иначе
		ТолькоАктуальныеПартии = Ложь;
	КонецЕсли;	
	НачПериода = Параметры["ПартияНачПериода"];
	КонПериода = Параметры["ПартияКонПериода"];
	Предприятие = Параметры["ВыбПлощадка"];
	
	Ответ = Партии2_Ответ_Получить(Параметры, appID );	
		
	Если Ответ Тогда 
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе			
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
КонецФункции

Функция  Партии2_Ответ_Получить(Знач Параметры, appID)
	Если НЕ(ЗначениеЗаполнено(appID)) Тогда
		ВызватьИсключение("Пустая ссылка applicationID");
	КонецЕсли;
	
	Пауза( Параметры["ПаузаСек"] );
	
	xdto = кб99_ВСД_Отправка.ПолучитьРезультатСервер( Параметры, appID );
	
	Статус = СтатусЗапроса( xdto );
	Если НайтиОшибки( xdto ) Тогда
		Возврат Статус;
	КонецЕсли;
	
	Если Статус = "COMPLETED" Тогда	
		Партии_Ответ_ЗагрузитьXML( Параметры, xdto );
	КонецЕсли;		
		
	Возврат Статус;
КонецФункции

Функция Партии_Ответ_ЗагрузитьXML(Параметры, xdto )
	
	Партия = Справочники.ВСД_Партия.ПустаяСсылка();
	
	Если НайтиОшибки( xdto ) Тогда
		Возврат Партия;	
	КонецЕсли;
	
	Попытка 
		ПришлоПартий = Число(xdto.Body.receiveApplicationResultResponse.application.result.getStockEntryListResponse.stockEntryList.count); 
	исключение 
		ПришлоПартий = 1; 
	КонецПопытки;
	
	Если Параметры["ВыводитьПодробнуюИнформацию"] Тогда 
		СообщитьИнфо("Получено партий по запросу -> "+ПришлоПартий+" текущее смещение: "+Параметры["Смещение"]);
	КонецЕсли;
	
	Попытка
		Response = xdto.Body.receiveApplicationResultResponse.application.result;
		Если НЕ(Response.Свойства().Получить("getStockEntryListResponse") = Неопределено) Тогда
			seList = Response.getStockEntryListResponse.stockEntryList.StockEntry;	
		ИначеЕсли НЕ(Response.Свойства().Получить("processIncomingConsignmentResponse") = Неопределено) Тогда
			Если Response.processIncomingConsignmentResponse.Свойства().Получить("stockEntry") <> Неопределено Тогда 
				seList = Response.processIncomingConsignmentResponse.stockEntry;	
			Иначе
				Возврат Партия;
			КонецЕсли
		ИначеЕсли НЕ(Response.Свойства().Получить("getStockEntryByGuidResponse") = Неопределено) Тогда			
			seList = Response.getStockEntryByGuidResponse.stockEntry;	
		Иначе
			СообщитьИнфо("В партия получили не обработанные ветки -> "+Response.Свойства().Получить(0));
			Возврат Партия;
		КонецЕсли;

	Исключение
		СообщитьИнфо(ОписаниеОшибки());
		Возврат Партия;
	КонецПопытки;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
	Для каждого stockEntry ИЗ stockEntryList Цикл		
		
		Партия = Партия_Заполнить( Параметры, stockEntry);
					
	КонецЦикла;
	
	Если ПришлоПартий = 1000 Тогда
		Если ЗначениеЗаполнено(Параметры["Смещение"]) Тогда 
			Параметры["Смещение"] = Параметры["Смещение"]+1000;
		Иначе
			Параметры["Смещение"] = 1000;
		КонецЕсли;
		Параметры["УдалятьПартии"]=Ложь;
		Партии2_Запрос_Отправить( Параметры );	
	КонецЕсли;
	
	СообщитьИнфо("Загружено "+ПришлоПартий+" партий");
	Возврат Партия;
    
КонецФункции

Функция СписокПроизводителей_из_XML(Параметры, ProducerList) Экспорт 
	Если ТипЗнч(ProducerList)=Тип("ОбъектXDTO") Тогда 
		ProdList = Новый Массив;
		ProdList.Добавить(ProducerList);
	ИначеЕсли ТипЗнч(ProducerList)=Тип("СписокXDTO") Тогда
		ProdList = ProducerList;
	Иначе
		Возврат "";
	КонецЕсли;
	ТзПроизводителей = Новый ТаблицаЗначений;
	ТзПроизводителей.Колонки.Добавить("Площадка",новый ОписаниеТипов("СправочникСсылка.ВСД_Площадка"));
	ТзПроизводителей.Колонки.Добавить("Роль",новый ОписаниеТипов("Строка"));
	ТзПроизводителей.Колонки.Добавить("Имя",новый ОписаниеТипов("Строка"));
	Попытка
		Для каждого producer ИЗ ProdList Цикл
			Попытка
				Если НЕ ЗначениеЗаполнено(producer.enterprise.guid) Тогда
					// Продолжить;	
				КонецЕсли;
			Исключение
				СообщитьИнфо("Не указан ГУИД Производителя во входящем ВСД, возможно импортный. Гашение без ГУИД производителя м.б. Невозможно.");
				// Продолжить; 
			КонецПопытки;
			СтрокаТЗ = ТзПроизводителей.Добавить();
			Попытка СтрокаТЗ.Имя = producer.enterprise.name; Исключение КонецПопытки;
			Попытка СтрокаТЗ.Площадка = Площадка_НайтиПоGUID( Параметры, producer.enterprise.guid, Неопределено, Ложь, Истина ); Исключение КонецПопытки;
			Попытка СтрокаТЗ.Роль =  producer.role; Исключение СтрокаТЗ.Роль = "PRODUCER"; КонецПопытки;
		КонецЦикла;			
	Исключение	КонецПопытки;
	Возврат ЗначениеВСтрокуВнутр(ТзПроизводителей);	
КонецФункции

Функция УровниУпаковки_из_XML(PList, Партия ="") Экспорт //ЖД
	// Возвращает длинну строку с Уровнями упаковок И Маркировок
	// При наличии Партия записывает в данные в ТЧ УровниУпаковки И Маркировка
	
	// Можно вернуть в виде ТЗ
	// Список физической упаковки. vd:packageList		
	// С уровнями
//   Уровни <dt:level>
// 1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
// 2 	Потребительский уровень. Товар в упаковке Для розничной торговли, маркированный штриховым кодом Для сканирования на кассе.
// 3 	Промежуточный уровень. Уровень упаковки, Если он существует, который находится между потребительским И торговым уровнем.
// 4 	Торговый уровень. Товар в упаковке, предназначенной Для заказа, оплаты И доставки. Это согласованный между ритейлером И изготовителем (ИЛИ другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается И доставляется.
// 5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому ИЛИ транспортному уровню.
// 6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной Для отгрузки покупателю (ритейлеру) при выполнении заказа. 		

// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
// UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
// BN 	Номер производственной партии.
//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства. 
// SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
// EAN8 	Маркировка в соответствии с EAN-8.
// EAN13 	Маркировка в соответствии с EAN-13.
// EAN128 	Маркировка в соответствии с EAN-128.
// BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться Для поиска группы вет.сертификатов Для партий, находящихся на данной паллете. 
	
	ТЗУровни = Новый ТаблицаЗначений;		
	ТЗУровни.Колонки.Добавить("НомерУровня",новый ОписаниеТипов("Число"));
	ТЗУровни.Колонки.Добавить("Упаковка",новый ОписаниеТипов("СправочникСсылка.ВСД_ФормыУпаковки"));
	ТЗУровни.Колонки.Добавить("КолВо",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12, 3)));
	ТЗУровни.Колонки.Добавить("Маркировки");
	
	Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
		Партия.УровниУпаковки.Очистить();
		Партия.Маркировка.Очистить();
	КонецЕсли;		
	
	
	Если ТипЗнч(PList)=Тип("ОбъектXDTO") Тогда 
		PListArray = Новый Массив;
		PListArray.Добавить(PList);
	ИначеЕсли ТипЗнч(PList)=Тип("СписокXDTO") Тогда
		PListArray = PList;
	Иначе
		Возврат "";
	КонецЕсли;
	Попытка
		Для каждого Узел ИЗ PListArray Цикл
			СтрУровня = ТЗУровни.Добавить();

			Попытка СтрУровня.НомерУровня = Узел.level; Исключение КонецПопытки;  // Уровень упаковки
			Попытка СтрУровня.Упаковка = НайтиФормуУпаковки( Узел.packingType.guid, Узел.packingType.name);	Исключение	КонецПопытки;
			// dt:globalID  	Уникальный идентификатор упаковки.
			Попытка	ГлИД = Узел.packingType.globalID; Исключение КонецПопытки;
			Попытка	СтрУровня.КолВо = Число(Узел.quantity);	Исключение	КонецПопытки;
			Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
				ПартУровни = Партия.УровниУпаковки.Добавить();
				ПартУровни.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);//Значени = Метаданные.Перечисления.ВСД_УровниУпаковки.ЗначенияПеречисления[СтрУровня.НомерУровня-1];
				ПартУровни.ФормаУпаковки = СтрУровня.Упаковка;
				ПартУровни.Количество = СтрУровня.КолВо;				
			КонецЕсли;		
			
			СзМаркировки = Новый Списокзначений;
			// Маркировка партии продукции. Например
			//      <dt:productMarks class="EAN128">7456873456-147885</dt:productMarks>
            //      <dt:productMarks class="UNDEFINED">custom marking</dt:productMarks> 
			Попытка
                Маркировки = Узел.productMarks;
				Если ТипЗнч(Маркировки)=Тип("ОбъектXDTO") Тогда 
					МаркМассив = Новый Массив;
					МаркМассив.Добавить(Маркировки);
				ИначеЕсли ТипЗнч(Маркировки)=Тип("СписокXDTO") Тогда
					МаркМассив = Маркировки;
				КонецЕсли;
				
				Для каждого МаркН ИЗ МаркМассив Цикл		
					МаркЗнач = МаркН.Последовательность().ПолучитьТекст(0); 
					МаркКласс = МаркН.class;
					СзМаркировки.Добавить(МаркЗнач,МаркКласс);
					Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
						ПартМаркировка = Партия.Маркировка.Добавить();
						ПартМаркировка.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);
						ПартМаркировка.Класс = Перечисления.ВСД_Маркировка[МаркКласс];
						ПартМаркировка.Маркировка = МаркЗнач;				
					КонецЕсли;		
				КонецЦикла;
			Исключение КонецПопытки;
		    Если СзМаркировки.Количество() > 0 Тогда
		        СтрУровня.Маркировки = ЗначениеВСтрокуВнутр(СзМаркировки);
		    КонецЕсли;
		КонецЦикла;
	Исключение	КонецПопытки;
	Если ТЗУровни.Количество()>0 Тогда
		Возврат ЗначениеВСтрокуВнутр(ТЗУровни);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции


Функция НайтиПартиюПоGUID(Guid)
	Если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Партия.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Партия КАК ВСД_Партия
		                      |ГДЕ
		                      |	ВСД_Партия.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка.ПолучитьОбъект();
		Иначе
			Ответ = Справочники.ВСД_Партия.СоздатьЭлемент();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Партия");
		Ответ = Справочники.ВСД_Партия.СоздатьЭлемент();	
	КонецЕсли;
	 	
	Возврат Ответ;
КонецФункции

Функция Партия_Заполнить( Параметры, stockEntry, докСсылка = Неопределено )
	Если Параметры.Свойство("ВыбПлощадка") Тогда 
		ВыбПлощадка = Параметры["ВыбПлощадка"];
	Иначе
		ВыбПлощадка = Параметры["Отправитель_Площадка"];
	КонецЕсли;
	
	active = stockEntry.active;		
	guid = stockEntry.guid;	
	
	Партия = НайтиПартиюПоGUID(guid);
	
	Если active="false" Тогда 
		СообщитьИнфо("ВСД_Партия ["+Партия+"] guid ["+guid+"] не активна", Партия);
		Партия.УстановитьПометкуУдаления(Истина);
		Возврат Партия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(докСсылка) Тогда 
		Партия.докОснование = докСсылка;
	КонецЕсли;
	
	Продукция_Элемент = Продукция_Элемент_Найти( Параметры, stockEntry.batch.productItem, Истина );
		
	Партия.Статус = stockEntry.status;		
	Партия.GUID = guid;
	Партия.UUID = stockEntry.uuid;
	Партия.НомерЗаписи = stockEntry.entryNumber;
	Партия.ДатаИзменения = СтрокаВДату( stockEntry.updateDate );
	Партия.ВсдДата = СтрокаВДату(stockEntry.createDate);	
	
	batch = stockEntry.batch;
	Партия.Продукция 	= НайтиПродукцию(batch.product.guid);
	Партия.ВидПродукции = НайтиВидПродукции(batch.subProduct.guid);
		
	Партия.Продукция_Элемент = Продукция_Элемент;
	Партия.НаименованиеПродукции = Партия.Продукция_Элемент.Наименование;//НаименованиеПродукции;
	Партия.Наименование = Партия.Продукция_Элемент.Наименование;
	
	Партия.Количество 	= Число(batch.volume);
	Партия.ЕдиницаИзмерения = НайтиЕдИзмерения( batch.unit.guid );
	
	ДатаИзготовления1="";	ДатаИзготовления=""; ДатаИзготовления2="";		
	Попытка 
		Дата_из_XML(batch.dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления ); 
	Исключение 
		СообщитьИнфо("Нет сведений о дате изготовления партии "); 
	КонецПопытки;
	Партия.ДатаИзготовления1 = ДатаИзготовления1;
	Партия.ДатаИзготовления2 = ДатаИзготовления2;
	Партия.ДатаИзготовления =  ДатаИзготовления;
		
	ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
	Попытка 
		Дата_из_XML(batch.expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности ); 
	Исключение 
		СообщитьИнфо("Нет сведений о сроке годности партии "); 
	КонецПопытки;
	Партия.ДатаСрокГодности = ДатаСрокГодности;
	Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
	Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
	// Номер Партии - м.б. несколько
	ВремНомерПартии = ""; 
	Попытка
		Если ТипЗнч(batch.batchID)<>Тип("СписокXDTO") Тогда 
			ListbatchID = Новый Массив;
			ListbatchID.Добавить(batch.batchID);
		Иначе
			ListbatchID = batch.batchID;
		КонецЕсли;
		к=0;
		Для Каждого batchID ИЗ ListbatchID Цикл
			Если к>0 Тогда
				ВремНомерПартии = ВремНомерПартии+"; ";	
			КонецЕсли;
			ВремНомерПартии = ВремНомерПартии+batchID;
			к = к+1;	
		КонецЦикла;
	Исключение КонецПопытки;
	Попытка Партия.НомерПартии =  ВремНомерПартии; Исключение	КонецПопытки; 
	// <vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 

	Попытка ПроизводителиСписок = СписокПроизводителей_из_XML(Параметры, batch.origin.producer );Исключение КонецПопытки;
	//Запишем одного ИЗ производителей в Реквизит
	Попытка
		СЗПроизводители = ЗначениеИзСтрокиВнутр(ПроизводителиСписок);			
		Партия.Производитель_Площадка = СЗПроизводители[0].Площадка;	
	Исключение КонецПопытки;
	Попытка Партия.ПроизводителиСписок = ПроизводителиСписок;Исключение КонецПопытки; 
	
	Попытка	Партия.УровниУпаковки = УровниУпаковки_из_XML(batch.packageList.package, Партия);	Исключение 	КонецПопытки;	
	
	Попытка	Партия.Получатель_ХозСубъект = ХозСубъект_НайтиПоGUID( Параметры, batch.owner.guid ); Исключение КонецПопытки;
		
	Партия.Получатель_Площадка = ВыбПлощадка;//Отправитель_Площадка;

	// **** Лабораторные исследования входящей партии *******
	// все реквизиты могут не присутствовать, поэтому все через попытку
	Попытка
		Если ТипЗнч( stockEntry.vetEventList.laboratoryResearch )=Тип("ОбъектXDTO") Тогда 
			тзЛабы = Новый Массив;
			тзЛабы.Добавить( stockEntry.vetEventList.laboratoryResearch );
		ИначеЕсли ТипЗнч( stockEntry.vetEventList.laboratoryResearch )=Тип("СписокXDTO") Тогда
			тзЛабы = stockEntry.vetEventList.laboratoryResearch;
		Иначе
			Возврат "";
		КонецЕсли;
		
		ПартияЛабы=Партия.ЛабораторныеИсследования;
		ПартияЛабы.Очистить();
		Для Каждого строкаЛаб ИЗ тзЛабы Цикл
			новстр=ПартияЛабы.добавить();
			Попытка новстр.наименованиеЛаборатории = строкалаб.operator.name;  Исключение КонецПопытки;
			Попытка новстр.НомерЭкспертизы = строкалаб.expertiseID;  Исключение КонецПопытки;
			Попытка новстр.заключение = строкалаб.conclusion;  Исключение КонецПопытки;
			Попытка новстр.НаименованиеПоказателя = строкалаб.indicator.name;  Исключение КонецПопытки;
			Попытка новстр.методИсследования = строкалаб.method.name; Исключение КонецПопытки;
			Попытка РезультатИсследования = Строкалаб.result; Исключение РезультатИсследования = ""; КонецПопытки;
			новстр.РезультатИсследования = Перечисления.ВСД_РезультатИсследования[РезультатИсследования];
			Попытка новстр.ДатаРезультата = СтрокаВДату( строкалаб.actualDateTime);  Исключение КонецПопытки;
			Попытка новстр.НомерАктаОтбораПроб=строкалаб.referencedDocument.issueNumber; Исключение КонецПопытки;
			Попытка новстр.ДатаОтбораПроб = СтрокаВДату(строкалаб.referencedDocument.issueDate); Исключение КонецПопытки;
		КонецЦикла;
	исключение
	конецпопытки;
	
	//**************************************************
	
	
	Если Партия.Количество=0 Тогда 
		
		Если ( Партия.ЭтоНовый()=0 ) Тогда			
			СообщитьИнфо("Партия guid ["+Партия.guid+"] Количество = 0. Партия удалена. ", Партия);			
			Партия.Записать();
			Партия.УстановитьПометкуУдаления(Истина);			
		Иначе
			СообщитьИнфо("Партия guid ["+Партия.guid+"] Количество = 0. Партия пропущена. ");
			Возврат "";
		КонецЕсли;
	Иначе
		Партия.Записать();
		Партия.УстановитьПометкуУдаления(Ложь);
		СообщитьИнфо(" ВСД_Партия от "+Партия.ВсдДата+" # "+Партия.НомерЗаписи, Партия);	
	КонецЕсли;
	
	Возврат Партия;		
	
КонецФункции

#КонецОбласти

#Область Документы

//Отправка любого ВСД
Процедура ОтправитьВСДвГИС(Знач Параметры, АдресХранилища) Экспорт
	ДокСсылка = Неопределено;
	СписокДокументов = Неопределено;
	Параметры.Свойство("ДокСсылка", ДокСсылка);
	Параметры.Свойство("СписокДокументов", СписокДокументов);
	
	Если ЗначениеЗаполнено( ДокСсылка ) Тогда 
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить( ДокСсылка );
	КонецЕсли;

	Для Каждого ДокСсылка ИЗ СписокДокументов Цикл
		
		ПараметрыОбщие = кб99_ВСД.ЗагрузитьПараметры( ДокСсылка.Организация );
		
		Если типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_транзакция") Тогда
			Статус = ВСД2_транзакция_Отправить(ПараметрыОбщие, ДокСсылка);
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_Производство") тогда
			Статус = ВСД2_Производство_Отправить(ПараметрыОбщие, ДокСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Если Статус = "COMPLETED" Тогда 
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе			
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Ложь);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
	
КонецПроцедуры

//Отправка ВСД для параллельной обработки на сервере Ветис
Процедура ОтправитьВСД_Параллельно(Знач Параметры, АдресХранилища=Неопределено) Экспорт
	
	СообщитьИнфо("Начало отправки ВСД в Ветис");	
	
	ДокСсылка = Неопределено;
	СписокДокументов = Неопределено;
	Параметры.Свойство("ДокСсылка", ДокСсылка);
	Параметры.Свойство("СписокДокументов", СписокДокументов);
	
	Если ЗначениеЗаполнено( ДокСсылка ) Тогда 
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить( ДокСсылка );
	КонецЕсли;

	ТекОрганизация = Неопределено;
	Статус = "";
	
	Для Каждого ДокСсылка Из СписокДокументов Цикл	
		
		Если ТекОрганизация <> ДокСсылка.Организация Тогда 
			ПараметрыОбщие = кб99_ВСД.ЗагрузитьПараметры( ДокСсылка.Организация );
			ТекОрганизация = ДокСсылка.Организация;
		КонецЕсли;
		
		Если типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_транзакция") Тогда
			Статус = ВСД2_транзакция_Отправить(ПараметрыОбщие, ДокСсылка, Неопределено, Ложь);
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_Производство") тогда
			Статус = ВСД2_Производство_Отправить(ПараметрыОбщие, ДокСсылка, Ложь );
		КонецЕсли;
		
	КонецЦикла;
	
	Пауза( Параметры["ПаузаСек"] );
	
	// ответ 
	Для Каждого ДокСсылка Из СписокДокументов Цикл
		
		Если ТекОрганизация <> ДокСсылка.Организация Тогда 
			ПараметрыОбщие = кб99_ВСД.ЗагрузитьПараметры( ДокСсылка.Организация );
			ТекОрганизация = ДокСсылка.Организация;
		КонецЕсли;
	
		Статус =  ПолучитьРезультат_ВСД2( Параметры, ДокСсылка.applicationID, ДокСсылка, Ложь, Истина );	
		Для А=1 По 10 Цикл
			Если (Статус="IN_PROCESS") Тогда
				Статус =  ПолучитьРезультат_ВСД2( Параметры, ДокСсылка.applicationID, ДокСсылка, Истина, Истина );	
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
	Если Статус = "COMPLETED" Тогда 
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", Истина);
	Иначе			
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("ЗаданиеВыполнено", ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено( АдресХранилища ) Тогда 
		ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
	КонецЕсли;
	
	СообщитьИнфо("Отправка ВСД в Ветис завершена "+Статус);	
КонецПроцедуры


Функция ProductItem_в_XML(СтрПартии, ПроверятьВидПродукцииПартииИProductItem = 0) Экспорт
	Запрос = "
	|                    <vd:productItem>";
	Если ЗначениеЗаполнено(СтрПартии.Продукция_Элемент.GUID) И НЕ(СтрПартии.Продукция_Элемент.ПометкаУдаления) Тогда
		// ПРОИЗВОДСТВО Обязательно должно быть заполнено хотя бы одно ИЗ полей: либо UUID, либо GUID. При указании обоих полей приоритет у UUID.
		Попытка
			Если ПроверятьВидПродукцииПартииИProductItem = 1 Тогда
    	    	// При изменении Вида продукции у ProductItem возникнет ошибка при списании ранее полученной партии
				// Указанное наименование продукции относится к другому виду продукции.
				Если ЗначениеЗаполнено(СтрПартии.Партия) И (СтрПартии.Продукция_Элемент.ВидПродукции = СтрПартии.Партия.ВидПродукции) тогда
					Запрос = Запрос+ "
					|                      <bs:guid>"+ СокрЛП(СтрПартии.Продукция_Элемент.GUID) +"</bs:guid>";
				КонецЕсли;
			Иначе
				Запрос = Запрос+ "
				|                      <bs:guid>"+ СокрЛП(СтрПартии.Продукция_Элемент.GUID) +"</bs:guid>";
			КонецЕсли;
		Исключение 	КонецПопытки;
	КонецЕсли;
	Попытка
		Если ЗначениеЗаполнено(СтрПартии.GTIN) Тогда 
		    Запрос = Запрос+ " <dt:globalID>"+ СокрЛП(СтрПартии.GTIN) +"</dt:globalID>";		
		КонецЕсли 
	Исключение КонецПопытки;
	
	//Момент ниже возможно упростить
	Попытка //Производство
	    Запрос = Запрос+?(ЗначениеЗаполнено(СтрПартии.НаименованиеПродукции),	"
		|                     <dt:name>"+ ЗаменитьСпецСимволы(СтрПартии.НаименованиеПродукции) +"</dt:name>","");
	Исключение // транзакция 
	    Запрос = Запрос+?(ЗначениеЗаполнено(СтрПартии.Продукция_Элемент),	"
		|                     <dt:name>"+ ЗаменитьСпецСимволы(СтрПартии.Продукция_Элемент.Наименование) +"</dt:name>","");
	КонецПопытки;
	
	Попытка
		Запрос = Запрос+?(ЗначениеЗаполнено(СтрПартии.Артикул),	"
		|                     <dt:code>"+ СокрЛП(СтрПартии.КодПродукции) +"</dt:code>","");
	Исключение КонецПопытки;
	//Фасовка
	Попытка
		Если ЗначениеЗаполнено(СтрПартии.ФасовкаФормаУпаковки) Тогда
			Запрос = Запрос + "
	    	|          <dt:packaging>
	      	|            <dt:packagingType>
	        |              <bs:guid>"+ СокрЛП(СтрПартии.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
	//						<dt:globalID>BE</dt:globalID> 	dt:PackingCodeType 	[0..1] 	Уникальный идентификатор упаковки. 
		    |            </dt:packagingType>
	   		|            <dt:quantity>"+ Формат(СтрПартии.ФасовкаКоличество, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>
	        |            <dt:volume>"+ Формат(СтрПартии.ФасовкаОбъем, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:volume>
		    |            <dt:unit>
	   		|              <bs:guid>"+ СокрЛП(СтрПартии.ФасовкаЕдиницаИзмерения.GUID) +"</bs:guid>
	        |            </dt:unit>
		    |          </dt:packaging>";		    
		КонецЕсли;		
	Исключение КонецПопытки;
	Запрос = Запрос+ "
    |        </vd:productItem>";
	Возврат Запрос;	
КонецФункции

Функция СписокНомеровПартий_из_XML(batch) Экспорт
	// Номер Партии - м.б. несколько
	СпНомераПартий = Новый СписокЗначений;
	Попытка
	Если ТипЗнч(batch.batchID)<>Тип("СписокXDTO") Тогда 
		ListbatchID = Новый Массив;
		ListbatchID.Добавить(batch.batchID);
	Иначе
		ListbatchID = batch.batchID;
	КонецЕсли;
	Для Каждого batchID ИЗ ListbatchID Цикл
		СпНомераПартий.Добавить(batchID);
	КонецЦикла;
	Исключение КонецПопытки;
	Возврат ЗначениеВСтрокуВнутр(СпНомераПартий);		
КонецФункции

Функция УровниУпаковки_в_XML(НомерСтрокиПартии,тзУпаковка,тзМаркировка) Экспорт
	Запрос = "";
	// Оптимизировать перебор Фильтрацией
	Если тзУпаковка.Количество()>0 Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";
		Для каждого СтрокаУпаковки ИЗ тзУпаковка Цикл
			// связь со строкой Товары
			Если НЕ(СтрокаУпаковки.СтрокаПродукции = НомерСтрокиПартии) Тогда
				Продолжить;	
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаУпаковки.ФормаУпаковки.GUID) Тогда
				СообщитьИнфо("Не указана форма упаковки на уровне "+СтрокаУпаковки.НомерУровня);
			    Продолжить;
			КонецЕсли;
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+ПолучитьПорядковыйНомерПеречисления(СтрокаУпаковки.НомерУровня)+"</dt:level>
			|                    <dt:packingType>
			|                      <bs:guid>"+ СтрокаУпаковки.ФормаУпаковки.GUID +"</bs:guid>
			|                    </dt:packingType>
			|                    <dt:quantity>"+ Формат(СтрокаУпаковки.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>";
			
			// Маркировки
			Для каждого СтрокаМаркировки ИЗ тзМаркировка Цикл
				Если НЕ(СтрокаУпаковки.НомерУровня = СтрокаМаркировки.НомерУровня) ИЛИ НЕ(СтрокаУпаковки.СтрокаПродукции = СтрокаМаркировки.СтрокаПродукции) Тогда
					Продолжить;	
				КонецЕсли;
				Если ПустаяСтрока(СтрокаМаркировки.Класс) Тогда
					СообщитьИнфо("Не указан класс маркировки "+СтрокаМаркировки.Маркировка);
				    Продолжить;
				КонецЕсли;
				Запрос=Запрос+"
				|                    <dt:productMarks class='"+ ПолучитьИдентификаторПеречисления( СтрокаМаркировки.Класс ) +"'>"+СтрокаМаркировки.Маркировка+"</dt:productMarks>";
			КонецЦикла;		
			Запрос=Запрос+"
   	   		|                  </dt:package>";
	    КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";
	КонецЕсли;
	
	Возврат Запрос;	
КонецФункции

Функция СоздатьТзМаршрутСледования() 
	// Порядок колонок имеет значние при сохранинии в Файл => структура должна быть единообразна - это 
	
	ТЗточкиМаршрута = Новый ТаблицаЗначений;
	ТЗточкиМаршрута.Колонки.Добавить("ВыбХС",новый ОписаниеТипов("СправочникСсылка.ВСД_ХозСубъект"));
	ТЗточкиМаршрута.Колонки.Добавить("ВыбПлощадка",новый ОписаниеТипов("СправочникСсылка.ВСД_Площадка"));
	ТЗточкиМаршрута.Колонки.Добавить("Страна",новый ОписаниеТипов("СправочникСсылка.ВСД_Страна"));
	ТЗточкиМаршрута.Колонки.Добавить("Регион",новый ОписаниеТипов("СправочникСсылка.ВСД_Регион"));
	ТЗточкиМаршрута.Колонки.Добавить("Район",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Город",новый ОписаниеТипов("СправочникСсылка.ВСД_Город"));
	ТЗточкиМаршрута.Колонки.Добавить("НасПункт",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Улица",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Дом",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Строение",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Помещение",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Перегрузка",новый ОписаниеТипов("Число"));
	ТЗточкиМаршрута.Колонки.Добавить("ТипТранспорта",новый ОписаниеТипов("Число"));
	ТЗточкиМаршрута.Колонки.Добавить("НомерТС",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерАвто",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерКонтейнера",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерВагона",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерПрицепа",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("НазваниеСудна",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("НомерАвиарейса",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("UUID",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("НомерТочки",новый ОписаниеТипов("Число"));
	Возврат ТзТочкиМаршрута;
КонецФункции

Функция МаршрутСледования_из_XML( Параметры, list ) 
    // Упрощенная схема - выбраны Площадки, а не ручная запись адреса
	// ТЗточкиМаршрута = СоздатьОбъект("ТаблицаЗначений");
	ТЗточкиМаршрута = СоздатьТзМаршрутСледования();
	Попытка
		Если ТипЗнч(list)<>Тип("СписокXDTO") Тогда 
			Routelist = Новый Массив;
			Routelist.Добавить(list);
		Иначе
			Routelist = list;
		КонецЕсли;
		
	    Для каждого узел ИЗ Routelist Цикл
			СтрокаТЗ = ТЗточкиМаршрута.Добавить();
            Попытка СтрокаТЗ.UUID					 = 		Узел.uuid; Исключение КонецПопытки;
            Попытка СтрокаТЗ.НомерТочки				 =		Узел.sqnId; Исключение КонецПопытки;
			Попытка Площадка_GUID = Узел.enterprise.guid; Исключение КонецПопытки;
			Попытка СтрокаТЗ.ВыбПлощадка = Площадка_НайтиПоGUID(Параметры, Площадка_GUID, Неопределено, Ложь, Истина ); Исключение КонецПопытки;
            Попытка СтрокаТЗ.Перегрузка				 = 		?(Узел.transshipment = "true",1,0); Исключение КонецПопытки;
            Попытка СтрокаТЗ.ТипТранспорта			 = 		Число(Узел.nextTransport.transportType); Исключение КонецПопытки;
			
			Если СтрокаТЗ.ТипТранспорта = 1 Тогда
				Попытка СтрокаТЗ.номеравто 			= Узел.nextTransport.transportNumber.vehicleNumber; Исключение КонецПопытки;
				Попытка СтрокаТЗ.номерПрицепа 	= Узел.nextTransport.transportNumber.trailerNumber; Исключение КонецПопытки;;
				Попытка СтрокаТЗ.номерКонтейнера 	= Узел.nextTransport.transportNumber.containerNumber; Исключение КонецПопытки;
			Иначеесли СтрокаТЗ.ТипТранспорта = 2 Тогда
				Попытка СтрокаТЗ.номерВагона 			= Узел.nextTransport.transportNumber.wagonNumber; Исключение КонецПопытки;
			Иначеесли СтрокаТЗ.ТипТранспорта = 3 Тогда
				Попытка СтрокаТЗ.НомерАвиарейса 			= Узел.nextTransport.transportNumber.flightNumber; Исключение КонецПопытки;
			Иначеесли (СтрокаТЗ.ТипТранспорта = 4) Тогда
				Попытка СтрокаТЗ.НазваниеСудна 			= Узел.nextTransport.transportNumber.shipName; Исключение КонецПопытки;
			Иначеесли (СтрокаТЗ.ТипТранспорта = 5) Тогда
				Попытка 
					СтрокаТЗ.НазваниеСудна 			= Узел.nextTransport.transportNumber.shipName; 
				Исключение КонецПопытки;
				
			КонецЕсли;
			СтрокаТЗ.номеравто = ?(СтрокаТЗ.номеравто = "ОбъектXDTO","",СтрокаТЗ.номеравто);
			СтрокаТЗ.номерПрицепа = ?(СтрокаТЗ.номерПрицепа = "ОбъектXDTO","",СтрокаТЗ.номерПрицепа);
			СтрокаТЗ.номерКонтейнера = ?(СтрокаТЗ.номерКонтейнера = "ОбъектXDTO","",СтрокаТЗ.номерКонтейнера);
			СтрокаТЗ.номерВагона = ?(СтрокаТЗ.номерВагона = "ОбъектXDTO","",СтрокаТЗ.номерВагона);
			СтрокаТЗ.НомерАвиарейса = ?(СтрокаТЗ.НомерАвиарейса = "ОбъектXDTO","",СтрокаТЗ.НомерАвиарейса);
			СтрокаТЗ.НазваниеСудна = ?(СтрокаТЗ.НазваниеСудна = "ОбъектXDTO","",СтрокаТЗ.НазваниеСудна);
			
            СтрокаТЗ.НомерТС = СокрЛП(СтрокаТЗ.номеравто) + СокрЛП(СтрокаТЗ.номерВагона) + СокрЛП(СтрокаТЗ.НомерАвиарейса)+ СокрЛП(СтрокаТЗ.НазваниеСудна);; //Что-то тут не так
		КонецЦикла;
	Исключение КонецПопытки;
	ТЗточкиМаршрута.Сортировать("НомерТочки");
	
	Если ТЗточкиМаршрута.Количество()>0 Тогда
	    Возврат (ТЗточкиМаршрута);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
    
КонецФункции

Функция НайтиВСДпоUUID( _uuid, ВидСоздаваемогоДокумента = "ВСД" ) 
	// будем искать все виды Результирующих ВСД		
	Если ПустаяСтрока(_uuid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД.Ссылка
		                      |ИЗ
		                      |	Документ.ВСД КАК ВСД
		                      |ГДЕ
		                      |	ВСД.UUID = &UUID
							  |ОБЪЕДИНИТЬ
							  |ВЫБРАТЬ
		                      |	ВСД2.Ссылка
		                      |ИЗ
		                      |	Документ.ВСД2 КАК ВСД2
		                      |ГДЕ
		                      |	ВСД2.UUID = &UUID");
		
		Запрос.УстановитьПараметр("UUID", _Uuid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			ДокОб = Результат.Ссылка.ПолучитьОбъект();		
			ДокОб.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
			ДокОб.УстановитьПометкуУдаления(Ложь);
		Иначе
			ДокОб = Документы[ВидСоздаваемогоДокумента].СоздатьДокумент();
		КонецЕсли;	
		
	Иначе
		СообщитьИнфо("Пустой UUID");
	КонецЕсли;
	
	Возврат ДокОб;

КонецФункции

Процедура Фасовка_из_XML( packaging,ФасовкаНаименование="",ФасовкаФормаУпаковки="",ФасовкаКоличество="",ФасовкаОбъем="",ФасовкаЕдиницаИзм="") Экспорт 
	Попытка	ФасовкаНаименование =  packaging.packagingType.name;	Исключение КонецПопытки;
	Попытка ФасовкаФормаУпаковки = НайтиФормуУпаковки( packaging.packagingType.guid, ФасовкаНаименование); Исключение КонецПопытки;
	Попытка	ФасовкаКоличество = Число(packaging.quantity); Исключение КонецПопытки;
	Попытка	ФасовкаОбъем = Число(packaging.volume); Исключение КонецПопытки;
	Попытка	ФасовкаЕдиницаИзм = НайтиЕдИзмерения(packaging.unit.guid); Исключение КонецПопытки;			
КонецПроцедуры

Функция СвязанныеДокументы_из_XML(referencedDocument)  
	Если ТипЗнч(referencedDocument)=Тип("ОбъектXDTO") Тогда 
		RDListArray = Новый Массив;
		RDListArray.Добавить(referencedDocument);
	ИначеЕсли ТипЗнч(referencedDocument)=Тип("СписокXDTO") Тогда
		RDListArray = referencedDocument;
	Иначе
		Возврат "";
	КонецЕсли;
	// Связанные документы  - их м.б. много
	ТЗСвДокументы = Новый ТаблицаЗначений;		
	ТЗСвДокументы.Колонки.Добавить("ТипДокумента",новый ОписаниеТипов("Число"));
	ТЗСвДокументы.Колонки.Добавить("НомерДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("СерияДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("ДатаДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("ТипОтношенияДок",новый ОписаниеТипов("Число"));
	
	Попытка
		Для Каждого Узел ИЗ RDListArray Цикл
			// 1 -ТТН, 6 -ТОРГ12,5 - ТрН, 16 - Заказ  http://help.vetrf.ru/wiki/DocumentType_v2.0
			СтрокаТЗ = ТЗСвДокументы.Добавить();
			Попытка СтрокаТЗ.ТипДокумента =  Узел.type; Исключение 	КонецПопытки;
			Попытка	СтрокаТЗ.НомерДокумента =  Узел.issueNumber; Исключение  КонецПопытки;
			Попытка СтрокаТЗ.СерияДокумента =  Узел.issueSeries;	Исключение 	КонецПопытки;
			Попытка СтрокаТЗ.ДатаДокумента =  Узел.issueDate; Исключение 	КонецПопытки;
			СтрокаТЗ.СерияДокумента = ?(СтрокаТЗ.СерияДокумента = "ОбъектXDTO","",СтрокаТЗ.СерияДокумента);
		    // ТипОтношенияДок
			// 1 	Сопроводительный документ. 	Complementary accompanying document.
			// 2 	Предшествующий документ. 	Preceding document (Ancestor).
			// 3 	Следующий документ. 	Subsequent/following document (Child).
			// 4 	Документ, взамен которого выдан текущий документ. 	Replaced document.
			// 5 	Документ, заменяющий текущий документ. 	Replaced by document.
			// 6 	Связанный документ. 	Related document. 				
			Попытка	СтрокаТЗ.ТипОтношенияДок =  Узел.relationshipType; Исключение КонецПопытки;
		КонецЦикла;
	Исключение		КонецПопытки;
	Если ТЗСвДокументы.Количество()>0 Тогда
		Возврат ЗначениеВСтрокуВнутр(ТЗСвДокументы);
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции

Функция Изготовление_СрокГодности_в_XML(СтрПартии) Экспорт
	Запрос = "	
		|                <vd:dateOfProduction> ";
		// Может быть указана датой ИЛИ диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		// Для скоропортящейся продукции обязательны к указанию год/месяц/день И могут быть указаны час/минута.
		// Для не скоропортящейся продукции обязательны к указанию год/месяц И может быть указан день.
		// Для не скоропортящейся продукции дата выработки И дата окончания срока годности должны быть заданы в одном формате 
		//	(например, Если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если ЗначениеЗаполнено(СтрПартии.ДатаИзготовления1) Тогда
			Запрос = Запрос+ "
		|              <vd:firstDate>
		|                <dt:year>"+ДатаГод(СтрПартии.ДатаИзготовления1)+"</dt:year>
		|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаИзготовления1) +"</dt:month>
		|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаИзготовления1) +"</dt:day>
		|                <dt:hour>"+ формат( СтрПартии.ДатаИзготовления1, "ДФ=ЧЧ") +"</dt:hour>
		|              </vd:firstDate> ";
		КонецЕсли;
		Если ((ЗначениеЗаполнено(СтрПартии.ДатаИзготовления2)) И 
				(СтрПартии.ДатаИзготовления2 > СтрПартии.ДатаИзготовления1)) Тогда
			Запрос=Запрос+"		
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаИзготовления2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаИзготовления2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаИзготовления2) +"</dt:day>
			|                <dt:hour>"+ формат( СтрПартии.ДатаИзготовления2, "ДФ=ЧЧ") +"</dt:hour>
			|              </vd:secondDate> ";
		КонецЕсли;	
		Запрос=Запрос+"
		|            </vd:dateOfProduction>
		|            <vd:expiryDate> ";
		// !!! Не указывается Для типа продукции "Живые животные".
		// Может быть указана датой ИЛИ диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		// Для скоропортящейся продукции обязательны к указанию год/месяц/день И могут быть указаны час/минута.
		// Для не скоропортящейся продукции обязательны к указанию год/месяц И может быть указан день.
		// Для не скоропортящейся продукции дата выработки И дата окончания срока годности должны быть заданы в одном формате 
		//	(например, Если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если (ЗначениеЗаполнено(СтрПартии.ДатаСрокГодности1)) Тогда
			Запрос=Запрос+"
			|              <vd:firstDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаСрокГодности1) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаСрокГодности1) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаСрокГодности1) +"</dt:day>
			|                <dt:hour>"+ формат( СтрПартии.ДатаСрокГодности1, "ДФ=ЧЧ") +"</dt:hour>
			|              </vd:firstDate>";
		КонецЕсли;
		Если ((ЗначениеЗаполнено(СтрПартии.ДатаСрокГодности2)) И 
				(СтрПартии.ДатаСрокГодности2 > СтрПартии.ДатаСрокГодности1)) Тогда
			Запрос=Запрос+"				
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаСрокГодности2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаСрокГодности2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаСрокГодности2) +"</dt:day>
			|                <dt:hour>"+ формат( СтрПартии.ДатаСрокГодности2, "ДФ=ЧЧ") +"</dt:hour>
			|              </vd:secondDate>";
		КонецЕсли;
		Запрос=Запрос+"
		|                </vd:expiryDate>";
	Возврат Запрос;	
КонецФункции

Функция Выбрать_ВСД2( докОснование ) Экспорт
	// Выбирает подчиненные ВСД_Транзакции документы ВСД 
	тзДок = Новый ТаблицаЗначений;
	тзДок.Колонки.Добавить("Док");
	
	Если НЕ(ЗначениеЗаполнено(докОснование)) Тогда
		Возврат тзДок;
	ИначеЕсли типЗнч( докОснование ) = Тип("ДокументСсылка.ВСД2") Тогда 
		СтрТЗ = тзДок.Добавить();
		СтрТЗ.Док = докОснование;		
	Иначе
 		Запрос = Новый Запрос;
    	ТекстЗапроса = 
        "ВЫБРАТЬ
        |    Ссылка
        |ИЗ
        |    Документ.ВСД КАК
        |    ВСДДокументыОснования
        |ГДЕ
        |    ВСДДокументыОснования.ДокументОснование =
        |    &ВыбВСДТранзакция";
		
		Если типЗнч(докОснование) = Тип("ДокументСсылка.ВСД2_транзакция") тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.ВСД","Документ.ВСД2");		
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
	    Запрос.УстановитьПараметр("ВыбВСДТранзакция", докОснование);
    	
	    РезультатЗапроса = Запрос.Выполнить(); 
    	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
 
	    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    	    ВСДРезультат = ВыборкаДетальныеЗаписи.Ссылка;
			СтрТЗ = тзДок.Добавить();
			СтрТЗ.Док = ВСДРезультат;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат тзДок;
КонецФункции

#Область ВСД2
Функция ПолучитьСписокВСД2_ЗапросXML( Параметры, ПолучательПлощадка, vetDocumentType, vetDocumentStatus, Смещение, ПоступилиС, ПоступилиПо, ОтправительХозСубъект, ОтправительПлощадка)

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( Параметры["param_api_key"] ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( Параметры["param_issuer_id"] ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:getVetDocumentListRequest>
	|            <merc:localTransactionId>a1</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
	|            </merc:initiator>
	|            <bs:listOptions>
	|              <bs:count>1000</bs:count>
	|              <bs:offset>"+Формат( Смещение, "ЧДЦ=0; ЧН=0; ЧГ=" )+"</bs:offset>
	|            </bs:listOptions>
	|            <vd:vetDocumentType>"+ vetDocumentType +"</vd:vetDocumentType>
	|            <vd:vetDocumentStatus>"+ vetDocumentStatus +"</vd:vetDocumentStatus>";
	Если значениеЗаполнено(ПоступилиС) тогда
		Запрос = Запрос +"
		|            <vd:issueDateInterval>
		|                <bs:beginDate>"+ ДатаXML(ПоступилиС, "T00:00:00") +"</bs:beginDate>
		|                <bs:endDate>"+ ДатаXML(ПоступилиПо, "T23:59:59") +"</bs:endDate>
		|            </vd:issueDateInterval>";
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтправительХозСубъект.GUID) ИЛИ значениеЗаполнено(ОтправительПлощадка.GUID) тогда
		Запрос = Запрос +"
		|            <vd:consignor>";
		Если значениеЗаполнено(ОтправительХозСубъект.GUID) тогда
			Запрос = Запрос +"
			|               <dt:businessEntity>
			|                  <bs:guid>"+ ОтправительХозСубъект.GUID+"</bs:guid>
			|               </dt:businessEntity>";
		КонецЕсли;
		Если значениеЗаполнено(ОтправительПлощадка.GUID) тогда
			Запрос = Запрос +"
			|               <dt:enterprise>
			|                  <bs:guid>"+ ОтправительПлощадка.GUID+"</bs:guid>
			|               </dt:enterprise>";
		КонецЕсли;
		Запрос = Запрос +"
		|            </vd:consignor>";
	КонецЕсли;
	
	Запрос = Запрос +"
	|            <dt:enterpriseGuid>"+ ПолучательПлощадка.GUID +"</dt:enterpriseGuid>
	|          </merc:getVetDocumentListRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	
	Возврат Запрос;
КонецФункции

Функция  ПолучитьСписокВСД( Знач Параметры, ПолучательПлощадка, vetDocumentType = "INCOMING", vetDocumentStatus = "CONFIRMED", Смещение, 
	ПоступилиС = "", ПоступилиПо ="", ОтправительХозСубъект = "", ОтправительПлощадка="", ЗаписыватьДокументы = Ложь, ВсдРезультат = Неопределено) Экспорт
	Если НЕ(ЗначениеЗаполнено(ПолучательПлощадка.GUID)) Тогда 
		СообщитьИнфо("В выбранной Площадке пустой GUID");
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросXML = ПолучитьСписокВСД2_ЗапросXML( Параметры, ПолучательПлощадка, vetDocumentType, vetDocumentStatus, Смещение, ПоступилиС, ПоступилиПо, ОтправительХозСубъект, ОтправительПлощадка);	
	Service = "platform/services/2.1/ApplicationManagementService";
    Action = "submitApplicationRequest";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );

	Ответ =  ПолучитьРезультат_ВСД2( Параметры, appID, , Истина, ЗаписыватьДокументы, ВсдРезультат );	
	Для А=1 По 10 Цикл
		Если (Ответ="IN_PROCESS") Тогда
			Ответ =  ПолучитьРезультат_ВСД2( Параметры, appID, , Истина, ЗаписыватьДокументы, ВсдРезультат );	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ответ;		
	
КонецФункции

Функция ВСД2_ЗагрузитьПоUUID_ЗапросXML( Параметры, док )
	
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	| xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	| xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	| xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	| xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	| xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	| xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ Параметры["param_api_key"] +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ Параметры["param_issuer_id"] +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:getVetDocumentByUuidRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ Параметры["param_intiator_login"] +"</vd:login>
	|            </merc:initiator>
	|            <bs:uuid>"+ СокрЛП(док.UUID) +"</bs:uuid>
	|            <dt:enterpriseGuid>"+ СокрЛП(Док.Отправитель_Площадка.GUID) +"</dt:enterpriseGuid>
	|          </merc:getVetDocumentByUuidRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";
	
	Возврат Запрос;
	
КонецФункции

Функция ВСД2_ЗагрузитьПоUUID( Знач Параметры, докОснование ) Экспорт
	
	тзВСД = Выбрать_ВСД2( докОснование );
	Для Каждого строкаВСД ИЗ тзВСД Цикл
		
		Если НЕ(ЗначениеЗаполнено(строкаВСД.Док.UUID)) Тогда 
			СообщитьИнфо("Пустой UUID в документе "+строкаВСД.Док);
			Возврат Ложь;
		КонецЕсли;
		
		ЗапросXML = ВСД2_ЗагрузитьПоUUID_ЗапросXML( Параметры, строкаВСД.Док );	
		Service = "platform/services/2.0/ApplicationManagementService";
	    Action = "submitApplicationRequest";	
		
		ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
		ПараметрыОтправки.ЗапросXML = ЗапросXML;
	    ПараметрыОтправки.Service = Service;
	    ПараметрыОтправки.Action = Action;
		xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
		
		Если НайтиОшибки(xdto ) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );

		Ответ =  ПолучитьРезультат_ВСД2( Параметры, appID );	
		Для А=1 По 10 Цикл
			Если (Ответ="IN_PROCESS") Тогда
				Ответ =  ПолучитьРезультат_ВСД2( Параметры, appID );	
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ВСД2_Транзакция

Функция ВСД2_транзакция_ЗапросXML( Параметры, ДокСсылка)
	
	Запрос_Шапка = "<SOAP-ENV:Envelope
	| xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
    |<apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( Параметры["param_api_key"] ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( Параметры["param_issuer_id"] ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ДокСсылка.Дата, "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:prepareOutgoingConsignmentRequest>
	|            <merc:localTransactionId>" + СокрЛП(ДокСсылка.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
	|            </merc:initiator>
	|";
	
//************************
	// Есть/нет ТТН
	ДатаДоставки = ?(ЗначениеЗаполнено(ДокСсылка.ТтнДата),ДокСсылка.ТтнДата,ДокСсылка.Дата);

    delivery = "
    |       <merc:delivery>
    |          <vd:deliveryDate>" + ДатаXML(ДатаДоставки, "T00:00:00") + "</vd:deliveryDate>
    |          <vd:consignor>
    |            <dt:businessEntity>
    |              <bs:guid>"+СокрЛП(ДокСсылка.Отправитель_ХозСубъект.GUID)+"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(ДокСсылка.Отправитель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>
    |          </vd:consignor>
    |          <vd:consignee>
    |            <dt:businessEntity>
    |              <bs:guid>"+ СокрЛП(ДокСсылка.Получатель_ХозСубъект.GUID) +"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(ДокСсылка.Получатель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>";
	
	// <dt:globalID>4607009526782</dt:globalID> 	dt:GLNType 	[0..*]  [ ... ] Global Location Number - уникальный номер площадки
	delivery = delivery+"
    |          </vd:consignee>";
	
	consignment="";
	
	тз = ДокСсылка.Товары.Выгрузить();
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];
		consignment = consignment+ "
		|       <vd:consignment id='_" + (А+1) + "'>";
		
	 	consignment = consignment + ProductItem_в_XML(СтрокаДокумента,1); 
		consignment = consignment+ "
		|        <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
        |        <vd:unit>
        |          <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.GUID) +"</bs:guid>
        |        </vd:unit>
        |";
		
		тзУпаковка = ДокСсылка.УровниУпаковки.Выгрузить();
		тзМаркировка = ДокСсылка.Маркировка.Выгрузить();
		consignment = consignment+  УровниУпаковки_в_XML(СтрокаДокумента.НомерСтроки,тзУпаковка,тзМаркировка);
		
		consignment = consignment+ "	
		|        <vd:sourceStockEntry>
        |          <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.GUID) +"</bs:guid>
        |        </vd:sourceStockEntry>
        |      </vd:consignment>
		|";
	КонецЦикла; // по строкам документа		  
	
	ЗапросПодвал = "";
	Если ЗначениеЗаполнено(ДокСсылка.Перевозчик_ХозСубъект) Тогда
	ЗапросПодвал = "		  
        |      <vd:broker>
        |        <bs:guid>"+ СокрЛП(ДокСсылка.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
        |      </vd:broker>";
	КонецЕсли;
	
	
	ЗапросПодвал = ЗапросПодвал+"		  
        |      <vd:transportInfo>
        |        <vd:transportType>1</vd:transportType>
        |        <vd:transportNumber>
        |          <vd:vehicleNumber>"+ СокрЛП(ДокСсылка.номерАвто) +"</vd:vehicleNumber>
        |        </vd:transportNumber>
        |      </vd:transportInfo>
		|      <vd:transportStorageType>"+ XMLСтрока( ДокСсылка.ТермическиеУсловияПеревозки ) +"</vd:transportStorageType> ";
		
	ЗапросПодвал=ЗапросПодвал + "
	| <vd:shipmentRoute>
	|"+ Запрос_МаршрутДоставки( ДокСсылка )+"
	|</vd:shipmentRoute> ";
		
		
    ЗапросПодвал=ЗапросПодвал + " 
	| <vd:accompanyingForms> ";
	Если ЗначениеЗаполнено(ДокСсылка.ТтнДата) тогда
	// Тип товарно-транспортной накладной.
    // Допустимые типы Для waybill: 1, 2, 3, 4, 5
		ЗапросПодвал = ЗапросПодвал+"		  
       	|        <vd:waybill>
        |          <vd:issueSeries>"+ СокрЛП(ДокСсылка.ТтнСерия) +"</vd:issueSeries>
   	    |          <vd:issueNumber>"+ СокрЛП(ДокСсылка.ТтнНомер) +"</vd:issueNumber>
       	|          <vd:issueDate>"+ ДатаXML(ДокСсылка.ТтнДата) +"</vd:issueDate>
        |          <vd:type>1</vd:type>      
   	    |        </vd:waybill>";
	КонецЕсли;
	
	// !!! Цели в ТЧ документа
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];
		ЗапросПодвал = ЗапросПодвал+"		  
	        |        <vd:vetCertificate for='_" + (А+1) + "'>
	        |          <vd:authentication>
	        |            <vd:purpose>
	        |              <bs:guid>"+ ?(ЗначениеЗаполнено(СтрокаДокумента.Цель), (СтрокаДокумента.Цель.Guid), Параметры["ВСДЦель"].Guid ) +"</bs:guid>		
	        |            </vd:purpose>
	        |            <vd:cargoInspected>"+ НашеБулево(ДокСсылка.cargoInspected) +"</vd:cargoInspected>
			|            <vd:cargoExpertized>" + ПолучитьИдентификаторПеречисления( ДокСсылка.РезультатыИсследований ) + "</vd:cargoExpertized>
			|            <vd:locationProsperity>"+ СокрЛП(ДокСсылка.Местность) +"</vd:locationProsperity>";
			
	// Регионализация  - ДОРАБОТКА по ВИДУ ПРОДУКЦИИ
			тзУсловияПеревозки = ДокСсылка.УсловияПеревозки.Выгрузить();
			Если ЗначениеЗаполнено(тзУсловияПеревозки) Тогда
				
				Для каждого стрУсловия ИЗ тзУсловияПеревозки Цикл
					Если стрУсловия.Отметка Тогда
						ЗапросПодвал=ЗапросПодвал+"
						|<vd:r13nClause>
						|<vd:condition>
						|<bs:guid>" + стрУсловия.GUID + "</bs:guid>
						|</vd:condition>
						|</vd:r13nClause>
						|";	
					КонецЕсли;
				КонецЦикла;		
			КонецЕсли;
			ЗапросПодвал = ЗапросПодвал+ ?(ЗначениеЗаполнено(ДокСсылка.особыеотметки) , "            <vd:specialMarks>"+ СокрЛП(ДокСсылка.особыеотметки) +"</vd:specialMarks>","");	
			
		ЗапросПодвал = ЗапросПодвал+ "
	        |          </vd:authentication>
	        |        </vd:vetCertificate>";
	КонецЦикла;	
	
		// Связанные документы
		// http://help.vetrf.ru/wiki/DocumentType_v2.0
		// тип 16 = Заказ, 6 = ТОРГ12,  1 = ТрН
//        |          <vd:issueSeries>А</vd:issueSeries>
//        |          <vd:issueDate>2017-09-26</vd:issueDate>

		СвязанныеДокументы = "";
		Если ЗначениеЗаполнено(ДокСсылка.НомерЗаказаПокупателя) Тогда
			СвязанныеДокументы = "
			|        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(ДокСсылка.НомерЗаказаПокупателя)+"</vd:issueNumber>
			|          <vd:issueDate>"+ ДатаXML(ДокСсылка.ДатаЗаказаПокупателя) +"</vd:issueDate>
    	    |          <vd:type>16</vd:type>
        	|          <vd:relationshipType>1</vd:relationshipType>
	        |	     </vd:relatedDocument>";		    
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокСсылка.ТОРГ12Номер) Тогда
	        СвязанныеДокументы = СвязанныеДокументы+ "
	        |        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(ДокСсылка.ТОРГ12Номер)+"</vd:issueNumber>
	        |          <vd:issueDate>"+ ДатаXML(ДокСсылка.ТОРГ12Дата) +"</vd:issueDate>
    	    |          <vd:type>6</vd:type>
        	|          <vd:relationshipType>1</vd:relationshipType>
	        |        </vd:relatedDocument>";
        КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокСсылка.УпдНомер) Тогда
	        СвязанныеДокументы = СвязанныеДокументы+ "
	        |        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(ДокСсылка.УпдНомер)+"</vd:issueNumber>
	        |          <vd:issueDate>"+ ДатаXML(ДокСсылка.УпдДата) +"</vd:issueDate>
    	    |          <vd:type>23</vd:type>
        	|          <vd:relationshipType>1</vd:relationshipType>
	        |        </vd:relatedDocument>";
        КонецЕсли;
		
		Если ЗначениеЗаполнено(СвязанныеДокументы) Тогда
			ЗапросПодвал = ЗапросПодвал+СвязанныеДокументы;	
		КонецЕсли;
		
	ЗапросПодвал = ЗапросПодвал+ "
		|      </vd:accompanyingForms>
        |    </merc:delivery>
		|          </merc:prepareOutgoingConsignmentRequest>
		|        </apl:data>
		|      </apl:application>
		|    </apldef:submitApplicationRequest>
		|  </SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>
		|";

	Запрос = Запрос_Шапка+
		delivery+
		consignment+
		ЗапросПодвал;
	
	Возврат Запрос;
КонецФункции

Функция ПроверитьЗаполнениеДокумента( ДокСсылка )
	Докобъект = ДокСсылка.ПолучитьОбъект();
	Рез = ДокОбъект.ПроверитьЗаполнение();
	Возврат Рез;	
КонецФункции

// Отправить_ВСД2_транзакция
// тзВсдРезультат = возвращает результат ИЗ Меркурия Для гашения
Функция ВСД2_транзакция_Отправить(Параметры, ДокСсылка, тзВсдРезультат=Неопределено, ПолучитьОтветВетис=Истина ) Экспорт
	
	Если НЕ ПроверитьЗаполнениеДокумента( ДокСсылка ) Тогда 
		СообщитьИнфо("Документе не заполнен", ДокСсылка);	
		Возврат Ложь; 
	КонецЕсли;
	
	ЗапросXML = ВСД2_транзакция_ЗапросXML(Параметры, ДокСсылка); 	
	Service = "platform/services/2.0/ApplicationManagementService";
    Action = "submitApplicationRequest";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Ответ = СтатусЗапроса( xdto, докСсылка, ПараметрыОтправки );
	Если НайтиОшибки(xdto, ДокСсылка) Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Если ПолучитьОтветВетис Тогда 
		appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
		
		Ответ =  ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка, Истина, Истина, тзВсдРезультат );	
		Для А=1 По 10 Цикл
			Если (Ответ="IN_PROCESS") Тогда
				Ответ = ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка, Истина, Истина, тзВсдРезультат );	
			КонецЕсли;								
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ответ;	
	
КонецФункции

Процедура СохранитьСтатусВСД( Параметры, докСсылка, СтатусВСД=Неопределено )
	Попытка
		Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_транзакция") Тогда 
			Докобъект = ДокСсылка.ПолучитьОбъект();
			Если ЗначениеЗаполнено( СтатусВСД ) Тогда 
				Докобъект.СтатусВСД = СтатусВСД;
			КонецЕсли;		
			ДокОбъект.Записать();
		КонецЕсли;
	Исключение 
		кб99_ВСД.СообщитьОбОшибке("Не удалось записать реквизиты запроса в "+докСсылка+" "+Символы.ПС+ОписаниеОшибки(), ДокСсылка );
	КонецПопытки;
	
КонецПроцедуры


// тзВсдРезультат = возвращает результат ИЗ Меркурия Для гашения
Функция ПолучитьРезультат_ВСД2(Параметры, appID, докСсылка = Неопределено, СделатьПаузу = Истина, ЗаписыватьДокументы=Истина, тзВсдРезультат = Неопределено ) Экспорт
	Если ПустаяСтрока(appID) Тогда
		СообщитьИнфо("Пустая ссылка applicationID");
		Возврат Ложь;
	КонецЕсли;
	
	Если СделатьПаузу Тогда		
		Пауза( Параметры["ПаузаСек"] );
	КонецЕсли;		
	
	xdto = кб99_ВСД_Отправка.ПолучитьРезультатСервер( Параметры, appID );
	
	Статус = СтатусЗапроса( xdto, докСсылка, Параметры );
	Если НайтиОшибки(xdto, докСсылка) Тогда
		Возврат Статус;
	КонецЕсли;
	
	Если Статус = "COMPLETED" Тогда 
		НачатьТранзакцию();
		Попытка
			ЗагрузитьXML_ВСД2( Параметры, xdto, докСсылка, ЗаписыватьДокументы, тзВсдРезультат);

			ЗагрузитьXML_Партии2( Параметры, xdto, докСсылка );
			
			Если ЗначениеЗаполнено(ДокСсылка) Тогда 
				Попытка СтатусВСД = тзВсдРезультат[0].СтатусВСД; Исключение КонецПопытки; 				
				СохранитьСтатусВСД( Параметры, докСсылка, СтатусВСД );				
			КонецЕсли;	
			
			ЗафиксироватьТранзакцию();		
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при получении ответа Ветис'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			СообщитьИнфо("Ошибка = "+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Возврат Статус;
КонецФункции

Функция ЗагрузитьXML_Партии2(Параметры, xdto, докСсылка = Неопределено ) 
	
	//Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
	//	Возврат;
	//КонецЕсли;
 	
	//Если КомпонентаНаСервере = Неопределено тогда
	//	ЗагрузитьГлПеременныеИзВременногоХранилища();
	//КонецЕсли;
	
    //СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
//	ЧтениеXML = новый ЧтениеXML;
////	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
//	ЧтениеXML.ОткрытьФайл(имяФайла);
//	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Попытка 
		appResult = xdto.Body.receiveApplicationResultResponse.application.result;
	Исключение
		СообщитьИнфо("Отсутствуют / Не далось прочитать Партии ");
		Возврат Ложь;
	КонецПопытки;
	Попытка
		Если НЕ(appResult.Свойства().Получить("prepareOutcomingConsignmentResponse") = Неопределено) Тогда
			seList = appResult.prepareOutcomingConsignmentResponse.StockEntry;	
		ИначеЕсли НЕ(appResult.Свойства().Получить("prepareOutgoingConsignmentResponse") = Неопределено) Тогда
			//Транзакция
			seList = appResult.prepareOutgoingConsignmentResponse.StockEntry;	
		ИначеЕсли НЕ(appResult.Свойства().Получить("processIncomingConsignmentResponse") = Неопределено) Тогда
			//Гашение
			seList = appResult.processIncomingConsignmentResponse.StockEntry;	
		ИначеЕсли НЕ(appResult.Свойства().Получить("registerProductionOperationResponse") = Неопределено) Тогда
			// Выпуск
			seList = appResult.registerProductionOperationResponse.stockEntryList.StockEntry;
		ИначеЕсли НЕ(appResult.Свойства().Получить("withdrawVetDocumentResponse") = Неопределено) Тогда
			// Аннулирование
			seList = appResult.withdrawVetDocumentResponse.StockEntry;	
		ИначеЕсли НЕ(appResult.Свойства().Получить("resolveDiscrepancyResponse") = Неопределено) Тогда
			// Инвентаризация
			seList = appResult.resolveDiscrepancyResponse.stockEntryList.StockEntry;
		ИначеЕсли НЕ(appResult.Свойства().Получить("mergeStockEntriesResponse") = Неопределено) Тогда
			// Объединение Партий
			//seList = appResult.mergeStockEntriesResponse.StockEntry;
			seList = appResult.mergeStockEntriesResponse.stockEntryList.stockEntry
		ИначеЕсли НЕ(appResult.Свойства().Получить("updateVeterinaryEventsResponse") = Неопределено) Тогда
			// Лаб исследования
			seList = appResult.updateVeterinaryEventsResponse.stockEntryList.StockEntry;
		Иначе
			//СообщитьИнфо("Партии Для записи в справочник отсутствют ");
			Возврат Ложь;
		КонецЕсли;
	Исключение
		СообщитьИнфо("Отсутствуют Партии ");
		Возврат Ложь;
	КонецПопытки;	
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
	
	//СообщитьИнфо("Получено "+seList.length+" записей","i");
	Для каждого stockEntry ИЗ stockEntryList Цикл		
					
		Партия_Заполнить( Параметры, stockEntry, докСсылка );
				
	КонецЦикла;
		
	Возврат Истина;

КонецФункции

// ВсдРезультатМассив = Струтура  результат загрузки xdto ( гашение )
Функция ЗагрузитьXML_ВСД2(Знач Параметры, xdto, докОснование = Неопределено, СоздаватьДокументы = Истина, ВсдРезультатМассив = Неопределено ) Экспорт
	
	ВсдРезультатМассив = Новый Массив;
	
	Попытка applicationId = xdto.Body.receiveApplicationResultResponse.application.applicationId; Исключение	applicationId = ""; КонецПопытки;
	  
	Попытка 
		appResult = xdto.Body.receiveApplicationResultResponse.application.result;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Попытка
		Если НЕ(appResult.Свойства().Получить("prepareOutcomingConsignmentResponse") = Неопределено) Тогда
			seList = appResult.prepareOutcomingConsignmentResponse.vetDocument;	
		ИначеЕсли НЕ(appResult.Свойства().Получить("prepareOutgoingConsignmentResponse") = Неопределено) Тогда
			// Транзакция
			seList = appResult.prepareOutgoingConsignmentResponse.vetDocument;	
		ИначеЕсли НЕ(appResult.Свойства().Получить("processIncomingConsignmentResponse") = Неопределено) Тогда
			// Гашение
			seList = appResult.processIncomingConsignmentResponse.vetDocument;	
		ИначеЕсли НЕ(appResult.Свойства().Получить("registerProductionOperationResponse") = Неопределено) Тогда
			seList = appResult.registerProductionOperationResponse.vetDocument;
			// Выпуск
		ИначеЕсли НЕ(appResult.Свойства().Получить("withdrawVetDocumentResponse") = Неопределено) Тогда
			// Аннулирование
			seList = appResult.withdrawVetDocumentResponse.vetDocument;	
		ИначеЕсли НЕ(appResult.Свойства().Получить("getVetDocumentListResponse") = Неопределено) Тогда
			// Входящие
			seList = appResult.getVetDocumentListResponse.vetDocumentList.vetDocument;	
		ИначеЕсли НЕ(appResult.Свойства().Получить("resolveDiscrepancyResponse") = Неопределено) Тогда
			// Инвентаризация
			seList = appResult.resolveDiscrepancyResponse.vetDocumentList.vetDocument;	
		ИначеЕсли НЕ(appResult.Свойства().Получить("getVetDocumentByUuidResponse") = Неопределено) Тогда
			// Запрос по UUID 
			seList = appResult.getVetDocumentByUuidResponse.vetDocument;	
		Иначе
			СообщитьИнфо("Документы ВСД отсутствуют / Не далось прочитать ВСД ");
			Возврат Ложь;
		КонецЕсли;
	Исключение
		СообщитьИнфо("Отсутствуют ВСД ");
		Возврат Ложь;
	КонецПопытки;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		vetDocumentList = Новый Массив;
		vetDocumentList.Добавить(seList);
	Иначе
		vetDocumentList = seList;
	КонецЕсли;
	
	Для каждого vetDocument ИЗ vetDocumentList Цикл
		Попытка	forma 	 = vetDocument.vetDForm;	Исключение	forma = ""; КонецПопытки; 
			ВсдСтруктура = Новый Структура("ДокументОснование, Организация, ФормаВСД, UUID, applicationId, Статус, СтатусВСД, Дата, ВСДДата, ТипВСД, ВсдСерия, ВсдНомер, ВидВСД,
			|ВладелецХС, Отправитель_ХозСубъект, Отправитель_Площадка, Получатель_ХозСубъект, Получатель_Площадка, Перевозчик_ХозСубъект, Производитель_Площадка, ТтнСерия, ТтнНомер, ТтнДата, номерАвто,
			|ттнТип, cargoInspected, ТермическиеУсловияПеревозки, номерПолуприцепа, номерКонтейнера, ТипТС, Продукция, ВидПродукции, Продукция_Элемент, НаименованиеПродукции, GTIN, Артикул,
			|ДатаИзготовления, ДатаИзготовления1, ДатаИзготовления2, ДатаСрокГодности, ДатаСрокГодности1, ДатаСрокГодности2, 
			|ДатаИзготовления1Строка, ДатаИзготовления2Строка, ДатаСрокГодности1Строка, ДатаСрокГодности2Строка,
			|Количество, КоличествоПринять, КоличествоВозврат, ЕдиницаИзмерения, РезультатыИсследований,
			|НомерПартии, Скоропортящийся, Некачественный, ПроизводителиСписок, Страна_ГУИД, УровниУпаковки, ОсобыеОтметки, Местность, СвязанныеДокументы, ");
		
		_uuid = vetDocument.uuid;
				
		ВсдСтруктура.ФормаВСД = forma;
		ВсдСтруктура.UUID = _uuid;
		
		ВсдСтруктура.applicationId = applicationId;
		Попытка ВсдСтруктура.Статус = xdto.Body.receiveApplicationResultResponse.application.status; Исключение КонецПопытки;
		Попытка ВсдСтруктура.СтатусВСД = Перечисления.ВСД_СтатусВСД[ vetDocument.vetDStatus ]; Исключение КонецПопытки;
		ВсдСтруктура.Дата = СтрокаВДатаВремя( vetDocument.lastUpdateDate );
		Попытка ВсдСтруктура.ВСДДата = СтрокаВДату(vetDocument.issueDate); Исключение КонецПопытки; //реквизит в док ?
				
		ВсдСтруктура.Организация = Параметры["Организация"];

		Попытка	ВсдСтруктура.ТипВСД = vetDocument.vetDType; Исключение КонецПопытки;
		
		Попытка ВсдСтруктура.всдсерия =vetDocument.issueSeries;  Исключение КонецПопытки;
		Попытка ВсдСтруктура.всдномер =vetDocument.issueNumber;  Исключение КонецПопытки; 
		ВсдСтруктура.всдсерия = ?(ВсдСтруктура.всдсерия = "ОбъектXDTO","",ВсдСтруктура.всдсерия);  //!!!!
		ВсдСтруктура.всдномер = ?(ВсдСтруктура.всдномер = "ОбъектXDTO","",ВсдСтруктура.всдномер);  //!!!!
		ВсдСтруктура.ВидВСД = ЗначениеЗаполнено(ВсдСтруктура.ВСДНомер);//?(ЗначениеЗаполнено(докОбъект.ВСДНомер),1,0); Исключение КонецПопытки;

		ЭтоТранспортныйВСД=0;
		Попытка
			batch = vetDocument.certifiedBatch.batch;  // Продуктивный ВСД
		Исключение
			Попытка
				// Сертифицированная партия.
				// Сведения о партии продукции. 
				batch = vetDocument.certifiedConsignment.batch;  // ЖД Транспортный ВСД -другая структура ответа буду делать отдельно
				ЭтоТранспортныйВСД=1;
			Исключение
				batch="";
			КонецПопытки;
		КонецПопытки; 
		
		Если ЭтоТранспортныйВСД = 1 Тогда
			Попытка 
				ВсдСтруктура.Отправитель_ХозСубъект = ХозСубъект_НайтиПоGUID( Параметры, vetDocument.certifiedConsignment.consignor.businessEntity.guid); 
			Исключение 
				ВсдСтруктура.Отправитель_ХозСубъект = ""; 
			КонецПопытки;
			Попытка 
				ВсдСтруктура.Отправитель_Площадка 	= Площадка_НайтиПоGUID(Параметры, vetDocument.certifiedConsignment.consignor.enterprise.guid, ВсдСтруктура.Отправитель_ХозСубъект, Ложь, Истина); 
			Исключение КонецПопытки;
			Попытка 
				ВсдСтруктура.Получатель_ХозСубъект = ХозСубъект_НайтиПоGUID( Параметры, vetDocument.certifiedConsignment.consignee.businessEntity.guid); 
			Исключение 
				ВсдСтруктура.Получатель_ХозСубъект = ""; 
			КонецПопытки;
			Попытка 
				ВсдСтруктура.Получатель_Площадка 	= Площадка_НайтиПоGUID(Параметры, vetDocument.certifiedConsignment.consignee.enterprise.guid, ВсдСтруктура.Получатель_ХозСубъект, Ложь, Истина); 
			Исключение КонецПопытки;
			Попытка ВсдСтруктура.ВладелецХС = ХозСубъект_НайтиПоGUID( Параметры, batch.owner.guid);	Исключение КонецПопытки;
			Попытка
				Если НЕ(ЗначениеЗаполнено(ВсдСтруктура.ВладелецХС)) Тогда
					ВсдСтруктура.ВладелецХС = ВсдСтруктура.Отправитель_ХозСубъект;	
				КонецЕсли;
			Исключение КонецПопытки;
	        Попытка ВсдСтруктура.Перевозчик_ХозСубъект 	= ХозСубъект_НайтиПоGUID( Параметры, vetDocument.certifiedConsignment.broker.guid); Исключение КонецПопытки;
			
			Попытка
				transportInfo = vetDocument.certifiedConsignment.transportInfo;
				ТипТС = transportInfo.transportType;
				Если ТипТС = "1" Тогда
					ВсдСтруктура.номеравто = transportInfo.transportNumber.vehicleNumber;
					Попытка ВсдСтруктура.номерПолуприцепа = transportInfo.transportNumber.trailerNumber; Исключение КонецПопытки;
					Попытка ВсдСтруктура.номерКонтейнера = transportInfo.transportNumber.containerNumber; Исключение КонецПопытки;
					Попытка ВсдСтруктура.номерПолуприцепа = ?(ВсдСтруктура.номерПолуприцепа = "ОбъектXDTO","",ВсдСтруктура.номерПолуприцепа); Исключение КонецПопытки;
					Попытка ВсдСтруктура.номерКонтейнера = ?(ВсдСтруктура.номерКонтейнера = "ОбъектXDTO","",ВсдСтруктура.номерКонтейнера); Исключение КонецПопытки;
				Иначеесли ТипТС = "2" Тогда
					ВсдСтруктура.номеравто = transportInfo.transportNumber.wagonNumber;
				Иначеесли ТипТС = "3" Тогда
					ВсдСтруктура.номеравто = transportInfo.transportNumber.flightNumber;
				Иначеесли (ТипТС = "4") ИЛИ (ТипТС = "5") ИЛИ (ТипТС = "6") Тогда
					ВсдСтруктура.номеравто = transportInfo.transportNumber.shipName;				
				КонецЕсли;
				Попытка ВсдСтруктура.ТипТС = ТипТС; Исключение КонецПопытки;
			исключение	КонецПопытки;
			Попытка ВсдСтруктура.ТермическиеУсловияПеревозки = Перечисления.ВСД_ТермическиеУсловияПеревозки[ vetDocument.certifiedConsignment.transportStorageType ]; 	Исключение 	КонецПопытки;
			
			Попытка МаршрутСледования = МаршрутСледования_из_XML(Параметры, vetDocument.certifiedConsignment.shipmentRoute.routePoint); Исключение	МаршрутСледования = ""; КонецПопытки;
			Попытка
				ТочкиМаршрута = МаршрутСледования;
				// ЖД При гашении Нужно указать Тип И № последнего ТС в Маршруте Следования - запишем данные в соотв реквизиты.
				Если ТипЗнч(ТочкиМаршрута) = Тип("ТаблицаЗначений") Тогда
					ТочкиМаршрута.Сортировать("НомерТочки Убыв"); // Возьмем № последнего ТС в точке где была перегрузка, т.е. № Авто сменился
					Для каждого стрТочкаМаршрута ИЗ ТочкиМаршрута Цикл
						Если стрТочкаМаршрута.Перегрузка = 1 Тогда
							ВсдСтруктура.ТипТС				= Строка(стрТочкаМаршрута.ТипТранспорта);
							ВсдСтруктура.номерКонтейнера 	= стрТочкаМаршрута.номерКонтейнера;
							ВсдСтруктура.номеравто			= СокрЛП(стрТочкаМаршрута.номеравто) + СокрЛП(стрТочкаМаршрута.номерВагона) + СокрЛП(стрТочкаМаршрута.НомерАвиарейса)+ СокрЛП(стрТочкаМаршрута.НазваниеСудна);
							ВсдСтруктура.номерПолуприцепа	= стрТочкаМаршрута.номерПрицепа;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Исключение	КонецПопытки;
		КонецЕсли; // транспортный ВСД
		
		Попытка ВсдСтруктура.Продукция 	= НайтиПродукцию(batch.product.guid); Исключение КонецПопытки;
		Попытка ВсдСтруктура.ВидПродукции 	= НайтиВидПродукции(batch.subProduct.guid); Исключение КонецПопытки;
		ВсдСтруктура.Продукция_Элемент = Продукция_Элемент_Найти( Параметры, batch.productItem );
		Попытка	ВсдСтруктура.НаименованиеПродукции = batch.productItem.name; Исключение ВсдСтруктура.НаименованиеПродукции = ВсдСтруктура.Продукция_Элемент.Наименование; КонецПопытки;
		// Trade Identification Number (GTIN) - идентификационный номер продукции производителя.
		Попытка ВсдСтруктура.GTIN = batch.productItem.globalID;	Исключение 	КонецПопытки;
        // Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
		Попытка	ВсдСтруктура.Артикул = batch.productItem.code;	Исключение	КонецПопытки;
		
		// <dt:packaging> Фасовка.  
		// Параметры фасовки привязаны к ВСД_ПродукцияЭлемент
		Попытка Фасовка_из_XML(batch.productItem.packaging,ВсдСтруктура.ФасовкаНаименование,ВсдСтруктура.ФасовкаФормаУпаковки,ВсдСтруктура.ФасовкаКоличество,ВсдСтруктура.ФасовкаОбъем,ВсдСтруктура.ФасовкаЕдиницаИзмерения); Исключение КонецПопытки;
		
		// Объем продукции
		Попытка	ВсдСтруктура.Количество 		= Число(batch.volume); Исключение КонецПопытки;
		Попытка	ВсдСтруктура.КоличествоПринять 		= ВсдСтруктура.Количество;  Исключение КонецПопытки;
		Попытка	ВсдСтруктура.КоличествоВозврат 		= 0;  Исключение КонецПопытки;
		Попытка	ВсдСтруктура.ЕдиницаИзмерения	= НайтиЕдИзмерения( batch.unit.guid ); Исключение КонецПопытки;
		
		ДатаИзготовления1="";	ДатаИзготовления=""; ДатаИзготовления2="";		
		Попытка Дата_из_XML(batch.dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления ); Исключение КонецПопытки; //Нет даты производства
		ВсдСтруктура.ДатаИзготовления1=ДатаИзготовления1;
		ВсдСтруктура.ДатаИзготовления2=ДатаИзготовления2; 
		Попытка ВсдСтруктура.ДатаИзготовления = ДатаИзготовления;  Исключение КонецПопытки;
		// Даты свернутые в списоке значений  - используется только в обработке гашения
		// При создании документа - учесть И добавнить в него соответствующие реквизиты
		Попытка
			ВсдСтруктура.ДатаИзготовления1Строка = Преобразовать_ДатаXML_в_Строку( batch.dateOfProduction.firstDate );
		Исключение
			ВсдСтруктура.ДатаИзготовления1Строка = "";
		КонецПопытки;		
		Попытка
			ВсдСтруктура.ДатаИзготовления2Строка = Преобразовать_ДатаXML_в_Строку( batch.dateOfProduction.secondDate );
		Исключение
			ВсдСтруктура.ДатаИзготовления2Строка = "";
		КонецПопытки;		
		
		ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
		Попытка Дата_из_XML(batch.expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности );Исключение КонецПопытки; //Нет срока годности
		ВсдСтруктура.ДатаСрокГодности1 = ДатаСрокГодности1;
		Попытка ВсдСтруктура.ДатаСрокГодности = ДатаСрокГодности; Исключение КонецПопытки;
		ВсдСтруктура.ДатаСрокГодности2 = ДатаСрокГодности2;
		// Даты свернутые в списоке значений  - используется только в обработке гашения
		// При создании документа - учесть И добавнить в него соответствующие реквизиты
		Попытка
			ВсдСтруктура.ДатаСрокГодности1Строка = Преобразовать_ДатаXML_в_Строку( batch.expiryDate.firstDate );
		Исключение
			ВсдСтруктура.ДатаСрокГодности1Строка = "";
		КонецПопытки;		
		Попытка
			ВсдСтруктура.ДатаСрокГодности2Строка = Преобразовать_ДатаXML_в_Строку( batch.expiryDate.secondDate );
		Исключение
			ВсдСтруктура.ДатаСрокГодности2Строка = "";
		КонецПопытки;		

		
		Попытка ВсдСтруктура.НомерПартии =  СписокНомеровПартий_из_XML(batch); Исключение	КонецПопытки; //В спр нет реквизита
        // <vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 
		Попытка ВсдСтруктура.Скоропортящийся = batch.perishable; Исключение	КонецПопытки;
		Попытка ВсдСтруктура.Некачественный =  batch.lowGradeCargo; Исключение	КонецПопытки;
		
		//Информация о предприятие-производителе продукции.
		//возможен список предприятий
		Попытка ПроизводителиСписок = СписокПроизводителей_из_XML(Параметры, batch.origin.producer); Исключение ПроизводителиСписок = ""; КонецПопытки;
		//Запишем одного ИЗ производителей в Реквизит
		Попытка
			СЗПроизводители = ЗначениеИзСтрокиВнутр(ПроизводителиСписок);			
			ВсдСтруктура.Производитель_Площадка = СЗПроизводители[0].Площадка;	
		Исключение КонецПопытки;
		Попытка ВсдСтруктура.ПроизводителиСписок = ПроизводителиСписок;Исключение КонецПопытки; // Если есть Реквизит ИЛИ в ТЧ 
		Попытка ВсдСтруктура.Страна_ГУИД = batch.origin.country.guid; Исключение КонецПопытки;

		Попытка	ВсдСтруктура.УровниУпаковки = УровниУпаковки_из_XML(batch.packageList.package);	Исключение 	КонецПопытки;
		
		Попытка	ВсдСтруктура.cargoInspected = vetDocument.authentication.cargoInspected;	Исключение	КонецПопытки;
        Попытка	cargoExpertized = vetDocument.authentication.cargoExpertized; Исключение	cargoExpertized =""; КонецПопытки;
		Попытка ВсдСтруктура.РезультатыИсследований = Перечисления.ВСД_РезультатИсследования[cargoExpertized]; Исключение	КонецПопытки;
		Попытка	ВсдСтруктура.особыеотметки = vetDocument.authentication.specialMarks; 	Исключение	КонецПопытки;
		ВсдСтруктура.особыеотметки = ?(ВсдСтруктура.особыеотметки = "ОбъектXDTO","",ВсдСтруктура.особыеотметки);
		Попытка	ВсдСтруктура.Местность = vetDocument.authentication.locationProsperity;	Исключение  КонецПопытки; //В гашении ВСДМестность
        // след блок Сделать ЖД Если Нужен
		// ·······<vd:laboratoryResearch> 	vd:LaboratoryResearchEvent 	[0..*] 	Сведения о проведенных лабораторных исследованиях. 
		Попытка СвязанныеДокументы = СвязанныеДокументы_из_XML(vetDocument.referencedDocument); Исключение СвязанныеДокументы = ""; КонецПопытки;
		// Получим ТТН
		Попытка
			ТЗДоков = ЗначениеИзСтрокиВнутр(СвязанныеДокументы);
			СтрокаТЗ = ТЗДоков.Найти(1, "ТипДокумента");
			Если СтрокаТЗ  = Неопределено Тогда
				СтрокаТЗ = ТЗДоков.Найти(2, "ТипДокумента");
				Если СтрокаТЗ  = Неопределено Тогда
					СтрокаТЗ = ТЗДоков.Найти(3, "ТипДокумента");
					Если СтрокаТЗ  = Неопределено Тогда
						СтрокаТЗ = ТЗДоков.Найти(4, "ТипДокумента");
						Если СтрокаТЗ  = Неопределено Тогда
							СтрокаТЗ = ТЗДоков.Найти(5, "ТипДокумента");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ(СтрокаТЗ = Неопределено) Тогда
				ВсдСтруктура.ттнСерия = СтрокаТЗ.СерияДокумента;
				ВсдСтруктура.ттнномер = СтрокаТЗ.НомерДокумента;
				ВсдСтруктура.ттндата = СтрокаВДату(СтрокаТЗ.ДатаДокумента);
				Попытка ВсдСтруктура.ттнТип = СтрокаТЗ.ТипДокумента; Исключение КонецПопытки;
			КонецЕсли;
		Исключение КонецПопытки;
		ВсдСтруктура.СвязанныеДокументы = СвязанныеДокументы; 
			
		ВсдРезультатМассив.Добавить( ВсдСтруктура );
		
		Если СоздаватьДокументы Тогда
			ДокОбъект = НайтиВСДпоUUID( _uuid, "ВСД2" );
			
			ВсдСтруктура.ДокументОснование = ДокОбъект.ДокументОснование; // не изменяем !
			ЗаполнитьЗначенияСвойств(ДокОбъект, ВсдСтруктура);
			ДокОбъект.ТочкиМаршрута.Очистить();
			
			Если ЗначениеЗаполнено( МаршрутСледования ) Тогда 
				МаршрутСледования.Сортировать("НомерТочки");
				Для Каждого ТочкаПерегрузки ИЗ МаршрутСледования Цикл
					НоваяСтрока = ДокОбъект.ТочкиМаршрута.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТочкаПерегрузки);
					НоваяСтрока.ТипТранспорта = Перечисления.ВСД_ТипыТранспорта[(ТочкаПерегрузки.ТипТранспорта-1)];
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено( ДокОбъект.ДокументОснование ) и ЗначениеЗаполнено(докОснование) Тогда 
				ДокОбъект.ДокументОснование = ДокОснование;
			КонецЕсли;
			
			Если ВсдСтруктура.Статус = "WITHDRAWN" Тогда 
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);				
			Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			СообщитьИнфо("Записан "+ДокОбъект+" "+ДокОбъект.Номер+" от "+ДокОбъект.Дата+" ["+_uuid+"]", ДокОбъект.Ссылка);
		КонецЕсли;
	КонецЦикла;
		
	Возврат Истина;
КонецФункции

#Область МультимодальнаяПеревозка

Функция Запрос_МаршрутДоставки( ДокСсылка, НомерСтроки=0 )

	запрос = "";
	
	Для Каждого СтрТочкаДоставки ИЗ ДокСсылка.ТочкиМаршрута Цикл 

		запрос=запрос+"
		|  <vd:routePoint>
		|    <vd:sqnId>"+ СтрТочкаДоставки.НомерСтроки +"</vd:sqnId>
		|";
		Если ЗначениеЗаполнено( СтрТочкаДоставки.Площадка ) Тогда
			запрос=запрос+"
			|    <vd:enterprise>
			|      <bs:guid>"+ СтрТочкаДоставки.Площадка.GUID +"</bs:guid>
			|    </vd:enterprise>
			|";
		Иначе
			запрос=запрос+"
			|    <vd:location>
			|      <dt:name>"+СтрТочкаДоставки.Название+"</dt:name>
			|      <dt:address>";
			Если ЗначениеЗаполнено(СтрТочкаДоставки.Страна) тогда
				Запрос=Запрос+"
				|        <dt:country>
				|          <bs:guid>"+(СтрТочкаДоставки.Страна.guid)+"</bs:guid>
				|        </dt:country>";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрТочкаДоставки.Регион) тогда
				Запрос=Запрос+"
				|        <dt:region>
				|          <bs:guid>"+(СтрТочкаДоставки.Регион.guid)+"</bs:guid>
				|        </dt:region>";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрТочкаДоставки.Район) тогда
				Запрос=Запрос+"
				|        <dt:district>
				|          <bs:guid>"+(СтрТочкаДоставки.Район.guid)+"</bs:guid>
				|        </dt:district>";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрТочкаДоставки.Город) тогда
				Запрос=Запрос+"
				|        <dt:locality>
				|          <bs:guid>"+СокрЛП(СтрТочкаДоставки.Город.guid)+"</bs:guid>
				|        </dt:locality>";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрТочкаДоставки.Улица) тогда
				Запрос=Запрос+"
				|        <dt:street>
				|          <bs:guid>"+(СтрТочкаДоставки.Улица.guid)+"</bs:guid>
				|        </dt:street>";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрТочкаДоставки.Дом) тогда
				Запрос=Запрос+"
				|        <dt:house>"+(СтрТочкаДоставки.Дом)+"</dt:house>";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрТочкаДоставки.Строение) тогда
				Запрос=Запрос+"
				|        <dt:building>"+(СтрТочкаДоставки.Строение)+"</dt:building>";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрТочкаДоставки.Помещение) тогда
				Запрос=Запрос+"
				|        <dt:room>"+(СтрТочкаДоставки.Помещение)+"</dt:room>";
			КонецЕсли;

			Запрос=Запрос+"
			|      </dt:address>
			|    </vd:location>
			|";
		КонецЕсли;
		запрос=запрос+"
		// |    <vd:transshipment>"+?(тзМаршрутДоставки.Перегрузка = 1,"true","false")+"</vd:transshipment>
		// отражать будем только пункты перегрузки
		|    <vd:transshipment>true</vd:transshipment>
		|    <vd:nextTransport>
		|      <vd:transportType>"+ (Перечисления["ВСД_ТипыТранспорта"].Индекс(СтрТочкаДоставки.ТипТранспорта)+1)  +"</vd:transportType>
		|        <vd:transportNumber>";

		Если ЗначениеЗаполнено(СтрТочкаДоставки.номерКонтейнера) тогда
			Запрос=Запрос+"
           	|          <vd:containerNumber>"+(СтрТочкаДоставки.номерКонтейнера)+"</vd:containerNumber>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрТочкаДоставки.номерАвто) тогда
			Запрос=Запрос+"
           	|          <vd:vehicleNumber>"+(СтрТочкаДоставки.номерАвто)+"</vd:vehicleNumber>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрТочкаДоставки.номерПрицепа) тогда
			Запрос=Запрос+"
           	|          <vd:trailerNumber>"+(СтрТочкаДоставки.номерПрицепа)+"</vd:trailerNumber>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрТочкаДоставки.номерВагона) тогда
			Запрос=Запрос+"
           	|          <vd:wagonNumber>"+(СтрТочкаДоставки.номерВагона)+"</vd:wagonNumber>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрТочкаДоставки.НазваниеСудна) тогда
			Запрос=Запрос+"
           	|          <vd:shipName>"+(СтрТочкаДоставки.НазваниеСудна)+"</vd:shipName>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрТочкаДоставки.НомерАвиарейса) тогда
			Запрос=Запрос+"
           	|          <vd:flightNumber>"+(СтрТочкаДоставки.НомерАвиарейса)+"</vd:flightNumber>";
		КонецЕсли;

		Запрос=Запрос+"
  	    |        </vd:transportNumber>";

		запрос=запрос+"
		|    </vd:nextTransport>
		|  </vd:routePoint>
		|";
	КонецЦикла;

	Возврат запрос;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВСД2_Производство

Функция ВСД2_производство_ЗапросXML( Параметры, ДокСсылка)    
	
	Запрос ="<SOAP-ENV:Envelope 
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( Параметры["param_api_key"] ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( Параметры["param_issuer_id"] ) +"</apl:issuerId>
		|        <apl:issueDate>" + ДатаВремяXML(ДокСсылка.Дата) + "</apl:issueDate>
		|        <apl:data>
		|          <merc:registerProductionOperationRequest>
		|            <merc:localTransactionId>" + СокрЛП(ДокСсылка.Номер) + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:enterprise>
		|              <bs:guid>"+ СокрЛП(ДокСсылка.Производитель_Площадка.GUID) +"</bs:guid>
		|            </merc:enterprise>
		|            <merc:productionOperation> ";
	
// НЗП
		Если ЗначениеЗаполнено(ДокСсылка.operationId) Тогда 
			Запрос=Запрос+"
			|        <vd:operationId>"+ СокрЛП(ДокСсылка.operationId) +"</vd:operationId>
			|";
		КонецЕсли;
		тз = ДокСсылка.ПартииСписания.Выгрузить();
		Для А=0 По тз.Количество()-1 Цикл
			СтрокаДокумента = тз[А];
			// 1. rawBatch = списание
			// Уровни упаковки можно использовать, пока без упаковки
			Запрос=Запрос+"
			| <vd:rawBatch>
			|    <vd:sourceStockEntry>
			|       <bs:guid>" + СокрЛП(СтрокаДокумента.Партия.guid) + "</bs:guid>
			|    </vd:sourceStockEntry>
			|    <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
			|    <vd:unit>
			|       <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.Guid) +"</bs:guid>
			|    </vd:unit>
			| </vd:rawBatch>
			|";
		КонецЦикла;		
		тз = ДокСсылка.Продукция.Выгрузить();
		
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];
		
	Запрос=Запрос+"		
		|              <vd:productiveBatch>
		|                <vd:productType>"+ СтрокаДокумента.Продукция.Тип +"</vd:productType>
		|                <vd:product>
		|                  <bs:guid>"+ СокрЛП(СтрокаДокумента.Продукция.GUID) +"</bs:guid>
		|                </vd:product>
		|                <vd:subProduct>
		|                  <bs:guid>"+ СокрЛП(СтрокаДокумента.ВидПродукции.GUID) +"</bs:guid>
		|                </vd:subProduct>";
	
	 	Запрос = Запрос + ProductItem_в_XML(СтрокаДокумента);
		
		Запрос=Запрос+"	
		|                <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
		|                <vd:unit>
		|                  <bs:uuid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.UUID) +"</bs:uuid>
		|                </vd:unit>";
		Запрос = Запрос + Изготовление_СрокГодности_в_XML(СтрокаДокумента); 
		Попытка
			Если ЗначениеЗаполнено(СтрокаДокумента.НомерПартии) Тогда			
				Запрос=Запрос+"
				|                <vd:batchID>"+ СокрЛП(СтрокаДокумента.НомерПартии) +"</vd:batchID>";			
			КонецЕсли;
		Исключение СообщитьИнфо("Обновите модуль интеграции !"); КонецПопытки;
		Запрос=Запрос+"
		|                <vd:perishable>"+ Нашебулево(СтрокаДокумента.Скоропортящийся)+"</vd:perishable>
		|                <vd:lowGradeCargo>"+ Нашебулево(СтрокаДокумента.Некачественный)+"</vd:lowGradeCargo>
		|";
		
//   Уровни <dt:level>
		тзУпаковка = ДокСсылка.УровниУпаковки.Выгрузить();
		тзМаркировка = ДокСсылка.Маркировка.Выгрузить();
		Запрос=Запрос + УровниУпаковки_в_XML(СтрокаДокумента.НомерСтроки,тзУпаковка,тзМаркировка);

		Запрос=Запрос+"
		|              </vd:productiveBatch>"; 
	КонецЦикла;   // По строкам документа
    // завершение операции
	Если ЗначениеЗаполнено(ДокСсылка.operationId) Тогда
		Запрос=Запрос+"
		|          <vd:finalizeOperation>"+Нашебулево(ДокСсылка.ЗавершитьОперацию)+"</vd:finalizeOperation>";
    КонецЕсли;
	Запрос=Запрос+"
	|            </merc:productionOperation>
	|            <merc:vetDocument>
	|              <vd:authentication>
	|              <vd:cargoInspected>"+ Нашебулево(ДокСсылка.cargoInspected) +"</vd:cargoInspected>";
	//				cargoExpertized = Проводилась ли ветсанэкспертиза.
	//				Возможные значения: VSEFULL, VSERAW, UNFULFILLED
	Запрос=Запрос+"
	|                <vd:cargoExpertized>"+ ПолучитьИдентификаторПеречисления( ДокСсылка.РезультатыИсследований ) +"</vd:cargoExpertized>";

	Запрос=Запрос+"
	|              </vd:authentication>
	|            </merc:vetDocument>
	|          </merc:registerProductionOperationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";
			
	Возврат Запрос;
КонецФункции

Функция ВСД2_Производство_Отправить(Параметры, ДокСсылка, ПолучитьОтветВетис=Истина) Экспорт
	
	Если НЕ ПроверитьЗаполнениеДокумента( ДокСсылка ) Тогда 
		СообщитьИнфо("Документе не заполнен", ДокСсылка);	
		Возврат Ложь; 
	КонецЕсли;
			
	ЗапросXML = ВСД2_производство_ЗапросXML(Параметры, ДокСсылка);	
	Service = "platform/services/2.0/ApplicationManagementService";
    Action = "submitApplicationRequest";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Статус = СтатусЗапроса( xdto, докСсылка, ПараметрыОтправки );
	Если НайтиОшибки(xdto, ДокСсылка) Тогда
		Возврат Статус;
	КонецЕсли;
	
	Если ПолучитьОтветВетис Тогда 
	
		appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
		
		Статус =  ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка );	
		Для А=1 По 10 Цикл
			Если (Статус="IN_PROCESS") Тогда
				Статус =  ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка );	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат Статус;	
	
КонецФункции

#КонецОбласти

#Область ВСД2_ЛабораторныеИсследования
Функция ВСД2_ЛабораторныеИсследования_ЗапросXML(Параметры, ДокСсылка)    
	
	Запрос ="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( Параметры["param_api_key"] ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( Параметры["param_issuer_id"] ) +"</apl:issuerId>
	|        <apl:issueDate>"+ ДатаXML(ДокСсылка.Дата, "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:updateVeterinaryEventsRequest>
	|            <merc:localTransactionId>" + СокрЛП(ДокСсылка.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
	|            </merc:initiator>
	|            <merc:enterprise>
	|              <bs:guid>"+ СокрЛП(ДокСсылка.Партия.Получатель_Площадка.GUID) +"</bs:guid>
//	|              <bs:guid>"+ СокрЛП(Отправитель_Площадка.GUID) +"</bs:guid>
	|            </merc:enterprise>
	|            <vd:stockEntry>
	|              <bs:guid>"+ СокрЛП( ДокСсылка.Партия.GUID ) +"</bs:guid>
	|              <vd:vetEventList>"; //Тест многострочность
	Для каждого строкаДок ИЗ ДокСсылка.Исследования Цикл
		Запрос = Запрос + "
		|                <vd:laboratoryResearch>
		|                  <vd:actualDateTime>"+ ДатаXML(строкаДок.ДатаРезультата, "T00:00:00") +"</vd:actualDateTime>
		|                  <vd:operator>
		|                    <dt:name>" + ЗаменитьСпецСимволы(строкаДок.НаименованиеЛаборатории) + "</dt:name>
		|                  </vd:operator>
		|                  <vd:referencedDocument>
		|                    <vd:issueNumber>"+ СокрЛП(строкаДок.НомерАктаОтбораПроб) +"</vd:issueNumber>
		|                    <vd:issueDate>"+ ДатаXML(строкаДок.ДатаОтбораПроб) +"</vd:issueDate>
		|                    <vd:type>9</vd:type> 
		//|                    <vd:relationshipType>6</vd:relationshipType>
		|                  </vd:referencedDocument>
		|                  <vd:expertiseID>"+ СокрЛП(строкаДок.НомерЭкспертизы) +"</vd:expertiseID>
		|                  <vd:disease>
		|                    <dt:name>"+ ЗаменитьСпецСимволы(строкаДок.НаименованиеПоказателя) +"</dt:name>
		|                  </vd:disease>
		|                  <vd:method>
		|                    <dt:name>"+ СокрЛП(строкаДок.МетодИсследования) +"</dt:name>
		|                  </vd:method>
							// Допустимые значения: UNKNOWN, POSITIVE, NEGATIVE
		|                  <vd:result>"+ ПолучитьИдентификаторПеречисления( строкаДок.РезультатИсследования ) +"</vd:result>
		|                  <vd:conclusion>"+ СокрЛП(строкаДок.Заключение)  +"</vd:conclusion>
		|                </vd:laboratoryResearch>";
		КонецЦикла;
	Запрос = Запрос + "
	|              </vd:vetEventList>
	|            </vd:stockEntry>
	|          </merc:updateVeterinaryEventsRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	
	Возврат Запрос;
КонецФункции

Функция ВСД2_ЛабораторныеИсследования_Отправить( Параметры, ДокСсылка ) Экспорт
	
	Если НЕ ПроверитьЗаполнениеДокумента( ДокСсылка ) Тогда 
		СообщитьИнфо("Документе не заполнен", ДокСсылка);	
		Возврат Ложь; 
	КонецЕсли;	
	
	ЗапросXML = ВСД2_ЛабораторныеИсследования_ЗапросXML(Параметры, ДокСсылка);
	Service = "platform/services/2.0/ApplicationManagementService";
    Action = "submitApplicationRequest";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Статус = СтатусЗапроса( xdto, докСсылка, ПараметрыОтправки );
	Если НайтиОшибки(xdto, ДокСсылка) Тогда
		Возврат Статус;
	КонецЕсли;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
	
	Статус =  ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка );	
	Для А=1 По 10 Цикл
		Если (Статус="IN_PROCESS") Тогда
			Статус =  ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка );	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Статус;	

КонецФункции
#КонецОбласти

#Область ВСД2_ОбъединениеПартий

Функция ВСД2_ОбъединениеПартий_ЗапросXML( Параметры, ДокСсылка)    
	
	Запрос ="<SOAP-ENV:Envelope 
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( Параметры["param_api_key"] ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( Параметры["param_issuer_id"] ) +"</apl:issuerId>
		|        <apl:issueDate>" + ДатаВремяXML(ДокСсылка.Дата) + "</apl:issueDate>
		|        <apl:data>
		|          <merc:mergeStockEntriesRequest>
		|            <merc:localTransactionId>" + СокрЛП(ДокСсылка.Номер) + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:enterprise>
		|              <bs:guid>"+ СокрЛП(ДокСсылка.Владелец_Площадка.GUID) +"</bs:guid>
		|            </merc:enterprise>
		|            <merc:mergeOperation>
		|              <vd:type>"+?(ДокСсылка.ОперацияПрисоединения,"ATTACH","MERGE")+"</vd:type>";
		тз = ДокСсылка.Продукция.Выгрузить();
		Для Каждого СтрокаДокумента ИЗ тз Цикл
			Запрос=Запрос+"
			|    <vd:sourceStockEntry>
			|       <bs:uuid>" + СокрЛП(СтрокаДокумента.Партия.uuid) + "</bs:uuid>
			|    </vd:sourceStockEntry>";
		КонецЦикла;		
		Если НЕ ДокСсылка.ОперацияПрисоединения Тогда
			Запрос=Запрос+"
			|      <vd:resultStockEntry>
        	|        <vd:batch>
        	|          <vd:subProduct>
        	|            <bs:guid>"+ СокрЛП(ДокСсылка.ВидПродукции.GUID) +"</bs:guid>
        	|          </vd:subProduct>";
			Запрос = Запрос + "
        	|          <vd:productItem>";
			Если ЗначениеЗаполнено(ДокСсылка.Продукция_Элемент.guid) тогда
				Запрос = Запрос + "	
        		|            <bs:guid>" + СокрЛП(ДокСсылка.Продукция_Элемент.guid) + "</bs:guid>";
			КонецЕсли;        	
			Если ЗначениеЗаполнено(ДокСсылка.Продукция_Элемент.GTIN) тогда
				Запрос = Запрос + "	
        		|            <dt:globalID>" + СокрЛП(ДокСсылка.Продукция_Элемент.GTIN) + "</dt:globalID>";
			КонецЕсли;
			Запрос = Запрос + "
        	|            <dt:name>" + ЗаменитьСпецСимволы(ДокСсылка.Продукция_Элемент.Наименование) + "</dt:name>";
			Если ЗначениеЗаполнено(ДокСсылка.Продукция_Элемент.Артикул) тогда
				Запрос = Запрос + "	
        		|            <dt:code>" + СокрЛП(ДокСсылка.Продукция_Элемент.Артикул) + "</dt:code>";
			КонецЕсли;
        	Запрос = Запрос + "
        	|          </vd:productItem>";
			Запрос=Запрос+"
        	|        </vd:batch>
        	|      </vd:resultStockEntry>";			
		КонецЕсли;
		Запрос=Запрос+"
		|            </merc:mergeOperation>
		|          </merc:mergeStockEntriesRequest>
		|        </apl:data>
		|      </apl:application>
		|    </apldef:submitApplicationRequest>
		|  </SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>";
			
	Возврат Запрос;
КонецФункции

Функция ВСД2_ОбъединениеПартий_Отправить(Параметры, ДокСсылка) Экспорт
	
	Если НЕ ПроверитьЗаполнениеДокумента( ДокСсылка ) Тогда 
		СообщитьИнфо("Документе не заполнен", ДокСсылка);	
		Возврат Ложь; 
	КонецЕсли;
	
	ЗапросXML = ВСД2_ОбъединениеПартий_ЗапросXML(Параметры, ДокСсылка);
	Service = "platform/services/2.0/ApplicationManagementService";
    Action = "submitApplicationRequest";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Статус = СтатусЗапроса( xdto, докСсылка, ПараметрыОтправки );
	Если НайтиОшибки(xdto, ДокСсылка) Тогда
		Возврат Статус ;
	КонецЕсли;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
	
	Статус =  ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка );	
	Для А=1 По 10 Цикл
		Если (Статус = "IN_PROCESS") Тогда
			Статус =  ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка );	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Статус;	
	
КонецФункции

#КонецОбласти

#Область ВСД2_инвентаризация

Функция ВСД2_инвентаризация_ЗапросXML( Параметры, ДокСсылка)

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ Параметры["param_api_key"] + "</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+Параметры["param_issuer_id"]+"</apl:issuerId>
	|        <apl:issueDate>"+ ДатаXML(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:resolveDiscrepancyRequest>
	|            <merc:localTransactionId>" + СокрЛП(ДокСсылка.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
	|            </merc:initiator>
	|            <merc:enterprise>
	|              <bs:guid>"+ СокрЛП(ДокСсылка.Владелец_Площадка.GUID) +"</bs:guid>
	|            </merc:enterprise>
	|            <merc:inventoryDate>" + ДатаXML(ДокСсылка.Дата, "T00:00:00") + "</merc:inventoryDate>
	|            <merc:responsible>
	|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
	|            </merc:responsible>
	|            <merc:stockDiscrepancy id='_1'>
	|              <vd:resultingList>";
	тзПартии = ДокСсылка.Продукция.Выгрузить();
	Для каждого СтрПартии ИЗ тзПартии Цикл
		Запрос = Запрос + "	
		|                <vd:stockEntry>";
	    Если ЗначениеЗаполнено(СтрПартии.Партия) Тогда 
			Запрос = Запрос + "
			|                <bs:uuid>" + СокрЛП(СтрПартии.Партия.uuid) + "</bs:uuid>";	        
		КонецЕсли;
		
		Запрос = Запрос + "
		|                 <vd:batch>
		|                    <vd:productType>"+ СтрПартии.Продукция.Тип +"</vd:productType>
		|                    <vd:product>
		|                      <bs:guid>"+ СокрЛП(СтрПартии.Продукция.GUID) +"</bs:guid>
		|                    </vd:product>
		|                    <vd:subProduct>
		|                      <bs:guid>"+ СокрЛП(СтрПартии.ВидПродукции.GUID) +"</bs:guid>
		|                    </vd:subProduct>";
		
		ПроверятьВидПродукцииПартииИProductItem = ?(СтрПартии.Количество>0,0,1);
		Запрос = Запрос + ProductItem_в_XML(СтрПартии,ПроверятьВидПродукцииПартииИProductItem);
		
		Запрос = Запрос +"
		|                    <vd:volume>"+ Формат(СтрПартии.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
		|                    <vd:unit>
		|                      <bs:uuid>"+ СокрЛП(СтрПартии.ЕдиницаИзмерения.UUID) +"</bs:uuid>
		|                    </vd:unit>";
		
		Запрос = Запрос + Изготовление_СрокГодности_в_XML(СтрПартии); //Тест вместо ниже

		Запрос=Запрос+"
		|                    <vd:perishable>"+ Нашебулево(СтрПартии.Скоропортящийся)+"</vd:perishable>";
		Запрос=Запрос+"
		|                    <vd:origin>";
		Если ЗначениеЗаполнено(СтрПартии.Производитель_Страна) Тогда
			Запрос=Запрос+"
			|                    <vd:country>
			|                        <bs:guid>"+СокрЛП(СтрПартии.Производитель_Страна.guid)+"</bs:guid>
			|                      </vd:country>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрПартии.Производитель_Площадка.GUID) Тогда
			Запрос=Запрос+"
			|                       <vd:producer>
			|                      	<dt:enterprise>
			|                      	  <bs:guid>"+ СокрЛП(СтрПартии.Производитель_Площадка.GUID) +"</bs:guid>
			|                      	</dt:enterprise>
			|                      </vd:producer>";
		КонецЕсли;
		Запрос=Запрос+"	
			|                    </vd:origin>";
		
		Запрос=Запрос+"
		|                    <vd:lowGradeCargo>"+ НашеБулево(СтрПартии.Некачественный)+"</vd:lowGradeCargo>";
        
		//УРОВНИ УПАКОВКИ
		тзУпаковка = ДокСсылка.УровниУпаковки.Выгрузить();
		тзМаркировка = ДокСсылка.Маркировка.Выгрузить();
		
		Запрос=Запрос+УровниУпаковки_в_XML(СтрПартии.НомерСтроки,тзУпаковка,тзМаркировка);
		
		Запрос=Запрос+"
		|                    <vd:owner>
		|                      <bs:guid>"+ СокрЛП(ДокСсылка.Владелец_Площадка.GUID) +"</bs:guid>
		|                    </vd:owner>
		|                  </vd:batch>
		|                </vd:stockEntry>";
	КонецЦикла;
	Запрос = Запрос + "
	|              </vd:resultingList>
	|            </merc:stockDiscrepancy>
	|            <merc:discrepancyReport for='_1'>
	|              <vd:issueNumber>"+ ДокСсылка.Номер +"</vd:issueNumber>
	|              <vd:issueDate>" + ДатаXML(ДокСсылка.Дата) + "</vd:issueDate>
	|              <vd:reason>
	|                <vd:name>"+СокрЛП(ДокСсылка.ПричинаРасхождения)+"</vd:name>
	|              </vd:reason>
	|              <vd:description>"+СокрЛП(ДокСсылка.ОписаниеНесоответствия)+"</vd:description>
	|            </merc:discrepancyReport>
	|          </merc:resolveDiscrepancyRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";
    
	Возврат Запрос;
КонецФункции

Функция ВСД2_инвентаризация_Отправить(Знач Параметры, ДокСсылка) Экспорт

	Если НЕ ПроверитьЗаполнениеДокумента( ДокСсылка ) Тогда 
		СообщитьИнфо("Документе не заполнен", ДокСсылка);	
		Возврат Ложь; 
	КонецЕсли;
	
	ЗапросXML = ВСД2_инвентаризация_ЗапросXML( Параметры, ДокСсылка);
	Service = "platform/services/2.0/ApplicationManagementService";
    Action = "submitApplicationRequest";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Статус = СтатусЗапроса( xdto, докСсылка, ПараметрыОтправки );
	Если НайтиОшибки(xdto, ДокСсылка) Тогда
		Возврат Статус;
	КонецЕсли;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
	
	Статус =  ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка );	
	Для А=1 По 10 Цикл
		Если (Статус="IN_PROCESS") Тогда
			Статус =  ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка );	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Статус;	
	
КонецФункции
	
#КонецОбласти

#Область Аннулирование
// **************** Аннулирование ВСД Транспортного v2
Функция ВСД2_Аннулирование_ЗапросXML( Параметры, ДокСсылка)
	GUID_запроса = Новый УникальныйИдентификатор;
	Запрос = "
	|<SOAP-ENV:Envelope 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ Параметры["param_api_key"] + "</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+Параметры["param_issuer_id"]+"</apl:issuerId>
	|        <apl:issueDate>"+ ДатаXML(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:withdrawVetDocumentRequest>
	|            <merc:localTransactionId>"+GUID_запроса+"</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+Параметры["param_intiator_login"]+"</vd:login>
	|            </merc:initiator>
	|            <merc:vetDocumentId>"+ СокрЛП(ДокСсылка.UUID) +"</merc:vetDocumentId>
	|            <merc:withdrawReason>Неверно указан объём продукции</merc:withdrawReason>
	|            <merc:withdrawDate>"+ ДатаXML(ДокСсылка.Дата, "T23:59:59") +"</merc:withdrawDate>
	|            <merc:specifiedPerson>
	|              <vd:login>"+ Параметры["param_vetdoctor_login"]+"</vd:login>
	|            </merc:specifiedPerson>
	|          </merc:withdrawVetDocumentRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";	
	
	Возврат Запрос;
КонецФункции

Функция ВСД2_Аннулировать(Знач Параметры, ДокСсылка ) Экспорт
		
	ЗапросXML = ВСД2_Аннулирование_ЗапросXML( Параметры, ДокСсылка);
	Service = "platform/services/2.0/ApplicationManagementService";
    Action = "submitApplicationRequest";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Статус = СтатусЗапроса( xdto, докСсылка, ПараметрыОтправки );
	Если НайтиОшибки(xdto, ДокСсылка) Тогда
		Возврат Статус;
	КонецЕсли;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
	
	Статус =  ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка );	
	Для А=1 По 10 Цикл
		Если (Статус="IN_PROCESS") Тогда
			Статус =  ПолучитьРезультат_ВСД2( Параметры, appID, ДокСсылка );	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Статус;
КонецФункции

Процедура ВСД2_транзакция_Аннулировать( Знач Параметры, ВСД2_Транзакция_Ссылка ) Экспорт
	Если НЕ(ЗначениеЗаполнено(ВСД2_Транзакция_Ссылка)) Тогда
		Возврат;
	КонецЕсли;
	тзВСД = Выбрать_ВСД2(ВСД2_Транзакция_Ссылка);
	Для Каждого строкаВСД ИЗ тзВСД Цикл
		Если СокрЛП(строкаВСД.Док.ТипВСД) = "PRODUCTIVE" Тогда
			СообщитьИнфо("Производственный невозможно аннулировать", строкаВСД.Док);
			Продолжить;	
		КонецЕсли;
		Статус = ВСД2_Аннулировать(Параметры, строкаВСД.Док);
	КонецЦикла;
	
	докОбъект = ВСД2_Транзакция_Ссылка.ПолучитьОбъект();
	//докОбъект.Статус = "Аннулирован"; 
	ДокОбъект.СтатусВСД = Перечисления.ВСД_СтатусВСД.WITHDRAWN;
	докОбъект.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
	докОбъект.УстановитьПометкуУдаления(Истина);
КонецПроцедуры

// **************** Аннулирование ВСД Транспортного окончание v2
#КонецОбласти

#Область Регионализация
// ************* Регионализация v2
Функция ВСД2_Транзакция_УсловияПеревозки_Отправить_ЗапросXML( Параметры, ДокСсылка)
	
Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( Параметры["param_api_key"] ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( Параметры["param_issuer_id"] ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ДокСсылка.Дата, "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:checkShipmentRegionalizationRequest>
	|            <merc:localTransactionId>" + СокрЛП(ДокСсылка.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
	|            </merc:initiator>
	|";

	Если (типЗнч(ДокСсылка) = тип("ДокументСсылка.ВСД2_входящий")) Тогда          
			Запрос = Запрос+"
			|            <dt:cargoType>
			|              <bs:guid>"+ ДокСсылка.Продукция_Элемент.ВидПродукции.GUID +"</bs:guid>       
			|            </dt:cargoType>";	    
	Иначе
		тз = ДокСсылка.Товары.Выгрузить();
		Для А=0 По тз.Количество()-1 Цикл
			СтрокаДокумента = тз[А];
			ГУИДПродукции = ?(ЗначениеЗаполнено(СтрокаДокумента.Партия.ВидПродукции.GUID),СокрЛП(СтрокаДокумента.Партия.ВидПродукции.GUID),СокрЛП(СтрокаДокумента.Продукция_Элемент.ВидПродукции.GUID));
			Запрос = Запрос+"
			|            <dt:cargoType>
			|              <bs:guid>"+ ГУИДПродукции +"</bs:guid>       
			|            </dt:cargoType>";	    
		КонецЦикла;
	КонецЕсли;	
	// <vd:sqnId>1</vd:sqnId>
	// Порядовый номер точки маршрута.
    // Не обязателен Для заполнения, будет сгенерирован автоматически в ответе	
	
	// <vd:enterprise>
	// Сведения о предприятии, которое является точкой маршрута.
    // Указывается в случае, Если не указано значение location 	
	
	Запрос = Запрос+"
	|            <vd:shipmentRoute>
	|              <vd:routePoint>
	|                <vd:sqnId>1</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ СокрЛП(ДокСсылка.Отправитель_Площадка.GUID) +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
	|              <vd:routePoint>
	|                <vd:sqnId>2</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ СокрЛП(ДокСсылка.Получатель_Площадка.GUID) +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
	|            </vd:shipmentRoute>
	|          </merc:checkShipmentRegionalizationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	Возврат Запрос;	
КонецФункции

Функция ЗагрузитьXML_ПеревозкаРазрешена_2( xdto, Решение="") Экспорт 
	// <dt:decision> 	dt:RegionalizationDecision
	// 1 	Перемещение разрешено.
	// 2 	Перемещение разрешено при обязательном соблюдении условий.
	// 3 	Перемещение запрещено. 
	// Если НайтиОшибки(имяФайла)>0 Тогда 
	// 	Возврат "";
	// КонецЕсли;	
	//
	
	Попытка	seList = xdto.application.result.checkShipmentRegionalizationResponse.r13nRouteSection; Исключение	seList = ""; КонецПопытки;
		
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))И (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		Попытка	seList = xdto.Body.receiveApplicationResultResponse.application.result.checkShipmentRegionalizationResponse.r13nRouteSection; Исключение	seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))И (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		СообщитьИнфо("Не далось прочитать условия перевозки ");
		Возврат "";
	КонецЕсли;
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		RouteSectionList = Новый Массив;
		RouteSectionList.Добавить(seList);
	Иначе
		RouteSectionList = seList;
	КонецЕсли;
	тзРез = Новый("ТаблицаЗначений");
	тзРез.Колонки.Добавить("Отметка");
	тзРез.Колонки.Добавить("UUID");
	тзРез.Колонки.Добавить("GUID");
	тзРез.Колонки.Добавить("ВидПродукции");
	тзРез.Колонки.Добавить("Название");
	тзРез.Колонки.Добавить("Решение");
			
	Для каждого RouteSection ИЗ RouteSectionList Цикл
		
		Попытка RList = RouteSection.appliedR13nRule; Исключение RList=""; КонецПопытки; 
		Если ТипЗнч(RList)<>Тип("СписокXDTO") Тогда 
			RuleList = Новый Массив;
			RuleList.Добавить(RList);
		Иначе
			RuleList = RList;
		КонецЕсли;
		
		Для каждого appliedR13nRule ИЗ RuleList Цикл 
			Решение = Число(appliedR13nRule.decision);
			Попытка ВидПродукции = НайтиВидПродукции(appliedR13nRule.cargoType.guid); Исключение ВидПродукции=""; КонецПопытки;		
			Попытка reqlist = appliedR13nRule.requirement; Исключение Продолжить; КонецПопытки;
		
			Если ТипЗнч(reqlist)<>Тип("СписокXDTO") Тогда 
				requirementsList = Новый Массив;
				requirementsList.Добавить(reqlist);
			Иначе
				requirementsList = reqlist;
			КонецЕсли;
		
			Для каждого requirements  ИЗ requirementsList Цикл
				Попытка cGroupList = requirements.conditionGroup;Исключение Продолжить; КонецПопытки;
				Если ТипЗнч(cGroupList)<>Тип("СписокXDTO") Тогда 
					conditionGroupList = Новый Массив;
					conditionGroupList.Добавить(cGroupList);
				Иначе
					conditionGroupList = cGroupList;
				КонецЕсли; 			
			
				Для каждого conditionGroup ИЗ conditionGroupList Цикл 
					Попытка cList = conditionGroup.condition;Исключение Продолжить; КонецПопытки;
					Если ТипЗнч(cList)<>Тип("СписокXDTO") Тогда 
						conditionList = Новый Массив;
						conditionList.Добавить(cList);
					Иначе
						conditionList = cList;
					КонецЕсли; 			
					Для каждого condition ИЗ conditionList Цикл 
						УсловияПеревозки = тзРез.Добавить();
						УсловияПеревозки.Отметка = true;
						УсловияПеревозки.ВидПродукции = ВидПродукции;
						УсловияПеревозки.Решение = Решение;
						УсловияПеревозки.Название = condition.text;
						УсловияПеревозки.UUID = condition.uuid;
						УсловияПеревозки.GUID = condition.guid;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат тзРез;
	
КонецФункции

Функция ВСД2_Транзакция_УсловияПеревозки_ПолучитьОтвет(Параметры, appID, докСсылка ) Экспорт
	Если ПустаяСтрока(appID) Тогда
		СообщитьИнфо("Пустая ссылка applicationID");
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокСсылка) Тогда 
		СообщитьИнфо("Не выбран документ ");
		Возврат Ложь;
	КонецЕсли;
	
	Пауза( Параметры["ПаузаСек"] );
	
	xdto = кб99_ВСД_Отправка.ПолучитьРезультатСервер( Параметры, appID );
	Статус = СтатусЗапроса(xdto); 
	
	Если НайтиОшибки(xdto, докСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Статус = "COMPLETED" Тогда 
	тзУсловия = ЗагрузитьXML_ПеревозкаРазрешена_2( xdto );
		Если ЗначениеЗаполнено(тзУсловия) Тогда
			докОбъект = докСсылка.ПолучитьОбъект();
			докОбъект.УсловияПеревозки.Очистить();
			докОбъект.УсловияПеревозки.Загрузить(тзУсловия);
			докОбъект.Комментарий = "Условия перевозки заполнены";
			докОбъект.Записать();
			СообщитьИнфо( "Условия перевозки записаны в "+докСсылка, ДокСсылка );
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Статус;
КонецФункции

Функция ВСД2_Транзакция_УсловияПеревозки_Отправить(Знач Параметры, ДокСсылка) Экспорт

	Организация = ДокСсылка.Организация; 
	
	СообщитьИнфо("Запрос условий перевозки Для "+ДокСсылка, ДокСсылка);
	ЗапросXML = ВСД2_Транзакция_УсловияПеревозки_Отправить_ЗапросXML(Параметры, ДокСсылка);
	Service = "platform/services/2.0/ApplicationManagementService";
    Action = "submitApplicationRequest";	
	
	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если НайтиОшибки(xdto, ДокСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
	
	Ответ =  ВСД2_Транзакция_УсловияПеревозки_ПолучитьОтвет( Параметры, appID, ДокСсылка );	
	Для А=1 По 10 Цикл
		Если (Ответ="IN_PROCESS") Тогда
			Ответ =  ВСД2_Транзакция_УсловияПеревозки_ПолучитьОтвет( Параметры, appID, ДокСсылка );	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// ************* Регионализация v2 окончание
#КонецОбласти

#Область ВСД2_Входящий

Функция ВСД2_ВходящийБумажныйГашение_ЗапросXML( Параметры, ДокСсылка )
//	ТермическиеУсловияПеревозки2 = Новый("СписокЗначений");
//	ТермическиеУсловияПеревозки2.Добавить("FROZEN","1");
//	ТермическиеУсловияПеревозки2.Добавить("CHILLED","2");
//	ТермическиеУсловияПеревозки2.Добавить("COOLED","3");
//	ТермическиеУсловияПеревозки2.Добавить("VENTILATED","4");	
	
	Запрос = "
    |              <vd:issueSeries>"+СокрЛП(ДокСсылка.ВСДСерия)+"</vd:issueSeries>
    |              <vd:issueNumber>"+СокрЛП(ДокСсылка.ВСДномер)+"</vd:issueNumber>
    |              <vd:issueDate>"+ ДатаXML(ДокСсылка.ВсдДата) +"</vd:issueDate>
    |              <vd:vetDForm>"+СокрЛП(ДокСсылка.ФормаВСД)+"</vd:vetDForm>
    |              <vd:certifiedConsignment>
	|              <vd:consignor>
	|                <dt:businessEntity>
	|                  <bs:guid>"+СокрЛП(ДокСсылка.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|                </dt:businessEntity>
	|                </dt:businessEntity>";
	Если ЗначениеЗаполнено(ДокСсылка.Отправитель_Площадка) Тогда // У импортных ВСД отсутствует
		Запрос = запрос +"
		|                <dt:enterprise>
		|                  <bs:guid>"+ СокрЛП(ДокСсылка.Отправитель_Площадка.GUID) +"</bs:guid>
		|                </dt:enterprise>";
	КонецЕсли;
	// У импортных ВСД может отсутствовать
	ВремПолучатель_Площадка = ?(ЗначениеЗаполнено(ДокСсылка.Получатель_Площадка), ДокСсылка.Получатель_Площадка, Параметры["Отправитель_Площадка"] ); // возьмем ИЗ Парметров
   Запрос = запрос +"
	|              </vd:consignor>
	|              <vd:consignee>
	|                <dt:businessEntity>
	|                  <bs:guid>"+ СокрЛП(ДокСсылка.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|                </dt:businessEntity>
	|                <dt:enterprise>
	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
	|                </dt:enterprise>
	|              </vd:consignee>";

	
	Если ЗначениеЗаполнено(СокрЛП(ДокСсылка.Перевозчик_ХозСубъект)) Тогда  
			Запрос=Запрос+"			
			|        <vd:broker>
			|          <bs:guid>"+ СокрЛП(ДокСсылка.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </vd:broker>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СокрЛП(ДокСсылка.ТипТС)) Тогда  
			Запрос=Запрос+"			
			|        <vd:transportInfo>
			|          <vd:transportType>"+СокрЛП(ДокСсылка.ТипТС)+"</vd:transportType>
			|          <vd:transportNumber>";
//			|"; 
	
			Если СокрЛП(ДокСсылка.ТипТС) = "1" Тогда
				Попытка
					// Странный важный момент - контейнер д.б. первым !
				Если ЗначениеЗаполнено(ДокСсылка.номерКонтейнера) Тогда
			    	Запрос = Запрос+"
					|            <vd:containerNumber>"+ СокрЛП(ДокСсылка.номерКонтейнера) +"</vd:containerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;

				Запрос = Запрос+"
				|            <vd:vehicleNumber>"+ СокрЛП(ДокСсылка.номерАвто) +"</vd:vehicleNumber>
				|"; 
				Попытка
				Если ЗначениеЗаполнено(ДокСсылка.номерПолуприцепа) Тогда
			    	Запрос = Запрос+"
					|            <vd:trailerNumber>"+ СокрЛП(ДокСсылка.номерПолуприцепа) +"</vd:trailerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;
			иначеЕсли СокрЛП(ДокСсылка.ТипТС) = "2" Тогда
		    Запрос = Запрос+"
			|            <vd:wagonNumber>"+ СокрЛП(ДокСсылка.номерАвто) +"</vd:wagonNumber>
			|"; 
			иначеЕсли СокрЛП(ДокСсылка.ТипТС) = "3" Тогда
		    Запрос = Запрос+"
			|            <vd:flightNumber>"+ СокрЛП(ДокСсылка.номерАвто) +"</vd:flightNumber>
			|";
			иначеЕсли (СокрЛП(ДокСсылка.ТипТС) = "4") ИЛИ (СокрЛП(ДокСсылка.ТипТС) = "5") ИЛИ (СокрЛП(ДокСсылка.ТипТС) = "6") Тогда
		    Запрос = Запрос+"
			|            <vd:shipName>"+ СокрЛП(ДокСсылка.номерАвто) +"</vd:shipName>
			|";
			
			КонецЕсли;	
			Запрос=Запрос+"
			|          </vd:transportNumber>
			|        </vd:transportInfo>";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокСсылка.ТермическиеУсловияПеревозки) Тогда
		Запрос=Запрос+"			
		|              <vd:transportStorageType>"+ XMLСтрока( ДокСсылка.ТермическиеУсловияПеревозки ) +"</vd:transportStorageType>";
	КонецЕсли;
	Запрос=Запрос+"			
	|              <vd:batch>
	|                <vd:productType>"+ ДокСсылка.Продукция.Тип +"</vd:productType>
	|                <vd:product>
	|                  <bs:guid>"+ СокрЛП(ДокСсылка.Продукция.GUID) +"</bs:guid>
	|                </vd:product>
	|                <vd:subProduct>
	|                  <bs:guid>"+ СокрЛП(ДокСсылка.ВидПродукции.GUID) +"</bs:guid>
	|                </vd:subProduct>
	|                <vd:productItem>"; 
	
// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
//·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code> 	

	Если ЗначениеЗаполнено(ДокСсылка.Продукция_Элемент.GUID) Тогда
		Запрос = Запрос + "
		|              <bs:guid>"+ СокрЛП(ДокСсылка.Продукция_Элемент.GUID) +"</bs:guid>";
	КонецЕсли;
	Попытка
		Запрос = Запрос + "
		|              <dt:name>"+ ЗаменитьСпецСимволы(ДокСсылка.НаименованиеПродукции) +"</dt:name>";
	Исключение
		Запрос = Запрос + "
		|              <dt:name>"+ ЗаменитьСпецСимволы(ДокСсылка.Продукция_Элемент.Наименование) +"</dt:name>";
	КонецПопытки;

// сведения о фасовке
	Если ЗначениеЗаполнено(ДокСсылка.ФасовкаФормаУпаковки) Тогда
		Запрос = Запрос + "
		|             <dt:packaging>
		|               <dt:packagingType>
		|                  <bs:guid>"+ СокрЛП(ДокСсылка.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
		|               </dt:packagingType>
		|               <dt:quantity>"+ Формат(ДокСсылка.ФасовкаКоличество, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>
		|               <dt:volume>"+ Формат(ДокСсылка.ФасовкаОбъем, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:volume>
		|               <dt:unit>
		|                  <bs:guid>"+ СокрЛП(ДокСсылка.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
		|               </dt:unit>
		|             </dt:packaging>";
	КонецЕсли;
	
	Запрос = Запрос + "
			|            </vd:productItem>
			|            <vd:volume>"+ Формат(ДокСсылка.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(ДокСсылка.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>";
	
	Запрос = Запрос + Изготовление_СрокГодности_в_XML( ДокСсылка ); 
		Попытка
			Если ЗначениеЗаполнено(ДокСсылка.НомерПартии) Тогда
				Запрос = Запрос + "
				|			<vd:batchID>"+СокрЛП(ДокСсылка.НомерПартии)+"</vd:batchID>";
			КонецЕсли;	
		Исключение КонецПопытки;	

//			|           <vd:batchID>BN-875999954</vd:batchID>    Уникальный идентификатор производственной партии продукции.
		Попытка ГУИДСтраны = СокрЛП( ДокСсылка.Страна_Гуид); Исключение ГУИДСтраны = СокрЛП( Параметры["Страна"].GUID); КонецПопытки;

		Запрос = Запрос + "
			|			<vd:perishable>"+НашеБулево(ДокСсылка.скоропортящийся)+"</vd:perishable>
			|			<vd:origin>
			|            <vd:country>
			|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
			|            </vd:country>";


			
		Если ЗначениеЗаполнено(ДокСсылка.ПроизводителиСписок) Тогда  
			СпПроизводители = ЗначениеИзСтрокиВнутр(ДокСсылка.ПроизводителиСписок);
			Для Каждого Производитель ИЗ СпПроизводители Цикл
				Запрос=Запрос+"
				|        		<vd:producer>
				|          			<dt:enterprise>
				|            			<bs:guid>"+ СокрЛП(Производитель.Площадка.GUID) +"</bs:guid>
				|          			</dt:enterprise>
				|					<dt:role>"+ СокрЛП(Производитель.Роль) +"</dt:role>
				|        		</vd:producer>";
			КонецЦикла;
		КонецЕсли;
			
			
		Запрос = Запрос + "
	|                </vd:origin>
	|                <vd:lowGradeCargo>"+НашеБулево(ДокСсылка.некачественный)+"</vd:lowGradeCargo>"; 
// <vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
	Если ЗначениеЗаполнено(ДокСсылка.УровниУпаковки) Тогда 
    	ТЗУровни = ЗначениеИзСтрокиВнутр(ДокСсылка.УровниУпаковки);
	Иначе
		ТЗУровни = "";
	КонецЕсли;
	Если ТипЗнч(ТЗУровни) = Тип("ТаблицаЗначений") Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";

		Для каждого стрУровня ИЗ ТЗУровни Цикл 
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+стрУровня.НомерУровня+"</dt:level>";
			Если ЗначениеЗаполнено(ТЗУровни.Упаковка.GUID) Тогда
				Запрос=Запрос+"
				|                    <dt:packingType>
				|                      <bs:guid>"+ СокрЛП(стрУровня.Упаковка.GUID) +"</bs:guid>
				|                    </dt:packingType>";
			КонецЕсли;
			Запрос=Запрос+"
			|                    <dt:quantity>"+ Формат(стрУровня.Колво,"ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>";
			Попытка
				СзМаркировок = ЗначениеИзСтрокиВнутр(стрУровня.Маркировки);
			исключение
				СзМаркировок = "";
			КонецПопытки;
			Если ТипЗнч(СзМаркировок) = Тип("СписокЗначений") Тогда
				Для каждого стрМаркировки ИЗ СзМаркировок Цикл				
					стрМарк = стрМаркировки.Представление;
					ЗнМарк = стрМаркировки.Значение;
					
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
				КонецЦикла;
			КонецЕсли;
			Запрос=Запрос+"
       		|                  </dt:package>";

		КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";

	КонецЕсли;

		Запрос=Запрос+"
	|              </vd:batch>
	|              </vd:certifiedConsignment>
    |              <vd:authentication>
    |                <vd:purpose>
    |                  <bs:guid>"+ СокрЛП( Параметры["Цель"].Guid ) +"</bs:guid>
    |                </vd:purpose>
    |                <vd:cargoInspected>"+ НашеБулево(ДокСсылка.cargoInspected) +"</vd:cargoInspected>
    |                <vd:cargoExpertized>"+ ПолучитьИдентификаторПеречисления( ДокСсылка.РезультатыИсследований )+"</vd:cargoExpertized>
    |                <vd:locationProsperity>"+СокрЛП(ДокСсылка.Местность)+"</vd:locationProsperity>
    |                <vd:specialMarks>"+СокрЛП(ДокСсылка.ОсобыеОтметки)+"</vd:specialMarks>
    |              </vd:authentication>";

	Если ЗначениеЗаполнено(ДокСсылка.ТтнНомер) Тогда
		Запрос=Запрос+"
    	|              <vd:referencedDocument>
		|                <vd:issueSeries>"+ СокрЛП(ДокСсылка.ТтнСерия) +"</vd:issueSeries>
		|                <vd:issueNumber>"+ СокрЛП(ДокСсылка.ТтнНомер) +"</vd:issueNumber>
	    |                <vd:issueDate>"+ ДатаXML(ДокСсылка.ТтнДата) +"</vd:issueDate>
    	|                <vd:type>1</vd:type>
	    |                <vd:relationshipType>1</vd:relationshipType>
    	|              </vd:referencedDocument>";
	КонецЕсли;
	
		
		Запрос=Запрос+"
    |              <vd:statusChange>
    |                <vd:status>CONFIRMED</vd:status>
    |                <vd:specifiedPerson>
    |                  <vd:fio>"+ СокрЛП( Параметры["param_vetdoctor_fio"] ) +"</vd:fio>
    |                  <vd:post>"+ СокрЛП( Параметры["param_vetdoctor_post"] ) +"</vd:post>
    |                </vd:specifiedPerson>
    |                <vd:actualDateTime>"+ ДатаXML(ДокСсылка.Дата,"T00:00:00") +"</vd:actualDateTime>
    |              </vd:statusChange>";
                
	
	Возврат Запрос;
КонецФункции


Функция ВСД2_входящий_Гашение_ЗапросXML(Параметры, ДокСсылка)
	
	Если ДокСсылка.КоличествоПринять = 0 тогда
		Решение = "RETURN_ALL";	
	ИначеЕсли ДокСсылка.КоличествоВозврат = 0 Тогда
		Решение = "ACCEPT_ALL";
	Иначе
		Решение = "PARTIALLY";			
	КонецЕсли;
	GUID_запроса = Новый УникальныйИдентификатор;
	
		Запрос="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>  
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( Параметры["param_api_key"] ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( Параметры["param_issuer_id"] ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:processIncomingConsignmentRequest>
	|            <merc:localTransactionId>"+GUID_запроса+"</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( Параметры["param_intiator_login"] ) +"</vd:login>
	|            </merc:initiator>";
   Запрос = запрос +"
	|            <merc:delivery>
	|              <vd:deliveryDate>" + ДатаXML(?(ЗначениеЗаполнено(ДокСсылка.ТтнДата),ДокСсылка.ТтнДата,ТекущаяДата()), "T00:00:00") + "</vd:deliveryDate>
	|              <vd:consignor>
	|                <dt:businessEntity>
	|                  <bs:guid>"+СокрЛП(ДокСсылка.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|                </dt:businessEntity>";
	Если ЗначениеЗаполнено(ДокСсылка.Отправитель_Площадка) Тогда // У импортных ВСД отсутствует
		Запрос = запрос +"
		|                <dt:enterprise>
		|                  <bs:guid>"+ СокрЛП(ДокСсылка.Отправитель_Площадка.GUID) +"</bs:guid>
		|                </dt:enterprise>";
	КонецЕсли;
	// У импортных ВСД может отсутствовать
	ВремПолучатель_Площадка = ?(ЗначениеЗаполнено(ДокСсылка.Получатель_Площадка) ,ДокСсылка.Получатель_Площадка, Параметры["Отправитель_Площадка"] ); // возьмем ИЗ Парметров
   Запрос = запрос +"
	|              </vd:consignor>
	|              <vd:consignee>
	|                <dt:businessEntity>
	|                  <bs:guid>"+ СокрЛП(ДокСсылка.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|                </dt:businessEntity>
	|                <dt:enterprise>
	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
	|                </dt:enterprise>
	|              </vd:consignee>";
//********************************   
Если ДокСсылка.КоличествоПринять > 0 Тогда
    Запрос = запрос +"
	|              <vd:consignment>
	|                <vd:productType>"+ ДокСсылка.Продукция.Тип +"</vd:productType>
	|                <vd:product>
	|                  <bs:guid>"+ СокрЛП(ДокСсылка.Продукция.GUID) +"</bs:guid>
	|                </vd:product>
	|                <vd:subProduct>
	|                  <bs:guid>"+ СокрЛП(ДокСсылка.ВидПродукции.GUID) +"</bs:guid>
	|                </vd:subProduct>
	|                <vd:productItem>"; 
	
// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
//·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code> 	

	Если ЗначениеЗаполнено(ДокСсылка.Продукция_Элемент.GUID) Тогда
		Запрос = Запрос + "
		|              <bs:guid>"+ СокрЛП(ДокСсылка.Продукция_Элемент.GUID) +"</bs:guid>";
	КонецЕсли;
	Попытка
		Запрос = Запрос + "
		|              <dt:name>"+ ЗаменитьСпецСимволы(ДокСсылка.НаименованиеПродукции) +"</dt:name>";
	Исключение
		Запрос = Запрос + "
		|              <dt:name>"+ ЗаменитьСпецСимволы(ДокСсылка.Продукция_Элемент.Наименование) +"</dt:name>";
	КонецПопытки;
		
// сведения о фасовке
	Если ЗначениеЗаполнено(ДокСсылка.ФасовкаФормаУпаковки)  Тогда
		Запрос = Запрос + "
		|             <dt:packaging>
		|               <dt:packagingType>
		|                  <bs:guid>"+ СокрЛП(ДокСсылка.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
		|               </dt:packagingType>
		|               <dt:quantity>"+ Формат(ДокСсылка.ФасовкаКоличество, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>
		|               <dt:volume>"+ Формат(ДокСсылка.ФасовкаОбъем, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:volume>
		|               <dt:unit>
		|                  <bs:guid>"+ СокрЛП(ДокСсылка.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
		|               </dt:unit>
		|             </dt:packaging>";
	КонецЕсли;


	Запрос = Запрос + "
			|            </vd:productItem>
			|            <vd:volume>"+ Формат(ДокСсылка.КоличествоПринять, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(ДокСсылка.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>";
		 	
		
		Запрос = Запрос + Изготовление_СрокГодности_Строка_в_XML( ДокСсылка );
						
		Попытка
			Если ЗначениеЗаполнено(ДокСсылка.НомерПартии) Тогда
				Попытка
					спНомераПартий = ЗначениеИзСтрокиВнутр(ДокСсылка.НомерПартии);
					Для Каждого СтрокаНомера ИЗ спНомераПартий Цикл
						Запрос = Запрос + "
						|			<vd:batchID>"+СокрЛП(СтрокаНомера.Значение)+"</vd:batchID>";
					КонецЦикла;
				Исключение
				 	СообщитьИнфо("Не удалось преобразовать номера партий");
					СообщитьИнфо(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;	
		Исключение КонецПопытки;	

		// По идее страну мы загрузили в ТЗ, вот только в документе ее нет
		Попытка 
			ГУИДСтраны = СокрЛП( ДокСсылка.Страна_Гуид); 
		Исключение 
			ГУИДСтраны = Параметры["Страна"].GUID; 
		КонецПопытки;
		
		Запрос = Запрос + "
			|			<vd:perishable>"+НашеБулево(ДокСсылка.скоропортящийся)+"</vd:perishable>
			|			<vd:origin>
			|            <vd:country>
			|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
			|            </vd:country>";
			
		Если ЗначениеЗаполнено(ДокСсылка.ПроизводителиСписок) Тогда    
			СпПроизводители = ЗначениеИзСтрокиВнутр(ДокСсылка.ПроизводителиСписок);
			Для Каждого Производитель ИЗ СпПроизводители Цикл
				Запрос=Запрос+"
				|        		<vd:producer>
				|          			<dt:enterprise>";
				Если ЗначениеЗаполнено(Производитель.Площадка) Тогда
					Запрос=Запрос+"	
					|            			<bs:guid>"+ СокрЛП(Производитель.Площадка.GUID) +"</bs:guid>";
				КонецЕсли;
				Если ЗначениеЗаполнено(Производитель.Имя) Тогда
					Запрос=Запрос+"	
					|            			<dt:name>"+ СокрЛП(Производитель.Имя) +"</dt:name>";
				КонецЕсли;
				Запрос=Запрос+"
				|          			</dt:enterprise>
				|					<dt:role>"+ СокрЛП(Производитель.Роль) +"</dt:role>
				|        		</vd:producer>";
			КонецЦикла;
		КонецЕсли;
			
			
		Запрос = Запрос + "
	|                </vd:origin>
	|                <vd:lowGradeCargo>"+НашеБулево(ДокСсылка.некачественный)+"</vd:lowGradeCargo>"; 
//<vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
	Если ЗначениеЗаполнено(ДокСсылка.УровниУпаковки) Тогда 
    	ТЗУровни = ЗначениеИзСтрокиВнутр(ДокСсылка.УровниУпаковки);
	Иначе
		ТЗУровни = "";
	КонецЕсли;
	Если ТипЗнч(ТЗУровни) = Тип("ТаблицаЗначений") Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";
		
		Для каждого стрУровня ИЗ ТЗУровни Цикл 		
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+стрУровня.НомерУровня+"</dt:level>";
			Если ЗначениеЗаполнено(стрУровня.Упаковка.GUID) Тогда
				Запрос=Запрос+"
				|                    <dt:packingType>
				|                      <bs:guid>"+ СокрЛП(стрУровня.Упаковка.GUID) +"</bs:guid>
				|                    </dt:packingType>";
			КонецЕсли;
			Запрос=Запрос+"
			|                    <dt:quantity>"+ Формат(стрУровня.Колво,"ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>";   
			Попытка	СзМаркировок = ЗначениеИзСтрокиВнутр(стрУровня.Маркировки); исключение СзМаркировок = ""; КонецПопытки;
			Если ТипЗнч(СзМаркировок) = Тип("СписокЗначений") Тогда
				Для каждого стрМаркировки ИЗ СзМаркировок Цикл				
					стрМарк=стрМаркировки.Представление;
					ЗнМарк = стрМаркировки.Значение;					
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
				КонецЦикла;
			КонецЕсли;
			Запрос=Запрос+"
       		|                  </dt:package>";
		КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";
	КонецЕсли;


		Запрос=Запрос+"
	|              </vd:consignment>";
КонецЕсли; // ПринимаемоеКолво > 0
//*************************	
	
		Если ЗначениеЗаполнено(СокрЛП(ДокСсылка.Перевозчик_ХозСубъект)) Тогда  
			Запрос=Запрос+"			
			|        <vd:broker>
			|          <bs:guid>"+ СокрЛП(ДокСсылка.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </vd:broker>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СокрЛП(ДокСсылка.ТипТС)) Тогда  
			Запрос=Запрос+"			
			|        <vd:transportInfo>
			|          <vd:transportType>"+СокрЛП(ДокСсылка.ТипТС)+"</vd:transportType>
			|          <vd:transportNumber>";
	
			Если СокрЛП(ДокСсылка.ТипТС) = "1" Тогда
				Попытка
					// Странный важный момент - контейнер д.б. первым !
				Если ЗначениеЗаполнено(ДокСсылка.номерКонтейнера) Тогда
			    	Запрос = Запрос+"
					|            <vd:containerNumber>"+ СокрЛП(ДокСсылка.номерКонтейнера) +"</vd:containerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;

				Запрос = Запрос+"
				|            <vd:vehicleNumber>"+ СокрЛП(ДокСсылка.номерАвто) +"</vd:vehicleNumber>
				|"; 
				Попытка
				Если ЗначениеЗаполнено(ДокСсылка.номерПолуприцепа) Тогда
			    	Запрос = Запрос+"
					|            <vd:trailerNumber>"+ СокрЛП(ДокСсылка.номерПолуприцепа) +"</vd:trailerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;
			иначеЕсли СокрЛП(ДокСсылка.ТипТС) = "2" Тогда
		    Запрос = Запрос+"
			|            <vd:wagonNumber>"+ СокрЛП(ДокСсылка.номерАвто) +"</vd:wagonNumber>
			|"; 
			иначеЕсли СокрЛП(ДокСсылка.ТипТС) = "3" Тогда
		    Запрос = Запрос+"
			|            <vd:flightNumber>"+ СокрЛП(ДокСсылка.номерАвто) +"</vd:flightNumber>
			|";
			иначеЕсли (СокрЛП(ДокСсылка.ТипТС) = "4") ИЛИ (СокрЛП(ДокСсылка.ТипТС) = "5") ИЛИ (СокрЛП(ДокСсылка.ТипТС) = "6") Тогда
		    Запрос = Запрос+"
			|            <vd:shipName>"+ СокрЛП(ДокСсылка.номерАвто) +"</vd:shipName>
			|";
			
			КонецЕсли;	
			Запрос=Запрос+"
			|          </vd:transportNumber>
			|        </vd:transportInfo>";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокСсылка.ТермическиеУсловияПеревозки) Тогда		
			Запрос=Запрос+"			
			|              <vd:transportStorageType>"+ XMLСтрока( ДокСсылка.ТермическиеУсловияПеревозки ) +"</vd:transportStorageType>";
		КонецЕсли;	


	Запрос=Запрос+"			
	|              <vd:accompanyingForms>";
 // Для гашения нужен только ТТН, при "Без ТТН" - waybill не нужен
 	Если ЗначениеЗаполнено(ДокСсылка.ТтнНомер) Тогда
		Запрос=Запрос+"			
		|                <vd:waybill>  
		|                  <vd:issueSeries>"+ СокрЛП(ДокСсылка.ТтнСерия) +"</vd:issueSeries>
		|                  <vd:issueNumber>"+ СокрЛП(ДокСсылка.ТтнНомер) +"</vd:issueNumber>
		|                  <vd:issueDate>"+ ДатаXML(ДокСсылка.ТтнДата) +"</vd:issueDate>";
		Попытка
			Запрос=Запрос+"			
			|                  <vd:type>"+ ДокСсылка.ТтнТип +"</vd:type>";
		Исключение
			//Добавить Реквизит ттнТип в документ ВСД2_входящий
			СообщитьИнфо("Добавьте Реквизит ттнТип (число 1.0) в документ ВСД2_входящий");
			СообщитьИнфо("Отправляю с типом 1 - Товарно транспортная накладная");
			Запрос=Запрос+"			
			|                  <vd:type>1</vd:type>";
		КонецПопытки;
		Запрос=Запрос+"			
		|                </vd:waybill>";
	КонецЕсли;	
		
	Запрос=Запрос+"		
	|                <vd:vetCertificate>";
	Если ДокСсылка.ВидВСД=1 Тогда
		Запрос = Запрос + ВСД2_ВходящийБумажныйГашение_ЗапросXML(Параметры, ДокСсылка);
	Иначе	
		Запрос=Запрос+"
		|                  <bs:uuid>"+ СокрЛП(ДокСсылка.UUID) +"</bs:uuid>";
	КонецЕсли;
	
	Запрос=Запрос+"			
	|                </vd:vetCertificate>
	|              </vd:accompanyingForms>
	|            </merc:delivery>
	|            <merc:deliveryFacts>";
	Если ДокСсылка.ВидВСД=1 Тогда
		Запрос=Запрос+"			
		|              <vd:vetCertificatePresence>PAPER</vd:vetCertificatePresence>";
	Иначе
		Запрос=Запрос+"			
		|              <vd:vetCertificatePresence>ELECTRONIC</vd:vetCertificatePresence>";
	КонецЕсли;
	
	Запрос=Запрос+"			
	|              <vd:docInspection>
	|                <vd:responsible>
	|                  <vd:login>"+ СокрЛП( Параметры["param_vetdoctor_login"] ) +"</vd:login>
	|                </vd:responsible>
	|                <vd:result>CORRESPONDS</vd:result>
	|              </vd:docInspection>
	|              <vd:vetInspection>
	|                <vd:responsible>
	|                  <vd:login>"+ СокрЛП( Параметры["param_vetdoctor_login"] ) +"</vd:login>
	|                </vd:responsible>
	|                <vd:result>CORRESPONDS</vd:result>
	|              </vd:vetInspection>
	|              <vd:decision>"+Решение+"</vd:decision>
	|            </merc:deliveryFacts>";
	
	// Акт несоотв.
   	Если (Параметры["флАктНесоответствия"]) ИЛИ Не(ДокСсылка.Количество = (ДокСсылка.КоличествоПринять + ДокСсылка.КоличествоВозврат)) Тогда
	Запрос = Запрос+"
	|            <merc:discrepancyReport>
	|              <vd:issueDate>"+ ?(ЗначениеЗаполнено(ДатаXML(ДокСсылка.ТтнДата)),ДатаXML(ДокСсылка.ТтнДата),ДатаXML(ДокСсылка.Дата)) +"</vd:issueDate>
	|              <vd:reason>
	|                <vd:name>"+?(ЗначениеЗаполнено(СокрЛП( Параметры["тПричинаАкта"] )),СокрЛП( Параметры["тПричинаАкта"] ),"несоответствие")+"</vd:name>
	|              </vd:reason>
	|              <vd:description>"+?(НЕ(ЗначениеЗаполнено( Параметры["тОписаниеНесоответствия"] )),"Описание несоответствия",СокрЛП( Параметры["тОписаниеНесоответствия"] )) +"</vd:description>
	|            </merc:discrepancyReport>";
    КонецЕсли;
	
	// Возврат поставщику
	Если ДокСсылка.КоличествоВозврат > 0 тогда //ЗначениеЗаполнено(ДокВозврат) тогда
		Запрос = Запрос + ГашениеБлокВозвратXML( Параметры, ДокСсылка.ДокВСД, ДокСсылка.КоличествоВозврат);	
	КонецЕсли;
	

	Запрос = Запрос+"
	|          </merc:processIncomingConsignmentRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";	
	

	Возврат Запрос;
КонецФункции

Функция ГашениеБлокВозвратXML( Параметры, ДокСсылка, НужноеКоличество)
	ЗапросШапка = "
    |        <merc:returnedDelivery>";
	
	// Тут перевертыш - предусмотреть при оптимизации блока
	ЗапросШапка = ЗапросШапка +"
    |          <vd:consignor>
    |            <dt:businessEntity>
    |              <bs:guid>"+СокрЛП(ДокСсылка.Получатель_ХозСубъект.GUID)+"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(ДокСсылка.Получатель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>
    |          </vd:consignor>
    |          <vd:consignee>
    |            <dt:businessEntity>
    |              <bs:guid>"+ СокрЛП(ДокСсылка.Отправитель_ХозСубъект.GUID) +"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(ДокСсылка.Отправитель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>
    |          </vd:consignee>";
	
	consignment =  "
	|       <vd:consignment>";
	consignment =  consignment+"
	|                <vd:productType>"+ ДокСсылка.Продукция_Элемент.Продукция.Тип +"</vd:productType>
	|                <vd:product>
	|                  <bs:guid>"+ СокрЛП(ДокСсылка.Продукция_Элемент.Продукция.GUID) +"</bs:guid>
	|                </vd:product>
	|                <vd:subProduct>
	|                  <bs:guid>"+ СокрЛП(ДокСсылка.Продукция_Элемент.ВидПродукции.GUID) +"</bs:guid>
	|                </vd:subProduct>";
	
	
	
	consignment =  consignment+"
	|                <vd:productItem>"; 

	Если ЗначениеЗаполнено(ДокСсылка.Продукция_Элемент.GUID) Тогда
		consignment = consignment + "
		|              <bs:guid>"+ СокрЛП(ДокСсылка.Продукция_Элемент.GUID) +"</bs:guid>";
	КонецЕсли;
		consignment = consignment + "
		|              <dt:name>"+ ЗаменитьСпецСимволы(ДокСсылка.Продукция_Элемент.Наименование) +"</dt:name>";
// сведения о фасовке
	Если ЗначениеЗаполнено(ДокСсылка.ФасовкаФормаУпаковки)  Тогда
		consignment = consignment + "
		|             <dt:packaging>
		|               <dt:packagingType>
		|                  <bs:guid>"+ СокрЛП(ДокСсылка.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
		|               </dt:packagingType>
		|               <dt:quantity>"+ Формат(ДокСсылка.ФасовкаКоличество, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>
		|               <dt:volume>"+ Формат(ДокСсылка.ФасовкаОбъем, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:volume>
		|               <dt:unit>
		|                  <bs:guid>"+ СокрЛП(ДокСсылка.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
		|               </dt:unit>
		|             </dt:packaging>";
	КонецЕсли;

	consignment = consignment + "
			|            </vd:productItem>";
	
	consignment = consignment + "
			|            <vd:volume>"+ Формат(НужноеКоличество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(ДокСсылка.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>";
	
	// даты
	consignment = consignment + Изготовление_СрокГодности_в_XML(ДокСсылка); 
		
// №№ партий
		Для Каждого СтрокаНомера ИЗ ДокСсылка.НомераПартий Цикл
			consignment = consignment + "
			|			<vd:batchID>"+СокрЛП(СтрокаНомера.НомерПартии)+"</vd:batchID>";
		КонецЦикла;
	
		Попытка ГУИДСтраны = СокрЛП( ДокСсылка.Страна_Гуид); Исключение ГУИДСтраны = СокрЛП( Параметры["Страна"].GUID ); КонецПопытки;
		
		consignment = consignment + "
			|			<vd:perishable>"+НашеБулево(ДокСсылка.скоропортящийся)+"</vd:perishable>
			|			<vd:origin>
			|            <vd:country>
			|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
			|            </vd:country>";
			
  // производители 
			Для Каждого Производитель ИЗ ДокСсылка.Производители Цикл
				consignment = consignment + "
				|        		<vd:producer>
				|          			<dt:enterprise>";
				Если ЗначениеЗаполнено(Производитель.Площадка) Тогда
					consignment = consignment + "	
					|            			<bs:guid>"+ СокрЛП(Производитель.Площадка.GUID) +"</bs:guid>";
				КонецЕсли;
				Если ЗначениеЗаполнено(Производитель.Имя) Тогда
					consignment = consignment + "	
					|            			<dt:name>"+ СокрЛП(Производитель.Имя) +"</dt:name>";
				КонецЕсли;
				consignment = consignment + "
				|          			</dt:enterprise>
				|					<dt:role>"+ СокрЛП(Производитель.Роль) +"</dt:role>
				|        		</vd:producer>";
			КонецЦикла;

			
			
		consignment = consignment + "
	|                </vd:origin>
	|                <vd:lowGradeCargo>"+НашеБулево(ДокСсылка.некачественный)+"</vd:lowGradeCargo>";
// маркировки		
	Если ДокСсылка.УровниУпаковки.Количество() > 0 Тогда
		consignment = consignment + "
		|                <vd:packageList>";
		
		Для каждого стрУровня ИЗ ДокСсылка.УровниУпаковки Цикл 		
			consignment = consignment + "
			|                  <dt:package>
			|                    <dt:level>"+ПолучитьПорядковыйНомерПеречисления(стрУровня.НомерУровня)+"</dt:level>";
			Если ЗначениеЗаполнено(стрУровня.ФормаУпаковки.GUID) Тогда
				consignment = consignment + "
				|                    <dt:packingType>
				|                      <bs:guid>"+ СокрЛП(стрУровня.ФормаУпаковки.GUID) +"</bs:guid>
				|                    </dt:packingType>";
			КонецЕсли;
			consignment = consignment + "
			|                    <dt:quantity>"+ Формат(стрУровня.Количество,"ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>";   
			
			Для каждого стрМаркировки ИЗ ДокСсылка.Маркировка Цикл				
				consignment = consignment + "
				|                    <dt:productMarks class='"+ ПолучитьИдентификаторПеречисления( стрМаркировки.Класс ) +"'>"+стрМаркировки.Маркировка+"</dt:productMarks>";
			КонецЦикла;
			
			consignment = consignment + "
       		|                  </dt:package>";
		КонецЦикла;
		consignment = consignment + "
		|                </vd:packageList>";
	КонецЕсли;
	
	
	consignment = consignment + "	
    |          </vd:consignment>";		
	
	
//****************	
	ЗапросПодвал = "";
	Если ЗначениеЗаполнено(ДокСсылка.Перевозчик_ХозСубъект) Тогда
	ЗапросПодвал = "		  
        |      <vd:broker>
        |        <bs:guid>"+ СокрЛП(ДокСсылка.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
        |      </vd:broker>";
	КонецЕсли;
	
	
	ЗапросПодвал = ЗапросПодвал+"		  
        |      <vd:transportInfo>
        |        <vd:transportType>1</vd:transportType>
        |        <vd:transportNumber>
        |          <vd:vehicleNumber>"+ СокрЛП(ДокСсылка.номерАвто) +"</vd:vehicleNumber>
        |        </vd:transportNumber>
        |      </vd:transportInfo>";
	
	
	ЗапросПодвал = ЗапросПодвал+"
        |      <vd:transportStorageType>"+ XMLСтрока( ДокСсылка.ТермическиеУсловияПеревозки ) +"</vd:transportStorageType>";
	
	
	ЗапросПодвал = ЗапросПодвал+"	
        |      <vd:accompanyingForms>";
	
	Если ДокСсылка.ТтнТип > 0 тогда
	//Тип товарно-транспортной накладной.
    //Допустимые типы Для waybill: 1, 2, 3, 4, 5
		ЗапросПодвал = ЗапросПодвал+"		  
       	|        <vd:waybill>
        |          <vd:issueSeries>"+ СокрЛП(ДокСсылка.ТтнСерия) +"</vd:issueSeries>
   	    |          <vd:issueNumber>"+ СокрЛП(ДокСсылка.ТтнНомер) +"</vd:issueNumber>
       	|          <vd:issueDate>"+ ДатаXML(ДокСсылка.ТтнДата) +"</vd:issueDate>
        |          <vd:type>"+ДокСсылка.ТтнТип+"</vd:type>      
   	    |        </vd:waybill>";
	КонецЕсли;
	
	ЗапросПодвал = ЗапросПодвал+"		  
        |        <vd:vetCertificate>
        |          <vd:authentication>
        |            <vd:purpose>
        |              <bs:guid>"+ СокрЛП( Параметры["ВСДЦель"].Guid ) +"</bs:guid>		
        |            </vd:purpose>
        |            <vd:cargoInspected>"+ НашеБулево(ДокСсылка.cargoInspected) +"</vd:cargoInspected>";
			ЗапросПодвал = ЗапросПодвал+ "
			|             <vd:cargoExpertized>"+ ПолучитьИдентификаторПеречисления( ДокСсылка.РезультатыИсследований ) +"</vd:cargoExpertized>
			|";
	
		тзУсловияПеревозки = ДокСсылка.УсловияПеревозки.Выгрузить();
		Если ЗначениеЗаполнено(тзУсловияПеревозки) Тогда
			ЗапросПодвал = ЗапросПодвал+ "		  
			|            <vd:locationProsperity>"+ СокрЛП(ДокСсылка.Местность) +"</vd:locationProsperity>";
			
			Для каждого стрУсловия ИЗ тзУсловияПеревозки Цикл
				Если стрУсловия.Отметка Тогда
					ЗапросПодвал=ЗапросПодвал+"
					|<vd:r13nClause>
					|<vd:condition>
					|<bs:guid>" + стрУсловия.GUID + "</bs:guid>
					|</vd:condition>
					|</vd:r13nClause>
					|";	
				КонецЕсли;
			КонецЦикла;		
		Иначе
			ЗапросПодвал = ЗапросПодвал+ "
			|            <vd:locationProsperity>"+ СокрЛП(ДокСсылка.Местность) +"</vd:locationProsperity>
			|";
			
		КонецЕсли;
		
		ЗапросПодвал = ЗапросПодвал+ ?(ЗначениеЗаполнено(ДокСсылка.особыеотметки) , "            <vd:specialMarks>"+ СокрЛП(ДокСсылка.особыеотметки) +"</vd:specialMarks>","");	
		
		ЗапросПодвал = ЗапросПодвал+ "
        |          </vd:authentication>
        |        </vd:vetCertificate>";
	
		СвязДок = ДокСсылка.СвязанныеДокументы.Выгрузить();
		Если ЗначениеЗаполнено(СвязДок) Тогда
	    	Для каждого стрдок ИЗ СвязДок Цикл
	        ЗапросПодвал = ЗапросПодвал+ "
	        |        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(стрдок.НомерДокумента)+"</vd:issueNumber>
	        |          <vd:issueDate>"+ ДатаXML(стрдок.ДатаДокумента) +"</vd:issueDate>
    	    |          <vd:type>"+стрдок.ТипДокумента+"</vd:type>
        	|          <vd:relationshipType>"+стрдок.ТипОтношенияДок+"</vd:relationshipType>
	        |        </vd:relatedDocument>";
			КонецЦикла;
        КонецЕсли;
		
		
	ЗапросПодвал = ЗапросПодвал+ "
    |          </vd:accompanyingForms>
    |        </merc:returnedDelivery>";

	Запрос = ЗапросШапка + consignment + ЗапросПодвал;
	Возврат Запрос;
КонецФункции


//Функция Отправить_ВСД2_ВходящийГашение(Параметры, ДокСсылка)
Функция ВСД2_Входящий_ОтправитьГашение(Параметры, ДокСсылка, ВСД_Партия=Неопределено) Экспорт

	//// refs #2346 31/01/19 - Берем данные о получателе ИЗ vetDocument 
	//Если Отправитель_Площадка <> ДокСсылка.Получатель_Площадка Тогда
	//	СообщитьИнфо("Отладка стр  10326 -> Текущая Площадка "+Отправитель_Площадка+" <> Получателю: "+ДокСсылка.Получатель_Площадка+" Меняю Параметр");
	//	Отправитель_Площадка = ДокСсылка.Получатель_Площадка;  // Меняем у объекта И в Константах 
	//	СписокКонстант.Вставить("Отправитель_Площадка", Отправитель_Площадка);
	//КонецЕсли;
	//Если Отправитель_ХозСубъект <> ДокСсылка.Получатель_ХозСубъект Тогда
	//	СообщитьИнфо("Отладка стр  10331 -> Текущий ХС "+Отправитель_ХозСубъект+" <> ХС Получателя: "+ДокСсылка.Получатель_ХозСубъект+" Меняю Параметр");
	//	Отправитель_ХозСубъект = ДокСсылка.Получатель_ХозСубъект;
	//	СписокКонстант.Вставить("Отправитель_ХозСубъект", Отправитель_ХозСубъект);
	//КонецЕсли;
	//// Окончание refs #2346 31/01/19
	
	ЗапросXML = ВСД2_входящий_Гашение_ЗапросXML(Параметры, ДокСсылка);
	Service = "platform/services/2.0/ApplicationManagementService";
    Action = "submitApplicationRequest";	

	ПараметрыОтправки = кб99_ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = кб99_ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Если ТипЗНЧ(ДокСсылка) = ТИП("ДокументСсылка.ВСД2_входящий") Тогда
		Ответ = СтатусЗапроса( xdto, докСсылка, ПараметрыОтправки );
	КонецЕсли;
	
	Если НайтиОшибки(xdto, ДокСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	appID = кб99_ВСД_Отправка.Получить_ApplicationID( xdto );
	
	Ответ = ВСД2_Входящий_ГашениеПолучитьОтвет( Параметры, appID, ДокСсылка, ВСД_Партия );	
	Для А=1 По 10 Цикл
		Если (Ответ="IN_PROCESS") Тогда
			Ответ =  ВСД2_Входящий_ГашениеПолучитьОтвет( Параметры, appID, ДокСсылка, ВСД_Партия );	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ответ;
		
КонецФункции 

Функция ВСД2_Входящий_ГашениеПолучитьОтвет(Параметры, appID, докСсылка, ВСД_Партия = Неопределено ) Экспорт
	
	ВСД_Партия = Справочники.ВСД_Партия.ПустаяСсылка();
	
	Если НЕ(ЗначениеЗаполнено(appID)) Тогда
		СообщитьИнфо("Пустая ссылка applicationID","!");
		Возврат Ложь;
	КонецЕсли;
	
	Пауза( Параметры["ПаузаСек"] );
	
	xdto = кб99_ВСД_Отправка.ПолучитьРезультатСервер( Параметры, appID );
	
	Ответ = СтатусЗапроса( xdto, докСсылка, Параметры );
	
	Если НайтиОшибки(xdto, докСсылка) Тогда
		Возврат Ответ;
	КонецЕсли;

	Если (ТипЗНЧ(докСсылка) = ТИП("ДокументСсылка.ВСД2_входящий")) Тогда
		докОснованиеОбъект = докСсылка.ПолучитьОбъект();
		докОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗагрузитьXML_ВСД2( Параметры, докСсылка );
	КонецЕсли;	
	
	ПартияОтвет = Партии_Ответ_ЗагрузитьXML( Параметры, xdto);
	ВСД_Партия = ПартияОтвет.Ссылка;
	
	Возврат Ответ;	
КонецФункциИ

Функция ВСД2_Входящий_НайтиПоUUID( _uuid ) экспорт 
	
	Если ЗначениеЗаполнено(_uuid) Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД2_входящий.Ссылка
		                      |ИЗ
		                      |	Документ.ВСД2_входящий КАК ВСД2_входящий
		                      |ГДЕ
		                      |	ВСД2_входящий.UUID = &UUID");
		
		Запрос.УстановитьПараметр("UUID", _Uuid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			ДокОб = Результат.Ссылка.ПолучитьОбъект();		
			ДокОб.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
			ДокОб.УстановитьПометкуУдаления(Ложь);
			
			СообщитьИнфо("Найден "+ДокОб, ДокОб.Ссылка );			
		Иначе
			ДокОб = Документы.ВСД2_входящий.СоздатьДокумент();
			СообщитьИнфо("Создан новый "+ДокОб+" № "+ДокОб.Номер);
		КонецЕсли;	
	Иначе
		СообщитьИнфо("Пустой UUID");
	КонецЕсли;
	
	Возврат ДокОб;

КонецФункции
	
#КонецОбласти

#КонецОбласти