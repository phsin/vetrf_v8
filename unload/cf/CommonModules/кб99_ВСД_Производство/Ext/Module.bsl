
#Область СписаниеВПроизводство

//Возвращает Продукция_Элементы и Количество сырья , требуемое для выпуска КоличествоПродукции ВыбраннойПродукции
Функция ПолучитьТзСырьеПоВСД_Продукция_Элемент(ВыбраннаяПродукция, КоличествоПродукции = 0) Экспорт
	
	ТЗСырье = Новый ("ТаблицаЗначений");
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
                   |	кб99_ПроизводственнаяСпецификация.Сырье КАК Продукция_Элемент,
				   |	Значение(Справочник.Контрагенты.ПустаяСсылка) Как Контрагент,
				   |	кб99_ПроизводственнаяСпецификация.Коэффициент
                   |ИЗ
                   |	РегистрСведений.кб99_ПроизводственнаяСпецификация КАК кб99_ПроизводственнаяСпецификация
                   |ГДЕ
                   |	кб99_ПроизводственнаяСпецификация.Продукция = &ВыбПродукция";
    Запрос.УстановитьПараметр("ВыбПродукция", ВыбраннаяПродукция);

    ТЗСырье = Запрос.Выполнить().Выгрузить();
	ТЗСырье.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3)));  //Требуемое кол-во сырья на 100 кг ВыбраннаяПродукция
	Если КоличествоПродукции <> 0 Тогда
		Для Каждого СтрСырье Из ТЗСырье Цикл
			СтрСырье.Количество = КоличествоПродукции * СтрСырье.Коэффициент / 100; // на 100 кг продукции
		КонецЦикла
	КонецЕсли;
	
	Возврат ТЗСырье;
	
КонецФункции

//СформироватьТЧСырьяДляСписанияВПроизводствоПоСписку
Функция ЗаполнитьСырьеИзВСД_Продукция_Элемент(тзПродукции) Экспорт
	
	ТЗВсегоСырье = Новый ("ТаблицаЗначений");
	ТЗВсегоСырье.Колонки.Добавить("Продукция_Элемент",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция_Элемент"));
	ТЗВсегоСырье.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3)));
	ТЗВсегоСырье.Колонки.Добавить("СерияНоменклатуры",новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(20)));
	ТЗВсегоСырье.Колонки.Добавить("Контрагент");
	
	Для Каждого СтрокаПродукции Из тзПродукции Цикл
		тзСырье = ПолучитьТзСырьеПоВСД_Продукция_Элемент( СтрокаПродукции.Продукция_Элемент, СтрокаПродукции.Количество );
		Для Каждого СтрокаСырье Из ТЗСырье Цикл
			ЗаполнитьЗначенияСвойств(ТЗВсегоСырье.Добавить(), СтрокаСырье) 
		КонецЦикла
	КонецЦикла;
	
	ТЗВсегоСырье.Свернуть("Продукция_Элемент","Количество");
	
	Возврат ТЗВсегоСырье; 
	
КонецФункции

Функция тзЗаполнитьПартииСписанияПоТзПродукция(Параметры, тзЭлементыкСписанию, СтрОснование, тзАктуальныхПартий, ПартииКСписанию) Экспорт
	
	КоличествоСписания = СтрОснование.Количество;
	
	Если НЕ ЗначениеЗаполнено(тзАктуальныхПартий) Тогда
		Если Параметры["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"] Тогда
			НоваяСтрока = ПартииКСписанию.Добавить();
			НоваяСтрока.Номенклатура = СтрОснование.НоменклатураСырье;
			НоваяСтрока.Количество = КоличествоСписания;
		КонецЕсли;
		кб99_ВСД.СообщитьИнфо("Не переданы параметры для получения Актуальных партий - ДанныеЗаполнения или тзЭлементыОснования");
		Возврат ПартииКСписанию;
	КонецЕсли;
	
	СтрокиПартий = кб99_ВСД.ПодобратьПартии( тзАктуальныхПартий, КоличествоСписания );
	Если СтрокиПартий.Количество() = 0  Тогда
		Если Параметры["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"] Тогда
			НоваяСтрока = ПартииКСписанию.Добавить();
			НоваяСтрока.Номенклатура = СтрОснование.НоменклатураСырье;
			НоваяСтрока.Количество = КоличествоСписания;
		КонецЕсли;
		кб99_ВСД.СообщитьИнфо("Нет партий пропускаем..");				
	КонецЕсли;
	
	Для Каждого СтрПартии Из СтрокиПартий Цикл
		НоваяСтрока = ПартииКСписанию.Добавить();
		НоваяСтрока.Номенклатура = СтрОснование.НоменклатураСырье;
		НоваяСтрока.Партия = СтрПартии.Партия;
		НоваяСтрока.Количество = СтрПартии.Количество;
		НоваяСтрока.ЕдиницаИзмерения = СтрПартии.Партия.ЕдиницаИзмерения;
		НоваяСтрока.Продукция_Элемент = НоваяСтрока.Партия.Продукция_Элемент;			
		НоваяСтрока.Продукция = НоваяСтрока.Партия.Продукция;			
		НоваяСтрока.ВидПродукции = НоваяСтрока.Партия.ВидПродукции;			
	КонецЦикла;
	
	Если (СтрокиПартий.Итог("Количество") < КоличествоСписания) и Параметры["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"]  Тогда
		//Добавим с пустыми партиями
		НоваяСтрока = ПартииКСписанию.Добавить();
		НоваяСтрока.Номенклатура = СтрОснование.НоменклатураСырье;
		НоваяСтрока.Количество	=  КоличествоСписания - СтрокиПартий.Итог("Количество") ;
	КонецЕсли; 
	
	Возврат ПартииКСписанию;
	
КонецФункции

//Возвращает Продукция_Элементы и Количество сырья , требуемое для выпуска КоличествоПродукции ВыбраннойПродукции
Функция ПолучитьСырьеИзСпецификацииНоменклатуры( ВыбНоменклатура, КоличествоПродукции = 0) 
	
	тзСырье = Новый("ТаблицаЗначений");
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
                   |	СпецификацииНоменклатуры.Ссылка.Владелец КАК НоменклатураПродукция,
                   |	СпецификацииНоменклатуры.Ссылка.Количество КАК КоличествоПродукции,
                   |	СпецификацииНоменклатуры.Номенклатура КАК НоменклатураСырье,
                   |	СпецификацииНоменклатуры.Количество КАК КоличествоСырья,
                   |	ВСД_Соответсвия.ПродукцияЭлемент КАК Продукция_Элемент
                   |ИЗ
                   |	Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатуры
                   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
                   |		ПО СпецификацииНоменклатуры.Номенклатура = ВСД_Соответсвия.Владелец
                   |ГДЕ
                   |	СпецификацииНоменклатуры.Ссылка.Владелец = &ВыбНоменклатура";
	
    Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура);

    ТЗСырье = Запрос.Выполнить().Выгрузить();
	ТЗСырье.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3)));  //Требуемое кол-во сырья на 1 кг ВыбНоменклатура
	
	Если КоличествоПродукции > 0 Тогда
		Для Каждого СтрСырье Из ТЗСырье Цикл
			СтрСырье.Количество = КоличествоПродукции * СтрСырье.КоличествоСырья / СтрСырье.КоличествоПродукции;
		КонецЦикла
	КонецЕсли;
	
	Возврат ТЗСырье;
	
КонецФункции

Функция ЗаполнитьТчСписаниеИзСпецификацииНоменклатуры( Знач Параметры, тзНоменклатуры ) Экспорт
	
	// вызов переопределения
	ПереопределенныйМодуль = кб99_ВСД_Общий.ФункцияПереопределена("ЗаполнитьТчСписаниеИзСпецификацииНоменклатуры");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ЗаполнитьТчСписаниеИзСпецификацииНоменклатуры( Параметры, тзНоменклатуры );
	КонецЕсли;
	
	Попытка 
		ПартииКСписанию = новый ("ТаблицаЗначений"); //Можно структуру скопировать из вызывающего документа, если в параметр его добавить
		ПартииКСписанию.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ПартииКСписанию.Колонки.Добавить("Продукция_Элемент",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция_Элемент"));
		ПартииКСписанию.Колонки.Добавить("Продукция",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция"));
		ПартииКСписанию.Колонки.Добавить("ВидПродукции",новый ОписаниеТипов("СправочникСсылка.ВСД_ВидПродукции"));
		ПартииКСписанию.Колонки.Добавить("Партия",новый ОписаниеТипов("СправочникСсылка.ВСД_Партия"));
		ПартииКСписанию.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3)));
		ПартииКСписанию.Колонки.Добавить("Упаковки",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3)));
		ПартииКСписанию.Колонки.Добавить("ЕдиницаИзмерения",новый ОписаниеТипов("СправочникСсылка.ВСД_ЕдиницыИзмерения"));
		
		Для Каждого СтрокаПродукции Из тзНоменклатуры Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаПродукции.Номенклатура) Тогда 
				кб99_ВСД.СообщитьИнфо("Номенклатура не заполнена в строке"+СтрокаПродукции.НомерСтроки);
				Продолжить;
			КонецЕсли;			
			
			//1. Получаем список ВСД_Продукция_Элемент для Сырья Номенклатуры из Спецификации
			ТЗСырье = Новый("ТаблицаЗначений");
		    Запрос = Новый Запрос;
		    Запрос.Текст = "ВЫБРАТЬ
		                   |	СпецификацииНоменклатуры.Ссылка.Владелец КАК НоменклатураПродукция,
		                   |	СпецификацииНоменклатуры.Ссылка.Количество КАК КоличествоПродукции,
		                   |	СпецификацииНоменклатуры.Номенклатура КАК НоменклатураСырье,
		                   |	СпецификацииНоменклатуры.Количество КАК КоличествоСырья,
		                   |	ВСД_Соответсвия.ПродукцияЭлемент КАК Продукция_Элемент
		                   |ИЗ
		                   |	Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатуры
		                   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
		                   |		ПО СпецификацииНоменклатуры.Номенклатура = ВСД_Соответсвия.Владелец
		                   |ГДЕ
		                   |	СпецификацииНоменклатуры.Ссылка.Владелец В ИЕРАРХИИ ( &ВыбНоменклатура) ";
			
		    Запрос.УстановитьПараметр("ВыбНоменклатура", СтрокаПродукции.Номенклатура );
			тзСырье = Запрос.Выполнить().Выгрузить();
			
			//2. Формируем Актуальные партии для всего сырья = списка тзСырье
			тзПартий = кб99_ВСД.ПолучитьАктуальныеПартии( Параметры, тзСырье.ВыгрузитьКолонку("Продукция_Элемент"), Параметры["Отправитель_Площадка"], Параметры["Отправитель_ХозСубъект"]);
		
			тзСырье = ПолучитьСырьеИзСпецификацииНоменклатуры( СтрокаПродукции.Номенклатура, СтрокаПродукции.Количество );
			Если НЕ ЗначениеЗаполнено(тзСырье ) Тогда 
				Продолжить;
			КонецЕсли;
			
			тзСырье.Свернуть("НоменклатураСырье, Количество");
			
			Для Каждого Ингредиент Из тзСырье Цикл
				тзАктуальныхПартий = кб99_ВСД.ПодобратьПартииПоПродукцияЭлемент(Параметры, тзПартий, Неопределено, Ингредиент.Количество, , Ингредиент.НоменклатураСырье);
				тзЗаполнитьПартииСписанияПоТзПродукция( Параметры, тзСырье, Ингредиент, тзАктуальныхПартий, ПартииКСписанию);
			КонецЦикла;
		КонецЦикла;
	Исключение
		кб99_ВСД.СообщитьИнфо("Ошибка "+ОписаниеОшибки());
		ПартииКСписанию = Новый ТаблицаЗначений;
	КонецПопытки;
	
	ПартииКСписанию.Свернуть("Номенклатура, Продукция_Элемент, Продукция, ВидПродукции, Партия, ЕдиницаИзмерения", "Количество, Упаковки");    
	
	Возврат ПартииКСписанию;
	
КонецФункции

Функция ПолучитьНомерПартии( Знач ПараметрыОрганизации, СтрокаТчДок ) Экспорт
	
	// вызов переопределения
	ПереопределенныйМодуль = кб99_ВСД_Общий.ФункцияПереопределена("ПолучитьНомерПартии");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьНомерПартии( ПараметрыОрганизации, СтрокаТчДок );
	КонецЕсли;

	Попытка 
		Возврат Формат( ТекущаяДата(), "ДЛФ=Д");
	Исключение 
		Возврат "";
	КонецПопытки;
	
КонецФункции

#КонецОбласти

Функция ПолучитьНомерНезавершенногоПроизводства(ПараметрыОрганизации, СтрокаТЧ) Экспорт
	
	// вызов переопределения
	ПереопределенныйМодуль = кб99_ВСД_Общий.ФункцияПереопределена("ПолучитьНомерНезавершенногоПроизводства");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьНомерНезавершенногоПроизводства( ПараметрыОрганизации, СтрокаТЧ );
	КонецЕсли;
	
	Префикс = ПараметрыОрганизации.ПрефиксНомераНезавершенногоПроизводства;
	Артикул = кб99_ВСД_Общий.ПолучитьАртикулНоменклатуры(ПараметрыОрганизации, СтрокаТЧ, "", "");
	КодПлощадки = Число(ПараметрыОрганизации.Отправитель_Площадка.Код);
	Если ЗначениеЗаполнено(СтрокаТЧ.СерияНоменклатуры) Тогда 		
		ДатаПроизводства = Формат(СтрокаТЧ.СерияНоменклатуры.ДатаПроизводства, "ДФ=yyyy-MM-dd");
	Иначе
		ДатаПроизводства = "";
	КонецЕсли;
	
	Возврат Префикс + "_" + Артикул + "_" + Строка(КодПлощадки) + "_" + ДатаПроизводства;
	
КонецФункции

Функция ПроизводственнаяТранзакцияОткрыта(ВыбДок) Экспорт

	Отбор = Новый Структура();
	Отбор.Вставить("НомерОперацииНезавершенногоПроизводства", ВыбДок.operationId);
	Отбор.Вставить("Площадка", ВыбДок.Производитель_Площадка);
	
	Запись = РегистрыСведений.кб_НезавершенныеПроизводственныеТранзакции.ПолучитьПоследнее(ТекущаяДатаСеанса(), Отбор);
	
	Возврат Запись.ТранзакцияОткрыта;
	
КонецФункции

Функция ОформитьДокументЗавершенияПроизводства(ДанныеЗаполнения) Экспорт
	
	ПараметрыОрганизации = ДанныеЗаполнения.ПараметрыОрганизации;
	
	НовыйДокумент = Документы.ВСД2_Производство.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокумент, ПараметрыОрганизации);
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
	НовыйДокумент.ЗавершитьОперацию = Истина;
	НовыйДокумент.cargoInspected = Истина;
	НовыйДокумент.operationId = ДанныеЗаполнения.НомерОперации;
	НовыйДокумент.РезультатыИсследований = ПараметрыОрганизации["ВСД_РезультатыИсследований"];
	НовыйДокумент.Производитель_Площадка = ДанныеЗаполнения.Площадка;
	НовыйДокумент.Производитель_ХозСубъект = ДанныеЗаполнения.Площадка.ХозСубъект;
	Для Каждого Стр Из ДанныеЗаполнения.СписокПродукции Цикл
		нСтр = НовыйДокумент.Продукция.Добавить();
		нСтр.Продукция_Элемент = Стр.ПродукцияЭлемент;
		нСтр.ДатаИзготовления1 = Стр.ДатаПроизводства;
	КонецЦикла;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	Если ПараметрыОрганизации.ВыводитьПодробнуюИнформацию Тогда
		кб99_ВСД.СообщитьИнфо("Записан документ оформления завершения производства ["+НовыйДокумент.Ссылка+"]", НовыйДокумент.Ссылка);	
	КонецЕсли;

	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

Функция ОформитьПроизводствоПострочно(ПараметрыОрганизации, ДокументОснование) Экспорт

	ТЗ = кб99_ВСД_Общий.ВыгрузитьТЧ(ДокументОснование, ПараметрыОрганизации);
	ТЗ.Свернуть("Номенклатура, Продукция_Элемент, СерияНоменклатуры", "Количество");
	ВыбДата = ДокументОснование.Дата;
	мсДокументов = Новый Массив;
	Для Каждого СтрокаТЧ Из ТЗ Цикл
	
		Если ЗначениеЗаполнено(СтрокаТЧ.СерияНоменклатуры) Тогда 
			
			ДатаИзготовления1 = СтрокаТЧ.СерияНоменклатуры;		
			ДатаСрокГодности1 = ДатаИзготовления1 + 60 * 60 * 24 * СтрокаТЧ.Продукция_Элемент.СрокГодности;
		
			Если СтрокаТЧ.СерияНоменклатуры > ТекущаяДатаСеанса() Тогда 
				кб99_ВСД.СообщитьИнфо("Продукция не заполнена! Дата проиводства в серии не может быть больше текущей.");	
				Возврат "";
			КонецЕсли;
		Иначе
			
			ДатаИзготовления1 = ДокументОснование.Дата;		
			ДатаСрокГодности1 = ДатаИзготовления1 + 60 * 60 * 24 * СтрокаТЧ.Продукция_Элемент.СрокГодности;
			
		КонецЕсли;  
		
		ДокВСД = Документы.ВСД2_Производство.СоздатьДокумент(); 
		ДокВСД.ДокументОснование = ДокументОснование;
		ДокВСД.Дата = ТекущаяДатаСеанса(); 		
		ДокВСД.Организация = ДокументОснование.Организация;
		ДокВСД.Производитель_ХозСубъект = ПараметрыОрганизации.Отправитель_ХозСубъект;
		ДокВСД.Производитель_площадка = ПараметрыОрганизации.Отправитель_Площадка;
		ДокВСД.ЗавершитьОперацию = ПараметрыОрганизации["ЗавершатьПроизводство"];

		Если ПараметрыОрганизации.Свойство("НомерНезавершенногоПроизводства") Тогда
			ДокВСД.operationId = ПараметрыОрганизации.НомерНезавершенногоПроизводства;
		КонецЕсли;
		
		Если Не ДокВСД.ЗавершитьОперацию И Не ЗначениеЗаполнено(ДокВСД.operationId) Тогда
			ДокВСД.operationId = ПолучитьНомерНезавершенногоПроизводства(ПараметрыОрганизации, СтрокаТЧ);
		КонецЕсли;
		
		ДокВСД.РезультатыИсследований = ПараметрыОрганизации.ВСД_РезультатыИсследований;
		ДокВСД.cargoInspected	= Истина;
		ДокВСД.НомерПартии = Формат(ВыбДата, "ДЛФ=Д");				
		
		НоваяСтрока = ДокВСД.Продукция.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Продукция_Элемент = СтрокаТЧ.Продукция_Элемент;
		НоваяСтрока.Продукция = НоваяСтрока.Продукция_Элемент.Продукция ;
		НоваяСтрока.ВидПродукции =  НоваяСтрока.Продукция_Элемент.ВидПродукции;
		НоваяСтрока.НаименованиеПродукции =  НоваяСтрока.Продукция_Элемент.Наименование;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Продукция_Элемент.ЕдиницаИзмерения;	
		НоваяСтрока.Количество = СтрокаТЧ.Количество;
		НоваяСтрока.ДатаИзготовления1 = ДатаИзготовления1;		
		НоваяСтрока.ДатаСрокГодности1 = ДатаСрокГодности1;	
		НоваяСтрока.НомерПартии = ПолучитьНомерПартии(ПараметрыОрганизации, НоваяСтрока);
		НоваяСтрока.Скоропортящийся	= НоваяСтрока.Продукция_Элемент.Скоропортящийся;
		
		Попытка
			Если ПараметрыОрганизации["ПарамПроизводствоЗаполнятьПоСправочнику"] Тогда 			
				тзПартии = ЗаполнитьТчСписаниеИзСпецификацииНоменклатуры( ПараметрыОрганизации, ДокВСД.Продукция.Выгрузить() );
			Иначе
				Сырье = ЗаполнитьСырьеИзВСД_Продукция_Элемент( ДокВСД.Продукция.Выгрузить() );
				тзПартии = кб99_ВСД.тзПартииСписанияПоТзПродукция_Элемент( ПараметрыОрганизации, Сырье );
			КонецЕсли;
			ДокВСД.ПартииСписания.Загрузить( тзПартии );
			Если ЗначениеЗаполнено(тзПартии) Тогда
				ДанныеЗаполнения = Новый Структура("ВыбДата", ВыбДата);
				ДокВСД.ПолучитьВторичнуюПродукциюПриПереработке(ДанныеЗаполнения, тзПартии);	
			КонецЕсли;
		Исключение
			кб99_ВСД.СообщитьИнфо("Не удалось загрузить партии списания");
		КонецПопытки;
	
		ДокВСД.Записать();
	    мсДокументов.Добавить(ДокВСД.Ссылка);
		
	КонецЦикла;
	
	Возврат мсДокументов;
	
КонецФункции

Процедура ЗаполнитьУровниУпаковкиИМаркировку(СтрПродукции, Док, ПараметрыОрганизации) Экспорт
	
	Если ПараметрыОрганизации = Неопределено Тогда
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Док.Организация);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СтрПродукции.КлючСтроки) Тогда
		СтрПродукции.КлючСтроки = Строка(Новый УникальныйИдентификатор);		
	КонецЕсли;
	
	СтрокаУпак = Док.УровниУпаковки.Добавить(); 
	СтрокаУпак.СтрокаПродукции = СтрПродукции.КлючСтроки;
	СтрокаУпак.НомерУровня = ПараметрыОрганизации["ПарамНомерУровняУпаковкиДляВСД"];
	Если ЗначениеЗаполнено(СтрПродукции.Продукция_Элемент) Тогда
		СтрокаУпак.ФормаУпаковки = СтрПродукции.Продукция_Элемент.ФасовкаФормаУпаковки;
		СтрокаУпак.Количество = Цел(СтрПродукции.Количество / 
			?(СтрПродукции.Продукция_Элемент.ФасовкаОбъем=0, 1, СтрПродукции.Продукция_Элемент.ФасовкаОбъем));	
		Если Не ЗначениеЗаполнено(СтрокаУпак.ФормаУпаковки) Тогда
			СтрокаУпак.ФормаУпаковки = ПараметрыОрганизации["ПарамФормаУпаковкиДляВСД"];
		КонецЕсли;
	Иначе
		СтрокаУпак.ФормаУпаковки = ПараметрыОрганизации["ПарамФормаУпаковкиДляВСД"];
		СтрокаУпак.Количество = Цел(СтрПродукции.Количество);
	КонецЕсли;
	Если СтрокаУпак.Количество = 0 Тогда
		СтрокаУпак.Количество = 1;	
	КонецЕсли;
	//Маркировки
	СтрокаМарк = Док.Маркировка.Добавить();
	СтрокаМарк.Строкапродукции = СтрокаУпак.СтрокаПродукции;
	СтрокаМарк.НомерУровня = СтрокаУпак.НомерУровня;
	СтрокаМарк.Класс = Перечисления.кб99_Маркировка.UNDEFINED;
	СтрокаМарк.Маркировка = Док.Производитель_Площадка.Наименование;
	
КонецПроцедуры