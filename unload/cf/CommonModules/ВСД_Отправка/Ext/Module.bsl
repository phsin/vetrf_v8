

Функция ПолучитьBase64ЗаголовокАвторизации( ИмяПользователя, Пароль )

    КодировкаФайла = КодировкаТекста.UTF8;
    ВременныйФайл = ПолучитьИмяВременногоФайла();
    Запись = Новый ЗаписьТекста(ВременныйФайл, КодировкаФайла);
    Запись.Записать(ИмяПользователя+":"+Пароль);
    Запись.Закрыть();

    ДвДанные = Новый ДвоичныеДанные(ВременныйФайл);
    Результат = Base64Строка(ДвДанные);
    УдалитьФайлы(ВременныйФайл);

    Результат = Сред(Результат,5);

    Возврат Результат;

КонецФункции

Процедура ОтправитьСтатистику( ПараметрыОтправки )
	
	Попытка
        WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
        WinHttp.Option(2,"utf-8");
        WinHttp.Open("POST","http://www.google-analytics.com/collect",0);
        WinHttp.SetRequestHeader("Accept-Language", "ru");
        WinHttp.SetRequestHeader("Accept-Charset","utf-8");
        WinHttp.setRequestHeader("Content-Language", "ru");
        WinHttp.setRequestHeader("Content-Charset", "utf-8");
        WinHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
		_UUID = ПараметрыСеанса.ТекущийПользователь.УникальныйИдентификатор();
        ПараметрыПОСТ = "v=1&tid=UA-135686245-1&cid=" + _UUID +"&uid="+ПараметрыОтправки["param_username"]+"&t=event&ec="+ПараметрыОтправки["param_username"]+"&ea="+ПараметрыОтправки["Action"];
        WinHttp.Send(ПараметрыПОСТ);
        ТекстОтвета = WinHttp.ResponseText();
    Исключение
        Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ИнициализироватьСоединение( ПараметрыОтправки );
	
    Попытка
        xmlHttp = New COMОбъект("MSXML2.xmlHttp");
        xmlHttp.OPEN("POST", ПараметрыОтправки["Адрес"] + ПараметрыОтправки["Service"], False);
        xmlHttp.setRequestHeader ("Host", ПараметрыОтправки["Адрес"]);
        xmlHttp.setRequestHeader ("Content-type", "text/xml; charset=utf-8");
		xmlHttp.setRequestHeader("Authorization", "Basic "+ПолучитьBase64ЗаголовокАвторизации(ПараметрыОтправки["param_username"], ПараметрыОтправки["param_password"]));
    Исключение
        ВызватьИсключение("Не удалось создать объект ""MSXML2.xmlHttp"":"+ ОписаниеОшибки());		
        Возврат Неопределено;
    КонецПопытки;

	ОтправитьСтатистику( ПараметрыОтправки );
	
    Возврат xmlHttp;
	
КонецФункции

Процедура ЗаписатьВФайл(Соединение, Параметры )
	
	UUID = Строка(Новый УникальныйИдентификатор);
	Если ЗначениеЗаполнено(Параметры["КаталогЛогов"]) Тогда 
		ИмяФайла = ""+Параметры["КаталогЛогов"]+Параметры["Action"]+"_"+UUID+"_request.xml";
	Иначе
		ИмяФайла = КаталогВременныхФайлов()+Параметры["Action"]+"_"+UUID+"_request.xml";
	КонецЕсли;
	Файл = Новый ЗаписьТекста(ИмяФайла);	
	Попытка
		Файл.ЗаписатьСтроку(Параметры["ЗапросXML"]);
		Файл.Закрыть();
		ВСД.СообщитьИнфо("Запрос записан в "+ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось записать запрос в файл "+ИмяФайла+"'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Параметры["КаталогЛогов"]) Тогда 
		ИмяФайла = ""+Параметры["КаталогЛогов"]+Параметры["Action"]+"_"+UUID+"_response.xml";
	Иначе
		ИмяФайла = КаталогВременныхФайлов()+Параметры["Action"]+"_"+UUID+"_response.xml";
	КонецЕсли;
	Файл = Новый ЗаписьТекста(ИмяФайла);
	Попытка
		Файл.ЗаписатьСтроку(Соединение.responseText);
		Файл.Закрыть();	
		ВСД.СообщитьИнфо("Ответ записан в "+ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось записать запрос в файл "+ИмяФайла+"'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
КонецПроцедуры

Функция ОтправитьSOAP_xmlHttp( ПараметрыОтправки ) 
	Соединение = ИнициализироватьСоединение( ПараметрыОтправки);
	
	ВСД.СообщитьИнфо("Отправляем запрос");

    DOC = New COMОбъект("MSXML2.DOMDocument");
    DOC.loadXML( ПараметрыОтправки["ЗапросXML"] );
	
    Соединение.setRequestHeader("SOAPAction", ПараметрыОтправки["Action"] );
 
    Попытка
        Соединение.SEND(DOC);
    Исключение
        Сообщить("Ошибка при отправке запроса данных:" + ОписаниеОшибки());
        Возврат Неопределено;
    КонецПопытки;
    Результат = Соединение.statusText;
    Если Результат <> "OK" Тогда
        ВСД.СообщитьИнфо("Ошибка запроса данных:" + Строка(Результат));
		ЗаписатьВФайл(Соединение, ПараметрыОтправки);
        Возврат Неопределено;
	ИначеЕсли ПараметрыОтправки["ОтладкаЗапросовXML"] Тогда
		ЗаписатьВФайл(Соединение, ПараметрыОтправки);
    КонецЕсли;
    DOCToSave = New COMОбъект("MSXML2.DOMDocument");
    DOCToSave.loadXML(Соединение.responseText);
    Если DOCToSave.parseError.errorCode <> 0 Тогда 
        ВСД.СообщитьИнфо("Ошибка разбора XML результата: " + DOC.parseError.reason);
        Возврат "";
    КонецЕсли;
  	// обработка ответа 	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(DOCToSave.xml);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Возврат xdto;
КонецФункции

// Параметры = Соответствие()
//Функция ОтправитьSOAPНаСервере(Знач Параметры, АдресХранилища) Экспорт 
Функция ОтправитьSOAPНаСервере( Знач ПараметрыОтправки ) Экспорт 
	
    Возврат ОтправитьSOAP_xmlHttp( ПараметрыОтправки);
		
КонецФункции

// Параметры = Соответствие()
Функция ОтправитьЗапрос_DLL( Параметры , АдресХранилища ) Экспорт
	
	ВСД.СообщитьИнфо("Отправляем запрос");
	
	метод = Параметры.КомпонентаНаСервере.GetMethod();
	метод.Service = Параметры.Service;
	метод.Action = Параметры.Action;
			
	appID = Новый УникальныйИдентификатор;
	ВСД.СообщитьИнфо( "Отправляем запрос "+appID );
	результат = Параметры.КомпонентаНаСервере.SendRequestSoap(метод, Параметры.ЗапросXML, appID);
	ВСД.СообщитьИнфо("Загрузка XML-файла: " + Параметры.КомпонентаНаСервере.LogFilename); 
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл( Параметры.КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Возврат xdto;
	
КонецФункции


Функция ПолучитьРезультатСервер( Параметры, appID ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(appID) Тогда 
		ВызватьИсключение("Пустой appID")
	КонецЕсли;
	
	ЗапросXML = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:receiveApplicationResultRequest>
	|         <ws:apiKey>"+ Параметры["param_api_key"] +"</ws:apiKey>
	|         <ws:issuerId>"+ Параметры["param_issuer_id"] +"</ws:issuerId>
	|         <ws:applicationId>"+ (appID) +"</ws:applicationId>
	|      </ws:receiveApplicationResultRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>
	|";

    Service = "platform/services/ApplicationManagementService";
    Action = "receiveApplicationResult";

	ВСД.СообщитьИнфо("Получаем ответ на запрос "+appID);
	ПараметрыОтправки = ВСД_Отправка.ПараметрыОтправкиИнициализация( Параметры );
	ПараметрыОтправки.ЗапросXML = ЗапросXML;
    ПараметрыОтправки.Service = Service;
    ПараметрыОтправки.Action = Action;
	xdto = ВСД_Отправка.ОтправитьSOAPНаСервере( ПараметрыОтправки );
	
	Возврат xdto;
	
КонецФункции

Функция Получить_ApplicationID( xdto ) Экспорт
	
	applicationId="";
	Попытка
		applicationId = xdto.Body.submitApplicationResponse.application.applicationId;
		st = xdto.Body.submitApplicationResponse.application.status;

		ВСД.СообщитьИнфо("Ответ: ["+applicationId+"] ["+st+"]");
	Исключение
		ВСД.СообщитьИнфо("Не удалось получить applicationId");
	КонецПопытки;

	Возврат applicationId;
	
КонецФункции

Функция ПараметрыОтправкиИнициализация( Параметры ) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Параметры["param_username"]) Тогда
		ВызватьИсключение("Не заполнен параметр [param_username]");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["param_password"]) Тогда
		ВызватьИсключение("Не заполнен параметр [param_password]");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["param_issuer_id"]) Тогда
		ВызватьИсключение("Не заполнен параметр [issuer_id]");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["param_api_key"]) Тогда
		ВызватьИсключение("Не заполнен параметр [param_api_key]");
	КонецЕсли;
	
	ПараметрыОтправки = новый Структура();
	ПараметрыОтправки.Вставить("ЗапросXML", "");
	ПараметрыОтправки.Вставить("Service", "");
	ПараметрыОтправки.Вставить("Action", "");		
	ПараметрыОтправки.Вставить("param_username", Параметры["param_username"]);		
	ПараметрыОтправки.Вставить("param_password", Параметры["param_password"]);		
	// ПараметрыОтправки.Вставить("param_api_key", Параметры["param_api_key"]);			
	// ПараметрыОтправки.Вставить("param_issuer_id", Параметры["param_issuer_id"]);	
	ПараметрыОтправки.Вставить("ОтладкаЗапросовXML", Параметры["ОтладкаЗапросовXML"]);			
	
	Если Параметры["ТестовыйРежим"] Тогда 
		ПараметрыОтправки.Вставить("Адрес", "https://api2.vetrf.ru:8002/");		
	Иначе
		ПараметрыОтправки.Вставить("Адрес", "https://api.vetrf.ru/");	
	КонецЕсли;
	ПараметрыОтправки.Вставить("КаталогЛогов", Параметры["КаталогЛогов"]);		
	
	Возврат ПараметрыОтправки;
	
КонецФункции