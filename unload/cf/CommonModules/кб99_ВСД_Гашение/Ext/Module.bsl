#Область ПрограммныйИнтерфейс

// Находит документ поступления товаров по параметрам входящего ВСД
// Используется для гашения входящих партий
// 
// Параметры:
//  ДатаВходящегоДокумента - Дата - дата входящего документа
//  НомерВходящегоДокумента - Строка - номер входящего документа
//  ИННОтправителя - Строка - ИНН отправителя
// 
// Возвращаемое значение:
//  ДокументСсылка.ПоступлениеТоваровУслуг, Неопределено - найденный документ поступления или Неопределено
//
Функция Гашение_НайтиДокументПоступлениеТоваров(ДатаВходящегоДокумента, НомерВходящегоДокумента, ИННОтправителя) Экспорт
	
	ПереопределенныйМодуль = кб99_ВСД_Утилиты.ФункцияПереопределена("Гашение_НайтиДокументПоступлениеТоваров");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.Гашение_НайтиДокументПоступлениеТоваров(ДатаВходящегоДокумента, НомерВходящегоДокумента, ИННОтправителя);
	КонецЕсли;	
	
	Попытка 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДокПриход.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг КАК ДокПриход
		               |ГДЕ
		               |	ДокПриход.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
		               |	И ДокПриход.НомерВходящегоДокумента = &НомерВходящегоДокумента
					   |	%ИНН%
					   |";
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", НомерВходящегоДокумента);
		Если ЗначениеЗаполнено(ИННОтправителя) Тогда
			ПодстрокаЗамены = "И ДокПриход.Контрагент.ИНН = &ИНН";
			Запрос.УстановитьПараметр("ИНН", ИННОтправителя);
		Иначе
			ПодстрокаЗамены = "";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИНН%", ПодстрокаЗамены); 
      	
		тзВыборка = Запрос.Выполнить().Выгрузить();
		Если тзВыборка.Количество()>0 Тогда 
			Возврат тзВыборка[0].Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли 
	Исключение 
		кб99_ВСД.СообщитьИнфо("Не удалось найти документ [Приходная накладная], измените процедуру [Гашение_НайтиДокументПоступлениеТоваров] под вашу структуру конфигурации");
		Возврат Неопределено;
	КонецПопытки
	
КонецФункции

// Проверяет, нужно ли формировать движения по регистру партий
// Зависит от параметров организации
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для проверки
// 
// Возвращаемое значение:
//  Булево - Истина, если нужно формировать движения партий
//
Функция ФормироватьДвиженияПартий(Организация) Экспорт
	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры(Организация);
	Если кб99_ВСД_Параметры.ПроверитьЗначениеПараметра(СписокКонстант, "КонтролироватьОстаткиПартийПоРегистру", "Контролировать остатки партий по регистру") 
			И кб99_ВСД_Параметры.ПроверитьЗначениеПараметра(СписокКонстант, "ДатаНачалаКонтроляОстатковПартийПоРегистру", "Дата начала контроля остатков") Тогда
			
		Возврат СписокКонстант.КонтролироватьОстаткиПартийПоРегистру И ТекущаяДатаСеанса() > СписокКонстант.ДатаНачалаКонтроляОстатковПартийПоРегистру;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет строку таблицы входящих ВСД на соответствие требованиям
// Добавляет ошибки в строку при их обнаружении
// 
// Параметры:
//  СтрокаВСДВходящие - СтрокаТаблицыЗначений - строка таблицы входящих ВСД
//  ПараметрыОрганизации - Структура - параметры организации для проверки
//
Процедура ГашениеПроверитьСтрокуТаблицы( СтрокаВСДВходящие, ПараметрыОрганизации ) Экспорт
	
	ПереопределенныйМодуль = кб99_ВСД_Утилиты.ФункцияПереопределена("ГашениеПроверитьСтрокуТаблицы");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		ПереопределенныйМодуль.ГашениеПроверитьСтрокуТаблицы( СтрокаВСДВходящие, ПараметрыОрганизации );
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВСДВходящие.ВСД_Партия) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ИскатьДокументПрихода = ПараметрыОрганизации["ПарамВсдВходящиеИскатьДокументПрихода"];
	Исключение
		ИскатьДокументПрихода = Ложь;
	КонецПопытки;
	
	СтрокаОшибки = "";
	
	Если ИскатьДокументПрихода Тогда 
		Если не ЗначениеЗаполнено( СтрокаВСДВходящие.ДокументПрихода ) Тогда
			СтрокаОшибки = СтрокаОшибки + ", Документ ПриходнаяНакладная не найден";
		иначеесли не ЗначениеЗаполнено(СтрокаВСДВходящие.номенклатура) тогда
			СтрокаОшибки = СтрокаОшибки + ", Не найдена номенклатура в документе прихода";
		иначе
			Если СтрокаВСДВходящие.количество<> СтрокаВСДВходящие.КоличествоПринято1С тогда
				СтрокаОшибки = СтрокаОшибки + ", Не совпадает количество";
			иначе	
				кодСовпал=ложь;
				код=СтрокаВСДВходящие.Продукция_Элемент.ВидПродукции.КодТНВЭД;
				если (код="2309") или (код="0145") тогда
					код=СтрокаВСДВходящие.Продукция_Элемент.Продукция.КодТНВЭД;
					если (код="2309") или (код="0145") тогда
						кодСовпал=Истина;
					конецесли;
				конецесли;
				если не кодСовпал тогда
					СтрокаОшибки = СтрокаОшибки + ", Неверный код ТНВЭД";
				конецесли;
			КонецЕсли;
		конецесли;
	КонецЕсли;
	
    ДатаСрокГодности1 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаСрокГодности1 );
	Если ЗначениеЗаполнено(ДатаСрокГодности1) И ДатаСрокГодности1 < ТекущаяДатаСеанса() Тогда
		СтрокаОшибки = СтрокаОшибки + ", Просроченная партия";	
	КонецЕсли;
	
	Если ЗначениеЗаполнено( СтрокаВСДВходящие.ДатаИзготовления2 ) Тогда
		ДатаИзготовления2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления2 );
	    Если ЗначениеЗаполнено(ДатаИзготовления2) И ДатаИзготовления2 > ТекущаяДатаСеанса() Тогда
			СтрокаОшибки = СтрокаОшибки + ", Дата производства продукции больше текущей даты";	
		КонецЕсли;
	Иначе
		ДатаИзготовления1 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления1 );
		Если ЗначениеЗаполнено(ДатаИзготовления1) И ДатаИзготовления1 > ТекущаяДатаСеанса() Тогда
			СтрокаОшибки = СтрокаОшибки + ", Дата производства продукции больше текущей даты";	
		КонецЕсли;
	КонецЕсли;

	Попытка
		ВходящиеПроверятьДатуИзготовления = ПараметрыОрганизации["ВходящиеПроверятьДатуИзготовления"]; 
		ВходящиеПроверятьДатуИзготовленияКоличествоДней = ПараметрыОрганизации["ВходящиеПроверятьДатуИзготовленияКоличествоДней"];
	Исключение
		ВходящиеПроверятьДатуИзготовления = Ложь;
		ВходящиеПроверятьДатуИзготовленияКоличествоДней = 0;
		кб99_ВСД.СообщитьИнфо("Не заполнен параметр [ВходящиеПроверятьДатуИзготовленияКоличествоДней]. Пожалуйста, проверьте и сохраните Параметры интеграции.");
	КонецПопытки;
	
	Если ВходящиеПроверятьДатуИзготовления Тогда 
		Если ЗначениеЗаполнено( СтрокаВСДВходящие.ДатаИзготовления2 ) Тогда
			ДатаИзготовления2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления2 );
		    Если ДатаИзготовления2 < ТекущаяДатаСеанса()-ВходящиеПроверятьДатуИзготовленияКоличествоДней*60*60*24 Тогда
				СтрокаОшибки = СтрокаОшибки + ", Дата производства старше "+ВходящиеПроверятьДатуИзготовленияКоличествоДней+" дней";	
			КонецЕсли;
		Иначе
			ДатаИзготовления1 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления1 );
			Если ДатаИзготовления1 < ТекущаяДатаСеанса()-ВходящиеПроверятьДатуИзготовленияКоличествоДней*60*60*24 Тогда
				СтрокаОшибки = СтрокаОшибки + ", Дата производства старше "+ВходящиеПроверятьДатуИзготовленияКоличествоДней+" дней";	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	

	Попытка
		КонтролироватьДокументПроисхожденияПродукции = ПараметрыОрганизации["КонтролироватьДокументПроисхожденияПродукции"];
	Исключение
		КонтролироватьДокументПроисхожденияПродукции = Ложь;
	КонецПопытки;
	
	Если КонтролироватьДокументПроисхожденияПродукции Тогда
		кб99_ВСД_Запросы.ПолучитьИнформациюОпроисхожденииВСД(СтрокаВСДВходящие, ПараметрыОрганизации);	
	КонецЕсли;
	
	Если Не СтрокаВСДВходящие.СменаВладельцаБезПеревозки Тогда
		
		Если НЕ ЗначениеЗаполнено( СтрокаВСДВходящие.НомерАвто ) Тогда
			СтрокаОшибки = СтрокаОшибки + ", Не указан номер автомобиля";			      	
		КонецЕсли;
		
	КонецЕсли;
	
	
	Попытка
		КонтролироватьНаличиеЛабИсследований = ПараметрыОрганизации["КонтролироватьНаличиеЛабИсследований"]
			И НЕ СтрокаВСДВходящие.Продукция_Элемент.НеКонтролироватьНаличиеЛабИсследований;
	Исключение
		КонтролироватьНаличиеЛабИсследований = Ложь;
	КонецПопытки;
	
	Если НЕ СтрокаВСДВходящие.НаличиеЛабИсследований
			И КонтролироватьНаличиеЛабИсследований Тогда
		СтрокаОшибки = СтрокаОшибки + ", Отсутствуют лаб.исследования";	
	КонецЕсли;
	
	ПервыйСимволСтроки = Лев(СтрокаОшибки, 1);
	Если ПервыйСимволСтроки = "," Тогда
		СтрокаОшибки = Сред(СтрокаОшибки, 3);	
	КонецЕсли;
	
	СтрокаВСДВходящие.Ошибки = ?(ЗначениеЗаполнено(СтрокаВСДВходящие.Ошибки), 
									СтрокаВСДВходящие.Ошибки + ", " + СтрокаОшибки,
									СтрокаОшибки);
	
КонецПроцедуры

#КонецОбласти

