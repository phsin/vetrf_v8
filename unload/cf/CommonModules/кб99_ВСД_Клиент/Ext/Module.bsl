Процедура ПоказатьПодтверждениеЗакрытияФормы(
		Знач ОповещениеСохранитьИЗакрыть, 
		Отказ, 
		Знач ЗавершениеРаботы, 
		Знач ТекстПредупреждения = "", 
		ТекстПредупрежденияПриЗавершении = Неопределено) Экспорт

	ПараметрыПриложения = Новый Соответствие;
	
	Форма = ОповещениеСохранитьИЗакрыть.Модуль;
	Если Не Форма.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗавершениеРаботы Тогда
		Если ТекстПредупрежденияПриЗавершении = "" Тогда // передан параметр из ПередЗакрытием
			ТекстПредупрежденияПриЗавершении = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура();
	Параметры.Вставить("ОповещениеСохранитьИЗакрыть", ОповещениеСохранитьИЗакрыть);
	Параметры.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	
	ТекущиеПараметры = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"];
	Если ТекущиеПараметры <> Неопределено
	   И ТекущиеПараметры.ОповещениеСохранитьИЗакрыть.Модуль = Параметры.ОповещениеСохранитьИЗакрыть.Модуль Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Параметры;
	
	Форма.Активизировать();
	ПодключитьОбработчикОжидания("ПодтвердитьЗакрытиеФормыСейчас", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПогаситьВсдОтИмениПолучателя( ДокСсылка ) Экспорт
		
	мВсдВходящие = Новый Массив;
	
	Организация = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ДокСсылка, "Организация");
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Организация );				
	applicationID = кб99_ВСД_Общий.НайтиApplicationID( ДокСсылка );
	Ответ =  кб99_ВСД_Запросы.ПолучитьРезультат_ВСД2( ПараметрыОрганизации,, applicationID, ДокСсылка, Ложь, мВсдВходящие );	
	
	Если Ответ="COMPLETED" Тогда 
		
		ПогаситьВсдОтИмениПолучателяСписком( ДокСсылка, мВсдВходящие );
		
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

&НаКлиенте
Функция ПогаситьВсдОтИмениПолучателяСписком( ДокСсылка, СписокВСД ) Экспорт
	
	мВсдВходящие  = СписокВСД;
		
	ТаблицаВсдДляГашения = Новый Массив;
	
	Для Каждого строкаВсдВходящие Из мВсдВходящие Цикл 
		
		Если строкаВсдВходящие.ТипВСД <> "TRANSPORT" Тогда 
			Продолжить;
		ИначеЕсли строкаВсдВходящие.СтатусВСД <> ПредопределенноеЗначение("Перечисление.кб99_СтатусВСД.CONFIRMED") Тогда 
			Продолжить;
		КонецЕсли;			
		ТаблицаВсдДляГашения.Добавить( строкаВсдВходящие );
		
	КонецЦикла;	
	
	Если ТаблицаВсдДляГашения.Количество()=0 Тогда 
		кб99_ВСД.СообщитьИнфо("Количество ВСД к гашению = "+ТаблицаВсдДляГашения.Количество()+" документы НЕ ПОГАШЕНЫ!");
		возврат Ложь;
	Иначе
		кб99_ВСД.СообщитьИнфо("Количество ВСД к гашению = "+ТаблицаВсдДляГашения.Количество());
	КонецЕсли;
	
	ПоказатьОповещениеПользователя("Выполняем Гашение ВСД",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТаблицаВсдДляГашения", ТаблицаВсдДляГашения);
	ОрганизацияПолучатель = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ДокСсылка, "ОрганизацияПолучатель");
	СтруктураПараметров.Вставить("Организация", ОрганизацияПолучатель );
	Получатель_ХозСубъект = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ДокСсылка, "Получатель_ХозСубъект");
	СтруктураПараметров.Вставить("Отправитель_ХозСубъект", Получатель_ХозСубъект );
	Получатель_Площадка = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ДокСсылка, "Получатель_Площадка");
	СтруктураПараметров.Вставить("Отправитель_Площадка", Получатель_Площадка );
	ОткрытьФорму("Обработка.кб99_ГашениеВходящихПартий.Форма.ФормаГашениеУФ",СтруктураПараметров,);
	
	ПоказатьОповещениеПользователя("Выполнено");
	
	Возврат Истина;
			
КонецФункции

&НаКлиенте
Процедура СоздатьИлиОткрытьВСД2( ДокОснование ) Экспорт
	
	// Найдем уже созданный
	Организация = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ДокОснование, "Организация");
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Организация );
	Если НЕ ЗначениеЗаполнено(ПараметрыОрганизации["ПарамРазрешитьВводНаОснованииБолееОдногоВСД"]) Тогда
		Сообщить("Не заполнены параметры для организации "+ Организация);
		Возврат;
	КонецЕсли;
	Если НЕ ПараметрыОрганизации["ПарамРазрешитьВводНаОснованииБолееОдногоВСД"] Тогда
		ДокВСД = кб99_ВСД.НайтиВсдТранзакцию( ДокОснование );
		Если ЗначениеЗаполнено(ДокВСД) Тогда
			ОткрытьФорму("Документ.ВСД2_транзакция.ФормаОбъекта",Новый Структура("Ключ", ДокВСД));
		Иначе
			ОткрытьФорму("Документ.ВСД2_транзакция.ФормаОбъекта", Новый Структура("Основание", ДокОснование));
		КонецЕсли;
	Иначе
		ОткрытьФорму("Документ.ВСД2_транзакция.ФормаОбъекта", Новый Структура("Основание", ДокОснование));		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураСтатусовПартийСОписанием() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("_100", 	"Запись создана");
	Результат.Вставить("_101", 	"Запись создана путем гашения ВС (импорт)");
	Результат.Вставить("_102", 	"Запись создана путем гашения ВСД");
	Результат.Вставить("_103", 	"Запись создана в результате производственной операции");
	Результат.Вставить("_104", 	"Запись была создана по справке о безопасности сырого молока");
	Результат.Вставить("_105", 	"Запись была создана после аннулирования ВСД или транзакции, ссылающихся на запись журнала, помеченную для переноса в архив или перенесённую в архив");
	Результат.Вставить("_110", 	"Запись создана в результате объединения двух или более других");
	Результат.Вставить("_120", 	"Запись создана в результате разделения другой");
	Результат.Вставить("_200", 	"В запись были внесены изменения");
	Результат.Вставить("_201", 	"Запись журнала аннулирована");
	Результат.Вставить("_202", 	"Запись продукции изменена путём списания. Необязательно, чтобы продукция была списана полностью, может быть списана и часть объёма");
	Результат.Вставить("_203", 	"Изменена при редактировании производственной операции");
	Результат.Вставить("_204", 	"Запись была обновлена в результате принятия заключения по результатам ВСЭ");
	Результат.Вставить("_230", 	"Запись была обновлена в результате присоединения другой");
	Результат.Вставить("_231", 	"Запись была обновлена в результате присоединения другой");
	Результат.Вставить("_240", 	"Запись была обновлена в результате отделения от неё другой");
	Результат.Вставить("_250", 	"Запись была восстановлена после удаления");
	Результат.Вставить("_300", 	"Запись была перемещена в другую группу (для иерархических справочников)");
	Результат.Вставить("_400", 	"Запись была удалена");
	Результат.Вставить("_410", 	"Запись была удалена в результате объединения");
	Результат.Вставить("_420", 	"Запись была удалена в результате разделения");
	Результат.Вставить("_430", 	"Запись была удалена в результате присоединения"); 
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураТочкиМультимодальнойПеревозки() Экспорт

	Ответ = Новый Структура;   
	Ответ.Вставить("UUID");
	Ответ.Вставить("НомерСтроки");
	Ответ.Вставить("Площадка");
	Ответ.Вставить("ТипТранспорта");
	Ответ.Вставить("номерАвто");
	Ответ.Вставить("номерКонтейнера");
	Ответ.Вставить("номерПрицепа");
	Ответ.Вставить("номерВагона");
	Ответ.Вставить("НазваниеСудна");
	Ответ.Вставить("НомерАвиарейса");
	Ответ.Вставить("Площадка");
	Ответ.Вставить("Страна");
	Ответ.Вставить("Регион");
	Ответ.Вставить("Район");
	Ответ.Вставить("Город");
	Ответ.Вставить("НаселенныйПункт");
	Ответ.Вставить("Улица");
	Ответ.Вставить("Дом");
	Ответ.Вставить("Строение");
	Ответ.Вставить("Помещение");
	Ответ.Вставить("Название");
	Ответ.Вставить("Перегрузка");
	
	Возврат Ответ;

КонецФункции