Функция ПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт
	
	Если НЕ(ЗначениеЗаполнено( ИмяКаталога )) Тогда
		СообщитьИнфо("Имя каталога ["+ ИмяКаталога +"] указано неправильно");
		Возврат Ложь;
	КонецЕсли;	
	
    КаталогНаДиске = Новый Файл(ИмяКаталога);
    Если КаталогНаДиске.Существует() Тогда
        Возврат Истина;
    Иначе
        СообщитьИнфо("каталога ["+ ИмяКаталога +"] не найден, создайте для сохранения xml запросов...");
     	Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЕстьРеквизитОбъекта(ИмяРеквизита, Объект) Экспорт

	 МетаданныеОбъекта = Объект.Метаданные();
	 Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		 Возврат Ложь;
	 Иначе
		 Возврат Истина;
	 КонецЕсли; 

КонецФункции    

Функция ЕстьТабличныеЧастиОбъекта(ИмяРеквизита, Объект) Экспорт

	 МетаданныеОбъекта = Объект.Метаданные();
	 Если МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяРеквизита) = Неопределено Тогда
		 Возврат Ложь;
	 Иначе
		 Возврат Истина;
	 КонецЕсли; 

КонецФункции 

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
	#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
		Если КлючДанных <> Неопределено
		   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
			ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
			ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
		КонецЕсли;
	#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура СообщитьИнфо(ТекстСообщения, Ссылка = Неопределено)  Экспорт
	СообщитьПользователю(ТекстСообщения, Ссылка);
КонецПроцедуры

Процедура СообщитьОбОшибке( ТекстСообщения, Ссылка = Неопределено, ИмяСобытия="ВСД Ошибка")  Экспорт
	
	ЗаписьЖурналаРегистрации( ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , Ссылка, ТекстСообщения, );
	СообщитьПользователю(ТекстСообщения, Ссылка);
	
КонецПроцедуры

Функция ПолучитьЗначениеРевизитаОбъекта_НаСервере( ВыбОбъект, Реквизит ) Экспорт
	
	Попытка
		Возврат ВыбОбъект[Реквизит];
	Исключение
		СообщитьИнфо("Указан неверный реквизит "+Реквизит+" для объекта "+ВыбОбъект);
		СообщитьИнфо(ОписаниеОшибки());
		Возврат "";
	КонецПопытки
	
КонецФункции

Функция ПолучитьОрганизациюПоХС(ВыбХозСубъект) Экспорт
	
	Рез = "";
	Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   Организация.ссылка
        |ИЗ
        |   Справочник.Организации КАК Организация";
 
    РезультатЗапроса = Запрос.Выполнить();
 
    ВыборкаОрг = РезультатЗапроса.Выбрать();
 
    Пока ВыборкаОрг.Следующий() Цикл
		СпПарам = ЗагрузитьПараметры(ВыборкаОрг.Ссылка);
		Попытка
			Если СпПарам["Отправитель_ХозСубъект"] = ВыбХозСубъект Тогда
				Возврат ВыборкаОрг.Ссылка;
				Прервать;
			КонецЕсли;
		Исключение КонецПопытки
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция НайтиХозСубъект(Контрагент) Экспорт
	
	ПереопределенныйМодуль = кб99_ВСД_Общий.ФункцияПереопределена("НайтиХозСубъект");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.НайтиХозСубъект(Контрагент);
	КонецЕсли;
    
	Если НЕ(ЗначениеЗаполнено(Контрагент)) Тогда
		Возврат "";
	КонецЕсли;
	
	// стандартное поведение функции
	ВыбКонтрагент = Контрагент.ГоловнойКонтрагент;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВСД_ХозСубъект.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	                      |ГДЕ
	                      |	ВСД_ХозСубъект.Контрагент = &ВыбКонтрагент
	                      |	И ВСД_ХозСубъект.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)");
	Запрос.УстановитьПараметр("ВыбКонтрагент", ВыбКонтрагент );
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ХозсубъектСсылка = Результат.Ссылка;
		Если ХозсубъектСсылка.ПометкаУдаления Тогда
			ХозсубъектОбъект = ХозсубъектСсылка.ПолучитьОбъект();
			ХозсубъектОбъект.ПометкаУдаления = Ложь;
			ХозсубъектОбъект.Записать();
		КонецЕсли;
		Ответ = ХозсубъектСсылка;
	ИначеЕсли ЗначениеЗаполнено(ВыбКонтрагент) Тогда
		СпрХС = Справочники.ВСД_ХозСубъект.СоздатьЭлемент();
		СпрХС.Наименование = ВыбКонтрагент.Наименование;
		СпрХС.Контрагент = ВыбКонтрагент;
		СпрХС.Записать();
		СообщитьИнфо("Создан новый элемент справочника ВСД_ХозСубъект:"+ВыбКонтрагент);
		
		Ответ = спрХС.Ссылка;
	Иначе
		Ответ = Справочники.ВСД_ХозСубъект.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ответ;
	 
КонецФункции

Функция НайтиПлощадкуПоКонтрагенту(ВыбКонтрагент) Экспорт
	
	Если НЕ(ЗначениеЗаполнено(ВыбКонтрагент)) Тогда
         Возврат "";
     КонецЕсли;

     Запрос = Новый Запрос("ВЫБРАТЬ
                           |    ВСД_Площадка.Ссылка
                           |ИЗ
                           |    Справочник.ВСД_Площадка КАК ВСД_Площадка
                           |ГДЕ
                           |    ВСД_Площадка.Контрагент = &ВыбКонтрагент");
     Запрос.УстановитьПараметр("ВыбКонтрагент", ВыбКонтрагент );

     Результат = Запрос.Выполнить().Выбрать();

     Если Результат.Следующий() Тогда
         Ответ = Результат.Ссылка;
     Иначе
         Ответ = "";
     КонецЕсли;

     Возврат Ответ;
	 
КонецФункции

Функция НайтиПлощадкуПоСкладу(ВыбСклад, ВыбХозСубъект) Экспорт
	
	Если НЕ(ЗначениеЗаполнено(ВыбСклад)) Тогда
         Возврат "";
     КонецЕсли;
	 
	 Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект)) Тогда
		 СообщитьИнфо("Не указан параметр ВыбХозСубъект для ВСД.НайтиПлощадкуПоСкладу ");
         Возврат "";
	 КонецЕсли;
	 
	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	ВСД_Площадка.Ссылка КАК Ссылка
	                       |ИЗ
	                       |	Справочник.ВСД_Площадка КАК ВСД_Площадка
	                       |ГДЕ
	                       |	ВСД_Площадка.ХозСубъект = &ХозСубъект
	                       |	И (ВСД_Площадка.Склад = &ВыбСклад
	                       |			ИЛИ ВСД_Площадка.Склады.Склад = &ВыбСклад)");  //!
	 
     Запрос.УстановитьПараметр("ВыбСклад", ВыбСклад );
	 Запрос.УстановитьПараметр("ХозСубъект", ВыбХозСубъект.Ссылка );

     Результат = Запрос.Выполнить().Выбрать();

     Если Результат.Следующий() Тогда
         Ответ = Результат.Ссылка;
     Иначе
         Ответ = "";
     КонецЕсли;

     Возврат Ответ;
	 
КонецФункции

// выбираем партию, которая подходит под условия отбора: количество, свойство, площадка
Функция ВыбратьПартию(Продукция_Элемент, Отправитель_Площадка,Отпр_ХозСубъект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Отправитель_Площадка) Тогда
         СообщитьИнфо("Не указана площадка Отправителя!");
         Возврат "";
     КонецЕсли;
     Если НЕ ЗначениеЗаполнено(Отпр_ХозСубъект) Тогда
         Сообщить("Не указан ХС Отправителя!");
         Возврат "";
     КонецЕсли;


     Запрос = Новый Запрос;
     Запрос.Текст = "ВЫБРАТЬ
                    |	ВСД_Партия.Ссылка
                    |ИЗ
                    |	Справочник.ВСД_Партия КАК ВСД_Партия
                    |ГДЕ
                    |	ВСД_Партия.Получатель_Площадка = &Отправитель_Площадка
					|   И ВСД_Партия.Получатель_ХозСубъект.GUID = &ВыбХС
                    |	И ВСД_Партия.Продукция_Элемент = &Продукция_Элемент
                    |	И ВСД_Партия.Количество > 0
                    |	И ВСД_Партия.ПометкаУдаления = ЛОЖЬ";

     Запрос.УстановитьПараметр("Отправитель_Площадка"  ,Отправитель_Площадка);
	 Запрос.УстановитьПараметр("ВыбХС", Отпр_ХозСубъект.GUID);
     Запрос.УстановитьПараметр("Продукция_Элемент" , Продукция_Элемент);

     Выборка = Запрос.Выполнить().Выбрать();

     Если Выборка.Следующий() Тогда
         Возврат Выборка.Ссылка;
     Иначе
         Возврат Справочники.ВСД_Партия.ПустаяСсылка();
     КонецЕсли;

КонецФункции

// Процедура находит первый ВСД_Транзакцию на основании ДокОснование
Функция НайтиВсдТранзакцию(ДокСсылка, ЭтоПеремещениеотПоставщика = ЛОЖЬ) Экспорт
	
	Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_транзакция") Тогда 
		
		Возврат ДокСсылка;
		
	ИначеЕсли ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2") Тогда 
		
		Возврат ДокСсылка.ДокОснование;
		
	ИначеЕсли ТипЗнч(ДокСсылка) = Тип("СправочникСсылка.кб99_ВСД2") Тогда 
		
		Возврат ДокСсылка.ДокументОснование;
		
	Иначе
		// ДокументОснование = Реализация и прочие ...
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование" , ДокСсылка);
		Запрос.УстановитьПараметр("ЭтоПеремещение" , ЭтоПеремещениеотПоставщика);
		Запрос.Текст = "ВЫБРАТЬ
		            |	ВСД2_транзакция.Ссылка КАК Ссылка
		            |ИЗ
		            |	Документ.ВСД2_транзакция КАК ВСД2_транзакция
		            |ГДЕ
		            |	ВСД2_транзакция.ДокументОснование = &ДокументОснование
		            |	И ВСД2_транзакция.ПометкаУдаления = ЛОЖЬ
		            |	И ВСД2_транзакция.ЭтоПеремещениеОтПоставщика = &ЭтоПеремещение
		            |
					|";

		Выборка = Запрос.Выполнить().Выбрать();

	    Если Выборка.Следующий() Тогда
	        Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	 
	Возврат Неопределено;

КонецФункции

// Процедура находит первый ВСД2_Производство на основании ДокОснование
Функция НайтиВСД_Производство(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
     Запрос.УстановитьПараметр("ДокументОснование" , ДокументОснование);

     Запрос.Текст = "ВЫБРАТЬ
                    |    ВСД2_Производство.Ссылка
                    |ИЗ
                    |    Документ.ВСД2_Производство КАК ВСД2_Производство
                    |ГДЕ
                    |    (ВСД2_Производство.ДокументОснование = &ДокументОснование)
					|    И (ВСД2_Производство.ПометкаУдаления = ЛОЖЬ)";

     Выборка = Запрос.Выполнить().Выбрать();

     Если Выборка.Следующий() Тогда
         Возврат Выборка.Ссылка;
     Иначе
         Возврат "";
     КонецЕсли;

КонецФункции

// Процедура находит список ВСД и ВСД2 на основании ДокОснование
Функция НайтиВСД(ДокументОснование) Экспорт

     Запрос = Новый Запрос;
     Запрос.УстановитьПараметр("ДокументОснование" , ДокументОснование);

	 Запрос.Текст = "ВЫБРАТЬ
	                |	ВСД2.Ссылка,
	                |	ВСД2.UUID
	                |ИЗ
	                |	Документ.ВСД2 КАК ВСД2
	                |ГДЕ
	                |	ВСД2.ДокументОснование = &ДокументОснование
	                |
	                |ОБЪЕДИНИТЬ
	                |
	                |ВЫБРАТЬ
	                |	кб99_ВСД2.Ссылка,
	                |	кб99_ВСД2.UUID
	                |ИЗ
	                |	Справочник.кб99_ВСД2 КАК кб99_ВСД2
	                |ГДЕ
	                |	кб99_ВСД2.ДокументОснование = &ДокументОснование";
	
     Выборка = Запрос.Выполнить().Выгрузить();

     Возврат Выборка;

КонецФункции

Функция ПолучитьУсловияПеревозки(ДокСсылка) Экспорт

	Параметры = ЗагрузитьПараметры( ДокСсылка.Организация );
	Ответ = кб99_ВСД_Запросы.ВСД2_Транзакция_УсловияПеревозки_Отправить(Параметры, ДокСсылка);
	
	Возврат Ответ;
	
КонецФункции

// Отправка любого ВСД
Процедура ОтправитьВСДвГИС(Знач ДокСсылка, АдресХранилища = Неопределено) Экспорт
	
	Если ЕстьРеквизитОбъекта("Организация", ДокСсылка) Тогда 
		Организация = ДокСсылка.Организация;
	Иначе
		Организация = кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	Параметры = ЗагрузитьПараметры( Организация );
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить( "Параметры", Параметры );	
	ПараметрыФункции.Вставить( "ДокОснование", ДокСсылка );	
	
	Попытка
		Если типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_транзакция") Тогда
			
			Параметры["Отправитель_Площадка"] = ДокСсылка.Отправитель_Площадка;
			ПараметрыФункции.Вставить("СписокПартий", Новый Массив);
			Статус = кб99_ВСД_Запросы.ВСД2_транзакция_Отправить( ПараметрыФункции );
			
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_Инвентаризация") Тогда
			
			Параметры["Отправитель_Площадка"] = ДокСсылка.Владелец_Площадка;
			ПараметрыФункции.Вставить("СписокПартий", Новый Массив);
			Статус = кб99_ВСД_Запросы.ВСД2_Инвентаризация_Отправить( ПараметрыФункции );
			
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_ОбъединениеПартий") Тогда
			
			Параметры["Отправитель_Площадка"] = ДокСсылка.Владелец_Площадка;
			ПараметрыФункции.Вставить("СписокПартий", Новый Массив);
			Статус = кб99_ВСД_Запросы.ВСД2_ОбъединениеПартий_Отправить( ПараметрыФункции );
			
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_Производство") Тогда
			
			Параметры["Отправитель_Площадка"] = ДокСсылка.Производитель_Площадка;
			ПараметрыФункции.Вставить("СписокПартий", Новый Массив);
			Статус = кб99_ВСД_Запросы.ВСД2_Производство_Отправить( ПараметрыФункции );
					
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_ЛабораторныеИсследования") Тогда
			
			Параметры["Отправитель_Площадка"] = ДокСсылка.Партия.Производитель_Площадка;
			Статус = кб99_ВСД_Запросы.ВСД2_ЛабораторныеИсследования_Отправить( ПараметрыФункции );
			
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_ОбновитьТранспорт") Тогда
			
			Статус = кб99_ВСД_Запросы.ВСД2_ОбновитьТранспорт_Отправить( ПараметрыФункции );
			
	    Иначе
			ДокВСД = НайтиВсдТранзакцию(ДокСсылка);
			Если Не ЗначениеЗаполнено(ДокВСД) Тогда
				СообщитьИнфо("Не найдены ВСД для Отправки");
				Возврат;
			КонецЕсли;			
		
			Если (ТипЗнч(ДокВСД) = Тип("ДокументСсылка.ВСД2_транзакция")) Тогда	
				Статус = кб99_ВСД_Запросы.ВСД2_транзакция_Отправить( ПараметрыФункции );
			Иначе
				СообщитьИнфо("документ "+ДокВСД+" не отправляется в ВЕТИС ");
			КонецЕсли;
		КонецЕсли;
	Исключение
		СообщитьИнфо("Ошибка в Процедуре ВСД ОтправитьВСДвГИС "+ОписаниеОшибки());
	КонецПопытки;
	
	РезультатОбработки = Новый Структура();
	РезультатОбработки.Вставить("ЗаданиеВыполнено", Статус = Перечисления.кб99_СтатусЗапроса.COMPLETED );

	Если ЗначениеЗаполнено( АдресХранилища ) Тогда 
		ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
	КонецЕсли;
	
КонецПроцедуры

//Отправка ВСД для параллельной обработки на сервере Ветис
Процедура ОтправитьВСД_Параллельно(Знач Параметры, АдресХранилища=Неопределено) Экспорт
	
	СообщитьИнфо("Начало отправки ВСД в Ветис");	
	
	ДокСсылка = Неопределено;
	СписокДокументов = Неопределено;
	Параметры.Свойство("ДокСсылка", ДокСсылка);
	Параметры.Свойство("СписокДокументов", СписокДокументов);
	
	Если ЗначениеЗаполнено( ДокСсылка ) Тогда 
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить( ДокСсылка );
	КонецЕсли;
	
	Статус = "";
	ПараметрыОбщие = кб99_ВСД.ЗагрузитьПараметры( СписокДокументов[0].Организация );
	
	// запрос условий перевозки
	ОсновнойРегион = ПараметрыОбщие["Регион"];
	Для Каждого ДокСсылка Из СписокДокументов Цикл	
		Если ( ДокСсылка.УсловияПеревозки.Количество() = 0 ) Тогда
			кб99_ВСД_Запросы.ВСД2_Транзакция_УсловияПеревозки_Отправить( ПараметрыОбщие, ДокСсылка, Ложь  );
		КонецЕсли;		
	КонецЦикла;

	кб99_ВСД_Запросы.Пауза( Параметры["ПаузаСек"] );
	
	// ответ условий перевозки
	Для Каждого ДокСсылка Из СписокДокументов Цикл	
		Если ( ДокСсылка.УсловияПеревозки.Количество() = 0 ) Тогда
			applicationID = кб99_ВСД_Общий.НайтиApplicationID( ДокСсылка );
			Если ЗначениеЗаполнено( applicationID ) Тогда				
				Ответ =  кб99_ВСД_Запросы.ВСД2_Транзакция_УсловияПеревозки_ПолучитьОтвет( ПараметрыОбщие, applicationID, ДокСсылка, Ложь);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
		
	// отправка
	СписокДокументовПолучитьОтвет = Новый Массив;
	Для Каждого ДокСсылка Из СписокДокументов Цикл	
		Если типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_транзакция") Тогда
			
			ПараметрыФункции = Новый Структура();
			ПараметрыФункции.Вставить("ДокОснование", ДокСсылка);
			ПараметрыФункции.Вставить("Параметры", ПараметрыОбщие);
			ПараметрыФункции.Вставить("ПолучитьОтветВетис", Ложь); 
			Статус = кб99_ВСД_Запросы.ВСД2_транзакция_Отправить(ПараметрыФункции);
			
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_Производство") тогда
			
			ПараметрыФункции = Новый Структура();
			ПараметрыФункции.Вставить("ДокОснование", ДокСсылка);
			ПараметрыФункции.Вставить("Параметры", ПараметрыОбщие);
			ПараметрыФункции.Вставить("ПолучитьОтветВетис", Ложь); 
			Статус = кб99_ВСД_Запросы.ВСД2_Производство_Отправить(ПараметрыФункции);
			
		КонецЕсли;
		
		Если Статус = Перечисления.кб99_СтатусЗапроса.ACCEPTED Тогда 
			СписокДокументовПолучитьОтвет.Добавить( ДокСсылка );		
		КонецЕсли;
	КонецЦикла;
	
	кб99_ВСД_Запросы.Пауза( Параметры["ПаузаСек"] );
	
	// ответ 
	Для Каждого ДокСсылка Из СписокДокументовПолучитьОтвет Цикл
		applicationID = кб99_ВСД_Общий.НайтиApplicationID( ДокСсылка );
		
		ПараметрыФункции = Новый Структура();
		ПараметрыФункции.Вставить("ДокОснование", ДокСсылка);
		ПараметрыФункции.Вставить("Параметры", ПараметрыОбщие);
		ПараметрыФункции.Вставить("СделатьПаузу", Ложь);
		ПараметрыФункции.Вставить("ApplicationID", applicationID);
	
		Статус =  кб99_ВСД_Запросы.ПолучитьРезультат_ВСД2( ПараметрыФункции );	
		Для А=1 По 10 Цикл
			//Если (Статус="IN_PROCESS") Тогда
			Если Статус = Перечисления.кб99_СтатусЗапроса.IN_PROCESS Тогда 
				Статус =  кб99_ВСД_Запросы.ПолучитьРезультат_ВСД2( ПараметрыФункции );	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	РезультатОбработки = Новый Структура();
	РезультатОбработки.Вставить("ЗаданиеВыполнено", Статус = Перечисления.кб99_СтатусЗапроса.COMPLETED );
	
	Если ЗначениеЗаполнено( АдресХранилища ) Тогда 
		ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);	
	КонецЕсли;
	
	СообщитьИнфо("Отправка ВСД в Ветис завершена "+Статус);	
	
КонецПроцедуры


Процедура АннулироватьВСД(ДокОснование) Экспорт
	
	Параметры = ЗагрузитьПараметры( ДокОснование.Организация );				
	
	ПараметрыФункции = Новый Структура("Параметры, ДокОснование", Параметры, ДокОснование);
	
	Если (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД_транзакция")) ИЛИ
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2_транзакция")) Тогда
		 
		  кб99_ВСД_Запросы.ВСД2_транзакция_Аннулировать( Параметры, ДокОснование );
		  
	  ИначеЕсли 
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД")) ИЛИ
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2")) ИЛИ
		 (ТипЗнч(ДокОснование) = Тип("СправочникСсылка.кб99_ВСД2")) Тогда 
		 
	     кб99_ВСД_Запросы.ВСД2_Аннулировать( ПараметрыФункции );
		 
	 Иначе
		 
		ВСД2_Транзакция_Ссылка = НайтиВсдТранзакцию(ДокОснование);
		кб99_ВСД_Запросы.ВСД2_транзакция_Аннулировать(Параметры, ВСД2_Транзакция_Ссылка );
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтатусВСД( ДокОснование ) Экспорт
	
	Параметры = ЗагрузитьПараметры( ДокОснование.Организация );				
	
	Если (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД_транзакция")) ИЛИ
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2_транзакция")) Тогда	
		  кб99_ВСД_Запросы.ВСД2_ЗагрузитьПоUUID( Параметры, ДокОснование );
	ИначеЕсли (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД")) ИЛИ
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2")) Тогда
	     кб99_ВСД_Запросы.ВСД2_ЗагрузитьПоUUID( Параметры, ДокОснование );
	 Иначе
		ВСД2_Транзакция_Ссылка = НайтиВсдТранзакцию( ДокОснование );
		кб99_ВСД_Запросы.ВСД2_ЗагрузитьПоUUID( Параметры, ВСД2_Транзакция_Ссылка );
	КонецЕсли;
	
КонецПроцедуры

Функция ПутьВСДВБраузере(ТестовыйРежим, _UUID, РежимПечать = Ложь)
	
	Если Режимпечать Тогда
         Если ТестовыйРежим Тогда
  			Возврат ("https://t2-mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+_UUID);
         Иначе
  			Возврат ("https://mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+_UUID);
         КонецЕсли;
	Иначе
		Если ТестовыйРежим Тогда
			Возврат ("https://t2-mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+_UUID);
		Иначе
			Возврат ("https://mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+_UUID);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ОткрытьВСДвГИС(ДокОснование) Экспорт
	
	СписокПараметров = ЗагрузитьПараметры( ДокОснование.Организация );
	ТестовыйРежим = НЕ ЗначениеЗаполнено( СписокПараметров["КодЛицензии"] );
	СзПутиВСД = Новый СписокЗначений;
	Если (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД_транзакция")) Или
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2_транзакция")) Тогда		 
		ДокВСД = ДокОснование;
	ИначеЕсли 
		(ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД")) ИЛИ
		(ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2")) ИЛИ
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2_входящий")) ИЛИ
		 (ТипЗнч(ДокОснование) = Тип("СправочникСсылка.кб99_ВСД2")) Тогда		 
		 СзПутиВСД.Добавить(ПутьВСДВБраузере(ТестовыйРежим, ДокОснование.UUID));
		Возврат СзПутиВСД;
	Иначе
		ДокВСД = НайтиВсдТранзакцию(ДокОснование);	 
	КонецЕсли;
	
	Если ДокВСД <> Неопределено Тогда
	    СписокВСД_Исх = НайтиВСД(ДокВСД);
	    Для Каждого стр Из СписокВСД_Исх Цикл
			СзПутиВСД.Добавить(ПутьВСДВБраузере(ТестовыйРежим, стр.UUID)); 
	    КонецЦикла;
	КонецЕсли;

	Возврат  СзПутиВСД;
	
КонецФункции

Функция ПечатьПолнойФормыВСД(ДокОснование) Экспорт
	
	СзПутиВСД = Новый СписокЗначений;
    СписокПараметров = ЗагрузитьПараметры( ДокОснование.Организация );
    ТестовыйРежим = НЕ ЗначениеЗаполнено( СписокПараметров["КодЛицензии"] );
	Если (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД_транзакция")) ИЛИ
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2_транзакция")) Тогда		 
		 
		ДокВСД = ДокОснование;
		
	ИначеЕсли 
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД")) ИЛИ
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2")) ИЛИ
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2_входящий")) ИЛИ 
		 (ТипЗнч(ДокОснование) = Тип("СправочникСсылка.кб99_ВСД2")) Тогда
		 
		 СзПутиВСД.Добавить(ПутьВСДВБраузере(ТестовыйРежим, ДокОснование.UUID, Истина));
		 
		Возврат СзПутиВСД;
	Иначе
		ДокВСД = НайтиВсдТранзакцию(ДокОснование);	 
	КонецЕсли;
	 
	СписокВСД_Исх = НайтиВСД(ДокВСД);
	Для Каждого стр Из СписокВСД_Исх Цикл
 		СзПутиВСД.Добавить(ПутьВСДВБраузере(ТестовыйРежим, стр.UUID,Истина));
    КонецЦикла;
		 
	Возврат СзПутиВСД;
	
КонецФункции

Функция ПечатьВнешнейФормыВСД(Знач ДокОснование, ФайлВнешнейОбработки = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ФайлВнешнейОбработки) Тогда
    	СписокПараметров = ЗагрузитьПараметры( ДокОснование.Организация );	 		
		Адресобработки = СписокПараметров["КаталогИнтеграции"]+"Внешняя_Форма_ВСД.epf";
	Иначе
		Адресобработки = ФайлВнешнейОбработки;
	КонецЕсли;
	
	ДокВСД = НайтиВсдТранзакцию(ДокОснование);
	
	ТабДок = Новый ТабличныйДокумент;
	ФайлНаДиске = Новый Файл(Адресобработки);
	Если ФайлНаДиске.Существует() Тогда
		СообщитьИнфо("Открываем внешнюю печатную форму: "+Адресобработки);
		ОбработкаПечати = ВнешниеОбработки.Создать(Адресобработки, Ложь);
		ТабДок = ОбработкаПечати.ПечатьВнешнейПечатнойФормы(ДокВСД, "", "");
	Иначе		
		Документы.ВСД2_транзакция.Печать(ТабДок, ДокВСД);
	КонецЕсли;	
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьНаборныйЛист(Знач ДокОснование) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	
	ДокВСД = НайтиВсдТранзакцию(ДокОснование);
	
	Документы.ВСД2_транзакция.ПечатьНаборныйЛист(ТабДок, ДокВСД);
		
	Возврат ТабДок;
	
КонецФункции

#Область Параметры

Функция ЗагрузитьПараметры( _Организация, ВладелецНастроек = Неопределено  ) Экспорт
	// ВладелецНастроек в параметрах - тогда можно загрузить настройки любого пользователя, а не текущего, м.б. пригодится...
	КлючОбъекта = "Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаУФ";
  	Если ВладелецНастроек = Неопределено Тогда
		ВладелецНастроек = ИмяПользователя();
	КонецЕсли;
	
	Попытка
		 // Проверим, как хранятся настройки у конкретного пользователя: Личные или по организации
		флСохранятьНастройкиДляТекущегоПользователя = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,"НастройкиВСДПоПользователю",,ВладелецНастроек); // на пользователя
		 
		Если (флСохранятьНастройкиДляТекущегоПользователя = Неопределено) или НЕ флСохранятьНастройкиДляТекущегоПользователя Тогда 		 
			флСохранятьНастройкиДляТекущегоПользователя = Ложь;
			
			СписокПараметров = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, _Организация.УникальныйИдентификатор(), , _Организация.УникальныйИдентификатор());
		Иначе 
		 	СписокПараметров = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, _Организация.УникальныйИдентификатор(), , ВладелецНастроек); 
		КонецЕсли;
	Исключение
		СообщитьИнфо("Нет прав на восстановление настроек.");
	КонецПопытки;

	Если СписокПараметров = Неопределено Тогда
		СообщитьИнфо("Не удалось загрузить настройки "+_Организация+" - "+КлючОбъекта+" - "+ВладелецНастроек);
		СписокПараметров = Новый("Структура");
	КонецЕсли;

	СписокПараметров.Вставить("Организация", _Организация );
	СписокПараметров.Вставить("флСохранятьНастройкиДляТекущегоПользователя",флСохранятьНастройкиДляТекущегоПользователя);
	
	Возврат СписокПараметров;

КонецФункции

&НаСервере
Функция СохранитьПараметры(Объект, _ИмяПользователя = Неопределено) Экспорт
	
	_Организация = Объект.Организация;
	
	Если _ИмяПользователя = Неопределено Тогда
		_ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	
	ПараметрыОрганизации = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	_НастройкиДляТекущегоПользователя = Объект.флСохранятьНастройкиДляТекущегоПользователя; 
	КлючОбъекта = "Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаУФ";

	// Укажем в настройке пользователя, как будем хранить Параметры ВСД - По пользователю или Организации
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  "НастройкиВСДПоПользователю", _НастройкиДляТекущегоПользователя, , _ИмяПользователя);
	
	Если  _НастройкиДляТекущегоПользователя Тогда
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  _Организация.УникальныйИдентификатор(), ПараметрыОрганизации, , _ИмяПользователя);  // Организация по пользователю
	Иначе
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  _Организация.УникальныйИдентификатор(), ПараметрыОрганизации, , _Организация.УникальныйИдентификатор());
	КонецЕсли;

    // имя пользователя - пользователь владелец настроек, если параметр не указать,
    // то настройки будут сохранены для ТЕКУЩЕГО пользователя
	
	Возврат ПараметрыОрганизации;
	
КонецФункции

Процедура ЗагрузитьПараметрыВОбработку(Объект, СписокПараметров) Экспорт
	
	Попытка
		ЗаполнитьЗначенияСвойств(Объект, СписокПараметров); // не работает, т.к.  СписокПараметров = Соответствие
		
		Если Объект.Свойство("ВСД_Экспертиза") И НЕ(ЗначениеЗаполнено(Объект.ВСД_Экспертиза)) Тогда		
			Объект.ВСД_Экспертиза 	= "Произ.лабор ";
		КонецЕсли;
		
		Если Объект.Свойство("ВСД_Местность") И НЕ(ЗначениеЗаполнено(Объект.ВСД_Местность))  Тогда 
			Объект.ВСД_Местность 	= "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
		КонецЕсли;

		Если Объект.Свойство("ПаузаСек") И НЕ(ЗначениеЗаполнено(Объект.ПаузаСек)) Тогда
			Объект.ПаузаСек=10;
		КонецЕсли;
					
		Если Объект.Свойство("НазваниеРеквизитаКоличество") И НЕ ЗначениеЗаполнено(Объект.НазваниеРеквизитаКоличество) Тогда
			Объект.НазваниеРеквизитаКоличество = "Количество";
		КонецЕсли;	
		
	Исключение
		СообщитьИнфо("Используется несоответствующия версии cf и обработки -> Проведите полное обновление !");
	    СообщитьИнфо(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#Область ДанныеОТехподдержке

Процедура СохранитьАктуальнуюВерсию(ОтветСервера, _ИмяПользователя = Неопределено) Экспорт
	
	Если _ИмяПользователя = Неопределено Тогда
		_ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	
	КлючОбъекта = "Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаУФ";

	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  "АктуальнаяВерсия_ИзХранилища", ОтветСервера, , _ИмяПользователя);
	
КонецПроцедуры

Функция ПолучитьАктуальнуюВерсию( ВладелецНастроек = Неопределено  ) Экспорт
	
	// ВладелецНастроек в параметрах - тогда можно загрузить настройки любого пользователя, а не текущего, м.б. пригодится...
	КлючОбъекта = "Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаУФ";
  	Если ВладелецНастроек = Неопределено Тогда
		ВладелецНастроек = ИмяПользователя();
	КонецЕсли;
	
	Попытка
		
		АктуальнаяВерсия = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, "АктуальнаяВерсия_ИзХранилища",,ВладелецНастроек);
		
	Исключение
		СообщитьИнфо("Нет прав на восстановление настроек.");
	КонецПопытки;

	Возврат АктуальнаяВерсия;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область Продукция_Элемент
	
// Соответствия Номенклатура - ВСД_Продукция_Элемент
&НаСервере
Функция ПолучитьНоменклатуруПоПродукцияЭлемент(ПродукцияЭлемент, ТолькоПервыйЭлемент = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_Соответсвия.Владелец КАК Номенклатура
	               |ИЗ
	               |	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	               |ГДЕ
	               |	ВСД_Соответсвия.ПродукцияЭлемент = &ВыбПродукцияЭлемент
	               |	И ВСД_Соответсвия.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ВыбПродукцияЭлемент", ПродукцияЭлемент);	
	Если ТолькоПервыйЭлемент Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Номенклатура;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТзВрем = Запрос.Выполнить().Выгрузить();
		ТзВрем.ВыгрузитьКолонку("Номенклатура");
		Возврат ТзВрем.ВыгрузитьКолонку("Номенклатура");		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСписок_ВСД_Продукция_ЭлементПоНоменклатуре(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|    ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент
	|ИЗ
	|    Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	|ГДЕ
	|    ВСД_Соответсвия.Владелец = &ВыбНоменклатура
	|    И НЕ ВСД_Соответсвия.ПродукцияЭлемент.ПометкаУдаления
	|	 И НЕ ВСД_Соответсвия.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВыбНоменклатура", Номенклатура);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура Установить_Соответствие_ВСД_Продукция_Элемент( ВыбНоменклатура, ВыбПродукцияЭлемент) Экспорт
	
	НачатьТранзакцию();
	Попытка
		// 1. Очистим все соответсвия по Номенклатуре
		ОчиститьСоответствие_ВСД_Продукция_Элемент( ВыбНоменклатура, ВыбПродукцияЭлемент );
		
		// 2. Установить новое соответствие
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|    ВСД_Соответсвия.Ссылка КАК Ссылка,
        |    ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент
        |ИЗ
        |    Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
        |ГДЕ
        |    ВСД_Соответсвия.Владелец = &ВыбНоменклатура 
		|    И ВСД_Соответсвия.ПродукцияЭлемент = &ВыбПродукцияЭлемент
		|";
		Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура);
		Запрос.УстановитьПараметр("ВыбПродукцияЭлемент", ВыбПродукцияЭлемент);

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.УстановитьПометкуУдаления(Ложь);
		Иначе
			СпрОбъект = Справочники.ВСД_Соответсвия.СоздатьЭлемент();
			СпрОбъект.Владелец = ВыбНоменклатура;
			СпрОбъект.ПродукцияЭлемент = ВыбПродукцияЭлемент; 
			СпрОбъект.Наименование = ВыбПродукцияЭлемент.Наименование;
			СпрОбъект.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		СообщитьИнфо(""+ВыбНоменклатура+" --> "+ВыбПродукцияЭлемент+ " : установлено соответствие");
		
	Исключение
		ОтменитьТранзакцию();	
		СообщитьИнфо(ОписаниеОшибки());
	КонецПопытки;
 
КонецПроцедуры

&НаСервере
Процедура ОчиститьСоответствие_ВСД_Продукция_Элемент( ВыбНоменклатура, ВыбПродукцияЭлемент = Неопределено ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|    ВСД_Соответсвия.Ссылка КАК Ссылка,
    |    ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент
    |ИЗ
    |    Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
    |ГДЕ
    |    ВСД_Соответсвия.Владелец = &ВыбНоменклатура
	|";
	Если ЗначениеЗаполнено(ВыбПродукцияЭлемент) Тогда 
		Запрос.Текст = Запрос.Текст +"
			|    И ВСД_Соответсвия.ПродукцияЭлемент = &ВыбПродукцияЭлемент";
	КонецЕсли;
			
	Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура);
	Запрос.УстановитьПараметр("ВыбПродукцияЭлемент", ВыбПродукцияЭлемент);

	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого ВыборкаСтрока Из Выборка Цикл
		СпрОбъект = ВыборкаСтрока.Ссылка.ПолучитьОбъект();
		//СпрОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Функция Продукция_Элемент_ПолучитьПоНоменклатуре(ВыбНоменклатура, Контрагент = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент,
	|	ВСД_Соответсвия.Контрагент КАК Контрагент,
	|	2 КАК Порядок
	|ИЗ
	|	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	|ГДЕ
	|	ВСД_Соответсвия.Владелец = &ВыбНоменклатура
	|	И НЕ ВСД_Соответсвия.ПродукцияЭлемент.ПометкаУдаления
	|	И НЕ ВСД_Соответсвия.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВСД_Соответсвия.ПродукцияЭлемент,
	|	ВСД_Соответсвия.Контрагент,
	|	1
	|ИЗ
	|	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	|ГДЕ
	|	НЕ ВСД_Соответсвия.ПометкаУдаления
	|	И ВСД_Соответсвия.Владелец = &ВыбНоменклатура
	|	И ВСД_Соответсвия.Контрагент = &Контрагент
	|	И НЕ ВСД_Соответсвия.ПродукцияЭлемент.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
    Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура); 
	Запрос.УстановитьПараметр("Контрагент", ?(Контрагент=Неопределено, Справочники.Контрагенты.ПустаяСсылка(), Контрагент)); 

    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать(); 
	
	ПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка();	
	Если Выборка.Следующий() Тогда 
		ПродукцияЭлемент = Выборка.ПродукцияЭлемент;
    КонецЕсли; 
	
	Возврат ПродукцияЭлемент;
	
КонецФункции

Функция Продукция_Элемент_ПолучитьСписок_ПоНоменклатуреИКонтрагенту(ВыбНоменклатура, Контрагент = Неопределено) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПродукцияЭлемент");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент,
	|	ВСД_Соответсвия.Контрагент КАК Контрагент,
	|	2 КАК Порядок
	|ИЗ
	|	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	|ГДЕ
	|	ВСД_Соответсвия.Владелец = &ВыбНоменклатура
	|	И НЕ ВСД_Соответсвия.ПометкаУдаления 
	|
	| @ЗапросПоКонтрагенту@ 
	|";
    Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура); 
	Если Контрагент <> Неопределено Тогда
		ПодстрокаЗамены =  "ОБЪЕДИНИТЬ
							|
							|ВЫБРАТЬ
							|	ВСД_Соответсвия.ПродукцияЭлемент,
							|	ВСД_Соответсвия.Контрагент,
							|	1
							|ИЗ
							|	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
							|ГДЕ
							|	НЕ ВСД_Соответсвия.ПометкаУдаления
							|	И ВСД_Соответсвия.Владелец = &ВыбНоменклатура
							|	И ВСД_Соответсвия.Контрагент = &Контрагент
							|
							|УПОРЯДОЧИТЬ ПО
							|	Порядок";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Иначе
		ПодстрокаЗамены = "";	
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@ЗапросПоКонтрагенту@", ПодстрокаЗамены);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоЗапросу = РезультатЗапроса.Выбрать();
	ВыборкаПоЗапросу.Следующий();
	Если ЗначениеЗаполнено(ВыборкаПоЗапросу.Контрагент) Тогда
		ВыборкаПоЗапросу = РезультатЗапроса.Выбрать();
		Пока ВыборкаПоЗапросу.Следующий() Цикл
			Если ВыборкаПоЗапросу.Контрагент = Контрагент И ВыборкаПоЗапросу.Порядок=1 Тогда
				Продукция = Результат.Добавить();
				Продукция.ПродукцияЭлемент = ВыборкаПоЗапросу.ПродукцияЭлемент;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВыборкаПоЗапросу = РезультатЗапроса.Выбрать();
		Пока ВыборкаПоЗапросу.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаПоЗапросу.Контрагент) Тогда
				Продукция = Результат.Добавить();
				Продукция.ПродукцияЭлемент = ВыборкаПоЗапросу.ПродукцияЭлемент;	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


&НаСервере
Процедура УстановитьСоответствиеСписку_ВСД_Продукция_Элемент(СписокНоменклатуры,ВСДЭлемент) Экспорт
	Для Каждого Элемент Из СписокНоменклатуры Цикл
		Установить_Соответствие_ВСД_Продукция_Элемент(Элемент.Значение,ВСДЭлемент);
	КонецЦикла; 	
КонецПроцедуры

&НаСервере
Процедура УдалитьСоответствиеСписку_ВСД_Продукция_Элемент(СписокНоменклатуры,ВСДЭлемент) Экспорт
	Для Каждого Элемент Из СписокНоменклатуры Цикл
		ОчиститьСоответствие_ВСД_Продукция_Элемент(Элемент.Значение,ВСДЭлемент);
	КонецЦикла; 	
КонецПроцедуры

// Формирует список Партий по Фильтру
// для заполнения ТЧ ВСД2_Инвентаризация
Функция СписокАктуальныхПартийПоФильтру_Запрос(ВСД_Продукция_Элемент="",ВСД_Площадка="", ВСД_ХозСубъект="") Экспорт
	// ЖД ТЕСТ Выбор не Удаленных, не Пустых, по ВСД_Продукция_Элемент ,по Площадке
	Запрос = Новый Запрос;
	ТекстЗапроса =         
	"ВЫБРАТЬ
	|    ВСДПартия.Ссылка
	|ИЗ
	|    Справочник.ВСД_Партия КАК ВСДПартия
	|ГДЕ
	|    ВСДПартия.ПометкаУдаления = ЛОЖЬ
	|    И ВСДПартия.Количество > 0";
	Если ЗначениеЗаполнено(ВСД_Продукция_Элемент) Тогда
		ТекстЗапроса = ТекстЗапроса + "		 
		|    И ВСДПартия.Продукция_Элемент = &ВыбПродукция_Элемент";
	КонецЕсли;
	Если ЗначениеЗаполнено(ВСД_Площадка) Тогда
		ТекстЗапроса = ТекстЗапроса + "		 
		|    И ВСДПартия.Получатель_Площадка = &ВыбПлощадка";
	КонецЕсли;
	Если ЗначениеЗаполнено(ВСД_ХозСубъект) Тогда
		ТекстЗапроса = ТекстЗапроса + "		 
		|    И ВСДПартия.Получатель_ХозСубъект.GUID = &ВыбХС";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбПлощадка", ВСД_Площадка);
	Запрос.УстановитьПараметр("ВыбПродукция_Элемент",ВСД_Продукция_Элемент);
	Если ЗначениеЗаполнено(ВСД_ХозСубъект) Тогда
		Запрос.УстановитьПараметр("ВыбХС", ВСД_ХозСубъект.GUID);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#Область Партии

// Получить Актуальные Партии
//
// Параметры:
//
// ПолеСортировки = выборочные настройки Получателя_ХозСубъекта
// ЗнакСортировки = выборочные настройки Получателя_ХозСубъекта
//
Функция ПолучитьАктуальныеПартии(Знач Параметры, ВыбПродукция_Элемент, ВыбПлощадка, ВыбХозСубъект, ПолеСортировкиПокупателя=Неопределено, ЗнакСортировкиПокупателя=Неопределено, Номенклатура=Неопределено ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбПлощадка) Тогда
		СообщитьИнфо("Не указана площадка Отправителя!");
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыбХозСубъект) Тогда
		СообщитьИнфо("Не указан ХС Отправителя!");
		Возврат Ложь;
	КонецЕсли;
	
	ЗнакСортировки = Параметры["ПарамЗнакСортировкиУбывание"];		

	Если ЗначениеЗаполнено(ПолеСортировкиПокупателя) Тогда 
		ПолеСортировки = ПолеСортировкиПокупателя;
		Если Параметры["ВыводитьПодробнуюИнформацию"] Тогда 
			СообщитьИнфо("! Сортировка партий определена = "+ПолеСортировки);
		КонецЕсли;
	Иначе
		Если ( ВыбПлощадка.ПерсональныеПараметрыСписанияПартий ) Тогда 
			
			ПолеСортировки = ВыбПлощадка.ПарамКолонкаСортировкиПартииСписания;
			Если Параметры["ВыводитьПодробнуюИнформацию"] Тогда 
				СообщитьИнфо("! Сортировка партий определена в ВСД_Площадка ["+ВыбПлощадка+"] = "+ПолеСортировки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено( ВыбПлощадка.ПарамЗнакСортировкиУбывание ) Тогда 
				ЗнакСортировки = ВыбПлощадка.ПарамЗнакСортировкиУбывание;
				Если Параметры["ВыводитьПодробнуюИнформацию"] Тогда 
					СообщитьИнфо("! Сортировка партий по LIFO определена в ВСД_Площадка ["+ВыбПлощадка+"] = "+ЗнакСортировки);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Параметры["ПарамКолонкаСортировкиПартииСписания"]) Тогда 
			ПолеСортировки = Параметры["ПарамКолонкаСортировкиПартииСписания"];
			Если Параметры["ВыводитьПодробнуюИнформацию"] Тогда 
				СообщитьИнфо("! Сортировка партий в общих параметрах = "+ПолеСортировки);
			КонецЕсли;			
		Иначе
			ПолеСортировки = "ДатаИзменения";
			Если Параметры["ВыводитьПодробнуюИнформацию"] Тогда 
				СообщитьИнфо("! Сортировка партий в общих параметрах не определена, используем = "+ПолеСортировки);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗнакСортировкиПокупателя) Тогда 
		ЗнакСортировки = ЗнакСортировкиПокупателя;
		Если Параметры["ВыводитьПодробнуюИнформацию"] Тогда 
			СообщитьИнфо("! Cортировка партий по LIFO = "+ЗнакСортировки);
		КонецЕсли;
	Иначе
		Если Параметры["ВыводитьПодробнуюИнформацию"] Тогда 
			СообщитьИнфо("! Сортировка партий по LIFO = "+ЗнакСортировки);
		КонецЕсли;
	КонецЕсли;
	ПорядокСортировки = ?(ЗнакСортировки,"ПолеСортировки УБЫВ","ПолеСортировки");
	
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	            |	ВСД_Партия.Ссылка КАК Партия,
	            |	ВСД_Партия.Количество,
	            |	ВСД_Партия.Продукция_Элемент КАК Продукция_Элемент,
	            |	ВСД_Партия.@ПолеСортировки КАК ПолеСортировки
	            |ИЗ
	            |	Справочник.ВСД_Партия КАК ВСД_Партия
	            |ГДЕ
	            |	ВСД_Партия.Получатель_Площадка = &Отправитель_Площадка
	            |	И ВСД_Партия.Получатель_ХозСубъект.GUID = &ВыбХС
	            |	И ВСД_Партия.Продукция_Элемент В ИЕРАРХИИ(&Продукция_Элемент)
	            |	И ВСД_Партия.Количество > 0
	            |	И ВСД_Партия.ПометкаУдаления = ЛОЖЬ
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	Продукция_Элемент,
	            |	@ПорядокПоляСортировки";

	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"@ПолеСортировки",ПолеСортировки);
	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"@ПорядокПоляСортировки",ПорядокСортировки);
     Запрос.УстановитьПараметр("Отправитель_Площадка"  ,ВыбПлощадка);
	 Запрос.УстановитьПараметр("ВыбХС", ВыбХозСубъект.GUID);
     Запрос.УстановитьПараметр("Продукция_Элемент" , ВыбПродукция_Элемент);
	 
	 Если Не Номенклатура = Неопределено Тогда
	     ВыбПродукция_Элемент = Новый СписокЗначений;
	     Если ТипЗнч(Номенклатура) = Тип("Массив") Тогда
	    	 Для а=0 По  Номенклатура.Количество()-1 Цикл
	    		 тзСписок = кб99_ВСД.ПолучитьСписок_ВСД_Продукция_ЭлементПоНоменклатуре( Номенклатура[а] );
	    		 Для Каждого стрТЗСписок Из  тзСписок Цикл
	    			 ВыбПродукция_Элемент.Добавить(стрТЗСписок.ПродукцияЭлемент);
	    		 КонецЦикла;
	    	 КонецЦикла;
	     Иначе
	    	 тзСписок = кб99_ВСД.ПолучитьСписок_ВСД_Продукция_ЭлементПоНоменклатуре( Номенклатура );
	    	 Для Каждого стрТЗСписок Из  тзСписок Цикл
	    		 ВыбПродукция_Элемент.Добавить(стрТЗСписок.ПродукцияЭлемент);
	    	 КонецЦикла;
	     КонецЕсли;
	     Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ВСД_Партия.Продукция_Элемент В ИЕРАРХИИ(&Продукция_Элемент)","И ВСД_Партия.Продукция_Элемент В (&Продукция_Элемент)");
	     Запрос.УстановитьПараметр("Продукция_Элемент" , ВыбПродукция_Элемент);
	 КонецЕсли;
	 
	 Попытка
		 Возврат Запрос.Выполнить().Выгрузить();
	 Исключение
		 СообщитьИнфо("Указано неверное название реквизита сортировки Партий в Параметрах -> "+ПолеСортировки+" исправьте!!");
		 СообщитьИнфо(ОписаниеОшибки());
		 Возврат "";
	 КонецПопытки;

КонецФункции

Функция ПодобратьПартииПоПродукцияЭлемент( ПараметрыФункции, тзПартий, ПродукцияЭлемент, КолвоСписания, СерияНоменклатуры="", Номенклатура=Неопределено, Контрагент = Неопределено ) Экспорт
	
	ПереопределенныйМодуль = кб99_ВСД_Общий.ФункцияПереопределена("ПодобратьПартииПоПродукцияЭлемент");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПодобратьПартииПоПродукцияЭлемент( ПараметрыФункции, тзПартий, ПродукцияЭлемент, КолвоСписания, СерияНоменклатуры, Номенклатура );
	КонецЕсли;	
	
	// Подбираем партии под нужное количество списания
	// возвращает ТЗ - Партия и Вес для указанного ПродукцияЭлемент
	// ТзПартий уже отсортирована нужным образом
	// Мы должны вернуть ее с уменьшенным количеством, что необходимо при групповой обработке
	
    тзОтвет = Новый ТаблицаЗначений;
	тзОтвет.Колонки.Добавить("Партия");
	тзОтвет.Колонки.Добавить("Количество");
	тзОтвет.Колонки.Добавить("Упаковки");  // Не нужен похоже тут
	тзОтвет.Колонки.Добавить("ПолеСортировки"); // Не исп-ся в документе
	тзОтвет.Колонки.Добавить("Номенклатура");
	
	Если Не ЗначениеЗаполнено(ПродукцияЭлемент) И Не ЗначениеЗаполнено(Номенклатура) Тогда 
		СообщитьИнфо("Не переданы данные о продукции при подборе партий");
		Возврат тзОтвет;
	КонецЕсли;
		
	ОсталосьСписать = КолвоСписания;
	Если ЗначениеЗаполнено(тзПартий) Тогда
		Если (Номенклатура = Неопределено) Или НЕ(ЗначениеЗаполнено(Номенклатура))  Тогда
			НайденнаяСтрока = тзПартий.Найти(ПродукцияЭлемент, "Продукция_Элемент");
			Если ЗначениеЗаполнено( НайденнаяСтрока ) Тогда 
				
				НомерСтроки = тзПартий.Индекс(НайденнаяСтрока);
				
				Для А=НомерСтроки По тзПартий.Количество()-1 Цикл
					
					Если тзПартий[А].Продукция_Элемент <> ПродукцияЭлемент Тогда 
						Продолжить;
					КонецЕсли;
					
					Если тзПартий[А].Партия.ИсключенаИзПодбора Тогда
						Если ПараметрыФункции["ВыводитьПодробнуюИнформацию"] Тогда
							СообщитьИнфо(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Партия [%1], с номером записи [%2] была исключена из подбора", тзПартий[А].Партия.Наименование, тзПартий[А].Партия.НомерЗаписи), тзПартий[А].Партия);
						КонецЕсли;
						Продолжить;
					КонецЕсли;

					
					Если осталосьСписать = 0 Тогда
						Прервать;    
					КонецЕсли;
					
					Если тзПартий[А].Количество = 0 Тогда
						// Уже выбрали из этой партии все
						Продолжить;
					КонецЕсли;
					
					Если НЕ ПараметрыФункции["ПоказыватьПросроченныеПартии"] Тогда
						
						Если ЗначениеЗаполнено( тзПартий[А].Партия.ДатаСрокГодности2 ) Тогда 
							
							ДатаСрокГодности2= кб99_ВСД_Запросы.СтрокаВДатаВремя( тзПартий[А].Партия.ДатаСрокГодности2 );
							
							Если ДатаСрокГодности2 <= ТекущаяДата()+ПараметрыФункции["СрокГодностиДней"]*86400 Тогда
								Если ПараметрыФункции["ВыводитьПодробнуюИнформацию"] Тогда
									СообщитьИнфо( тзПартий[А].Партия.Наименование + " пропущена по сроку годности: " + Формат(ДатаСрокГодности2,"ДФ=dd.MM.yy"), тзПартий[А].Партия);
								КонецЕсли;
								Продолжить;
							КонецЕсли;
							
						Иначе
							
							ДатаСрокГодности1= кб99_ВСД_Запросы.СтрокаВДатаВремя( тзПартий[А].Партия.ДатаСрокГодности1 );
							Если ДатаСрокГодности1 <= ТекущаяДата()+ПараметрыФункции["СрокГодностиДней"]*86400 Тогда 
								Если ПараметрыФункции["ВыводитьПодробнуюИнформацию"] Тогда
									СообщитьИнфо(тзПартий[А].Партия.Наименование + " пропущена по сроку годности: " + Формат(ДатаСрокГодности1,"ДФ=dd.MM.yy"), тзПартий[А].Партия);
								КонецЕсли;
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;

					//    // проверка по сроку годности в СерииНоменклатуры
					//	Если ЗначениеЗаполнено( СерияНоменклатуры ) Тогда
					//		
					//		Если ЗначениеЗаполнено( тзПартий[А].Партия.ДатаИзготовления2 ) Тогда 
					//									
					//			Если тзПартий[А].Партия.ДатаИзготовления2 < СерияНоменклатуры.СрокГодности Тогда 
					//				Продолжить;
					//			КонецЕсли;
					//			Если тзПартий[А].Партия.ДатаИзготовления1 > СерияНоменклатуры.СрокГодности Тогда 
					//				Продолжить;
					//			КонецЕсли;
					//			
					//			Если  ( тзПартий[А].Партия.ДатаСрокГодности1 > СерияНоменклатуры.СМК_ГоденДо ) Тогда 
					//				Продолжить;
					//			КонецЕсли;
					//			Если ЗначениеЗаполнено( тзПартий[А].Партия.ДатаСрокГодности2 ) Тогда 
					//				Если  ( тзПартий[А].Партия.ДатаСрокГодности2 < СерияНоменклатуры.СМК_ГоденДо ) Тогда 
					//					Продолжить;						
					//				КонецЕсли;
					//			КонецЕсли;
					//			
					//		Иначе
					//			
					//			// сравниваем ТОЛЬКО по ДатаДатаИзготовления1
					//			Если тзПартий[А].Партия.ДатаИзготовления1 <> СерияНоменклатуры.СрокГодности Тогда 
					//				Продолжить;
					//			КонецЕсли;
					//			
					//			Если ЗначениеЗаполнено( тзПартий[А].Партия.ДатаСрокГодности2 ) Тогда 
					//				Если ( тзПартий[А].Партия.ДатаСрокГодности2 < СерияНоменклатуры.СМК_ГоденДо ) Тогда 
					//					Продолжить;
					//				КонецЕсли;						
					//			Иначе
					//				Если  ( тзПартий[А].Партия.ДатаСрокГодности1 <> СерияНоменклатуры.СМК_ГоденДо ) Тогда 
					//					Продолжить;
					//				КонецЕсли;							
					//			КонецЕсли;
					//			
					//		КонецЕсли;
					//
					//	КонецЕсли;				
					
					// иначе
					СтрокаОтвет = тзОтвет.Добавить();
					СтрокаОтвет.Партия = тзПартий[А].Партия;
					СтрокаОтвет.ПолеСортировки = тзПартий[А].ПолеСортировки;
					Если ОсталосьСписать >= тзПартий[А].Количество Тогда
						СтрокаОтвет.Количество = тзПартий[А].Количество;
					Иначе
						СтрокаОтвет.Количество = ОсталосьСписать;
					КонецЕсли;
					
					тзПартий[А].Количество = тзПартий[А].Количество - СтрокаОтвет.Количество;
					ОсталосьСписать = ОсталосьСписать - СтрокаОтвет.Количество; 
					
				КонецЦикла;
			КонецЕсли;
		Иначе   //по списку номенклатуры
			тзСписок= кб99_ВСД.Продукция_Элемент_ПолучитьСписок_ПоНоменклатуреИКонтрагенту( Номенклатура, Контрагент );
			Для Каждого стрТЗСписок Из  тзСписок Цикл
				ПродукцияЭлемент=стрТЗСписок.ПродукцияЭлемент;
				НайденнаяСтрока = тзПартий.Найти(ПродукцияЭлемент, "Продукция_Элемент");
				Если ЗначениеЗаполнено( НайденнаяСтрока ) Тогда 
					НомерСтроки = тзПартий.Индекс(НайденнаяСтрока);
					
					Для А=НомерСтроки По тзПартий.Количество()-1 Цикл
						
						Если тзПартий[А].Продукция_Элемент <> ПродукцияЭлемент Тогда 
							Продолжить;
						КонецЕсли;
						
						Если тзПартий[А].Партия.ИсключенаИзПодбора Тогда
							Если ПараметрыФункции["ВыводитьПодробнуюИнформацию"] Тогда
								СообщитьИнфо(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Партия [%1], с номером записи [%2] была исключена из подбора", тзПартий[А].Партия.Наименование, тзПартий[А].Партия.НомерЗаписи), тзПартий[А].Партия);
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						
						Если осталосьСписать = 0 Тогда
							Прервать;    
						КонецЕсли;
						
						Если тзПартий[А].Количество = 0 Тогда
							// Уже выбрали из этой партии все
							Продолжить;
						КонецЕсли;
						
						Если НЕ ПараметрыФункции["ПоказыватьПросроченныеПартии"] Тогда
							
							Если ЗначениеЗаполнено( тзПартий[А].Партия.ДатаСрокГодности2 ) Тогда 
								
								ДатаСрокГодности2= кб99_ВСД_Запросы.СтрокаВДатаВремя( тзПартий[А].Партия.ДатаСрокГодности2 );
								
								Если ДатаСрокГодности2 <= ТекущаяДата()+ПараметрыФункции["СрокГодностиДней"]*86400 Тогда
									Если ПараметрыФункции["ВыводитьПодробнуюИнформацию"] Тогда
										СообщитьИнфо( тзПартий[А].Партия.Наименование + " пропущена по сроку годности: " + Формат(ДатаСрокГодности2,"ДФ=dd.MM.yy"), тзПартий[А].Партия);
									КонецЕсли;
									Продолжить;
								КонецЕсли;
								
							Иначе
								
								ДатаСрокГодности1= кб99_ВСД_Запросы.СтрокаВДатаВремя( тзПартий[А].Партия.ДатаСрокГодности1 );
								Если ДатаСрокГодности1 <= ТекущаяДата()+ПараметрыФункции["СрокГодностиДней"]*86400 Тогда 
									Если ПараметрыФункции["ВыводитьПодробнуюИнформацию"] Тогда
										СообщитьИнфо(тзПартий[А].Партия.Наименование + " пропущена по сроку годности: " + Формат(ДатаСрокГодности1,"ДФ=dd.MM.yy"), тзПартий[А].Партия);
									КонецЕсли;
									Продолжить;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;

						// проверка по сроку годности в СерииНоменклатуры
						Если ЗначениеЗаполнено( СерияНоменклатуры ) Тогда
							
							Если ЗначениеЗаполнено( тзПартий[А].Партия.ДатаИзготовления2 ) Тогда 
								
								//Если тзПартий[А].Партия.ДатаИзготовления2 < СерияНоменклатуры.СрокГодности Тогда 
								//	Продолжить;
								//КонецЕсли;
								//Если тзПартий[А].Партия.ДатаИзготовления1 > СерияНоменклатуры.СрокГодности Тогда 
								//	Продолжить;
								//КонецЕсли;
								
								Если  ( тзПартий[А].Партия.ДатаСрокГодности1 > СерияНоменклатуры.ГоденДо ) Тогда 
									Продолжить;
								КонецЕсли;
								Если ЗначениеЗаполнено( тзПартий[А].Партия.ДатаСрокГодности2 ) Тогда 
									Если  ( тзПартий[А].Партия.ДатаСрокГодности2 < СерияНоменклатуры.ГоденДо ) Тогда 
										Продолжить;						
									КонецЕсли;
								КонецЕсли;
								
							Иначе
								
								// сравниваем ТОЛЬКО по ДатаДатаИзготовления1
								//Если тзПартий[А].Партия.ДатаИзготовления1 <> СерияНоменклатуры.СрокГодности Тогда 
								//	Продолжить;
								//КонецЕсли;
								
								Если ЗначениеЗаполнено( тзПартий[А].Партия.ДатаСрокГодности2 ) Тогда 
									Если ( тзПартий[А].Партия.ДатаСрокГодности2 < СерияНоменклатуры.ГоденДо ) Тогда 
										Продолжить;
									КонецЕсли;						
								Иначе
									Если  ( тзПартий[А].Партия.ДатаСрокГодности1 <> СерияНоменклатуры.ГоденДо ) Тогда 
										Продолжить;
									КонецЕсли;							
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;				
						
						// иначе
						СтрокаОтвет = тзОтвет.Добавить();
						СтрокаОтвет.Партия = тзПартий[А].Партия;
						СтрокаОтвет.ПолеСортировки = тзПартий[А].ПолеСортировки;
						Если ОсталосьСписать >= тзПартий[А].Количество Тогда
							СтрокаОтвет.Количество = тзПартий[А].Количество;
						Иначе
							СтрокаОтвет.Количество = ОсталосьСписать;
						КонецЕсли;
						
						тзПартий[А].Количество = тзПартий[А].Количество - СтрокаОтвет.Количество;
						ОсталосьСписать = ОсталосьСписать - СтрокаОтвет.Количество; 
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли
	КонецЕсли;
	
	Если ОсталосьСписать > 0 Тогда
	    стр = "Недостаточно партий для списания "+ПродукцияЭлемент + ", Нужно списать "+КолвоСписания+ ", списываю "+тзОтвет.Итог("Количество");
		Если ЗначениеЗаполнено( СерияНоменклатуры ) Тогда
			стр = стр + " со сроком годности  по ["+СерияНоменклатуры.ГоденДо+"]";
		КонецЕсли;
		стр = стр + " на площадке №" +ПараметрыФункции.Отправитель_Площадка.Код + "  " + ПараметрыФункции.Отправитель_Площадка;
		СообщитьИнфо(стр);
	КонецЕсли;
	
	Возврат тзОтвет;
	
КонецФункции

Функция ПодобратьПартии( тзПартий, КолвоСписания ) Экспорт
	// Подбираем партии под нужное количество списания
	// возвращает ТЗ - Партия и Вес для указанного ПродукцияЭлемент
	// тзПартий уже отсортирована нужным образом
	// Мы должны вернуть ее с уменьшенным количеством, что необходимо при групповой обработке
	
    Рез = Новый ТаблицаЗначений;
	Рез.Колонки.Добавить("Партия");
	Рез.Колонки.Добавить("Количество");
		
	ОсталосьСписать = КолвоСписания;
	Если НЕ ЗначениеЗаполнено(ТзПартий) Тогда
		СообщитьИнфо("Не заполнена таблица партий ");
		Возврат Рез;
	КонецЕсли;
	Для Каждого стрПартия Из тзПартий Цикл
			Если осталосьСписать = 0 Тогда
				Прервать;    
			КонецЕсли;

			СтрРез = рез.Добавить();
			СтрРез.Партия = стрПартия.Партия;
			
			Если ОсталосьСписать >= стрПартия.Количество Тогда
				СтрРез.Количество = стрПартия.Количество;
			Иначе
				СтрРез.Количество = ОсталосьСписать;
			КонецЕсли;
		
			стрПартия.Количество = стрПартия.Количество - СтрРез.Количество;
			ОсталосьСписать = ОсталосьСписать - СтрРез.Количество; 
	КонецЦикла;
	
	Если ОсталосьСписать > 0 Тогда
	    СообщитьИнфо("Недостаточно партий для списания, нужно списать "+КолвоСписания+ ", списываю "+Рез.Итог("Количество"));
	КонецЕсли;
	
	Возврат рез;
	
КонецФункции

// Аналог Процедуры ЗаполнитьТЧВСД, только вместо заполнения ТЧ документа Возвращает ТЗ 
// рассмотреть вариант Оптимизации
// Параметр тзАктуальныхПартий необходим при групповом рспределении
// в Парам = Структура переданы Отправитель_ХозСубъект и Отправитель_Площадка
//
// ПолеСортировки = выборочные настройки Получателя_ХозСубъекта
// ЗнакСортировки = выборочные настройки Получателя_ХозСубъекта
//
//Функция ПолучитьТЗПартииКСписаниюПоТЗПродукцияЭлементов(Параметры, тзЭлементыкСписанию, тзАктуальныхПартий = "") Экспорт
Функция тзПартииСписанияПоТзПродукция_Элемент(Параметры, тзЭлементыкСписанию, тзАктуальныхПартий = "", ПолеСортировки=Неопределено, ЗнакСортировки = Неопределено, Контрагент = Неопределено) Экспорт
    
    ПартииКСписанию = новый ("ТаблицаЗначений"); 
    ПартииКСписанию.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
    ПартииКСписанию.Колонки.Добавить("Продукция_Элемент",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция_Элемент"));
    ПартииКСписанию.Колонки.Добавить("Продукция",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция"));
    ПартииКСписанию.Колонки.Добавить("ВидПродукции",новый ОписаниеТипов("СправочникСсылка.ВСД_ВидПродукции"));
    ПартииКСписанию.Колонки.Добавить("Партия",новый ОписаниеТипов("СправочникСсылка.ВСД_Партия"));
    ПартииКСписанию.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3)));
    ПартииКСписанию.Колонки.Добавить("Упаковки",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3)));
    ПартииКСписанию.Колонки.Добавить("ЕдиницаИзмерения",новый ОписаниеТипов("СправочникСсылка.ВСД_ЕдиницыИзмерения"));
    
    Если НЕ ЗначениеЗаполнено(тзАктуальныхПартий) Тогда
		Попытка массивНоменклатура = тзЭлементыкСписанию.ВыгрузитьКолонку("Номенклатура")Исключение массивНоменклатура = Неопределено КонецПопытки;
        Попытка
            тзАктуальныхПартий = ПолучитьАктуальныеПартии(Параметры, тзЭлементыкСписанию.ВыгрузитьКолонку("Продукция_Элемент"), Параметры["Отправитель_Площадка"], Параметры["Отправитель_ХозСубъект"], 
					ПолеСортировки, ЗнакСортировки, массивНоменклатура );
        Исключение
            СообщитьИнфо("Не переданы параметры для получения Актуальных партий - ДанныеЗаполнения или тзЭлементыОснования");
            Возврат ПартииКСписанию;
        КонецПопытки;
    КонецЕсли;
    
    Для Каждого ТекСтрокаТовары Из тзЭлементыкСписанию Цикл
		Продукция_Элемент = ТекСтрокаТовары.Продукция_Элемент;
		Если Контрагент = Неопределено Тогда
			Попытка 
				Контрагент = ТекСтрокаТовары.Контрагент;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Попытка 
			СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
		Исключение 
			СерияНоменклатуры = Неопределено;
		КонецПопытки;
		Попытка
			Номенклатура = ТекСтрокаТовары.Номенклатура;
		Исключение
			Номенклатура = Неопределено;
		КонецПопытки;
		
		СтрокиПартий = ПодобратьПартииПоПродукцияЭлемент( Параметры, тзАктуальныхПартий, ТекСтрокаТовары.Продукция_Элемент, ТекСтрокаТовары.Количество, СерияНоменклатуры, Номенклатура, Контрагент );
		
        Если СтрокиПартий.Количество() = 0  Тогда
            Если Параметры["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"] Тогда
                НоваяСтрока = ПартииКСписанию.Добавить();                
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
                НоваяСтрока.Продукция_Элемент = Продукция_Элемент;
                НоваяСтрока.ЕдиницаИзмерения = Продукция_Элемент.ЕдиницаИзмерения;
                Продолжить;
            КонецЕсли;
              СообщитьИнфо("Нет партий для Продукция_Элемент ["+ Строка(Продукция_Элемент) +"] Пропускаем!");                             
            Продолжить;
        КонецЕсли;
        
        Для Каждого СтрПартии Из СтрокиПартий Цикл
            НоваяСтрока = ПартииКСписанию.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
            НоваяСтрока.Партия = СтрПартии.Партия;
            НоваяСтрока.Количество = СтрПартии.Количество;
            НоваяСтрока.ЕдиницаИзмерения = СтрПартии.Партия.ЕдиницаИзмерения;
            НоваяСтрока.Продукция_Элемент = НоваяСтрока.Партия.Продукция_Элемент;           
            НоваяСтрока.Продукция = НоваяСтрока.Партия.Продукция;           
            НоваяСтрока.ВидПродукции = НоваяСтрока.Партия.ВидПродукции;         
			//НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;         
        КонецЦикла;
        
        Если (СтрокиПартий.Итог("Количество") < ТекСтрокаТовары.Количество) и Параметры["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"]  Тогда
            //Добавим с пустыми партиями
            НоваяСтрока = ПартииКСписанию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
            НоваяСтрока.Продукция_Элемент = Продукция_Элемент;
            НоваяСтрока.Количество  =  ТекСтрокаТовары.Количество - СтрокиПартий.Итог("Количество") ;
            НоваяСтрока.ЕдиницаИзмерения = Продукция_Элемент.ЕдиницаИзмерения;
      КонецЕсли; 
    КонецЦикла;
	
	ПартииКСписанию.Свернуть("Номенклатура, Продукция_Элемент, Продукция, ВидПродукции, Партия, ЕдиницаИзмерения","Количество, Упаковки");
	
    Возврат ПартииКСписанию;
	
КонецФункции

#КонецОбласти

Функция ПолучитьПутьКСправкеВИКИ( Ссылка ) Экспорт
	Возврат "https://redmine.kb99.pro/projects/vsd_v8/wiki";
КонецФункции	

Функция ПолучитьПутьКПриложениюУдаленнойПоддержки() Экспорт
	
	СсылкиНаПрограммыУдаленнойПоддержки = Новый Структура();
	СсылкиНаПрограммыУдаленнойПоддержки.Вставить("Anydesk", "https://download.anydesk.com/AnyDesk.exe");
	СсылкиНаПрограммыУдаленнойПоддержки.Вставить("_1cConnect", "https://1c-connect.com/join/s/bhbgroe537bz3pxg1g9ja6eroe");
	Возврат СсылкиНаПрограммыУдаленнойПоддержки;

КонецФункции

Процедура ОформитьДокументПартииВСД(ПараметрыФункции) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВСД_Партия.Ссылка КАК Партия,
	|	ВСД_Партия.НомерЗаписи КАК НомерЗаписи,
	|	ВСД_Партия.ДатаИзготовления1 КАК ДатаИзготовления,
	|	ВСД_Партия.ДатаСрокГодности1 КАК СрокГодности,
	|	ВСД_Партия.Количество КАК Количество
	|ИЗ
	|	Справочник.ВСД_Партия КАК ВСД_Партия
	|ГДЕ
	|	ВСД_Партия.Ссылка В (&СписокПартий)";
	Запрос.УстановитьПараметр("СписокПартий", ПараметрыФункции.СписокПартий);	
	
	ДокПартии					 = Документы.ПартииВСД.СоздатьДокумент();
	ДокПартии.Дата				 = ТекущаяДатаСеанса();
	ДокПартии.Организация		 = ПараметрыФункции.Организация;
	ДокПартии.ВСД_Хозсубъект	 = ПараметрыФункции.Отправитель_ХозСубъект;
	ДокПартии.ВСД_Площадка		 = ПараметрыФункции.Отправитель_Площадка;
	
	ДокПартии.ПартииРезультат.Загрузить(Запрос.Выполнить().Выгрузить());
	Если ДокПартии.ПартииРезультат.Количество() Тогда
		ДокПартии.Записать(РежимЗаписиДокумента.Проведение);
		РегистрыСведений.кб99_ОстаткиПартийВетис.ЗаписатьОстаткиПартий(ДокПартии.ПартииРезультат, ДокПартии.Ссылка);
	КонецЕсли;
	
КонецПроцедуры
