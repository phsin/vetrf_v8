Функция СтрРазделить82(Имя,знакДелителя)
	
	Рез = Новый СписокЗначений;
	Рез.Вставить("имя",имя);
	Возврат Рез;
	
КонецФункции

Функция СерверныйМодульМенеджера(Имя)
	
	ОбъектНайден = Ложь;
	
	ЧастиИмени = СтрРазделить82(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];
		
		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбъектНайден Тогда
		ВызватьИсключение("ОШИБКА ПОЛУЧЕНИЯ МОДУЛЯ");
	КонецЕсли;
	
	Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	
	Возврат Модуль;
	
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	
	Попытка	
		Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
			Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
		ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
			Возврат СерверныйМодульМенеджера(Имя);
		Иначе
			Модуль = Неопределено;
		КонецЕсли;
	Исключение
		кб99_ВСД.СообщитьИнфо("Ошибка получения модуля Типовой конфигурации "+Имя+" "+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Модуль;
	
КонецФункции

Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьОрганизациюПоУмолчанию");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;

	НазваниеКонфигурации = Метаданные.Имя;
	Версия = Лев(Метаданные.Версия,2);
	
	_Организация = Справочники.Организации.ПустаяСсылка();

	//БП 3	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	//УПП   Организация   =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");
	
	Если Метаданные.Имя = "УправлениеТорговлей" Тогда 
		Если Версия="11" Тогда 
			
			МодульТиповойКонфы = ОбщийМодуль("ОрганизацииСлужебный");
			_Организация = МодульТиповойКонфы.ОрганизацияПоУмолчанию( );
			
		Иначе //УТ 10			
			МодульТиповойКонфы = ОбщийМодуль("УправлениеПользователями");
			ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
			_Организация = МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию(ТекПользователь,"ОсновнаяОрганизация");
		КонецЕсли 
	ИначеЕсли Метаданные.Имя = "БухгалтерияПредприятия" Тогда 
		Если Версия = "3." Тогда 
			//БП 3.0
			МодульТиповойКонфы = ОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			_Организация = МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Иначе
			// Версия = 2
			МодульТиповойКонфы = ОбщийМодуль("ОбщегоНазначения");
			_Организация = МодульТиповойКонфы.ПолучитьЗначениеПеременной("ОсновнаяОрганизация");
		КонецЕсли;
	ИначеЕсли Метаданные.Имя = "УправлениеПроизводственнымПредприятием" Тогда 		
		//УПП
		МодульТиповойКонфы = ОбщийМодуль("УправлениеПользователями");
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
		_Организация = МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию(ТекПользователь,"ОсновнаяОрганизация");
	ИначеЕсли Метаданные.Имя = "кб99_Ветис" Тогда 		
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
		_Организация = Справочники.Организации.ОсновнаяОрганизация;
	Иначе
		Попытка				
			_Организация = Справочники.Организации.ОсновнаяОрганизация;
		Исключение
			кб99_ВСД.СообщитьИнфо("Для данной конфигурации 1С не удалось получить значение Организации по умолчанию, обратитесь в тех.поддержку КБ99");
			кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено( _Организация ) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	Организации.Ссылка КАК Организация
		               |ИЗ
		               |	Справочник.Организации КАК Организации
		               |ГДЕ
		               |	Организации.ПометкаУдаления = ЛОЖЬ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			_Организация =  Выборка.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _Организация;
	
КонецФункции

Функция ПараметрыСервер( ФОбъект ) Экспорт
	
	Параметры = Новый("Структура");
	Параметры.Вставить("Организация", ФОбъект.Организация );
	Параметры.Вставить("КаталогИнтеграции", ФОбъект.КаталогИнтеграции );
	Параметры.Вставить("КаталогЛогов", ФОбъект.КаталогЛогов );
	Параметры.Вставить("param_username", ФОбъект.param_username);
	Параметры.Вставить("param_password", ФОбъект.param_password);
	Параметры.Вставить("param_issuer_id", ФОбъект.param_issuer_id);
	//Параметры.Вставить("param_service_id", ФОбъект.param_service_id);
	Параметры.Вставить("param_api_key", ФОбъект.param_api_key);
	Параметры.Вставить("param_intiator_login", ФОбъект.param_intiator_login);
	Параметры.Вставить("param_vetdoctor_login", ФОбъект.param_vetdoctor_login);
	//Параметры.Вставить("param_vetdoctor_fio", ФОбъект.param_vetdoctor_fio);	
	//Параметры.Вставить("param_vetdoctor_post", ФОбъект.param_vetdoctor_post);	
	Параметры.Вставить("Отправитель_Площадка", ФОбъект.Отправитель_Площадка);
	Параметры.Вставить("Отправитель_ХозСубъект", ФОбъект.Отправитель_ХозСубъект );
	Параметры.Вставить("Страна", ФОбъект.Страна);
	Параметры.Вставить("Регион", ФОбъект.Регион);
	Параметры.Вставить("Город", ФОбъект.Город);
	Параметры.Вставить("НаселенныйПункт", ФОбъект.НаселенныйПункт);
	Параметры.Вставить("ВСД_Экспертиза", ФОбъект.ВСД_Экспертиза);
	Параметры.Вставить("ВСД_Местность", ФОбъект.ВСД_Местность );
	Параметры.Вставить("ВСД_ОсобыеОтметки", ФОбъект.ВСД_ОсобыеОтметки);
	Параметры.Вставить("ПаузаСек", ФОбъект.ПаузаСек);	
	Параметры.Вставить("РеквизитГрузополучатель", ФОбъект.РеквизитГрузополучатель);	
	Параметры.Вставить("ОтладкаЗапросовXML", ФОбъект.ОтладкаЗапросовXML);	
	Параметры.Вставить("Перевозчик_ХозСубъект", ФОбъект.Перевозчик_ХозСубъект);		
	Параметры.Вставить("ПропускатьПустыеСвойства", ФОбъект.ПропускатьПустыеСвойства);		
	Параметры.Вставить("КаталогЛогов", ФОбъект.КаталогЛогов);
	Параметры.Вставить("ВыводитьПодробнуюИнформацию", ФОбъект.ВыводитьПодробнуюИнформацию);	
	Параметры.Вставить("Смещение", ФОбъект.Смещение);
	Параметры.Вставить("АвтоЗаписьВСДСоответствия", ФОбъект.АвтоЗаписьВСДСоответствия);
	Параметры.Вставить("НазваниеРеквизитаКоличество", ФОбъект.НазваниеРеквизитаКоличество);
	Параметры.Вставить("ПарамКоэффициентПересчетаКоличества", ФОбъект.ПарамКоэффициентПересчетаКоличества);
	Параметры.Вставить("ВСД_РезультатыИсследований", ФОбъект.ВСД_РезультатыИсследований);
    Параметры.Вставить("ТермическиеУсловияПеревозки", ФОбъект.ТермическиеУсловияПеревозки);
	Параметры.Вставить("ВСДЦель", ФОбъект.ВСДЦель);
	Параметры.Вставить("ПарамЗаполнятьТранзакциюПриОтсутствииПартий", ФОбъект.ПарамЗаполнятьТранзакциюПриОтсутствииПартий);
	Параметры.Вставить("ПарамНомерУровняУпаковкиДляВСД", ФОбъект.ПарамНомерУровняУпаковкиДляВСД);
	Параметры.Вставить("ПарамФормаУпаковкиДляВСД", ФОбъект.ПарамФормаУпаковкиДляВСД);
	Параметры.Вставить("НазваниеРеквизитаКоличествоМест", ФОбъект.НазваниеРеквизитаКоличествоМест);
	Параметры.Вставить("НазваниеРеквизитаКоличествоМест", ФОбъект.НазваниеРеквизитаКоличествоМест);
	Параметры.Вставить("ПарамКолонкаСортировкиПартииСписания", ФОбъект.ПарамКолонкаСортировкиПартииСписания);
	Параметры.Вставить("ПарамЗнакСортировкиУбывание", ФОбъект.ПарамЗнакСортировкиУбывание);
	Параметры.Вставить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя",ФОбъект.ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя);	
	Параметры.Вставить("ПарамПоставщикОрганизация",ФОбъект.ПарамПоставщикОрганизация);	
	Параметры.Вставить("ПарамПоставщикХозСубъект",ФОбъект.ПарамПоставщикХозСубъект);	
	Параметры.Вставить("ПарамПоставщикПлощадка",ФОбъект.ПарамПоставщикПлощадка);	
	Параметры.Вставить("ПарамРазрешитьВводНаОснованииБолееОдногоВСД",ФОбъект.ПарамРазрешитьВводНаОснованииБолееОдногоВСД);
	Параметры.Вставить("ОтправлятьВФоне", ФОбъект.ОтправлятьВФоне);
	Параметры.Вставить("ПарамПроизводствоЗаполнятьПоСправочнику", ФОбъект.ПарамПроизводствоЗаполнятьПоСправочнику);
	Параметры.Вставить("ПарамИспользоватьСерииПродукции", ФОбъект.ПарамИспользоватьСерииПродукции);
	Параметры.Вставить("КодЛицензии", ФОбъект.КодЛицензии);
	Параметры.Вставить("ОтключитьОтправкуСтатистики", ФОбъект.ОтключитьОтправкуСтатистики);
	Параметры.Вставить("ПарамКонтроллироватьСрокГодностиПриОтправке", ФОбъект.ПарамКонтроллироватьСрокГодностиПриОтправке);
	Параметры.Вставить("СрокГодностиДней", ФОбъект.СрокГодностиДней);
	Параметры.Вставить("ПарамКонтроллироватьЗаполнениеУровнейУпаковки", ФОбъект.ПарамКонтроллироватьЗаполнениеУровнейУпаковки);
	Параметры.Вставить("парамПричинаАннулирования", ФОбъект.парамПричинаАннулирования);
	Параметры.Вставить("парамПричинаРасхождения", ФОбъект.парамПричинаРасхождения);
	Параметры.Вставить("парамОписаниеНесоответствия", ФОбъект.парамОписаниеНесоответствия);
	Параметры.Вставить("КоэфПересчетаКоличестваПриПроизводстве", ФОбъект.КоэфПересчетаКоличестваПриПроизводстве);
	Параметры.Вставить("КоличествоДнейХраненияЗапросов", ФОбъект.КоличествоДнейХраненияЗапросов);
	Параметры.Вставить("ПарамВсдВходящиеИскатьДокументПрихода", ФОбъект.ПарамВсдВходящиеИскатьДокументПрихода);
	Параметры.Вставить("ПоказыватьПросроченныеПартии", ФОбъект.ПоказыватьПросроченныеПартии);
	Параметры.Вставить("МаксимальноеКоличествоПартийСписанияВДокументе", ФОбъект.МаксимальноеКоличествоПартийСписанияВДокументе);
	Параметры.Вставить("ЗавершатьПроизводство", ФОбъект.ЗавершатьПроизводство);
	Параметры.Вставить("ПрефиксНомераНезавершенногоПроизводства", ФОбъект.ПрефиксНомераНезавершенногоПроизводства);
	Параметры.Вставить("ЗаполнятьТермическиеУсловияИзВходящегоВСД", ФОбъект.ЗаполнятьТермическиеУсловияИзВходящегоВСД);
	Параметры.Вставить("ДобавлятьОсобыеОтметкиИзВходящегоВСД", ФОбъект.ДобавлятьОсобыеОтметкиИзВходящегоВСД);
	Параметры.Вставить("ПроверятьЗаполнениеСырьяВПроизводстве", ФОбъект.ПроверятьЗаполнениеСырьяВПроизводстве);
	Параметры.Вставить("ПроверятьБалансРасходаСырья", ФОбъект.ПроверятьБалансРасходаСырья);
	Параметры.Вставить("ПроцентРасхожденияСырьеПродукция", ФОбъект.ПроцентРасхожденияСырьеПродукция);
	Параметры.Вставить("РазрешитьПодменуПродукцииВИсходящемВСД", ФОбъект.РазрешитьПодменуПродукцииВИсходящемВСД);
	Параметры.Вставить("ВходящиеПроверятьДатуИзготовления", ФОбъект.ВходящиеПроверятьДатуИзготовления);
	Параметры.Вставить("ВходящиеПроверятьДатуИзготовленияКоличествоДней", ФОбъект.ВходящиеПроверятьДатуИзготовленияКоличествоДней);
	
	Попытка 
		_НастройкиДляТекущегоПользователя = ФОбъект.флСохранятьНастройкиДляТекущегоПользователя; 
	Исключение 
		_НастройкиДляТекущегоПользователя = Ложь; 
	КонецПопытки;
	
	Возврат Параметры;

КонецФункции

// Получает сообщения пользователю, отфильтровывает служебные сообщения о состоянии длительной операции.
// 
// Параметры:
//  УдалятьПолученные - Булево - Признак необходимости удаления полученных сообщений.
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
// 
// Возвращаемое значение:
//  Массив - ФиксированныйМассив - Массив объектов СообщениеПользователю, которые были сформированы в
//  фоновом задании.
// в Бухгалерии 2.0 нет функции СообщенияПользователю в модуле ДлительныеОперации
Функция СообщенияПользователю(УдалятьПолученные = Ложь, ИдентификаторЗадания = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если ФоновоеЗадание <> Неопределено Тогда
			ВсеСообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(УдалятьПолученные);
		КонецЕсли;
	Иначе
		ВсеСообщения = ПолучитьСообщенияПользователю(УдалятьПолученные);
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого Сообщение Из ВсеСообщения Цикл
		Если УдалятьПолученные Тогда
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

#Область ЗаполнениеДокументов
Функция ПолучитьНомерДокБезПрефикса(ВыбДок) Экспорт
	
	Если НЕ(ЗначениеЗаполнено(ВыбДок)) Тогда
		Возврат "";	
	КонецЕсли;
	
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьНомерДокБезПрефикса");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьНомерДокБезПрефикса( ВыбДок );
	КонецЕсли;
	
	//БП 3.
	Если Метаданные.ОбщиеМодули.Найти("ПрефиксацияОбъектовКлиентСервер") <> Неопределено Тогда
		МодульРабота1 = ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
		Попытка
			Возврат МодульРабота1.НомерНаПечать(ВыбДок.Номер, Истина, Ложь);
		Исключение
			Возврат МодульРабота1.ПолучитьНомерНаПечать(ВыбДок.Номер, Истина, Ложь);
		КонецПопытки;
	ИначеЕсли Метаданные.ОбщиеМодули.Найти("ОбщегоНазначения") <> Неопределено Тогда
		МодульРабота1 = ОбщийМодуль("ОбщегоНазначения");
		Возврат МодульРабота1.ПолучитьНомерНаПечать(ВыбДок);
	Иначе
		кб99_ВСД.СообщитьИнфо("Для данной конфигурации 1С не удалось ПолучитьНомерДокБезПрефикса");		
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНомерАвто( ДокОснование ) Экспорт
	
	// Проверка переопределения функции в Общем модуле ВСД_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьНомерАвто");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьНомерАвто( ДокОснование );
	КонецЕсли;
	
	Попытка
		МетаданныеОбъекта = ДокОснование.Метаданные();
	Исключение 
	    Возврат "Не используется";
	КонецПопытки;
	
	Если МетаданныеОбъекта.Реквизиты.Найти("Транспорт") <> Неопределено Тогда
		//Это БП ПТФ 2.0
		НомерТС = ДокОснование.Транспорт.ГосНомерАвтомобиля;
		НомерТС = ?(ЗначениеЗаполнено(НомерТС),СокрЛП(НомерТС),"Не исп.");
	ИначеЕсли МетаданныеОбъекта.Реквизиты.Найти("РегистрационныйЗнакАвтомобиля") <> Неопределено Тогда
		//	БП 3
		НомерТС = ?(ЗначениеЗаполнено(ДокОснование.РегистрационныйЗнакАвтомобиля),СокрЛП(ДокОснование.РегистрационныйЗнакАвтомобиля),"Не исп.");
	Иначе	
		Попытка
		// Это УПП и УТ
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ 
			| ПараметрыМаршрутаСрезПоследних.Водитель, 
			| ПараметрыМаршрутаСрезПоследних.ЗаказПокупателя, 
			| ПараметрыМаршрутаСрезПоследних.НомерТС 
			|ИЗ 
			| РегистрСведений.ПараметрыМаршрута.СрезПоследних(, ЗаказПокупателя = &ТекЗаказ) КАК ПараметрыМаршрутаСрезПоследних";
		
			Запрос.УстановитьПараметр("ТекЗаказ", ДокОснование.Сделка);
			РезультатЗапроса = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				НомерТС = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерТС),ВыборкаДетальныеЗаписи.НомерТС,"Не уст.(Б/Н)");
			Иначе
				НомерТС = "Не исп.";
			КонецЕсли;
		Исключение //КРК - отстутствует регистр сведений ПараметрыМаршрута		
			НомерТС = "Не исп.";	
		КонецПопытки;
	КонецЕсли;
	
	Возврат НомерТС;
	
КонецФункции

Функция ЗаполнитьСвязанныеДокументы( ДокВСД ) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("ЗаполнитьСвязанныеДокументы");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ЗаполнитьСвязанныеДокументы( ДокВСД );
	КонецЕсли;

КонецФункции

// Работа с документами
Функция РассчитатьКоличествоДляВСД( ПараметрыОрганизации, СтрокаТЧДок, Продукция_Элемент = "") Экспорт
	
	// вызов переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("РассчитатьКоличествоДляВСД");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.РассчитатьКоличествоДляВСД( ПараметрыОрганизации, СтрокаТЧДок, Продукция_Элемент );
	КонецЕсли;
	
	Рез = 0;
	Коэфф = 0;
	Попытка
		//Пересчет ШТ в КГ
		Версия = Лев(Метаданные.Версия,2);		
		Если Метаданные.Имя = "УправлениеТорговлей" И Версия="11" Тогда 				
			Если СтрокаТЧДок.Номенклатура.ВесИспользовать Тогда
				Если СтрокаТЧДок.Номенклатура.ВесЗнаменатель>0 Тогда 
					Коэфф=СтрокаТЧДок.Номенклатура.ВесЧислитель/СтрокаТЧДок.Номенклатура.ВесЗнаменатель;
				Иначе
					Коэфф=0;
				КонецЕсли;
			КонецЕсли;
		Иначе //остальные считаем с учетом параметра [ПарамКоэффициентПересчетаКоличества]		
			
			КПересчета = ПараметрыОрганизации["ПарамКоэффициентПересчетаКоличества"]; 
			Попытка
				Коэфф = Число(КПересчета);
			Исключение
				Коэфф = 0;
			КонецПопытки;
			
			Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
				Коэфф = 1;
			ИначеЕсли Строка(Коэфф)	= КПересчета Тогда
				Коэфф = Число(КПересчета);
			Иначе //реквизитСтрокиДока.
				_Точка = Найти(КПересчета,".");
				ИмяРекв = Сред(КПересчета,1,_Точка-1);
				ИмяПодРекв = Сред(КПересчета,_Точка+1);
				Коэфф = СтрокаТЧДок[ИмяРекв];
				_Точка = Найти(ИмяПодРекв,".");
				Пока _Точка > 0 Цикл
					ИмяРекв = Сред(ИмяПодРекв,1,_Точка-1);
					ИмяПодРекв = Сред(ИмяПодРекв,_Точка+1);
					Коэфф = Коэфф[ИмяРекв];
					_Точка = Найти(ИмяПодРекв,".");
				КонецЦикла;
				Если НЕ ТипЗнч(Коэфф) = Тип("Число") Тогда
					Коэфф = Коэфф[ИмяПодРекв];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		кб99_ВСД.СообщитьИнфо("Указан неверный параметр [ПарамКоэффициентПересчетаКоличества]");
		кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());
		Рез = 0;
	КонецПопытки;
	
	Если Коэфф = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Коэфф пересчета "+КПересчета+" для "+СтрокаТЧДок.Номенклатура + " равен 0 - ставлю 1" );
		Коэфф = 1;
	КонецЕсли;
	
	Попытка
		Рез = СтрокаТЧДок[ ПараметрыОрганизации["НазваниеРеквизитаКоличество"] ]*Коэфф;
	Исключение
		кб99_ВСД.СообщитьИнфо("Указан неверный параметр [НазваниеРеквизитаКоличество] ");
		кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());
		Рез = 0;
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

Функция ВыгрузитьТч( Док, ПараметрыОрганизации="" ) Экспорт
	
	// вызов переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ВыгрузитьТч");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ВыгрузитьТч( Док, ПараметрыОрганизации );
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОрганизации) Тогда 
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Док.Организация );
	КонецЕсли;
	
	тзРез = Новый("ТаблицаЗначений");
	тзРез.Колонки.Добавить("Номенклатура");
	тзРез.Колонки.Добавить("Продукция_Элемент");
	тзРез.Колонки.Добавить("Количество");
	тзРез.Колонки.Добавить("Упаковки");
	тзРез.Колонки.Добавить("СерияНоменклатуры");
	тзРез.Колонки.Добавить("ТермУсловияПеревозки");
	тзРез.Колонки.Добавить("Контрагент");
	
	Для Каждого стрДок Из док.Товары Цикл
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", док.Метаданные()) Тогда 			
			Контрагент = док.Контрагент;
		Иначе			
			Контрагент = Неопределено;
		КонецЕсли;
		ВСДПродукцияЭлемент = кб99_ВСД.Продукция_Элемент_ПолучитьПоНоменклатуре(стрДок.Номенклатура, Контрагент);

		Если (ВСДПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и НЕ( ПараметрыОрганизации["ПропускатьПустыеСвойства"] ) Тогда
			кб99_ВСД.СообщитьИнфо("["+стрДок.Номенклатура+"] -> не указан ВСД_Продукция_Элемент");
		ИначеЕсли (ВСДПродукцияЭлемент=Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и ( ПараметрыОрганизации["ПропускатьПустыеСвойства"] ) Тогда
			Продолжить;
		КонецЕсли;
		СтрТЧ = тзРез.Добавить();
		СтрТЧ.Контрагент = Контрагент;
		СтрТЧ.Номенклатура = стрДок.Номенклатура;
		СтрТЧ.Продукция_Элемент = ВСДПродукцияЭлемент;
		СтрТЧ.Количество = РассчитатьКоличествоДляВСД(ПараметрыОрганизации, стрДок, ВСДПродукцияЭлемент);
		
		Если ПараметрыОрганизации["ПарамИспользоватьСерииПродукции"] Тогда
			Попытка СтрТЧ.СерияНоменклатуры = стрДок.СерияНоменклатуры; Исключение КонецПопытки; //преобразовать дату в строку
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВСДПродукцияЭлемент.ТермическиеУсловияПеревозки) Тогда
			ТермУсловияПеревозки = ВСДПродукцияЭлемент.ТермическиеУсловияПеревозки;
		Иначе
			ТермУсловияПеревозки =  ПараметрыОрганизации["ТермическиеУсловияПеревозки"];
		КонецЕсли;
		СтрТЧ.ТермУсловияПеревозки = ТермУсловияПеревозки;
		Попытка
			Если ЗначениеЗаполнено(стрДок[ ПараметрыОрганизации["НазваниеРеквизитаКоличествоМест"] ]) Тогда
				СтрТЧ.Упаковки = стрДок[ ПараметрыОрганизации["НазваниеРеквизитаКоличествоМест"] ];
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЦикла;
	
	Возврат тзРез;
	
КонецФункции

Функция ПолучитьАртикулНоменклатуры( ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка)
	
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьАртикулНоменклатуры");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьАртикулНоменклатуры( ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка );
	КонецЕсли;
	
	Ответ = НоваяСтрока.Продукция_Элемент.Артикул;
	Возврат Ответ;
	
КонецФункции

Процедура ЗаполнитьРеквизитыСтрокиВСД( ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка ) Экспорт
	
	// вызов переопределения	
	ПереопределенныйМодуль = ФункцияПереопределена("ЗаполнитьРеквизитыСтрокиВСД");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		ПереопределенныйМодуль.ЗаполнитьРеквизитыСтрокиВСД( ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка );
		Возврат;
	КонецЕсли;
	
	Попытка
		НоваяСтрока.Продукция 				= НоваяСтрока.Продукция_Элемент.Продукция;
		НоваяСтрока.ВидПродукции 			= НоваяСтрока.Продукция_Элемент.ВидПродукции;
		НоваяСтрока.НаименованиеПродукции 	= НоваяСтрока.Продукция_Элемент.Наименование;
	Исключение КонецПопытки;
	
	Попытка НоваяСтрока.ВидПроисхожденияНеПищевойПродукции	= НоваяСтрока.Продукция_Элемент.ВидПроисхожденияНеПищевойПродукции Исключение КонецПопытки;
	
	Попытка 
		НоваяСтрока.РезультатыИсследований	= НоваяСтрока.Партия.vetDocument.РезультатыИсследований;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.РезультатыИсследований) Тогда
			НоваяСтрока.РезультатыИсследований = ПараметрыОрганизации["ВСД_РезультатыИсследований"];
		КонецЕсли;	
	Исключение КонецПопытки;
	
	Попытка НоваяСтрока.GTIN = НоваяСтрока.Продукция_Элемент.GTIN; Исключение КонецПопытки;
	Попытка НоваяСтрока.Артикул	= ПолучитьАртикулНоменклатуры( ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка) Исключение КонецПопытки;
	Попытка НоваяСтрока.КлючСтроки	= Новый УникальныйИдентификатор() Исключение КонецПопытки;
	
	Попытка
		НоваяСтрока.Цель 					= НоваяСтрока.Продукция_Элемент.ВидПродукции.Цель;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Цель) Тогда 
			НоваяСтрока.Цель = ПараметрыОрганизации["ВСДЦель"];
		КонецЕсли;
	Исключение КонецПопытки;
	
	Если докСсылка.Метаданные().ТабличныеЧасти.Найти("УровниУпаковки") <> Неопределено Тогда
		Если НЕ(ЗначениеЗаполнено( ПараметрыОрганизации["ПарамНомерУровняУпаковкиДляВСД"] )) или НЕ(ЗначениеЗаполнено( ПараметрыОрганизации["ПарамФормаУпаковкиДляВСД"])) Тогда
			Возврат;	
		КонецЕсли;
		// Упаковка на уровнях
		Попытка
			Если ЗначениеЗаполнено(СтрокаОснования.Упаковки) Тогда
				Если Цел(СтрокаОснования.Упаковки/СтрокаОснования.Количество*НоваяСтрока.Количество) = 0 Тогда
					кб99_ВСД.СообщитьИнфо("Нулевое кол-во упаковки у "+СтрокаОснования.Продукция_Элемент+" в "+ДокСсылка);	
				Иначе
					СтрокаУпак = докСсылка.УровниУпаковки.Добавить(); 
					СтрокаУпак.СтрокаПродукции = НоваяСтрока.КлючСтроки;
					СтрокаУпак.Количество = Цел(СтрокаОснования.Упаковки/СтрокаОснования.Количество*НоваяСтрока.Количество); //Пропорционально Распределенному количеству
					СтрокаУпак.НомерУровня = ПараметрыОрганизации["ПарамНомерУровняУпаковкиДляВСД"];
					СтрокаУпак.ФормаУпаковки = ПараметрыОрганизации["ПарамФормаУпаковкиДляВСД"];
					//Маркировки
					//СтрокаМарк = докСсылка.Маркировка.Добавить();
					//СтрокаМарк.Строкапродукции = СтрокаУпак.СтрокаПродукции;
					//СтрокаМарк.НомерУровня = СтрокаУпак.НомерУровня;
					//СтрокаМарк.Класс = Перечисления.ВСД_Маркировка.BN;
					//СтрокаМарк.Маркировка = "ТЕСТ";  //ПолучитьМаркировку( ТЗПартий.Номенклатура.ОсновнаяЕдиница, Контрагент);
				КонецЕсли;
			КонецЕсли;
		Исключение 
			кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ТЧ документа ВСД по Входящим данным , вызывается из ЗаполнитьНаосновании ВСД2_Транзакция
// ДанныеЗаполнения = Документ основание, берем из него ТЧ для расчета Кол-ва и Продэлементы для фильтра партий,
// также данные для заполнения Маркировок
// Добавлен реквизит - тзЭлементыОснования = ТЧ докоснования, для подбора Партий без Документа Основания
Функция ЗаполнитьТабЧастьВСД( ПараметрыОрганизации, ДанныеЗаполнения = Неопределено, докСсылка, тзАктуальныхПартий = Неопределено, ВыбТермУсловиеПеревозки = Неопределено, Контрагент = Неопределено) Экспорт

	// вызов переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ЗаполнитьТабЧастьВСД");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ЗаполнитьТабЧастьВСД( ПараметрыОрганизации, ДанныеЗаполнения, докСсылка, тзАктуальныхПартий, ВыбТермУсловиеПеревозки );
	КонецЕсли;

	Если ЗначениеЗаполнено( ДанныеЗаполнения ) Тогда
		тзЭлементыОснования = ВыгрузитьТЧ(ДанныеЗаполнения.Ссылка, ПараметрыОрганизации );
		Если ЗначениеЗаполнено(ВыбТермУсловиеПеревозки) Тогда
			Отбор = Новый Структура("ТермУсловияПеревозки", ВыбТермУсловиеПеревозки);
			тзЭлементыКсписанию = тзЭлементыОснования.Скопировать(Отбор);
		Иначе
			тзЭлементыКсписанию = тзЭлементыОснования.Скопировать();
		КонецЕсли;
 	КонецЕсли;
	
	Если докСсылка.Получатель_ХозСубъект.ПерсональныеПараметрыСписанияПартий Тогда 
		ПолеСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамКолонкаСортировкиПартииСписания;
		ЗнакСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамЗнакСортировкиУбывание;
	Иначе 
		ПолеСортировкиПокупателя = Неопределено;
		ЗнакСортировкиПокупателя = Неопределено;
	КонецЕсли;
	ПартииКСписанию = кб99_ВСД.тзПартииСписанияПоТзПродукция_Элемент( ПараметрыОрганизации, тзЭлементыКсписанию, тзАктуальныхПартий, ПолеСортировкиПокупателя, ЗнакСортировкиПокупателя, Контрагент);
	
	Если (ПартииКСписанию.Количество() = 0) и НЕ(ПараметрыОрганизации["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"]) Тогда
		кб99_ВСД.СообщитьИнфо("Нет актуальных партий для создания ВСД по "+ ?(ДанныеЗаполнения = Неопределено,"Переданным данным",ДанныеЗаполнения.Ссылка));
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрокаТовары Из ПартииКСписанию Цикл
		НоваяСтрока = докСсылка.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
		ЗаполнитьРеквизитыСтрокиВСД(ПараметрыОрганизации, НоваяСтрока, ТекСтрокаТовары, докСсылка);
	КонецЦикла;
	
КонецФункции

// Заполняет ТЧ документа ВСД по Входящим данным , вызывается из ЗаполнитьНаосновании ВСД2_Транзакция
// ДанныеЗаполнения = Документ основание, берем из него ТЧ для расчета Кол-ва и Продэлементы для фильтра партий,
// также данные для заполнения Маркировок
// тзЭлементыОснования = входящая ТаблицаЗначений :
// тзЭлементыОснования = Новый("ТаблицаЗначений");
// тзЭлементыОснования.Колонки.Добавить("Номенклатура");
// тзЭлементыОснования.Колонки.Добавить("Продукция_Элемент");
// тзЭлементыОснования.Колонки.Добавить("Количество");
// тзЭлементыОснования.Колонки.Добавить("Упаковки");
Функция ЗаполнитьТабЧастьВСДпоТЗ( ПараметрыОрганизации, тзЭлементыОснования, докСсылка, тзАктуальныхПартий = Неопределено, ВыбТермУсловиеПеревозки = Неопределено) Экспорт

	// вызов переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ЗаполнитьТабЧастьВСДпоТЗ");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ЗаполнитьТабЧастьВСДпоТЗ( ПараметрыОрганизации, тзЭлементыОснования, докСсылка, тзАктуальныхПартий );
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбТермУсловиеПеревозки) Тогда
		Отбор = Новый Структура("ТермУсловияПеревозки", ВыбТермУсловиеПеревозки);
		тзЭлементыКсписанию = тзЭлементыОснования.Скопировать(Отбор);
	Иначе
		тзЭлементыКсписанию = тзЭлементыОснования.Скопировать();
	КонецЕсли;
 
	Если докСсылка.Получатель_ХозСубъект.ПерсональныеПараметрыСписанияПартий Тогда 
		ПолеСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамКолонкаСортировкиПартииСписания;
		ЗнакСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамЗнакСортировкиУбывание;
	Иначе 
		ПолеСортировкиПокупателя = Неопределено;
		ЗнакСортировкиПокупателя = Неопределено;
	КонецЕсли;
	ПартииКСписанию = кб99_ВСД.тзПартииСписанияПоТзПродукция_Элемент( ПараметрыОрганизации, тзЭлементыКсписанию, тзАктуальныхПартий, ПолеСортировкиПокупателя, ЗнакСортировкиПокупателя  );
	
	Если (ПартииКСписанию.Количество() = 0) и НЕ(ПараметрыОрганизации["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"]) Тогда
		кб99_ВСД.СообщитьИнфо("Нет актуальных партий для создания ВСД ", тзЭлементыОснования );
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрокаТовары Из ПартииКСписанию Цикл
		НоваяСтрока = докСсылка.Товары.Добавить();			
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
		ЗаполнитьРеквизитыСтрокиВСД(ПараметрыОрганизации, НоваяСтрока, ТекСтрокаТовары, докСсылка);
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьКорректировочныйВСД(ПараметрыОрганизации, ДокументОснование, Документ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	кб99_ВСД2.Продукция_Элемент КАК Продукция_Элемент,
	|	кб99_ВСД2.Продукция КАК Продукция,
	|	кб99_ВСД2.ВидПродукции КАК ВидПродукции,
	|	кб99_ВСД2.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	кб99_ВСД2.Количество КАК Количество,
	|	кб99_ВСД2.UUID КАК UUID_ВСД,
	|	кб99_ВСД2.GTIN КАК GTIN,
	|	кб99_ВСД2.Артикул КАК Артикул,
	|	кб99_ВСД2.РезультатыИсследований КАК РезультатыИсследований,
	|	кб99_ВСД2.Цель КАК Цель
	|ИЗ
	|	Справочник.кб99_ВСД2 КАК кб99_ВСД2
	|ГДЕ
	|	кб99_ВСД2.ДокументОснование = &ДокументОснование
	|	И кб99_ВСД2.СтатусВСД = &СтатусВСД";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("СтатусВСД", Перечисления.кб99_СтатусВСД.WITHDRAWN);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		стрТовары = Документ.Товары.Добавить();
		стрТовары.КлючСтроки = Новый УникальныйИдентификатор;
		ЗаполнитьЗначенияСвойств(стрТовары, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределениеФункций

Функция ФункцияПереопределена( ИмяФункции ) Экспорт
 
 	// Проверка переопределения функции в Общем модуле ВСД_Переопределения
 	Модуль  = ОбщийМодуль("кб99_ВСД_Переопределения");
	Если Модуль = Неопределено Тогда
		Возврат Неопределено;
 	КонецЕсли;  
	
	Если Модуль.НайтиФункцию( ИмяФункции ) Тогда 
		Возврат Модуль;
	Иначе
		// переопределения нет
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ЗаполнениеТаблицыОтгрузок
// ================ Заполнение табличной части ============================

&НаСервере
Функция ПолучитьТзРеализаций( ПараметрыФункции ) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьТзРеализаций");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.ПолучитьТзРеализаций( ПараметрыФункции );
	КонецЕсли;	
	
	// ЖД добавлена фильтрация Реализации по Складу отправителю (=текущая ПлощадкаОтправителя.Склад)
    // м.б. при незаполненном реквизите Склад у Площадки не фильтровать по складу ????
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ДатаНачала", ПараметрыФункции["ДатаНачала"] );
    Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыФункции["ДатаОкончания"] );

	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыФункции["Организации"]);
	
	Если ПараметрыФункции["ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя"] Тогда
		Попытка
			Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", ПараметрыФункции["ПлощадкаОтправителя"].Склад );
			Если (НЕ(ЗначениеЗаполнено( ПараметрыФункции["ПлощадкаОтправителя"].Склад )) и ( ПараметрыФункции["ПлощадкаОтправителя"].Склады.количество()=0)) Тогда
				кб99_ВСД.СообщитьИнфо("Не определен Склад по Площадке "+ПараметрыФункции["ПлощадкаОтправителя"]+" привяжите склад к площадке либо отключите параметр [Фильтровать Реализацию По Складу Площадки Отправителя]!");
			КонецЕсли;
			если ПараметрыФункции["ПлощадкаОтправителя"].Склады.количество()>0 тогда
				Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", ПараметрыФункции["ПлощадкаОтправителя"].Склады.выгрузить(,"Склад"));
			конецесли;
		Исключение
			Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", "");
			кб99_ВСД.СообщитьИнфо("Не определен Склад по Площадке для фильтрации документов!");
		КонецПопытки;
	КонецЕсли;

    Попытка Запрос.УстановитьПараметр("ВыбМаршрут", ПараметрыФункции["Маршрут"] ); Исключение КонецПопытки;

    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВСД2_транзакция.Ссылка КАК ВСД,
	|	ВСД2_транзакция.ДокументОснование КАК ДокОснование
	|ПОМЕСТИТЬ втВСД
	|ИЗ
	|	Документ.ВСД2_транзакция КАК ВСД2_транзакция
	|ГДЕ
	|	НЕ ВСД2_транзакция.ПометкаУдаления
	|	И НЕ ВСД2_транзакция.ЭтоПеремещениеОтПоставщика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВСД_ХозСубъект.Ссылка КАК ХС,
	|	ВСД_ХозСубъект.Контрагент КАК КонтрагентХС,
	|	ВСД_Площадка.Ссылка КАК ВСД_Площадка,
	|	ВСД_Площадка.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ втПлощадки
	|ИЗ
	|	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка
	|		ПО (ВСД_Площадка.ХозСубъект = ВСД_ХозСубъект.Ссылка)
	|			И (НЕ ВСД_Площадка.ПометкаУдаления)
	|ГДЕ
	|	НЕ ВСД_ХозСубъект.ПометкаУдаления
	|	И НЕ ВСД_ХозСубъект.Контрагент ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КонтрагентХС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент,
	|	ВСД_Соответсвия.Владелец КАК Номенклатура
	|ПОМЕСТИТЬ втСоответствия
	|ИЗ
	|	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	|ГДЕ
	|	НЕ ВСД_Соответсвия.ПродукцияЭлемент ЕСТЬ NULL
	|	И НЕ ВСД_Соответсвия.ПометкаУдаления
	|	И ВСД_Соответсвия.ОсновноеСоответствие
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТовары.Ссылка КАК Ссылка,
	|	РеализацияТовары.Номенклатура КАК Номенклатура,
	|	(РеализацияТовары.@Количество@ * @КоэффициентПересчета@) КАК Количество,
	|	РеализацияТовары.@КоличествоМест@ КАК КоличествоМест,
	|	РеализацияТовары.Сумма КАК Сумма
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТовары
	|ГДЕ
	|	РеализацияТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РеализацияТовары.Ссылка.Проведен
	|	И РеализацияТовары.Сумма > 0
	|	И РеализацияТовары.Ссылка.Организация В ИЕРАРХИИ(&СписокОрганизаций)
    |
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Ссылка КАК Ссылка,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Количество КАК Количество,
	|	втТовары.КоличествоМест КАК КоличествоМест,
	|	втТовары.Сумма КАК Сумма,
	|	втСоответствия.ПродукцияЭлемент КАК ПродукцияЭлемент
	|ПОМЕСТИТЬ втРеализацияТоваровУслугТовары
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСоответствия КАК втСоответствия
	|		ПО втТовары.Номенклатура = втСоответствия.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Док,
	|	@Грузополучатель@ КАК Грузополучатель,
	|	РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	СУММА(РеализацияТоваровУслугТовары.@Количество@) КАК Количество,
	|	СУММА(РеализацияТоваровУслугТовары.@КоличествоМест@) КАК КоличествоМест,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|	втПлощадки.ВСД_Площадка КАК Площадка,
	|	втВСД.ВСД КАК ВСД,
	|   @Маршрут@
	|	ВСД_ХозСубъект.Ссылка КАК ХозСубъект
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВСД КАК втВСД
	|		ПО РеализацияТоваровУслуг.Ссылка = втВСД.ДокОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадки КАК втПлощадки
	|		ПО  @Грузополучатель_Связи@
	|			И РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = втПлощадки.КонтрагентХС
	|			И (НЕ РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент ЕСТЬ NULL)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|		ПО РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ВСД_ХозСубъект.Контрагент
	|			И (НЕ ВСД_ХозСубъект.ПометкаУдаления)
	|		@Отбор_по_НоменклатураСоответствия@
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслугТовары.Сумма > 0
	|	И РеализацияТоваровУслуг.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|    @Отбор_по_Складам@
	|    @Маршрут_Условие@
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка,
	|    @Грузополучатель_Группировка@
	|	втПлощадки.ВСД_Площадка,
	|	втВСД.ВСД,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	ВСД_ХозСубъект.Ссылка,
	|	РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	
	// @Отбор_по_НоменклатураСоответствия@
	Если ПараметрыФункции["ПропускатьПустыеСвойства"] Тогда
		ТекстОтбор = "
					  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеализацияТоваровУслугТовары КАК РеализацияТоваровУслугТовары
        			  |		ПО РеализацияТоваровУслуг.Ссылка = РеализацияТоваровУслугТовары.Ссылка";
    Иначе
		ТекстОтбор = "
					  |     ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
					  |    	ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)";	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_НоменклатураСоответствия@", ТекстОтбор );
	
    Если ПараметрыФункции["РеквизитГрузополучатель"] = 0 Тогда
        // Контрагент
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "РеализацияТоваровУслуг.Контрагент ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (РеализацияТоваровУслуг.Контрагент = втПлощадки.Контрагент)  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", "РеализацияТоваровУслуг.Контрагент,  ");        
    ИначеЕсли ПараметрыФункции["РеквизитГрузополучатель"] = 1 Тогда
		// Адрес доставки
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) = втПлощадки.Контрагент) ") ;
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", " ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100), ");
	Иначе
        // Партнер
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "РеализацияТоваровУслуг.Партнер ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (РеализацияТоваровУслуг.Партнер = втПлощадки.Контрагент)  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", "РеализацияТоваровУслуг.Партнер,  "); 
    КонецЕсли;

    Если ПараметрыФункции["ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя"] Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_Складам@", " И РеализацияТоваровУслуг.Склад В ИЕРАРХИИ(&ПлощадкаОтправителяСклад) ");        
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_Складам@", "  ");        
    КонецЕсли;

    Если ЗначениеЗаполнено( ПараметрыФункции["Маршрут"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут@", "РеализацияТоваровУслуг.Маршрут КАК Маршрут,");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут_Условие@", " И РеализацияТоваровУслуг.Маршрут В ИЕРАРХИИ(&ВыбМаршрут) ");        
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут@", " ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут_Условие@", " ");        		
	КонецЕсли;    

	// Пересчет ШТ в КГ
	КПересчета = ПараметрыФункции["ПарамКоэффициентПересчетаКоличества"];
	Коэфф = 0;
	Попытка
		Коэфф = Число(КПересчета);
	Исключение
		Коэфф = 0;
	КонецПопытки;
	Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета@","1");
	ИначеЕсли Строка(Коэфф)    = КПересчета Тогда  // Это число
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета@",КПересчета);
	Иначе 			
		// Не работает, если коэфф не целочисленный
		Запрос.Текст = СтрЗаменить( Запрос.Текст, "@КоэффициентПересчета@", "РеализацияТовары."+КПересчета );	
	КонецЕсли;
	
    Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличество"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", ПараметрыФункции["НазваниеРеквизитаКоличество"]);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", "Количество");
	КонецЕсли;
    Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличествоМест"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", ПараметрыФункции["НазваниеРеквизитаКоличествоМест"]);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", "Количество");
	КонецЕсли;

    Попытка
        Рез = Запрос.Выполнить();
    Исключение
        Рез = Неопределено;
        кб99_ВСД.СообщитьИнфо("Указан неверный параметр НазваниеРеквизитаКоличество или ПарамКоэффициентПересчетаКоличества "+Описаниеошибки());
    КонецПопытки;

    Возврат Рез;
	
КонецФункции

&НаСервере
Функция СформироватьЗапросПеремещения( ПараметрыФункции ) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("СформироватьЗапросПеремещения");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.СформироватьЗапросПеремещения( ПараметрыФункции );
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",					НачалоДня( ПараметрыФункции["ДатаНачала"] ) );
	Запрос.УстановитьПараметр("ДатаОкончания",				КонецДня( ПараметрыФункции["ДатаОкончания"] ));
	Запрос.УстановитьПараметр("СписокОрганизаций",			ПараметрыФункции["Организации"] );
	
	Если ПараметрыФункции["ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя"] Тогда
		Попытка
			Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", ПараметрыФункции["ПлощадкаОтправителя"].Склад );
			Если (НЕ(ЗначениеЗаполнено( ПараметрыФункции["ПлощадкаОтправителя"].Склад )) и ( ПараметрыФункции["ПлощадкаОтправителя"].Склады.количество()=0)) Тогда
				кб99_ВСД.СообщитьИнфо("Не определен Склад по Площадке "+ПараметрыФункции["ПлощадкаОтправителя"]+" привяжите склад к площадке либо отключите параметр [Фильтровать Реализацию По Складу Площадки Отправителя]!");
			КонецЕсли;
			если ПараметрыФункции["ПлощадкаОтправителя"].Склады.количество()>0 тогда
				Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", ПараметрыФункции["ПлощадкаОтправителя"].Склады.выгрузить(,"Склад"));
			конецесли;
		Исключение
			Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", "");
			кб99_ВСД.СообщитьИнфо("Не определен Склад по Площадке для фильтрации документов!");
		КонецПопытки;
	КонецЕсли;

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТовары.Ссылка КАК Ссылка,
	|	ПеремещениеТовары.Номенклатура КАК Номенклатура,
	|	ПеремещениеТовары.@Количество@ * @КоэффициентПересчета@ КАК Количество,
	|	ПеремещениеТовары.КоличествоМест КАК КоличествоМест
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТовары
	|ГДЕ
	|	ПеремещениеТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПеремещениеТовары.Ссылка.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|	И ПеремещениеТовары.Ссылка.СкладОтправитель = &ПлощадкаОтправителяСклад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВСД_Соответсвия.Владелец КАК Номенклатура,
	|	ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент
	|ПОМЕСТИТЬ втСоответствия
	|ИЗ
	|	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	|ГДЕ
	|	НЕ ВСД_Соответсвия.ПродукцияЭлемент ЕСТЬ NULL
	|	И ВСД_Соответсвия.ОсновноеСоответствие
	|	И НЕ ВСД_Соответсвия.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Ссылка КАК Ссылка,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Количество КАК Количество,
	|	втСоответствия.ПродукцияЭлемент КАК ПродукцияЭлемент,
	|	втТовары.КоличествоМест КАК КоличествоМест
	|ПОМЕСТИТЬ ПеремещениеТоваровТовары
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСоответствия КАК втСоответствия
	|		ПО втТовары.Номенклатура = втСоответствия.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Док,
	|	ПеремещениеТоваров.СкладПолучатель КАК Грузополучатель,
	|	ПеремещениеТоваров.Номер КАК Номер,
	|	ПеремещениеТоваров.Дата КАК Дата,
	|	СУММА(ПеремещениеТоваровТовары.@Количество@) КАК Количество,
	|	СУММА(ПеремещениеТоваровТовары.@КоличествоМест@) КАК КоличествоМест,
	|	ВСД_Площадка.Ссылка КАК Площадка,
	|	ВСД_Площадка.ХозСубъект КАК ХозСубъект,
	|	ВСД2_транзакция.Ссылка КАК ВСД
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД2_транзакция КАК ВСД2_транзакция
	|		ПО ПеремещениеТоваров.Ссылка = ВСД2_транзакция.ДокументОснование
	|			И (НЕ ВСД2_транзакция.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка
	|		ПО ПеремещениеТоваров.СкладПолучатель = ВСД_Площадка.Склад
	|			И (НЕ ВСД_Площадка.ПометкаУдаления)
	|    @Отбор_по_НоменклатураСоответствия@
	|ГДЕ
	|	ПеремещениеТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПеремещениеТоваров.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|	И ПеремещениеТоваров.СкладОтправитель = &ПлощадкаОтправителяСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваров.Ссылка,
	|	ВСД_Площадка.Ссылка,
	|	ВСД_Площадка.ХозСубъект,
	|	ВСД2_транзакция.Ссылка,
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.СкладПолучатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	
	Если ПараметрыФункции["ПропускатьПустыеСвойства"] Тогда
		ТекстОтбор = "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПеремещениеТоваровТовары КАК ПеремещениеТоваровТовары
		|		ПО ПеремещениеТоваров.Ссылка = ПеремещениеТоваровТовары.Ссылка ";
	Иначе
		ТекстОтбор = "
		|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|       ПО (ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка) ";	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_НоменклатураСоответствия@", ТекстОтбор );
	
    Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличество"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", ПараметрыФункции["НазваниеРеквизитаКоличество"]);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", "Количество");
	КонецЕсли;
	
	Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличествоМест"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", ПараметрыФункции["НазваниеРеквизитаКоличествоМест"]);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", "Количество");
	КонецЕсли;
	// Пересчет ШТ в КГ
	КПересчета = ПараметрыФункции["ПарамКоэффициентПересчетаКоличества"];
	Коэфф = 0;
	Попытка
		Коэфф = Число(КПересчета);
	Исключение
		Коэфф = 0;
	КонецПопытки;
	Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "@КоэффициентПересчета@", "1");
	ИначеЕсли Строка(Коэфф) = КПересчета Тогда  // Это число
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "@КоэффициентПересчета@", КПересчета);
	Иначе 			
		// Не работает, если коэфф не целочисленный
		Запрос.Текст = СтрЗаменить( Запрос.Текст, "@КоэффициентПересчета@", "ПеремещениеТовары." + КПересчета );	
	КонецЕсли;
		
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Функция СформироватьЗапросЗаказы( ПараметрыФункции ) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("СформироватьЗапросПеремещения");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.СформироватьЗапросПеремещения( ПараметрыФункции );
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",					НачалоДня( ПараметрыФункции["ДатаНачала"] ) );
	Запрос.УстановитьПараметр("ДатаОкончания",				КонецДня( ПараметрыФункции["ДатаОкончания"] ));
	Запрос.УстановитьПараметр("СписокОрганизаций",			ПараметрыФункции["Организации"] );
		
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Док,
	|    @Грузополучатель@ КАК Грузополучатель,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	СУММА(ЗаказПокупателяТовары.@Количество@) КАК Количество,
	|	ВСД_ХозСубъект.Ссылка КАК ХозСубъект,
	|	ЗапросПлощадки.ВСД_Площадка КАК Площадка,
	|	СУММА(ЗаказПокупателяТовары.Сумма) КАК Сумма,
	|	ЗаказПокупателя.Контрагент.ГоловнойКонтрагент КАК Контрагент,
	|	СУММА(ЗаказПокупателяТовары.@КоличествоМест@) КАК КоличествоМест
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВСД_ХозСубъект.Ссылка КАК ХС,
	|			ВСД_ХозСубъект.Контрагент КАК КонтрагентХС,
	|			ВСД_Площадка.Ссылка КАК ВСД_Площадка,
	|			ВСД_Площадка.Контрагент КАК Контрагент
	|		ИЗ
	|			Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка
	|				ПО (ВСД_Площадка.ХозСубъект = ВСД_ХозСубъект.Ссылка)
	|					И (ВСД_Площадка.ПометкаУдаления = ЛОЖЬ)
	|		ГДЕ
	|			ВСД_ХозСубъект.ПометкаУдаления = ЛОЖЬ
	|			И НЕ ВСД_ХозСубъект.Контрагент ЕСТЬ NULL) КАК ЗапросПлощадки
	|		ПО @Грузополучатель_Связи@
	|			И ЗаказПокупателя.Контрагент.ГоловнойКонтрагент = ЗапросПлощадки.КонтрагентХС
	|			И (НЕ ЗаказПокупателя.Контрагент.ГоловнойКонтрагент ЕСТЬ NULL)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|		ПО ЗаказПокупателя.Контрагент.ГоловнойКонтрагент = ВСД_ХозСубъект.Контрагент
	|			И (ВСД_ХозСубъект.ПометкаУдаления = ЛОЖЬ)
	|		@Отбор_по_НоменклатураСоответствия@
	|ГДЕ
	|	ЗаказПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаказПокупателя.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|	И ЗаказПокупателя.Проведен = ИСТИНА
	|	И ЗаказПокупателя.Товары.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателя.Ссылка,
	|	@Грузополучатель_Группировка@
	|	ЗапросПлощадки.ВСД_Площадка,
	|	ВСД_ХозСубъект.Ссылка,
	|	ЗаказПокупателя.Номер,
	|	ЗаказПокупателя.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
			
	Если ПараметрыФункции["ПропускатьПустыеСвойства"] Тогда
		ТекстОтбор = "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|	(ВЫБРАТЬ
				|	ДокСтроки1.Ссылка КАК Ссылка,
		        |	ДокСтроки1.Номенклатура КАК Номенклатура,
		        |	ЗапросТовары.ПродукцияЭлемент КАК ПродукцияЭлемент,				
		        |	(ДокСтроки1.@Количество@ * @КоэффициентПересчета@ ) КАК @Количество@,
				|	ДокСтроки1.Сумма КАК Сумма
		        |ИЗ
		        |	Документ.ЗаказПокупателя.Товары КАК ДокСтроки1
		        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |			Спр1.ПродукцияЭлемент КАК ПродукцияЭлемент,
		        |			Спр1.Владелец КАК Номенклатура
		        |		ИЗ
		        |			Справочник.ВСД_Соответсвия КАК Спр1
		        |		ГДЕ
		        |			НЕ Спр1.ПродукцияЭлемент ЕСТЬ NULL
				|			И Спр1.ПометкаУдаления = ЛОЖЬ
				|		) КАК ЗапросТовары
		        |		ПО (ЗапросТовары.Номенклатура = ДокСтроки1.Номенклатура) 				
				|) КАК ЗаказПокупателяТовары
			|ПО (ЗаказПокупателяТовары.Ссылка = ЗаказПокупателя.Ссылка) ";
	Иначе
		ТекстОтбор = "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ПО (ЗаказПокупателя.Ссылка = ЗаказПокупателяТовары.Ссылка)";
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_НоменклатураСоответствия@", ТекстОтбор );
	
	Если ПараметрыФункции["РеквизитГрузополучатель"] = 0 Тогда
        // Контрагент
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", " ЗаказПокупателя.Контрагент ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (ЗаказПокупателя.Контрагент = ЗапросПлощадки.Контрагент)  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", " ЗаказПокупателя.Контрагент,  ");        
    Иначе // Грузополучатель
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "ПОДСТРОКА(ЗаказПокупателя.АдресДоставки, 1, 100) ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (ПОДСТРОКА(ЗаказПокупателя.АдресДоставки, 1, 100) = ЗапросПлощадки.Контрагент) ") ;
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", " ПОДСТРОКА(ЗаказПокупателя.АдресДоставки, 1, 100), ");
	КонецЕсли;
	
	КПересчета = ПараметрыФункции["ПарамКоэффициентПересчетаКоличества"];
	Коэфф = 0;
	Попытка
		Коэфф = Число(КПересчета);
	Исключение
		Коэфф = 0;
	КонецПопытки;
	Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета@","1");
	ИначеЕсли Строка(Коэфф)    = КПересчета Тогда  // Это число
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета@",КПересчета);
	Иначе 			
		// Не работает, если коэфф не целочисленный
		Запрос.Текст = СтрЗаменить( Запрос.Текст, "@КоэффициентПересчета@", "ДокСтроки1."+КПересчета );	
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличество"] ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", ПараметрыФункции["НазваниеРеквизитаКоличество"]);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", "Количество");
	КонецЕсли;
	Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличествоМест"] ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", ПараметрыФункции["НазваниеРеквизитаКоличествоМест"]);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", "Количество");
	КонецЕсли;

    Попытка
        Рез = Запрос.Выполнить();
    Исключение
        Рез = Неопределено;
        кб99_ВСД.СообщитьИнфо("Указан неверный параметр НазваниеРеквизитаКоличество или ПарамКоэффициентПересчетаКоличества "+Описаниеошибки());
    КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

#КонецОбласти 

#Область Формы

Процедура ОбновитьНадписи(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос = кб99_ВСД_Общий.НайтиПоследнийЗапрос( Объект.Ссылка );
	Форма.ApplicationID = Запрос.ApplicationID;
	Форма.СтатусЗапроса = Запрос.СтатусЗапроса;
	
	Если ЗначениеЗаполнено( Запрос.Ошибки ) Тогда
		Форма.Элементы.Ошибки.Видимость = Истина;
		Форма.Ошибки = Запрос.Ошибки;
	Иначе
		Форма.Элементы.Ошибки.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма) Экспорт
 
 Форма.УсловноеОформление.Элементы.Очистить();
 
 Элемент = Форма.УсловноеОформление.Элементы.Добавить();

 ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
 ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.Статус.Имя);

 ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
 ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
 ОтборЭлемента.ПравоеЗначение = "COMPLETED";
 ОтборЭлемента.Использование = Истина;
 
 Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0, 150, 70));
 
 //
 Элемент = Форма.УсловноеОформление.Элементы.Добавить();

 ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
 ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.Статус.Имя);

 ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
 ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
 ОтборЭлемента.ПравоеЗначение = "REJECTED";

 Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));
 
 //
 Элемент = Форма.УсловноеОформление.Элементы.Добавить();

 ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
 ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.Статус.Имя);
 
 ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
 ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
 
 ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
 ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
 ОтборЭлемента.ПравоеЗначение = "IN_PROCESS";

 ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
 ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
 ОтборЭлемента.ПравоеЗначение = "ACCEPTED";

 Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 225, 0));

 КонецПроцедуры

#КонецОбласти

Функция НайтиApplicationID( Ссылка ) Экспорт 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", Ссылка);
	Обращение = РегистрыСведений.кб99_Запросы.ПолучитьПоследнее(ТекущаяДата(), Отбор );
	
	Возврат Обращение.ApplicationID;
	
КонецФункции

Функция НайтиПоследнийЗапрос( Объект ) Экспорт 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", Объект);
	Обращение = РегистрыСведений.кб99_Запросы.ПолучитьПоследнее(ТекущаяДата(), Отбор );
	
	Возврат Обращение;
	
КонецФункции

Функция ПроверитьВладельцаСправочника(спрЭлемент, Владелец_) Экспорт
	
	Возврат спрЭлемент.Владелец = Владелец_;
	
КонецФункции


Функция Гашение_НайтиДокументПоступлениеТоваров( ДатаВходящегоДокумента, НомерВходящегоДокумента, ИННОтправителя ) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("Гашение_НайтиДокументПоступлениеТоваров");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.Гашение_НайтиДокументПоступлениеТоваров( ДатаВходящегоДокумента, НомерВходящегоДокумента, ИННОтправителя );
	КонецЕсли;	
	
	Попытка 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДокПриход.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг КАК ДокПриход
		               |ГДЕ
		               |	ДокПриход.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
		               |	И ДокПриход.НомерВходящегоДокумента = &НомерВходящегоДокумента
					   |	%ИНН%
					   |";
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", НомерВходящегоДокумента);
		Если ЗначениеЗаполнено(ИННОтправителя) Тогда
			ПодстрокаЗамены = "И ДокПриход.Контрагент.ИНН = &ИНН";
			Запрос.УстановитьПараметр("ИНН", ИННОтправителя);
		Иначе
			ПодстрокаЗамены = "";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИНН%", ПодстрокаЗамены); 
      	
		тзВыборка = Запрос.Выполнить().Выгрузить();
		Если тзВыборка.Количество()>0 Тогда 
			Возврат тзВыборка[0].Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли 
	Исключение 
		кб99_ВСД.СообщитьИнфо("Не удалось найти документ [Приходная накладная], измените процедуру [Гашение_НайтиДокументПоступлениеТоваров] под вашу структуру конфигурации" );
	КонецПопытки
	
КонецФункции

Процедура ГашениеПроверитьСтрокуТаблицы( СтрокаВСДВходящие, ПараметрыОрганизации ) Экспорт
	
	ПереопределенныйМодуль = кб99_ВСД_Общий.ФункцияПереопределена("ГашениеПроверитьСтрокуТаблицы");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		ПереопределенныйМодуль.ГашениеПроверитьСтрокуТаблицы( СтрокаВСДВходящие, ПараметрыОрганизации );
		Возврат;
	КонецЕсли;
	
	Попытка
		ИскатьДокументПрихода = ПараметрыОрганизации["ПарамВсдВходящиеИскатьДокументПрихода"];
	Исключение
		ИскатьДокументПрихода = Ложь;
		кб99_ВСД.СообщитьИнфо("Не заполнен параметр [ПарамВсдВходящиеИскатьДокументПрихода]. Пожалуйста, проверьте и сохраните Параметры интеграции.");
	КонецПопытки;
	
	СтрокаОшибки = "";
	
	Если ИскатьДокументПрихода Тогда 
		Если не ЗначениеЗаполнено( СтрокаВСДВходящие.ДокументПрихода ) Тогда
			СтрокаОшибки = СтрокаОшибки + ", Документа ПриходнаяНакладная не найден";
		иначеесли не ЗначениеЗаполнено(СтрокаВСДВходящие.номенклатура) тогда
			СтрокаОшибки = СтрокаОшибки + ", Не найдена номенклатура в документе прихода";
		иначе
			Если СтрокаВСДВходящие.количество<> СтрокаВСДВходящие.КоличествоПринято1С тогда
				СтрокаОшибки = СтрокаОшибки + ", Не совпадает количество";
			иначе	
				кодСовпал=ложь;
				код=СтрокаВСДВходящие.Продукция_Элемент.ВидПродукции.КодТНВЭД;
				если (код="2309") или (код="0145") тогда
					код=СтрокаВСДВходящие.Продукция_Элемент.Продукция.КодТНВЭД;
					если (код="2309") или (код="0145") тогда
						кодСовпал=Истина;
					конецесли;
				конецесли;
				если не кодСовпал тогда
					СтрокаОшибки = СтрокаОшибки + ", Неверный код ТНВЭД";
				конецесли;
			КонецЕсли;
		конецесли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено( СтрокаВСДВходящие.ДатаСрокГодности2 ) Тогда
		ДатаСрокГодности1= кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаСрокГодности1 );
	    Если ДатаСрокГодности1 < ТекущаяДата() Тогда
			СтрокаОшибки = СтрокаОшибки + ", Просроченная партия";	
		КонецЕсли;
	Иначе
		ДатаСрокГодности2= кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаСрокГодности2 );
	    Если ДатаСрокГодности2 < ТекущаяДата() Тогда
			СтрокаОшибки = СтрокаОшибки + ", Просроченная партия";	
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено( СтрокаВСДВходящие.ДатаИзготовления2 ) Тогда
		ДатаИзготовления2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления2 );
	    Если ДатаИзготовления2 > ТекущаяДата() Тогда
			СтрокаОшибки = СтрокаОшибки + ", Дата производства продукции больше текущей даты";	
		КонецЕсли;
	Иначе
		ДатаИзготовления1 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления1 );
		Если ДатаИзготовления1 > ТекущаяДата() Тогда
			СтрокаОшибки = СтрокаОшибки + ", Дата производства продукции больше текущей даты";	
		КонецЕсли;
	КонецЕсли;

	Попытка
		ВходящиеПроверятьДатуИзготовления = ПараметрыОрганизации["ВходящиеПроверятьДатуИзготовления"];
		ВходящиеПроверятьДатуИзготовленияКоличествоДней = ПараметрыОрганизации["ВходящиеПроверятьДатуИзготовленияКоличествоДней"];
	Исключение
		ИскатьДокументПрихода = Ложь;
		кб99_ВСД.СообщитьИнфо("Не заполнен параметр [ВходящиеПроверятьДатуИзготовления]. Пожалуйста, проверьте и сохраните Параметры интеграции.");
	КонецПопытки;
	
	Если ВходящиеПроверятьДатуИзготовления Тогда 
		Если ЗначениеЗаполнено( СтрокаВСДВходящие.ДатаИзготовления2 ) Тогда
			ДатаИзготовления2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления2 );
		    Если ДатаИзготовления2 < ТекущаяДата()-ВходящиеПроверятьДатуИзготовленияКоличествоДней*60*60 Тогда
				СтрокаОшибки = СтрокаОшибки + ", Дата производства старше "+ВходящиеПроверятьДатуИзготовленияКоличествоДней+" дней";	
			КонецЕсли;
		Иначе
			ДатаИзготовления1 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления1 );
			Если ДатаИзготовления1 < ТекущаяДата()-ВходящиеПроверятьДатуИзготовленияКоличествоДней*60*60 Тогда
				СтрокаОшибки = СтрокаОшибки + ", Дата производства старше "+ВходящиеПроверятьДатуИзготовленияКоличествоДней+" дней";	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено( СтрокаВСДВходящие.номеравто ) Тогда
		СтрокаОшибки = СтрокаОшибки + ", Не указан номер автомобиля";	
	КонецЕсли;
	
	ПозицияЗапятой = СтрНайти(СтрокаОшибки, ", ");
	
	Если ПозицияЗапятой = 1 Тогда
		СтрокаОшибки = Сред(СтрокаОшибки, 3);
	КонецЕсли;

	СтрокаВСДВходящие.Ошибки = СтрокаОшибки;
	
КонецПроцедуры

Функция ОписаниеВерсии() Экспорт

	Версия = "2.6.1";
	Возврат Версия;
		
КонецФункции

Функция ПроверитьЗначениеПараметра(ПараметрыОрганизации, НазваниеПараметра, ОписаниеПараметра) Экспорт
	Если ПараметрыОрганизации.Свойство(НазваниеПараметра) Тогда 
		Возврат Истина;
	Иначе		
		кб99_ВСД.СообщитьПользователю( СтрШаблон("Не указано значение параметра %1. Откройте параметры и нажмите кнопку [Сохранить]", ОписаниеПараметра ));
		Возврат Ложь;
	КонецЕсли;
КонецФункции
	