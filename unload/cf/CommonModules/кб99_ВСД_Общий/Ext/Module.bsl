Функция СтрРазделить82(Имя,знакДелителя)
	
	Рез = Новый СписокЗначений;
	Рез.Вставить("имя",имя);
	Возврат Рез;
	
КонецФункции

Функция СерверныйМодульМенеджера(Имя)
	
	ОбъектНайден = Ложь;
	
	ЧастиИмени = СтрРазделить82(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];
		
		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбъектНайден Тогда
		ВызватьИсключение("ОШИБКА ПОЛУЧЕНИЯ МОДУЛЯ");
	КонецЕсли;
	
	Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	
	Возврат Модуль;
	
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	
	Попытка	
		Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
			Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
		ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
			Возврат СерверныйМодульМенеджера(Имя);
		Иначе
			Модуль = Неопределено;
		КонецЕсли;
	Исключение
		кб99_ВСД.СообщитьИнфо("Ошибка получения модуля Типовой конфигурации "+Имя+" "+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Модуль;
	
КонецФункции

Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьОрганизациюПоУмолчанию");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;

	НазваниеКонфигурации = Метаданные.Имя;
	ВерсияМассив  = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Метаданные.Версия, ".");
	ТекущаяВерсия = ВерсияМассив[0] + ВерсияМассив[1] + ВерсияМассив[2];
	Версия = ВерсияМассив[0];
	
	_Организация = Справочники.Организации.ПустаяСсылка();
	ТекПользователь = ПолучитьТекущегоПользователя();
	//БП 3	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	//УПП   Организация   =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");
	
	Если Метаданные.Имя = "УправлениеТорговлей" Тогда 
		Если Версия="11" Тогда 
			Если Число(ВерсияМассив[2]) <= 4 Тогда 
				МодульТиповойКонфы = ОбщийМодуль("ОрганизацииСлужебный");
				_Организация = МодульТиповойКонфы.ОрганизацияПоУмолчанию( );
			Иначе
				_Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
			КонецЕсли;
			
		Иначе //УТ 10			
			МодульТиповойКонфы = ОбщийМодуль("УправлениеПользователями");
			_Организация = МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию(ТекПользователь,"ОсновнаяОрганизация");
		КонецЕсли 
	ИначеЕсли Метаданные.Имя = "БухгалтерияПредприятия" Тогда 
		Если Версия = "3" Тогда 
			//БП 3.0
			МодульТиповойКонфы = ОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			_Организация = МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Иначе
			// Версия = 2
			МодульТиповойКонфы = ОбщийМодуль("ОбщегоНазначения");
			_Организация = МодульТиповойКонфы.ПолучитьЗначениеПеременной("ОсновнаяОрганизация");
		КонецЕсли;
	ИначеЕсли Метаданные.Имя = "УправлениеПроизводственнымПредприятием" Тогда 		
		//УПП
		МодульТиповойКонфы = ОбщийМодуль("УправлениеПользователями");
		_Организация = МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию(ТекПользователь,"ОсновнаяОрганизация");
	ИначеЕсли Метаданные.Имя = "кб99_Ветис" Тогда 		
		_Организация = Справочники.Организации.ОсновнаяОрганизация;
	ИначеЕсли Метаданные.Имя = "КомплекснаяАвтоматизация" Тогда 		
		МодульТиповойКонфы = ОбщийМодуль("ЗначениеНастроекПовтИсп");
		_Организация = МодульТиповойКонфы.ПолучитьОрганизациюПоУмолчанию();		
	Иначе
		Попытка				
			_Организация = Справочники.Организации.ОсновнаяОрганизация;
		Исключение
			кб99_ВСД.СообщитьИнфо("Для данной конфигурации 1С не удалось получить значение Организации по умолчанию, обратитесь в тех.поддержку КБ99");
			кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено( _Организация ) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	Организации.Ссылка КАК Организация
		               |ИЗ
		               |	Справочник.Организации КАК Организации
		               |ГДЕ
		               |	Организации.ПометкаУдаления = ЛОЖЬ"; 
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		//|	кб99_ОрганизацияПоУмолчанию.Организация КАК Организация
		//|ИЗ
		//|	РегистрСведений.кб99_ОрганизацияПоУмолчанию КАК кб99_ОрганизацияПоУмолчанию"
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			_Организация =  Выборка.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _Организация;
	
КонецФункции

// Инициализирует название параметров
// и значение по умолчанию
Функция ПараметрыСервер() Экспорт
	
	// Описание параметров
	Параметры = Новый("Структура");
	Параметры.Вставить("Организация",											 Справочники.Организации.ПустаяСсылка());
	Параметры.Вставить("КаталогИнтеграции",										 Неопределено);
	Параметры.Вставить("КаталогЛогов",											 Неопределено);
	Параметры.Вставить("param_username",										 Неопределено);
	Параметры.Вставить("param_password",										 Неопределено);
	Параметры.Вставить("param_issuer_id",										 Неопределено);
	Параметры.Вставить("param_api_key",											 Неопределено);
	Параметры.Вставить("param_intiator_login",									 Неопределено);
	Параметры.Вставить("param_vetdoctor_login",									 Неопределено);
	Параметры.Вставить("Отправитель_Площадка",									 Неопределено);
	Параметры.Вставить("Отправитель_ХозСубъект",								 Неопределено);
	Параметры.Вставить("Страна",												 Неопределено);
	Параметры.Вставить("Регион",												 Неопределено);
	Параметры.Вставить("Город",													 Неопределено);
	Параметры.Вставить("НаселенныйПункт",										 Неопределено);
	Параметры.Вставить("ВСД_Экспертиза",										 Неопределено);
	Параметры.Вставить("ВСД_Местность",											 Неопределено);
	Параметры.Вставить("ВСД_ОсобыеОтметки",										 Неопределено);
	Параметры.Вставить("ПаузаСек",												 10);	
	Параметры.Вставить("РеквизитГрузополучатель",								 Неопределено);	
	Параметры.Вставить("ОтладкаЗапросовXML",									 Ложь);	
	Параметры.Вставить("Перевозчик_ХозСубъект",									 Неопределено);		
	Параметры.Вставить("ПропускатьПустыеСвойства",								 Ложь);		
	Параметры.Вставить("КаталогЛогов",											 Неопределено);
	Параметры.Вставить("ВыводитьПодробнуюИнформацию",							 Ложь);	
	Параметры.Вставить("Смещение",												 0);
	Параметры.Вставить("АвтоЗаписьВСДСоответствия",								 Ложь);
	Параметры.Вставить("НазваниеРеквизитаКоличество",							 "Количество");
	Параметры.Вставить("ПарамКоэффициентПересчетаКоличества",					 Неопределено);
	Параметры.Вставить("ВСД_РезультатыИсследований",							 Перечисления.кб99_РезультатИсследования.VSERAW);
    Параметры.Вставить("ТермическиеУсловияПеревозки",							 Неопределено);
	Параметры.Вставить("ВСДЦель",												 Неопределено);
	Параметры.Вставить("ПарамЗаполнятьТранзакциюПриОтсутствииПартий",			 Ложь);
	Параметры.Вставить("ПарамНомерУровняУпаковкиДляВСД",						 Неопределено);
	Параметры.Вставить("ПарамФормаУпаковкиДляВСД",								 Неопределено);
	Параметры.Вставить("НазваниеРеквизитаКоличествоМест",						 "Количество");
	Параметры.Вставить("ПарамКолонкаСортировкиПартииСписания",					 "ДатаСрокГодности1");
	Параметры.Вставить("ПарамЗнакСортировкиУбывание",							 Ложь);
	Параметры.Вставить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя",	 Ложь);	
	Параметры.Вставить("ПарамПоставщикОрганизация",								 Неопределено);	
	Параметры.Вставить("ПарамПоставщикХозСубъект",								 Неопределено);	
	Параметры.Вставить("ПарамПоставщикПлощадка",								 Неопределено);	
	Параметры.Вставить("ПарамРазрешитьВводНаОснованииБолееОдногоВСД",			 Ложь);
	Параметры.Вставить("ОтправлятьВФоне",										 Ложь);
	Параметры.Вставить("ПарамПроизводствоЗаполнятьПоСправочнику",				 Ложь);
	Параметры.Вставить("ПарамИспользоватьСерииПродукции",						 Ложь);
	Параметры.Вставить("КодЛицензии",											 Неопределено);
	Параметры.Вставить("ОтключитьОтправкуСтатистики",							 Ложь);
	Параметры.Вставить("ПарамКонтроллироватьСрокГодностиПриОтправке",			 Ложь);
	Параметры.Вставить("СрокГодностиДней",										 0);
	Параметры.Вставить("ПарамКонтроллироватьЗаполнениеУровнейУпаковки",			 Ложь);
	Параметры.Вставить("парамПричинаАннулирования",								 Неопределено);
	Параметры.Вставить("парамПричинаРасхождения",								 Неопределено);
	Параметры.Вставить("парамОписаниеНесоответствия",							 Неопределено);
	Параметры.Вставить("КоэфПересчетаКоличестваПриПроизводстве",				 Неопределено);
	Параметры.Вставить("КоличествоДнейХраненияЗапросов",						 Неопределено);
	Параметры.Вставить("ПарамВсдВходящиеИскатьДокументПрихода",					 Ложь);
	Параметры.Вставить("ПоказыватьПросроченныеПартии",							 Истина);
	Параметры.Вставить("МаксимальноеКоличествоПартийСписанияВДокументе",		 Неопределено);
	Параметры.Вставить("ЗавершатьПроизводство",									 Истина);
	Параметры.Вставить("ПрефиксНомераНезавершенногоПроизводства",				 Неопределено);
	Параметры.Вставить("ЗаполнятьТермическиеУсловияИзВходящегоВСД",				 Ложь);
	Параметры.Вставить("ДобавлятьОсобыеОтметкиИзВходящегоВСД",					 Неопределено);
	Параметры.Вставить("ПроверятьЗаполнениеСырьяВПроизводстве",					 Ложь);
	Параметры.Вставить("ПроверятьБалансРасходаСырья",							 Ложь);
	Параметры.Вставить("ПроцентРасхожденияСырьеПродукция",						 Неопределено);
	Параметры.Вставить("РазрешитьПодменуПродукцииВИсходящемВСД",				 Ложь);
	Параметры.Вставить("ВходящиеПроверятьДатуИзготовления",						 Ложь);
	Параметры.Вставить("ВходящиеПроверятьДатуИзготовленияКоличествоДней",		 Ложь);
	Параметры.Вставить("КонтролироватьДокументПроисхожденияПродукции",			 Ложь);
	Параметры.Вставить("КонтролироватьПравильностьЗаполненияНомераАвтомобиля",	 Ложь);
	Параметры.Вставить("КонтролироватьОстаткиПартийПоРегистру",					 Ложь);
	Параметры.Вставить("ДатаНачалаКонтроляОстатковПартийПоРегистру",			 Неопределено);
	Параметры.Вставить("СвойКонтрагент",										 Неопределено);
	Параметры.Вставить("НомерАвто",												 Неопределено);
	Параметры.Вставить("ПЭ_Сливки",												 Неопределено);
	Параметры.Вставить("ПЭ_Обрат",												 Неопределено);
	Параметры.Вставить("ЖирностьМолокаПроцент",									 Неопределено);
	Параметры.Вставить("ЖирностьСливокПроцент",									 Неопределено);	
	Параметры.Вставить("ПроизводствоРазбиватьПострочно",						 Ложь);
	Параметры.Вставить("КонтролироватьНаличиеЛабИсследований",					 Ложь);	
	Параметры.Вставить("БелокЦелевойПроцент",									 Неопределено);
	Параметры.Вставить("ПЭ_СОМ",									 			 Неопределено);
	Параметры.Вставить("СохранятьЗапросыXmlВФайл",					 			 Ложь);
	
	Возврат Параметры;

КонецФункции

// Получает сообщения пользователю, отфильтровывает служебные сообщения о состоянии длительной операции.
// 
// Параметры:
//  УдалятьПолученные - Булево - Признак необходимости удаления полученных сообщений.
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
// 
// Возвращаемое значение:
//  Массив - ФиксированныйМассив - Массив объектов СообщениеПользователю, которые были сформированы в
//  фоновом задании.
// в Бухгалерии 2.0 нет функции СообщенияПользователю в модуле ДлительныеОперации
Функция СообщенияПользователю(УдалятьПолученные = Ложь, ИдентификаторЗадания = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если ФоновоеЗадание <> Неопределено Тогда
			ВсеСообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(УдалятьПолученные);
		КонецЕсли;
	Иначе
		ВсеСообщения = ПолучитьСообщенияПользователю(УдалятьПолученные);
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого Сообщение Из ВсеСообщения Цикл
		Если УдалятьПолученные Тогда
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

// Возвращает структуру:
// ТипДокумента: Тип в зависимости от конфигурации
// ИмяТЧ: Имя табличной части в зависимости от конфигурации
Функция ОпределитьТипОбъектаМетаданных(ВидДокумента) Экспорт
	
	Результат = Новый Структура("ТипДокумента, ИмяТЧ");
	
	Если ВидДокумента = "Корректировка" Тогда
		
		Если Метаданные.Документы.Найти("КорректировкаПриобретения") <> Неопределено Тогда
			// УТ 11, КА 2, ERP
			Результат.ТипДокумента = Тип("ДокументСсылка.КорректировкаПриобретения");
			Результат.ИмяТЧ = "Расхождения";
			 
		ИначеЕсли Метаданные.Документы.Найти("КорректировкаПоступления") <> Неопределено Тогда
			// БП 3, УТ 10.3, УПП 1.3, КА 1.1
			Результат.ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступления");
			Результат.ИмяТЧ = "Товары";
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#Область ЗаполнениеДокументов

Функция ПолучитьНомерДокБезПрефикса(ВыбДок) Экспорт
	
	Если НЕ(ЗначениеЗаполнено(ВыбДок)) Тогда
		Возврат "";	
	КонецЕсли;
	
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьНомерДокБезПрефикса");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьНомерДокБезПрефикса( ВыбДок );
	КонецЕсли;
	
	//БП 3.
	Если Метаданные.ОбщиеМодули.Найти("ПрефиксацияОбъектовКлиентСервер") <> Неопределено Тогда
		МодульРабота1 = ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
		Попытка
			Возврат МодульРабота1.НомерНаПечать(ВыбДок.Номер, Истина, Ложь);
		Исключение
			Возврат МодульРабота1.ПолучитьНомерНаПечать(ВыбДок.Номер, Истина, Ложь);
		КонецПопытки;
	ИначеЕсли Метаданные.ОбщиеМодули.Найти("ОбщегоНазначения") <> Неопределено Тогда
		МодульРабота1 = ОбщийМодуль("ОбщегоНазначения");
		Возврат МодульРабота1.ПолучитьНомерНаПечать(ВыбДок);
	Иначе
		кб99_ВСД.СообщитьИнфо("Для данной конфигурации 1С не удалось ПолучитьНомерДокБезПрефикса");		
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНомерАвто( ДокОснование, ПараметрыОрганизации ) Экспорт
	
	// Проверка переопределения функции в Общем модуле ВСД_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьНомерАвто");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьНомерАвто( ДокОснование, ПараметрыОрганизации );
	КонецЕсли;
	
	Попытка
		МетаданныеОбъекта = ДокОснование.Метаданные();
	Исключение 
	    Возврат ПараметрыОрганизации.НомерАвто;
	КонецПопытки;
	
	Если МетаданныеОбъекта.Реквизиты.Найти("Транспорт") <> Неопределено Тогда
		//Это БП ПТФ 2.0
		НомерТС = ДокОснование.Транспорт.ГосНомерАвтомобиля;
		НомерТС = ?(ЗначениеЗаполнено(НомерТС), СокрЛП(НомерТС), ПараметрыОрганизации.НомерАвто);
	ИначеЕсли МетаданныеОбъекта.Реквизиты.Найти("РегистрационныйЗнакАвтомобиля") <> Неопределено Тогда
		//	БП 3
		НомерТС = ?(ЗначениеЗаполнено(ДокОснование.РегистрационныйЗнакАвтомобиля),
			СокрЛП(ДокОснование.РегистрационныйЗнакАвтомобиля),
			ПараметрыОрганизации.НомерАвто);
	Иначе	
		Попытка
		// Это УПП и УТ
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ 
			| ПараметрыМаршрутаСрезПоследних.Водитель, 
			| ПараметрыМаршрутаСрезПоследних.ЗаказПокупателя, 
			| ПараметрыМаршрутаСрезПоследних.НомерТС 
			|ИЗ 
			| РегистрСведений.ПараметрыМаршрута.СрезПоследних(, ЗаказПокупателя = &ТекЗаказ) КАК ПараметрыМаршрутаСрезПоследних";
		
			Запрос.УстановитьПараметр("ТекЗаказ", ДокОснование.Сделка);
			РезультатЗапроса = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				НомерТС = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерТС),
					ВыборкаДетальныеЗаписи.НомерТС, ПараметрыОрганизации.НомерАвто);
			Иначе
				НомерТС = ПараметрыОрганизации.НомерАвто;
			КонецЕсли;
		Исключение //КРК - отстутствует регистр сведений ПараметрыМаршрута		
			НомерТС = ПараметрыОрганизации.НомерАвто;	
		КонецПопытки;
	КонецЕсли;
	
	Возврат НомерТС;
	
КонецФункции

Функция ЗаполнитьСвязанныеДокументы( ДокВСД ) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("ЗаполнитьСвязанныеДокументы");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ЗаполнитьСвязанныеДокументы( ДокВСД );
	КонецЕсли;

КонецФункции

// Работа с документами
Функция РассчитатьКоличествоДляВСД( ПараметрыОрганизации, СтрокаТЧДок, Продукция_Элемент = "") Экспорт
	
	// вызов переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("РассчитатьКоличествоДляВСД");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.РассчитатьКоличествоДляВСД( ПараметрыОрганизации, СтрокаТЧДок, Продукция_Элемент );
	КонецЕсли;
	
	Рез = 0;
	Коэфф = 0;
	Попытка
		//Пересчет ШТ в КГ
		Версия = Лев(Метаданные.Версия,2);		
		Если Метаданные.Имя = "УправлениеТорговлей" И Версия="11" Тогда 				
			Если СтрокаТЧДок.Номенклатура.ВесИспользовать Тогда
				Если СтрокаТЧДок.Номенклатура.ВесЗнаменатель>0 Тогда 
					Коэфф=СтрокаТЧДок.Номенклатура.ВесЧислитель/СтрокаТЧДок.Номенклатура.ВесЗнаменатель;
				Иначе
					Коэфф=0;
				КонецЕсли;
			КонецЕсли;
		Иначе //остальные считаем с учетом параметра [ПарамКоэффициентПересчетаКоличества]		
			
			КПересчета = ПараметрыОрганизации["ПарамКоэффициентПересчетаКоличества"]; 
			Попытка
				Коэфф = Число(КПересчета);
			Исключение
				Коэфф = 0;
			КонецПопытки;
			
			Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
				Коэфф = 1;
			ИначеЕсли Строка(Коэфф)	= КПересчета Тогда
				Коэфф = Число(КПересчета);
			Иначе //реквизитСтрокиДока.
				_Точка = Найти(КПересчета,".");
				ИмяРекв = Сред(КПересчета,1,_Точка-1);
				ИмяПодРекв = Сред(КПересчета,_Точка+1);
				Коэфф = СтрокаТЧДок[ИмяРекв];
				_Точка = Найти(ИмяПодРекв,".");
				Пока _Точка > 0 Цикл
					ИмяРекв = Сред(ИмяПодРекв,1,_Точка-1);
					ИмяПодРекв = Сред(ИмяПодРекв,_Точка+1);
					Коэфф = Коэфф[ИмяРекв];
					_Точка = Найти(ИмяПодРекв,".");
				КонецЦикла;
				Если НЕ ТипЗнч(Коэфф) = Тип("Число") Тогда
					Коэфф = Коэфф[ИмяПодРекв];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		кб99_ВСД.СообщитьИнфо("Указан неверный параметр [ПарамКоэффициентПересчетаКоличества]");
		кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());
		Рез = 0;
	КонецПопытки;
	
	Если Коэфф = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Коэфф пересчета "+КПересчета+" для "+СтрокаТЧДок.Номенклатура + " равен 0 - ставлю 1" );
		Коэфф = 1;
	КонецЕсли;
	
	Попытка
		Рез = СтрокаТЧДок[ ПараметрыОрганизации["НазваниеРеквизитаКоличество"] ]*Коэфф;
	Исключение
		кб99_ВСД.СообщитьИнфо("Указан неверный параметр [НазваниеРеквизитаКоличество] ");
		кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());
		Рез = 0;
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

Функция ВыгрузитьТч( Док, ПараметрыОрганизации="" ) Экспорт
	
	// вызов переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ВыгрузитьТч");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ВыгрузитьТч( Док, ПараметрыОрганизации );
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОрганизации) Тогда 
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Док.Организация );
	КонецЕсли;
	
	тзРез = Новый("ТаблицаЗначений");
	тзРез.Колонки.Добавить("Номенклатура");
	тзРез.Колонки.Добавить("Продукция_Элемент");
	тзРез.Колонки.Добавить("Количество");
	тзРез.Колонки.Добавить("Упаковки");
	тзРез.Колонки.Добавить("СерияНоменклатуры");
	тзРез.Колонки.Добавить("ТермУсловияПеревозки");
	тзРез.Колонки.Добавить("Контрагент");
	тзРез.Колонки.Добавить("ВидПродукции");
	тзРез.Колонки.Добавить("Коэффициент");
	тзРез.Колонки.Добавить("ИдентификаторСтроки");
	
	ПереопределяемыеПоляЗапроса = кб99_ВСД_Общий.ПолучитьПредставлениеПолейДокументаВЗапрос();
	ЭтоКорректировка = Ложь;
	СтруктураДокументаКорректировки = ОпределитьТипОбъектаМетаданных("Корректировка");
	Если ТипЗнч(Док) = СтруктураДокументаКорректировки.ТипДокумента Тогда
		тзОснование = Док[СтруктураДокументаКорректировки.ИмяТЧ].Выгрузить();	
		ЭтоКорректировка = Истина;
	Иначе
		тзОснование = Док[ПереопределяемыеПоляЗапроса.НаименованиеТабличнойЧастиТовары].Выгрузить();	
	КонецЕсли;
	
	Если ЕстьРеквизитИлиСвойствоОбъекта(док, "Контрагент") Тогда 			
		Контрагент = док.Контрагент;
	Иначе			
		Контрагент = Неопределено;
	КонецЕсли;

	Для Каждого стрДок Из тзОснование Цикл
		
		Если ЭтоКорректировка Тогда
			
			Если СтруктураДокументаКорректировки.ИмяТЧ = "Расхождения" Тогда
				
				Если стрДок[ ПараметрыОрганизации["НазваниеРеквизитаКоличество"] ] >= 0 Тогда
					Продолжить;
				КонецЕсли;
				стрДок[ ПараметрыОрганизации["НазваниеРеквизитаКоличество"] ] = -стрДок[ ПараметрыОрганизации["НазваниеРеквизитаКоличество"] ];
				
			ИначеЕсли СтруктураДокументаКорректировки.ИмяТЧ = "Товары" Тогда
				
				Расхождение = стрДок.Количество - стрДок.КоличествоДоИзменения;
				
				Если Расхождение >= 0 Тогда
					Продолжить;
				КонецЕсли;
				стрДок.Количество = - Расхождение;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВСДПродукцияЭлемент = кб99_ВСД.Продукция_Элемент_ПолучитьПоНоменклатуре(стрДок.Номенклатура, Контрагент);

		Если (ВСДПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и НЕ( ПараметрыОрганизации["ПропускатьПустыеСвойства"] ) Тогда
			кб99_ВСД.СообщитьИнфо("["+стрДок.Номенклатура+"] -> не указан ВСД_Продукция_Элемент");
		ИначеЕсли (ВСДПродукцияЭлемент=Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и ( ПараметрыОрганизации["ПропускатьПустыеСвойства"] ) Тогда
			Продолжить;
		КонецЕсли;
		СтрТЧ = тзРез.Добавить();
		СтрТЧ.Контрагент = Контрагент;
		СтрТЧ.Номенклатура = стрДок.Номенклатура;
		СтрТЧ.Продукция_Элемент = ВСДПродукцияЭлемент;
		СтрТЧ.Количество = РассчитатьКоличествоДляВСД(ПараметрыОрганизации, стрДок, ВСДПродукцияЭлемент);
		Если ПараметрыОрганизации["ПарамИспользоватьСерииПродукции"] Тогда
			Попытка СтрТЧ.СерияНоменклатуры = стрДок.Серия; Исключение КонецПопытки; //преобразовать дату в строку
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВСДПродукцияЭлемент.ТермическиеУсловияПеревозки) Тогда
			ТермУсловияПеревозки = ВСДПродукцияЭлемент.ТермическиеУсловияПеревозки;
		Иначе
			ТермУсловияПеревозки =  ПараметрыОрганизации["ТермическиеУсловияПеревозки"];
		КонецЕсли;
		СтрТЧ.ТермУсловияПеревозки = ТермУсловияПеревозки;
		СтрТЧ.ВидПродукции = ВСДПродукцияЭлемент.ВидПродукции;
		Попытка
			Если ЗначениеЗаполнено(стрДок[ ПараметрыОрганизации["НазваниеРеквизитаКоличествоМест"] ]) Тогда
				СтрТЧ.Упаковки = стрДок[ ПараметрыОрганизации["НазваниеРеквизитаКоличествоМест"] ];
				СтрТЧ.Коэффициент = СтрТЧ.Количество / СтрТЧ.Упаковки;
			Иначе
				СтрТЧ.Упаковки = Окр(СтрТЧ.Количество, 0);
				СтрТЧ.Коэффициент = СтрТЧ.Количество / СтрТЧ.Упаковки;
			КонецЕсли;
		Исключение КонецПопытки;
		
		Попытка
			СтрТЧ.ИдентификаторСтроки = стрДок.ИдентификаторСтроки;
		Исключение
		КонецПопытки;

	КонецЦикла;
	
	Возврат тзРез;
	
КонецФункции

Функция ПолучитьАртикулНоменклатуры( ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьАртикулНоменклатуры");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьАртикулНоменклатуры( ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка );
	КонецЕсли;
	
	Ответ = НоваяСтрока.Продукция_Элемент.Артикул;
	Возврат Ответ;
	
КонецФункции

Процедура ЗаполнитьРеквизитыСтрокиВСД( ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка ) Экспорт
	
	// вызов переопределения	
	ПереопределенныйМодуль = ФункцияПереопределена("ЗаполнитьРеквизитыСтрокиВСД");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		ПереопределенныйМодуль.ЗаполнитьРеквизитыСтрокиВСД( ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка );
		Возврат;
	КонецЕсли;
	
	Попытка
		НоваяСтрока.Продукция 				= НоваяСтрока.Продукция_Элемент.Продукция;
		НоваяСтрока.ВидПродукции 			= НоваяСтрока.Продукция_Элемент.ВидПродукции;
		НоваяСтрока.НаименованиеПродукции 	= НоваяСтрока.Продукция_Элемент.Наименование;
	Исключение КонецПопытки;
	
	Попытка НоваяСтрока.ВидПроисхожденияНеПищевойПродукции	= НоваяСтрока.Продукция_Элемент.ВидПроисхожденияНеПищевойПродукции Исключение КонецПопытки;
	
	Попытка 
		НоваяСтрока.РезультатыИсследований	= НоваяСтрока.Партия.vetDocument.РезультатыИсследований;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.РезультатыИсследований) Тогда
			НоваяСтрока.РезультатыИсследований = ПараметрыОрганизации["ВСД_РезультатыИсследований"];
		КонецЕсли;	
	Исключение КонецПопытки;
	
	Попытка НоваяСтрока.GTIN = НоваяСтрока.Продукция_Элемент.GTIN; Исключение КонецПопытки;
	Попытка НоваяСтрока.Артикул	= ПолучитьАртикулНоменклатуры( ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка) Исключение КонецПопытки;
		
	Попытка  
		НоваяСтрока.КлючСтроки	= Новый УникальныйИдентификатор();
	Исключение 
	КонецПопытки;
	
	Попытка  
		НоваяСтрока.ИдентификаторСтроки	= СтрокаОснования.ИдентификаторСтроки;
	Исключение 
	КонецПопытки;
	
	Попытка НоваяСтрока.ОсобыеОтметки = НоваяСтрока.Продукция_Элемент.ОсобыеОтметки; Исключение КонецПопытки;
	
	Попытка
		НоваяСтрока.Цель 					= НоваяСтрока.Продукция_Элемент.ВидПродукции.Цель;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Цель) Тогда 
			НоваяСтрока.Цель = ПараметрыОрганизации["ВСДЦель"];
		КонецЕсли;
	Исключение КонецПопытки;
	
	//Если докСсылка.Метаданные().ТабличныеЧасти.Найти("УровниУпаковки") <> Неопределено Тогда
	Если кб99_ВСД_Общий.ЕстьРеквизитИлиСвойствоОбъекта(докСсылка, "УровниУпаковки") Тогда 
		Если НЕ(ЗначениеЗаполнено( ПараметрыОрганизации["ПарамНомерУровняУпаковкиДляВСД"] )) или НЕ(ЗначениеЗаполнено( ПараметрыОрганизации["ПарамФормаУпаковкиДляВСД"])) Тогда
			Возврат;	
		КонецЕсли;
		// Упаковка на уровнях
		Попытка
			Если ЗначениеЗаполнено(СтрокаОснования.Упаковки) Тогда
				Если Цел(СтрокаОснования.Упаковки/СтрокаОснования.Количество*НоваяСтрока.Количество) = 0 Тогда
					кб99_ВСД.СообщитьИнфо("Нулевое кол-во упаковки у "+СтрокаОснования.Продукция_Элемент+" в "+ДокСсылка);	
				Иначе
					СтрокаУпак = докСсылка.УровниУпаковки.Добавить(); 
					СтрокаУпак.СтрокаПродукции = НоваяСтрока.КлючСтроки;
					СтрокаУпак.Количество = Цел(СтрокаОснования.Упаковки/СтрокаОснования.Количество*НоваяСтрока.Количество); //Пропорционально Распределенному количеству
					Если СтрокаУпак.Количество = 0 Тогда
						СтрокаУпак.Количество = 1;	
					КонецЕсли;
					СтрокаУпак.НомерУровня = ПараметрыОрганизации["ПарамНомерУровняУпаковкиДляВСД"];
					СтрокаУпак.ФормаУпаковки = ПараметрыОрганизации["ПарамФормаУпаковкиДляВСД"];
					//Маркировки
					СтрокаМарк = докСсылка.Маркировка.Добавить();
					СтрокаМарк.Строкапродукции = СтрокаУпак.СтрокаПродукции;
					СтрокаМарк.НомерУровня = СтрокаУпак.НомерУровня;
					СтрокаМарк.Класс = Перечисления.кб99_Маркировка.UNDEFINED;
					СтрокаМарк.Маркировка = НоваяСтрока.Партия.Производитель_Площадка.Наименование;
					Если Не ЗначениеЗаполнено(СтрокаМарк.Маркировка) Тогда
						СтрокаМарк.Маркировка = ПараметрыОрганизации.Отправитель_Площадка.Наименование;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение 
			кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ТЧ документа ВСД по Входящим данным , вызывается из ЗаполнитьНаосновании ВСД2_Транзакция
// ДанныеЗаполнения = Документ основание, берем из него ТЧ для расчета Кол-ва и Продэлементы для фильтра партий,
// также данные для заполнения Маркировок
// Добавлен реквизит - тзЭлементыОснования = ТЧ докоснования, для подбора Партий без Документа Основания
Функция ЗаполнитьТабЧастьВСД( ПараметрыОрганизации, ДанныеЗаполнения = Неопределено, докСсылка, тзАктуальныхПартий = Неопределено, ВыбТермУсловиеПеревозки = Неопределено, Контрагент = Неопределено) Экспорт

	// вызов переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ЗаполнитьТабЧастьВСД");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ЗаполнитьТабЧастьВСД( ПараметрыОрганизации, ДанныеЗаполнения, докСсылка, тзАктуальныхПартий, ВыбТермУсловиеПеревозки, Контрагент);
	КонецЕсли;

	Если ЗначениеЗаполнено( ДанныеЗаполнения ) Тогда
		тзЭлементыОснования = ВыгрузитьТЧ(ДанныеЗаполнения.Ссылка, ПараметрыОрганизации );
		Если ЗначениеЗаполнено(ВыбТермУсловиеПеревозки) Тогда
			Отбор = Новый Структура("ТермУсловияПеревозки", ВыбТермУсловиеПеревозки);
			тзЭлементыКсписанию = тзЭлементыОснования.Скопировать(Отбор);
		Иначе
			тзЭлементыКсписанию = тзЭлементыОснования.Скопировать();
		КонецЕсли;
 	КонецЕсли;
	
	Если докСсылка.Получатель_ХозСубъект.ПерсональныеПараметрыСписанияПартий Тогда 
		ПолеСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамКолонкаСортировкиПартииСписания;
		ЗнакСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамЗнакСортировкиУбывание;
	Иначе 
		ПолеСортировкиПокупателя = Неопределено;
		ЗнакСортировкиПокупателя = Неопределено;
	КонецЕсли;
	ПартииКСписанию = кб99_ВСД.тзПартииСписанияПоТзПродукция_Элемент( ПараметрыОрганизации, тзЭлементыКсписанию, тзАктуальныхПартий, ПолеСортировкиПокупателя, ЗнакСортировкиПокупателя, Контрагент);
	
	Если (ПартииКСписанию.Количество() = 0) и НЕ(ПараметрыОрганизации["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"]) Тогда
		кб99_ВСД.СообщитьИнфо("Нет актуальных партий для создания ВСД по "+ ?(ДанныеЗаполнения = Неопределено,"Переданным данным",ДанныеЗаполнения.Ссылка));
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрокаТовары Из ПартииКСписанию Цикл
		НоваяСтрока = докСсылка.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
		ЗаполнитьРеквизитыСтрокиВСД(ПараметрыОрганизации, НоваяСтрока, ТекСтрокаТовары, докСсылка);
	КонецЦикла;
	
КонецФункции

// Заполняет ТЧ документа ВСД по Входящим данным , вызывается из ЗаполнитьНаосновании ВСД2_Транзакция
// ДанныеЗаполнения = Документ основание, берем из него ТЧ для расчета Кол-ва и Продэлементы для фильтра партий,
// также данные для заполнения Маркировок
// тзЭлементыОснования = входящая ТаблицаЗначений :
// тзЭлементыОснования = Новый("ТаблицаЗначений");
// тзЭлементыОснования.Колонки.Добавить("Номенклатура");
// тзЭлементыОснования.Колонки.Добавить("Продукция_Элемент");
// тзЭлементыОснования.Колонки.Добавить("Количество");
// тзЭлементыОснования.Колонки.Добавить("Упаковки");
Функция ЗаполнитьТабЧастьВСДпоТЗ( ПараметрыОрганизации, тзЭлементыОснования, докСсылка, тзАктуальныхПартий = Неопределено, ВыбТермУсловиеПеревозки = Неопределено) Экспорт

	// вызов переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ЗаполнитьТабЧастьВСДпоТЗ");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ЗаполнитьТабЧастьВСДпоТЗ( ПараметрыОрганизации, тзЭлементыОснования, докСсылка, тзАктуальныхПартий, ВыбТермУсловиеПеревозки );
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбТермУсловиеПеревозки) Тогда
		Отбор = Новый Структура("ТермУсловияПеревозки", ВыбТермУсловиеПеревозки);
		тзЭлементыКсписанию = тзЭлементыОснования.Скопировать(Отбор);
	Иначе
		тзЭлементыКсписанию = тзЭлементыОснования.Скопировать();
	КонецЕсли;
 
	Если докСсылка.Получатель_ХозСубъект.ПерсональныеПараметрыСписанияПартий Тогда 
		ПолеСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамКолонкаСортировкиПартииСписания;
		ЗнакСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамЗнакСортировкиУбывание;
	Иначе 
		ПолеСортировкиПокупателя = Неопределено;
		ЗнакСортировкиПокупателя = Неопределено;
	КонецЕсли;
	ПартииКСписанию = кб99_ВСД.тзПартииСписанияПоТзПродукция_Элемент( ПараметрыОрганизации, тзЭлементыКсписанию, тзАктуальныхПартий, ПолеСортировкиПокупателя, ЗнакСортировкиПокупателя  );
	
	Если (ПартииКСписанию.Количество() = 0) и НЕ(ПараметрыОрганизации["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"]) Тогда
		кб99_ВСД.СообщитьИнфо("Нет актуальных партий для создания ВСД ", тзЭлементыОснования );
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрокаТовары Из ПартииКСписанию Цикл
		НоваяСтрока = докСсылка.Товары.Добавить();			
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
		ЗаполнитьРеквизитыСтрокиВСД(ПараметрыОрганизации, НоваяСтрока, ТекСтрокаТовары, докСсылка);
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьКорректировочныйВСД(ПараметрыОрганизации, ДокументОснование, Документ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	кб99_ВСД2.Продукция_Элемент КАК Продукция_Элемент,
	|	кб99_ВСД2.Продукция КАК Продукция,
	|	кб99_ВСД2.ВидПродукции КАК ВидПродукции,
	|	кб99_ВСД2.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	кб99_ВСД2.Количество КАК Количество,
	|	кб99_ВСД2.UUID КАК UUID_ВСД,
	|	кб99_ВСД2.GTIN КАК GTIN,
	|	кб99_ВСД2.Артикул КАК Артикул,
	|	кб99_ВСД2.РезультатыИсследований КАК РезультатыИсследований,
	|	кб99_ВСД2.Цель КАК Цель
	|ИЗ
	|	Справочник.кб99_ВСД2 КАК кб99_ВСД2
	|ГДЕ
	|	кб99_ВСД2.ДокументОснование = &ДокументОснование
	|	И кб99_ВСД2.СтатусВСД = &СтатусВСД";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("СтатусВСД", Перечисления.кб99_СтатусВСД.WITHDRAWN);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		стрТовары = Документ.Товары.Добавить();
		стрТовары.КлючСтроки = Новый УникальныйИдентификатор;
		ЗаполнитьЗначенияСвойств(стрТовары, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьКоличествоПотребительскихУпаковок(СтрокаУпак, СтрокаОснование) Экспорт
	
	// вызов переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("РассчитатьКоличествоПотребительскихУпаковок");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.РассчитатьКоличествоПотребительскихУпаковок( СтрокаУпак, СтрокаОснование );
	КонецЕсли;

	Номенклатура = СтрокаОснование.Номенклатура;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Коэфф = 1;
	КонецЕсли;
	
	Если ЕстьРеквизитИлиСвойствоОбъекта(Номенклатура, "ВесИспользовать") Тогда 				
		Если Номенклатура.ВесИспользовать Тогда
			Если Номенклатура.ВесЗнаменатель>0 Тогда 
				Коэфф = СтрокаОснование.Номенклатура.ВесЧислитель / СтрокаОснование.Номенклатура.ВесЗнаменатель;
			Иначе
				Коэфф = 1;
			КонецЕсли;
		КонецЕсли;
	Иначе 
		Если ЗначениеЗаполнено(СтрокаОснование.Продукция_Элемент) Тогда
			Коэфф = ?(СтрокаОснование.Продукция_Элемент.ФасовкаОбъем=0, 1, СтрокаОснование.Продукция_Элемент.ФасовкаОбъем);
		Иначе
			Коэфф = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Цел(СтрокаОснование.Количество / Коэфф);
	
КонецФункции

#КонецОбласти

#Область ПереопределениеФункций

Функция ФункцияПереопределена( ИмяФункции ) Экспорт
 
 	// Проверка переопределения функции в Общем модуле ВСД_Переопределения
 	Модуль  = ОбщийМодуль("кб99_ВСД_Переопределения");
	Если Модуль = Неопределено Тогда
		Возврат Неопределено;
 	КонецЕсли;  
	
	Если Модуль.НайтиФункцию( ИмяФункции ) Тогда 
		Возврат Модуль;
	Иначе
		// переопределения нет
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ЗаполнениеТаблицыОтгрузок
// ================ Заполнение табличной части ============================

&НаСервере
Функция ПолучитьТзРеализаций( ПараметрыФункции ) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьТзРеализаций");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.ПолучитьТзРеализаций( ПараметрыФункции );
	КонецЕсли;	
	
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ДатаНачала", ПараметрыФункции["ДатаНачала"] );
    Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыФункции["ДатаОкончания"] );

	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыФункции["Организации"]);
	
	Если ПараметрыФункции["ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя"] Тогда
		Попытка
			Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", ПараметрыФункции["ПлощадкаОтправителя"].Склад );
			Если (НЕ(ЗначениеЗаполнено( ПараметрыФункции["ПлощадкаОтправителя"].Склад )) и ( ПараметрыФункции["ПлощадкаОтправителя"].Склады.количество()=0)) Тогда
				кб99_ВСД.СообщитьИнфо("Не определен Склад по Площадке "+ПараметрыФункции["ПлощадкаОтправителя"]+" привяжите склад к площадке либо отключите параметр [Фильтровать Реализацию По Складу Площадки Отправителя]!");
			КонецЕсли;
			если ПараметрыФункции["ПлощадкаОтправителя"].Склады.количество()>0 тогда
				Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", ПараметрыФункции["ПлощадкаОтправителя"].Склады.выгрузить(,"Склад"));
			конецесли;
		Исключение
			Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", "");
			кб99_ВСД.СообщитьИнфо("Не определен Склад по Площадке для фильтрации документов!");
		КонецПопытки;
	КонецЕсли;

    Попытка Запрос.УстановитьПараметр("ВыбМаршрут", ПараметрыФункции["Маршрут"] ); Исключение КонецПопытки;

    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВСД2_транзакция.Ссылка КАК ВСД,
	|	ВСД2_транзакция.ДокументОснование КАК ДокОснование
	|ПОМЕСТИТЬ втВСД
	|ИЗ
	|	Документ.ВСД2_транзакция КАК ВСД2_транзакция
	|ГДЕ
	|	НЕ ВСД2_транзакция.ПометкаУдаления
	|	И НЕ ВСД2_транзакция.ЭтоПеремещениеОтПоставщика
	|   
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВСД_ХозСубъект.Ссылка КАК ХС,
	|	ВСД_ХозСубъект.Контрагент КАК КонтрагентХС,
	|	ВСД_Площадка.Ссылка КАК ВСД_Площадка,
	|	ВСД_Площадка.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ втПлощадки
	|ИЗ
	|	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка
	|		ПО (ВСД_Площадка.ХозСубъект = ВСД_ХозСубъект.Ссылка)
	|			И (НЕ ВСД_Площадка.ПометкаУдаления)
	|ГДЕ
	|	НЕ ВСД_ХозСубъект.ПометкаУдаления
	|	И НЕ ВСД_ХозСубъект.Контрагент ЕСТЬ NULL
	|	И НЕ ВСД_ХозСубъект.Контрагент = НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КонтрагентХС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент,
	|	ВСД_Соответсвия.Владелец КАК Номенклатура
	|ПОМЕСТИТЬ втСоответствия
	|ИЗ
	|	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	|ГДЕ
	|	НЕ ВСД_Соответсвия.ПродукцияЭлемент ЕСТЬ NULL
	|	И НЕ ВСД_Соответсвия.ПометкаУдаления
	|	И ВСД_Соответсвия.ОсновноеСоответствие
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТовары.Ссылка КАК Ссылка,
	|	РеализацияТовары.Номенклатура КАК Номенклатура,
	|	(РеализацияТовары.@Количество@ * @КоэффициентПересчета@) КАК Количество,
	|	РеализацияТовары.@КоличествоМест@ КАК КоличествоМест,
	|	РеализацияТовары.Сумма КАК Сумма
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.&ТекстПоляИсточникОтгрузка&.&НаименованиеТабличнойЧастиТовары& КАК РеализацияТовары
	|ГДЕ
	|	РеализацияТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РеализацияТовары.Ссылка.Проведен
	|	И РеализацияТовары.Сумма > 0
	|	И РеализацияТовары.Ссылка.Организация В ИЕРАРХИИ(&СписокОрганизаций)
    |
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Ссылка КАК Ссылка,
	|	СУММА(втТовары.Количество) КАК Количество,
	|	СУММА(втТовары.КоличествоМест) КАК КоличествоМест,
	|	СУММА(втТовары.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втРеализацияТоваровУслугТовары
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСоответствия КАК втСоответствия
	|		ПО втТовары.Номенклатура = втСоответствия.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	втТовары.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Док,
	|	@Грузополучатель@ КАК Грузополучатель,
	|	ВЫБОР КОГДА РеализацияТоваровУслуг.&ТекстПоляГоловнойКонтрагент& = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ТОГДА РеализацияТоваровУслуг.Контрагент 
	|		ИНАЧЕ РеализацияТоваровУслуг.&ТекстПоляГоловнойКонтрагент&
	|	КОНЕЦ КАК Контрагент,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	""№"" + (ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номер КАК СТРОКА(20))) + "" от "" + 
	|ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(РеализацияТоваровУслуг.Дата) * 2 + 1, 2)  + ""."" +
	|ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(РеализацияТоваровУслуг.Дата) * 2 + 1, 2) + ""."" + 
	|ВЫБОР
	|	КОГДА ГОД(РеализацияТоваровУслуг.Дата) > 1900
	|		ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(РеализацияТоваровУслуг.Дата) - 2000) * 2 + 1, 2)
	|	ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(РеализацияТоваровУслуг.Дата) - 1900) * 2 + 1, 2)
	|КОНЕЦ КАК ДокПредставление,
	|	ПОДСТРОКА(РеализацияТоваровУслуг.Комментарий, 0, 300) КАК Комментарий,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслугТовары.КоличествоМест) КАК КоличествоМест,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|	втПлощадки.ВСД_Площадка КАК Площадка,
	|	втВСД.ВСД КАК ВСД,
	|	втВСД.ВСД.СтатусВСД КАК СтатусВСД,
	|	""№"" + (ВЫРАЗИТЬ(втВСД.ВСД.Номер КАК СТРОКА(20))) + "" от "" + ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(втВСД.ВСД.Дата) * 2 + 1, 2) + ""."" + ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(втВСД.ВСД.Дата) * 2 + 1, 2) + ""."" + 
	|ВЫБОР
	|	КОГДА ГОД(втВСД.ВСД.Дата) > 1900
	|		ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(втВСД.ВСД.Дата) - 2000) * 2 + 1, 2)
	|	ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(втВСД.ВСД.Дата) - 1900) * 2 + 1, 2)
	|КОНЕЦ КАК ВСДПредставление,	
	|   @Маршрут@     
	|	@НомерАвто@ Как НомерАвто,
	|	ВСД_ХозСубъект.Ссылка КАК ХозСубъект
	|ИЗ
	|	Документ.&ТекстПоляИсточникОтгрузка& КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВСД КАК втВСД
	|		ПО РеализацияТоваровУслуг.Ссылка = втВСД.ДокОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадки КАК втПлощадки
	|		ПО  @Грузополучатель_Связи@
	|		 И	ВЫБОР КОГДА РеализацияТоваровУслуг.&ТекстПоляГоловнойКонтрагент& = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА РеализацияТоваровУслуг.Контрагент = втПлощадки.КонтрагентХС 
	|				ИНАЧЕ РеализацияТоваровУслуг.&ТекстПоляГоловнойКонтрагент& = втПлощадки.КонтрагентХС
	|			КОНЕЦ 
	//|			И (НЕ РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент ЕСТЬ NULL)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|		ПО	ВЫБОР КОГДА РеализацияТоваровУслуг.&ТекстПоляГоловнойКонтрагент& = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА РеализацияТоваровУслуг.Контрагент = ВСД_ХозСубъект.Контрагент
	|				ИНАЧЕ РеализацияТоваровУслуг.&ТекстПоляГоловнойКонтрагент& = ВСД_ХозСубъект.Контрагент
	|			КОНЕЦ 
	//|		ПО РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ВСД_ХозСубъект.Контрагент
	|			И (НЕ ВСД_ХозСубъект.ПометкаУдаления)
	|		@Отбор_по_НоменклатураСоответствия@
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслугТовары.Сумма > 0
	|	И РеализацияТоваровУслуг.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|    @Отбор_по_Складам@
	|    @Маршрут_Условие@
	|	 @Отбор_Свой_Контрагент@
	|	 @ОтборВСД@
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка,
	|    @Грузополучатель_Группировка@
	|	втПлощадки.ВСД_Площадка,
	|	втВСД.ВСД,      
	|	втВСД.ВСД.СтатусВСД,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	ВСД_ХозСубъект.Ссылка,
	|	ВЫБОР КОГДА РеализацияТоваровУслуг.&ТекстПоляГоловнойКонтрагент& = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ТОГДА РеализацияТоваровУслуг.Контрагент 
	|		ИНАЧЕ РеализацияТоваровУслуг.&ТекстПоляГоловнойКонтрагент&
	|	КОНЕЦ,
	|	ПОДСТРОКА(РеализацияТоваровУслуг.Комментарий, 0, 300),	
	|	""№"" + (ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номер КАК СТРОКА(20))) + "" от "" + 
	|ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(РеализацияТоваровУслуг.Дата) * 2 + 1, 2)  + ""."" +
	|ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(РеализацияТоваровУслуг.Дата) * 2 + 1, 2) + ""."" + 
	|ВЫБОР
	|	КОГДА ГОД(РеализацияТоваровУслуг.Дата) > 1900
	|		ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(РеализацияТоваровУслуг.Дата) - 2000) * 2 + 1, 2)
	|	ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(РеализацияТоваровУслуг.Дата) - 1900) * 2 + 1, 2)
	|КОНЕЦ,
	|	""№"" + (ВЫРАЗИТЬ(втВСД.ВСД.Номер КАК СТРОКА(20))) + "" от "" + ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(втВСД.ВСД.Дата) * 2 + 1, 2) + ""."" + ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(втВСД.ВСД.Дата) * 2 + 1, 2) + ""."" + 
	|ВЫБОР
	|	КОГДА ГОД(втВСД.ВСД.Дата) > 1900
	|		ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(втВСД.ВСД.Дата) - 2000) * 2 + 1, 2)
	|	ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(втВСД.ВСД.Дата) - 1900) * 2 + 1, 2)
	|КОНЕЦ 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	
	//// @Отбор_по_НоменклатураСоответствия@
	Если ПараметрыФункции["ПропускатьПустыеСвойства"] Тогда
		ТекстОтбор = "
					  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеализацияТоваровУслугТовары КАК РеализацияТоваровУслугТовары
	    			  |		ПО РеализацияТоваровУслуг.Ссылка = РеализацияТоваровУслугТовары.Ссылка";
	Иначе
		ТекстОтбор = "
					  |     ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары КАК РеализацияТоваровУслугТовары
					  |    	ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)";	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_НоменклатураСоответствия@", ТекстОтбор );
	
    Если ПараметрыФункции["РеквизитГрузополучатель"] = 0 Тогда
        // Контрагент
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "РеализацияТоваровУслуг.Контрагент ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (РеализацияТоваровУслуг.Контрагент = втПлощадки.Контрагент
			|		И НЕ втПлощадки.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", "РеализацияТоваровУслуг.Контрагент,  ");        
    ИначеЕсли ПараметрыФункции["РеквизитГрузополучатель"] = 1 Тогда
		// Адрес доставки
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) = втПлощадки.Контрагент
			|		И НЕ втПлощадки.Контрагент = """") ") ;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", " ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100), ");
	ИначеЕсли ПараметрыФункции["РеквизитГрузополучатель"] = 2 Тогда
        // Партнер
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "РеализацияТоваровУслуг.Партнер ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (РеализацияТоваровУслуг.Партнер = втПлощадки.Контрагент
			|		И НЕ втПлощадки.Контрагент = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", "РеализацияТоваровУслуг.Партнер,  ");
	ИначеЕсли ПараметрыФункции["РеквизитГрузополучатель"] = 3 Тогда
        // Грузополучатель
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "РеализацияТоваровУслуг.Грузополучатель ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (РеализацияТоваровУслуг.Грузополучатель = втПлощадки.Контрагент
			|		И НЕ втПлощадки.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", "РеализацияТоваровУслуг.Грузополучатель,  ");
	Иначе	
		// Договор
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "РеализацияТоваровУслуг.Договор ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (РеализацияТоваровУслуг.Договор = втПлощадки.Контрагент  
			|		И НЕ втПлощадки.Контрагент = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", "РеализацияТоваровУслуг.Договор,  "); 
    КонецЕсли;

    Если ПараметрыФункции["ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя"] Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_Складам@", " И РеализацияТоваровУслуг.&ПолеСклад& В ИЕРАРХИИ(&ПлощадкаОтправителяСклад) ");        
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_Складам@", "  ");        
    КонецЕсли;

    Если ЗначениеЗаполнено( ПараметрыФункции["Маршрут"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут@", "РеализацияТоваровУслуг.Маршрут КАК Маршрут,");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут_Условие@", " И РеализацияТоваровУслуг.Маршрут В ИЕРАРХИИ(&ВыбМаршрут) ");        
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут@", " ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут_Условие@", " ");        		
	КонецЕсли;    

	// Пересчет ШТ в КГ
	КПересчета = ПараметрыФункции["ПарамКоэффициентПересчетаКоличества"];
	Коэфф = 0;
	Попытка
		Коэфф = Число(КПересчета);
	Исключение
		Коэфф = 0;
	КонецПопытки;
	Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета@","1");
	ИначеЕсли Строка(Коэфф)    = КПересчета Тогда  // Это число
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета@",КПересчета);
	Иначе 			
		// Не работает, если коэфф не целочисленный
		Запрос.Текст = СтрЗаменить( Запрос.Текст, "@КоэффициентПересчета@", "РеализацияТовары."+КПересчета );	
	КонецЕсли;
	
    Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличество"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", ПараметрыФункции["НазваниеРеквизитаКоличество"]);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", "Количество");
	КонецЕсли;
    Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличествоМест"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", ПараметрыФункции["НазваниеРеквизитаКоличествоМест"]);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", "Количество");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФункции["СвойКонтрагент"]) Тогда
		Запрос.УстановитьПараметр("СвойКонтрагент", ПараметрыФункции["СвойКонтрагент"]);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_Свой_Контрагент@", "И РеализацияТоваровУслуг.Контрагент <> &СвойКонтрагент");
	Иначе			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_Свой_Контрагент@", "");
	КонецЕсли;
	
	// evg если на основании реализации уже введен ВСД2 Транзакция - выводить номер автомобиля из ВСД
	Если ЗначениеЗаполнено(ПараметрыФункции["НомерАвто"]) Тогда 
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "@НомерАвто@", """"+ПараметрыФункции["НомерАвто"]+"""");	
		ТекстЗапросаНомерАвто = "ПОДСТРОКА(ВЫБОР КОГДА НЕ втВСД.ВСД.номерАвто ЕСТЬ NULL ТОГДА втВСД.ВСД.номерАвто ИНАЧЕ """
																			+ПараметрыФункции["НомерАвто"]+""" КОНЕЦ, 0, 50)";
	Иначе
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "@НомерАвто@", """""");	
		ТекстЗапросаНомерАвто = "ПОДСТРОКА(ВЫБОР КОГДА НЕ втВСД.ВСД.номерАвто ЕСТЬ NULL ТОГДА втВСД.ВСД.номерАвто ИНАЧЕ """" КОНЕЦ, 0, 50)";
	КонецЕсли; 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@НомерАвто@", ТекстЗапросаНомерАвто);
	
	// представление документа
	ЧислоСтрокой = "00";
	Для N = 0 По 99 Цикл
	   ЧислоСтрокой = ЧислоСтрокой + Формат(N,"ЧЦ=2; ЧВН=");
   	КонецЦикла;	
   	Запрос.УстановитьПараметр("ЧислоСтрокой", ЧислоСтрокой);
	
	ОтборВСД = ?(ПараметрыФункции["СкрытьОформленные"], 
		"И ВЫБОР КОГДА ЕСТЬNULL(втВСД.ВСД, ЗНАЧЕНИЕ(Документ.ВСД2_транзакция.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ВСД2_транзакция.ПустаяСсылка)
		|		ТОГДА втВСД.ВСД.СтатусВСД <> ЗНАЧЕНИЕ(Перечисление.кб99_СтатусВСД.CONFIRMED) 
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ",
		"");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@ОтборВСД@", ОтборВСД);
	
	ПереопределяемыеПоляЗапроса = ПолучитьПредставлениеПолейДокументаВЗапрос();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляИсточникОтгрузка&", ПереопределяемыеПоляЗапроса.ТекстПоляИсточникОтгрузка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеТабличнойЧастиТовары&", ПереопределяемыеПоляЗапроса.НаименованиеТабличнойЧастиТовары);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляГоловнойКонтрагент&", ПереопределяемыеПоляЗапроса.ТекстПоляГоловнойКонтрагент);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеСклад&", ПереопределяемыеПоляЗапроса.ПолеСклад);
	
    Попытка
        Рез = Запрос.Выполнить();
    Исключение
        Рез = Неопределено;
        кб99_ВСД.СообщитьИнфо("Указан неверный параметр НазваниеРеквизитаКоличество или ПарамКоэффициентПересчетаКоличества "+Описаниеошибки());
    КонецПопытки;

    Возврат Рез;
	
КонецФункции

&НаСервере
Функция СформироватьЗапросПеремещения( ПараметрыФункции ) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("СформироватьЗапросПеремещения");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.СформироватьЗапросПеремещения( ПараметрыФункции );
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",					НачалоДня( ПараметрыФункции["ДатаНачала"] ) );
	Запрос.УстановитьПараметр("ДатаОкончания",				КонецДня( ПараметрыФункции["ДатаОкончания"] ));
	Запрос.УстановитьПараметр("СписокОрганизаций",			ПараметрыФункции["Организации"] );
	
	//Если ПараметрыФункции["ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя"] Тогда
		Попытка
			Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", ПараметрыФункции["ПлощадкаОтправителя"].Склад );
			Если (НЕ(ЗначениеЗаполнено( ПараметрыФункции["ПлощадкаОтправителя"].Склад )) и ( ПараметрыФункции["ПлощадкаОтправителя"].Склады.количество()=0)) Тогда
				кб99_ВСД.СообщитьИнфо("Не определен Склад по Площадке "+ПараметрыФункции["ПлощадкаОтправителя"]+" привяжите склад к площадке либо отключите параметр [Фильтровать Реализацию По Складу Площадки Отправителя]!");
			КонецЕсли;
			если ПараметрыФункции["ПлощадкаОтправителя"].Склады.количество()>0 тогда
				Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", ПараметрыФункции["ПлощадкаОтправителя"].Склады.выгрузить(,"Склад"));
			конецесли;
		Исключение
			Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", "");
			кб99_ВСД.СообщитьИнфо("Не определен Склад по Площадке для фильтрации документов!");
		КонецПопытки;
	//КонецЕсли;

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТовары.Ссылка КАК Ссылка,
	|	ПеремещениеТовары.Номенклатура КАК Номенклатура,
	|	ПеремещениеТовары.@Количество@ * @КоэффициентПересчета@ КАК Количество,
	|	ПеремещениеТовары.@КоличествоМест@ КАК КоличествоМест
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.&ТекстПоляИсточникПеремещение&.&НаименованиеТабличнойЧастиТовары& КАК ПеремещениеТовары
	|ГДЕ
	|	ПеремещениеТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПеремещениеТовары.Ссылка.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|	И ПеремещениеТовары.Ссылка.&ПолеСкладОтправитель& В ИЕРАРХИИ(&ПлощадкаОтправителяСклад)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВСД_Соответсвия.Владелец КАК Номенклатура,
	|	ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент
	|ПОМЕСТИТЬ втСоответствия
	|ИЗ
	|	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	|ГДЕ
	|	НЕ ВСД_Соответсвия.ПродукцияЭлемент ЕСТЬ NULL
	|	И ВСД_Соответсвия.ОсновноеСоответствие
	|	И НЕ ВСД_Соответсвия.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Ссылка КАК Ссылка,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Количество КАК Количество,
	|	втСоответствия.ПродукцияЭлемент КАК ПродукцияЭлемент,
	|	втТовары.КоличествоМест КАК КоличествоМест
	|ПОМЕСТИТЬ ПеремещениеТоваровТовары
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСоответствия КАК втСоответствия
	|		ПО втТовары.Номенклатура = втСоответствия.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Док,
	|	ПеремещениеТоваров.&ПолеСкладПолучатель& КАК Грузополучатель,
	|	ПеремещениеТоваров.Номер КАК Номер,
	|	ПеремещениеТоваров.Дата КАК Дата,
	|	ПОДСТРОКА(ПеремещениеТоваров.Комментарий, 0, 300) КАК Комментарий,
	|	СУММА(ПеремещениеТоваровТовары.@Количество@) КАК Количество,
	|	СУММА(ПеремещениеТоваровТовары.@КоличествоМест@) КАК КоличествоМест,
	|	ВСД_Площадка.Ссылка КАК Площадка,
	//|	ВСД_Площадка.ХозСубъект КАК ХозСубъект,
	|	&Отправитель_Хозсубъект КАК ХозСубъект,
	| 	&Контрагент КАК Контрагент,
	|	ВСД2_транзакция.Ссылка КАК ВСД,
	|	ВСД2_транзакция.СтатусВСД КАК СтатусВСД,
	|	""№"" + (ВЫРАЗИТЬ(ВСД2_транзакция.Номер КАК СТРОКА(20))) + "" от "" + ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(ВСД2_транзакция.Дата) * 2 + 1, 2) + ""."" + ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(ВСД2_транзакция.Дата) * 2 + 1, 2) + ""."" + 
	|		ВЫБОР
	|			КОГДА ГОД(ВСД2_транзакция.Дата) > 1900
	|			ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ВСД2_транзакция.Дата) - 2000) * 2 + 1, 2)
	|			ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ВСД2_транзакция.Дата) - 1900) * 2 + 1, 2)
	|	КОНЕЦ КАК ВСДПредставление,
	|	""№"" + (ВЫРАЗИТЬ(ПеремещениеТоваров.Номер КАК СТРОКА(20))) + "" от "" + 
	|		ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(ПеремещениеТоваров.Дата) * 2 + 1, 2)  + ""."" +
	|		ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(ПеремещениеТоваров.Дата) * 2 + 1, 2) + ""."" + 
	|		ВЫБОР
	|			КОГДА ГОД(ПеремещениеТоваров.Дата) > 1900
	|			ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ПеремещениеТоваров.Дата) - 2000) * 2 + 1, 2)
	|		ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ПеремещениеТоваров.Дата) - 1900) * 2 + 1, 2)
	|	КОНЕЦ КАК ДокПредставление
	|ИЗ
	|	Документ.&ТекстПоляИсточникПеремещение& КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД2_транзакция КАК ВСД2_транзакция
	|		ПО ПеремещениеТоваров.Ссылка = ВСД2_транзакция.ДокументОснование
	|			И (НЕ ВСД2_транзакция.ПометкаУдаления) 
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка
	|		ПО ПеремещениеТоваров.&ПолеСкладПолучатель& = ВСД_Площадка.Склад
	|			И (НЕ ВСД_Площадка.ПометкаУдаления)
	|    @Отбор_по_НоменклатураСоответствия@
	|ГДЕ
	|	ПеремещениеТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПеремещениеТоваров.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|	И ПеремещениеТоваров.&ПолеСкладОтправитель& = &ПлощадкаОтправителяСклад
	|	И Не ПеремещениеТоваров.&ПолеСкладПолучатель& = ЗНАЧЕНИЕ(Справочник.&СправочникСклады&.ПустаяСсылка)
	|   @ОтборВСД@
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваров.Ссылка,
	|	ВСД_Площадка.Ссылка,
	|	ВСД_Площадка.ХозСубъект,
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.&ПолеСкладПолучатель&,
	|	ПОДСТРОКА(ПеремещениеТоваров.Комментарий, 0, 300),
	|	ВСД2_транзакция.СтатусВСД,
	|	ВСД2_транзакция.Ссылка,
	|	""№"" + (ВЫРАЗИТЬ(ВСД2_транзакция.Номер КАК СТРОКА(20))) + "" от "" + ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(ВСД2_транзакция.Дата) * 2 + 1, 2) + ""."" + ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(ВСД2_транзакция.Дата) * 2 + 1, 2) + ""."" + 
	|		ВЫБОР
	|			КОГДА ГОД(ВСД2_транзакция.Дата) > 1900
	|			ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ВСД2_транзакция.Дата) - 2000) * 2 + 1, 2)
	|			ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ВСД2_транзакция.Дата) - 1900) * 2 + 1, 2)
	|	КОНЕЦ,
	|	""№"" + (ВЫРАЗИТЬ(ПеремещениеТоваров.Номер КАК СТРОКА(20))) + "" от "" + 
	|		ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(ПеремещениеТоваров.Дата) * 2 + 1, 2)  + ""."" +
	|		ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(ПеремещениеТоваров.Дата) * 2 + 1, 2) + ""."" + 
	|		ВЫБОР
	|			КОГДА ГОД(ПеремещениеТоваров.Дата) > 1900
	|			ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ПеремещениеТоваров.Дата) - 2000) * 2 + 1, 2)
	|		ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ПеремещениеТоваров.Дата) - 1900) * 2 + 1, 2)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	
	Если ПараметрыФункции["ПропускатьПустыеСвойства"] Тогда
		ТекстОтбор = "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПеремещениеТоваровТовары КАК ПеремещениеТоваровТовары
		|		ПО ПеремещениеТоваров.Ссылка = ПеремещениеТоваровТовары.Ссылка ";
	Иначе
		ТекстОтбор = "
		|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.&ТекстПоляИсточникПеремещение&.&НаименованиеТабличнойЧастиТовары& КАК ПеремещениеТоваровТовары
		|       ПО (ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка) ";	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_НоменклатураСоответствия@", ТекстОтбор );
	
    Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличество"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", ПараметрыФункции["НазваниеРеквизитаКоличество"]);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", "Количество");
	КонецЕсли;
	
	//Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличествоМест"] ) Тогда
	//    Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", ПараметрыФункции["НазваниеРеквизитаКоличествоМест"]);
	//Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", "Количество");
	//КонецЕсли;
	// Пересчет ШТ в КГ
	КПересчета = ПараметрыФункции["ПарамКоэффициентПересчетаКоличества"];
	Коэфф = 0;
	Попытка
		Коэфф = Число(КПересчета);
	Исключение
		Коэфф = 0;
	КонецПопытки;
	Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "@КоэффициентПересчета@", "1");
	ИначеЕсли Строка(Коэфф) = КПересчета Тогда  // Это число
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "@КоэффициентПересчета@", КПересчета);
	Иначе 			
		// Не работает, если коэфф не целочисленный
		Запрос.Текст = СтрЗаменить( Запрос.Текст, "@КоэффициентПересчета@", "ПеремещениеТовары." + КПересчета );	
	КонецЕсли;   
	
	Запрос.УстановитьПараметр("Отправитель_Хозсубъект", ПараметрыФункции["Отправитель_Хозсубъект"] );
	Запрос.УстановитьПараметр("Контрагент", ПараметрыФункции["Отправитель_Хозсубъект"].Контрагент );
	
	ЧислоСтрокой = "00";
	Для N = 0 По 99 Цикл
	   ЧислоСтрокой = ЧислоСтрокой + Формат(N, "ЧЦ=2; ЧВН=");
   	КонецЦикла;	
   	Запрос.УстановитьПараметр("ЧислоСтрокой", ЧислоСтрокой);
	
	ОтборВСД = ?(ПараметрыФункции["СкрытьОформленные"], 
		"И ВЫБОР КОГДА ЕСТЬNULL(ВСД2_транзакция.Ссылка, ЗНАЧЕНИЕ(Документ.ВСД2_транзакция.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ВСД2_транзакция.ПустаяСсылка)
		|		ТОГДА ВСД2_транзакция.Ссылка.СтатусВСД <> ЗНАЧЕНИЕ(Перечисление.кб99_СтатусВСД.CONFIRMED) 
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ",
		"");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@ОтборВСД@", ОтборВСД);
	
	ПереопределяемыеПоляЗапроса = ПолучитьПредставлениеПолейДокументаВЗапрос();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляИсточникПеремещение&", ПереопределяемыеПоляЗапроса.ТекстПоляИсточникПеремещение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеТабличнойЧастиТовары&", ПереопределяемыеПоляЗапроса.НаименованиеТабличнойЧастиТовары);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеСкладОтправитель&", ПереопределяемыеПоляЗапроса.ПолеСкладОтправитель);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеСкладПолучатель&", ПереопределяемыеПоляЗапроса.ПолеСкладПолучатель);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СправочникСклады&", ПереопределяемыеПоляЗапроса.СправочникСклады);

	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Функция СформироватьЗапросЗаказы( ПараметрыФункции ) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("СформироватьЗапросПеремещения");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.СформироватьЗапросПеремещения( ПараметрыФункции );
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",					НачалоДня( ПараметрыФункции["ДатаНачала"] ) );
	Запрос.УстановитьПараметр("ДатаОкончания",				КонецДня( ПараметрыФункции["ДатаОкончания"] ));
	Запрос.УстановитьПараметр("СписокОрганизаций",			ПараметрыФункции["Организации"] );
		
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВСД2_транзакция.Ссылка КАК ВСД,
	|	ВСД2_транзакция.ДокументОснование КАК ДокОснование
	|ПОМЕСТИТЬ втВСД
	|ИЗ
	|	Документ.ВСД2_транзакция КАК ВСД2_транзакция
	|ГДЕ
	|	НЕ ВСД2_транзакция.ПометкаУдаления
	|	И НЕ ВСД2_транзакция.ЭтоПеремещениеОтПоставщика
	| 
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Док,
	|    @Грузополучатель@ КАК Грузополучатель,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	""№"" + (ВЫРАЗИТЬ(ЗаказПокупателя.Номер КАК СТРОКА(20))) + "" от "" + 
	|		ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(ЗаказПокупателя.Дата) * 2 + 1, 2)  + ""."" +
	|		ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(ЗаказПокупателя.Дата) * 2 + 1, 2) + ""."" + 
	|		ВЫБОР
	|			КОГДА ГОД(ЗаказПокупателя.Дата) > 1900
	|				ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ЗаказПокупателя.Дата) - 2000) * 2 + 1, 2)
	|			ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ЗаказПокупателя.Дата) - 1900) * 2 + 1, 2)
	|		КОНЕЦ КАК ДокПредставление,
	|	ПОДСТРОКА(ЗаказПокупателя.Комментарий, 0, 300) КАК Комментарий,
	|	СУММА(ЗаказПокупателяТовары.@Количество@) КАК Количество,
	|	ВСД_ХозСубъект.Ссылка КАК ХозСубъект,
	|	ЗапросПлощадки.ВСД_Площадка КАК Площадка,
	|	СУММА(ЗаказПокупателяТовары.Сумма) КАК Сумма,
	|	ЗаказПокупателя.&ТекстПоляГоловнойКонтрагент& КАК Контрагент,
	|	СУММА(ЗаказПокупателяТовары.@КоличествоМест@) КАК КоличествоМест,
	|	втВСД.ВСД КАК ВСД,
	|	""№"" + (ВЫРАЗИТЬ(втВСД.ВСД.Номер КАК СТРОКА(20))) + "" от "" + ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(втВСД.ВСД.Дата) * 2 + 1, 2) + ""."" + ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(втВСД.ВСД.Дата) * 2 + 1, 2) + ""."" + 
	|ВЫБОР
	|	КОГДА ГОД(втВСД.ВСД.Дата) > 1900
	|		ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(втВСД.ВСД.Дата) - 2000) * 2 + 1, 2)
	|	ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(втВСД.ВСД.Дата) - 1900) * 2 + 1, 2)
	|КОНЕЦ КАК ВСДПредставление
	|ИЗ
	|	Документ.&ТекстПоляИсточникЗаказ& КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВСД_ХозСубъект.Ссылка КАК ХС,
	|			ВСД_ХозСубъект.Контрагент КАК КонтрагентХС,
	|			ВСД_Площадка.Ссылка КАК ВСД_Площадка,
	|			ВСД_Площадка.Контрагент КАК Контрагент
	|		ИЗ
	|			Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка
	|				ПО (ВСД_Площадка.ХозСубъект = ВСД_ХозСубъект.Ссылка)
	|					И (ВСД_Площадка.ПометкаУдаления = ЛОЖЬ)
	|		ГДЕ
	|			ВСД_ХозСубъект.ПометкаУдаления = ЛОЖЬ
	|			И НЕ ВСД_ХозСубъект.Контрагент ЕСТЬ NULL) КАК ЗапросПлощадки
	|		ПО @Грузополучатель_Связи@
	|			И ЗаказПокупателя.&ТекстПоляГоловнойКонтрагент& = ЗапросПлощадки.КонтрагентХС
	|			И (НЕ ЗаказПокупателя.&ТекстПоляГоловнойКонтрагент& ЕСТЬ NULL)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|		ПО ЗаказПокупателя.&ТекстПоляГоловнойКонтрагент& = ВСД_ХозСубъект.Контрагент
	|			И (ВСД_ХозСубъект.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВСД КАК втВСД
	|		ПО ЗаказПокупателя.Ссылка = втВСД.ДокОснование
	|		@Отбор_по_НоменклатураСоответствия@
	|ГДЕ
	|	ЗаказПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаказПокупателя.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|	И ЗаказПокупателя.Проведен = ИСТИНА
	|	И &ТекстПоляИсточникЗаказ&.&НаименованиеТабличнойЧастиТовары&.Сумма > 0
	|   @ОтборВСД@
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателя.Ссылка,
	|	@Грузополучатель_Группировка@
	|	ЗапросПлощадки.ВСД_Площадка,
	|	ВСД_ХозСубъект.Ссылка,
	|	ЗаказПокупателя.Номер,
	|	ЗаказПокупателя.Дата,
	|	ПОДСТРОКА(ЗаказПокупателя.Комментарий, 0, 300),
	|	""№"" + (ВЫРАЗИТЬ(втВСД.ВСД.Номер КАК СТРОКА(20))) + "" от "" + ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(втВСД.ВСД.Дата) * 2 + 1, 2) + ""."" + ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(втВСД.ВСД.Дата) * 2 + 1, 2) + ""."" + 
	|		ВЫБОР
	|			КОГДА ГОД(втВСД.ВСД.Дата) > 1900
	|				ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(втВСД.ВСД.Дата) - 2000) * 2 + 1, 2)
	|			ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(втВСД.ВСД.Дата) - 1900) * 2 + 1, 2)
	|		КОНЕЦ,
	|	""№"" + (ВЫРАЗИТЬ(ЗаказПокупателя.Номер КАК СТРОКА(20))) + "" от "" + 
	|		ПОДСТРОКА(&ЧислоСтрокой, ДЕНЬ(ЗаказПокупателя.Дата) * 2 + 1, 2)  + ""."" +
	|		ПОДСТРОКА(&ЧислоСтрокой, МЕСЯЦ(ЗаказПокупателя.Дата) * 2 + 1, 2) + ""."" + 
	|		ВЫБОР
	|			КОГДА ГОД(ЗаказПокупателя.Дата) > 1900
	|				ТОГДА ""20"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ЗаказПокупателя.Дата) - 2000) * 2 + 1, 2)
	|			ИНАЧЕ ""19"" + ПОДСТРОКА(&ЧислоСтрокой, (ГОД(ЗаказПокупателя.Дата) - 1900) * 2 + 1, 2)
	|		КОНЕЦ,
	|	втВСД.ВСД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
			
	Если ПараметрыФункции["ПропускатьПустыеСвойства"] Тогда
		ТекстОтбор = "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|	(ВЫБРАТЬ
				|	ДокСтроки1.Ссылка КАК Ссылка,
		        |	ДокСтроки1.Номенклатура КАК Номенклатура,
		        |	ЗапросТовары.ПродукцияЭлемент КАК ПродукцияЭлемент,				
		        |	(ДокСтроки1.@Количество@ * @КоэффициентПересчета@ ) КАК @Количество@,
				|	ДокСтроки1.Сумма КАК Сумма
		        |ИЗ
		        |	Документ.&ТекстПоляИсточникЗаказ&.&НаименованиеТабличнойЧастиТовары& КАК ДокСтроки1
		        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |			Спр1.ПродукцияЭлемент КАК ПродукцияЭлемент,
		        |			Спр1.Владелец КАК Номенклатура
		        |		ИЗ
		        |			Справочник.ВСД_Соответсвия КАК Спр1
		        |		ГДЕ
		        |			НЕ Спр1.ПродукцияЭлемент ЕСТЬ NULL
				|			И Спр1.ПометкаУдаления = ЛОЖЬ
				|		) КАК ЗапросТовары
		        |		ПО (ЗапросТовары.Номенклатура = ДокСтроки1.Номенклатура) 				
				|) КАК ЗаказПокупателяТовары
			|ПО (ЗаказПокупателяТовары.Ссылка = ЗаказПокупателя.Ссылка) ";
	Иначе
		ТекстОтбор = "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.&ТекстПоляИсточникЗаказ&.&НаименованиеТабличнойЧастиТовары& КАК ЗаказПокупателяТовары
		|		ПО (ЗаказПокупателя.Ссылка = ЗаказПокупателяТовары.Ссылка)";
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_НоменклатураСоответствия@", ТекстОтбор );
	
	Если ПараметрыФункции["РеквизитГрузополучатель"] = 0 Тогда
        // Контрагент
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", " ЗаказПокупателя.Контрагент ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (ЗаказПокупателя.Контрагент = ЗапросПлощадки.Контрагент)  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", " ЗаказПокупателя.Контрагент,  ");        
		
	ИначеЕсли ПараметрыФункции["РеквизитГрузополучатель"] = 1 Тогда 
		// Адрес доставки
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "ПОДСТРОКА(ЗаказПокупателя.АдресДоставки, 1, 100) ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (ПОДСТРОКА(ЗаказПокупателя.АдресДоставки, 1, 100) = ЗапросПлощадки.Контрагент) ") ;
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", " ПОДСТРОКА(ЗаказПокупателя.АдресДоставки, 1, 100), ");
		
	ИначеЕсли ПараметрыФункции["РеквизитГрузополучатель"] = 2 Тогда
        // Партнер
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", " ЗаказПокупателя.Партнер ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (ЗаказПокупателя.Партнер = ЗапросПлощадки.Контрагент)  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", " ЗаказПокупателя.Партнер,  ");
		
	ИначеЕсли ПараметрыФункции["РеквизитГрузополучатель"] = 3 Тогда
        // Грузополучатель
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", " ЗаказПокупателя.Грузополучатель ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (ЗаказПокупателя.Грузополучатель = ЗапросПлощадки.Контрагент)  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", " ЗаказПокупателя.Грузополучатель,  ");
		
	Иначе
        // Договор
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", " ЗаказПокупателя.Договор ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (ЗаказПокупателя.Договор = ЗапросПлощадки.Контрагент)  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", " ЗаказПокупателя.Договор,  ");
		
	КонецЕсли;
	
	КПересчета = ПараметрыФункции["ПарамКоэффициентПересчетаКоличества"];
	Коэфф = 0;
	Попытка
		Коэфф = Число(КПересчета);
	Исключение
		Коэфф = 0;
	КонецПопытки;
	Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета@","1");
	ИначеЕсли Строка(Коэфф)    = КПересчета Тогда  // Это число
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета@",КПересчета);
	Иначе 			
		// Не работает, если коэфф не целочисленный
		Запрос.Текст = СтрЗаменить( Запрос.Текст, "@КоэффициентПересчета@", "ДокСтроки1."+КПересчета );	
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличество"] ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", ПараметрыФункции["НазваниеРеквизитаКоличество"]);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", "Количество");
	КонецЕсли;
	Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличествоМест"] ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", ПараметрыФункции["НазваниеРеквизитаКоличествоМест"]);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", "Количество");
	КонецЕсли;
	
	// представление документа
	ЧислоСтрокой = "00";
	Для N = 0 По 99 Цикл
	   ЧислоСтрокой = ЧислоСтрокой + Формат(N,"ЧЦ=2; ЧВН=");
   	КонецЦикла;	
   	Запрос.УстановитьПараметр("ЧислоСтрокой", ЧислоСтрокой);
	
	//ОтборВСД = ?(ПараметрыФункции["СкрытьОформленные"], 
	//	"И НЕ ВСД2_транзакция.СтатусВСД = ЗНАЧЕНИЕ(Перечисление.кб99_СтатусВСД.CONFIRMED)",
	//	"");
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборВСД%", ОтборВСД);
	ОтборВСД = ?(ПараметрыФункции["СкрытьОформленные"], 
		"И ВЫБОР КОГДА ЕСТЬNULL(втВСД.ВСД, ЗНАЧЕНИЕ(Документ.ВСД2_транзакция.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ВСД2_транзакция.ПустаяСсылка)
		|		ТОГДА втВСД.ВСД.СтатусВСД <> ЗНАЧЕНИЕ(Перечисление.кб99_СтатусВСД.CONFIRMED) 
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ",
		"");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@ОтборВСД@", ОтборВСД);
	
	ПереопределяемыеПоляЗапроса = ПолучитьПредставлениеПолейДокументаВЗапрос();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляИсточникЗаказ&", ПереопределяемыеПоляЗапроса.ТекстПоляИсточникЗаказ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеТабличнойЧастиТовары&", ПереопределяемыеПоляЗапроса.НаименованиеТабличнойЧастиТовары);
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляГоловнойКонтрагент&", ПереопределяемыеПоляЗапроса.ТекстПоляГоловнойКонтрагент);
	
    Попытка
        Рез = Запрос.Выполнить();
    Исключение
        Рез = Неопределено;
        кб99_ВСД.СообщитьИнфо("Указан неверный параметр НазваниеРеквизитаКоличество или ПарамКоэффициентПересчетаКоличества "+Описаниеошибки());
    КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

#КонецОбласти 

#Область Формы

Процедура ОбновитьНадписи(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос = кб99_ВСД_Общий.НайтиПоследнийЗапрос( Объект.Ссылка );
	Форма.ApplicationID = Запрос.ApplicationID;
	Форма.СтатусЗапроса = Запрос.СтатусЗапроса;
	
	Если ЗначениеЗаполнено( Запрос.Ошибки ) Тогда
		Форма.Элементы.Ошибки.Видимость = Истина;
		Форма.Ошибки = Запрос.Ошибки;
	Иначе
		Форма.Элементы.Ошибки.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	Форма.УсловноеОформление.Элементы.Очистить();
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.Статус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "COMPLETED";
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0, 150, 70));
	
	//
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.Статус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "REJECTED";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));
	
	//
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.Статус.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "IN_PROCESS";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "ACCEPTED";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 225, 0));
	
КонецПроцедуры

#КонецОбласти

Функция НайтиApplicationID( Ссылка ) Экспорт 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", Ссылка);
	Обращение = РегистрыСведений.кб99_Запросы.ПолучитьПоследнее(ТекущаяДата(), Отбор );
	
	Возврат Обращение.ApplicationID;
	
КонецФункции

Функция НайтиПоследнийЗапрос( Объект ) Экспорт 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", Объект);
	Обращение = РегистрыСведений.кб99_Запросы.ПолучитьПоследнее(ТекущаяДата(), Отбор );
	
	Возврат Обращение;
	
КонецФункции

Функция ПроверитьВладельцаСправочника(спрЭлемент, Владелец_) Экспорт
	
	Возврат спрЭлемент.Владелец = Владелец_;
	
КонецФункции

Функция Гашение_НайтиДокументПоступлениеТоваров( ДатаВходящегоДокумента, НомерВходящегоДокумента, ИННОтправителя ) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("Гашение_НайтиДокументПоступлениеТоваров");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.Гашение_НайтиДокументПоступлениеТоваров( ДатаВходящегоДокумента, НомерВходящегоДокумента, ИННОтправителя );
	КонецЕсли;	
	
	Попытка 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДокПриход.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг КАК ДокПриход
		               |ГДЕ
		               |	ДокПриход.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
		               |	И ДокПриход.НомерВходящегоДокумента = &НомерВходящегоДокумента
					   |	%ИНН%
					   |";
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", НомерВходящегоДокумента);
		Если ЗначениеЗаполнено(ИННОтправителя) Тогда
			ПодстрокаЗамены = "И ДокПриход.Контрагент.ИНН = &ИНН";
			Запрос.УстановитьПараметр("ИНН", ИННОтправителя);
		Иначе
			ПодстрокаЗамены = "";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИНН%", ПодстрокаЗамены); 
      	
		тзВыборка = Запрос.Выполнить().Выгрузить();
		Если тзВыборка.Количество()>0 Тогда 
			Возврат тзВыборка[0].Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли 
	Исключение 
		кб99_ВСД.СообщитьИнфо("Не удалось найти документ [Приходная накладная], измените процедуру [Гашение_НайтиДокументПоступлениеТоваров] под вашу структуру конфигурации" );
	КонецПопытки
	
КонецФункции

Процедура ГашениеПроверитьСтрокуТаблицы( СтрокаВСДВходящие, ПараметрыОрганизации ) Экспорт
	
	ПереопределенныйМодуль = кб99_ВСД_Общий.ФункцияПереопределена("ГашениеПроверитьСтрокуТаблицы");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		ПереопределенныйМодуль.ГашениеПроверитьСтрокуТаблицы( СтрокаВСДВходящие, ПараметрыОрганизации );
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВСДВходящие.ВСД_Партия) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ИскатьДокументПрихода = ПараметрыОрганизации["ПарамВсдВходящиеИскатьДокументПрихода"];
	Исключение
		ИскатьДокументПрихода = Ложь;
	КонецПопытки;
	
	СтрокаОшибки = "";
	
	Если ИскатьДокументПрихода Тогда 
		Если не ЗначениеЗаполнено( СтрокаВСДВходящие.ДокументПрихода ) Тогда
			СтрокаОшибки = СтрокаОшибки + ", Документ ПриходнаяНакладная не найден";
		иначеесли не ЗначениеЗаполнено(СтрокаВСДВходящие.номенклатура) тогда
			СтрокаОшибки = СтрокаОшибки + ", Не найдена номенклатура в документе прихода";
		иначе
			Если СтрокаВСДВходящие.количество<> СтрокаВСДВходящие.КоличествоПринято1С тогда
				СтрокаОшибки = СтрокаОшибки + ", Не совпадает количество";
			иначе	
				кодСовпал=ложь;
				код=СтрокаВСДВходящие.Продукция_Элемент.ВидПродукции.КодТНВЭД;
				если (код="2309") или (код="0145") тогда
					код=СтрокаВСДВходящие.Продукция_Элемент.Продукция.КодТНВЭД;
					если (код="2309") или (код="0145") тогда
						кодСовпал=Истина;
					конецесли;
				конецесли;
				если не кодСовпал тогда
					СтрокаОшибки = СтрокаОшибки + ", Неверный код ТНВЭД";
				конецесли;
			КонецЕсли;
		конецесли;
	КонецЕсли;
	
    ДатаСрокГодности1= кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаСрокГодности1 );
	Если ДатаСрокГодности1 < ТекущаяДата() Тогда
		СтрокаОшибки = СтрокаОшибки + ", Просроченная партия";	
	КонецЕсли;
	
	Если ЗначениеЗаполнено( СтрокаВСДВходящие.ДатаИзготовления2 ) Тогда
		ДатаИзготовления2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления2 );
	    Если ДатаИзготовления2 > ТекущаяДата() Тогда
			СтрокаОшибки = СтрокаОшибки + ", Дата производства продукции больше текущей даты";	
		КонецЕсли;
	Иначе
		ДатаИзготовления1 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления1 );
		Если ДатаИзготовления1 > ТекущаяДата() Тогда
			СтрокаОшибки = СтрокаОшибки + ", Дата производства продукции больше текущей даты";	
		КонецЕсли;
	КонецЕсли;

	Попытка
		ВходящиеПроверятьДатуИзготовления = ПараметрыОрганизации["ВходящиеПроверятьДатуИзготовления"]; 
		ВходящиеПроверятьДатуИзготовленияКоличествоДней = ПараметрыОрганизации["ВходящиеПроверятьДатуИзготовленияКоличествоДней"];
	Исключение
		ВходящиеПроверятьДатуИзготовления = Ложь;
		ВходящиеПроверятьДатуИзготовленияКоличествоДней = 0;
		кб99_ВСД.СообщитьИнфо("Не заполнен параметр [ВходящиеПроверятьДатуИзготовленияКоличествоДней]. Пожалуйста, проверьте и сохраните Параметры интеграции.");
	КонецПопытки;
	
	Если ВходящиеПроверятьДатуИзготовления Тогда 
		Если ЗначениеЗаполнено( СтрокаВСДВходящие.ДатаИзготовления2 ) Тогда
			ДатаИзготовления2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления2 );
		    Если ДатаИзготовления2 < ТекущаяДата()-ВходящиеПроверятьДатуИзготовленияКоличествоДней*60*60*24 Тогда
				СтрокаОшибки = СтрокаОшибки + ", Дата производства старше "+ВходящиеПроверятьДатуИзготовленияКоличествоДней+" дней";	
			КонецЕсли;
		Иначе
			ДатаИзготовления1 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаВСДВходящие.ДатаИзготовления1 );
			Если ДатаИзготовления1 < ТекущаяДата()-ВходящиеПроверятьДатуИзготовленияКоличествоДней*60*60*24 Тогда
				СтрокаОшибки = СтрокаОшибки + ", Дата производства старше "+ВходящиеПроверятьДатуИзготовленияКоличествоДней+" дней";	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	

	Попытка
		КонтролироватьДокументПроисхожденияПродукции = ПараметрыОрганизации["КонтролироватьДокументПроисхожденияПродукции"];
	Исключение
		КонтролироватьДокументПроисхожденияПродукции = Ложь;
	КонецПопытки;
	
	Если КонтролироватьДокументПроисхожденияПродукции Тогда
		кб99_ВСД_Запросы.ПолучитьИнформациюОпроисхожденииВСД(СтрокаВСДВходящие, ПараметрыОрганизации);	
	КонецЕсли;
	
	Если Не СтрокаВСДВходящие.СменаВладельцаБезПеревозки Тогда
		
		Если НЕ ЗначениеЗаполнено( СтрокаВСДВходящие.НомерАвто ) Тогда
			СтрокаОшибки = СтрокаОшибки + ", Не указан номер автомобиля";			      	
		КонецЕсли;
		
	КонецЕсли;
	
	
	Попытка
		КонтролироватьНаличиеЛабИсследований = ПараметрыОрганизации["КонтролироватьНаличиеЛабИсследований"]
			И НЕ СтрокаВСДВходящие.Продукция_Элемент.НеКонтролироватьНаличиеЛабИсследований;
	Исключение
		КонтролироватьНаличиеЛабИсследований = Ложь;
	КонецПопытки;
	
	Если НЕ СтрокаВСДВходящие.НаличиеЛабИсследований
			И КонтролироватьНаличиеЛабИсследований Тогда
		СтрокаОшибки = СтрокаОшибки + ", Отсутствуют лаб.исследования";	
	КонецЕсли;
	
	ПервыйСимволСтроки = Лев(СтрокаОшибки, 1);
	Если ПервыйСимволСтроки = "," Тогда
		СтрокаОшибки = Сред(СтрокаОшибки, 3);	
	КонецЕсли;
	
	СтрокаВСДВходящие.Ошибки = ?(ЗначениеЗаполнено(СтрокаВСДВходящие.Ошибки), 
									СтрокаВСДВходящие.Ошибки + ", " + СтрокаОшибки,
									СтрокаОшибки);
	
КонецПроцедуры

// Функция проверяет значение параметра
// Если параметр не задан - выводит ошибку
Функция ПроверитьЗначениеПараметра(ПараметрыОрганизации, НазваниеПараметра, ОписаниеПараметра="" ) Экспорт
	
	Если ПараметрыОрганизации.Свойство(НазваниеПараметра) Тогда 
		
		Возврат Истина;
		
	Иначе		
		
		кб99_ВСД.СообщитьПользователю( СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Не указано значение параметра [%1] %2. Откройте параметры и нажмите кнопку [Сохранить]", НазваниеПараметра, ОписаниеПараметра ));
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ФормироватьДвиженияПартий(Организация) Экспорт
	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Организация );
	Если ПроверитьЗначениеПараметра(СписокКонстант, "КонтролироватьОстаткиПартийПоРегистру", "Контролировать остатки партий по регистру") 
			И ПроверитьЗначениеПараметра(СписокКонстант, "ДатаНачалаКонтроляОстатковПартийПоРегистру", "Дата начала контроля остатков") Тогда
			
		Возврат СписокКонстант.КонтролироватьОстаткиПартийПоРегистру И ТекущаяДатаСеанса() > СписокКонстант.ДатаНачалаКонтроляОстатковПартийПоРегистру;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ, Документ) Экспорт
	
	ПоследнийЗапрос = кб99_ВСД_Общий.НайтиПоследнийЗапрос( Документ.Ссылка );
	Если ФормироватьДвиженияПартий(Документ.Организация) И ПоследнийЗапрос.СтатусЗапроса = "COMPLETED" Тогда
		//Отказ = Истина;
		кб99_ВСД.СообщитьИнфо("Документ был отправлен в Меркурий, после отмены проведения выполните корректировку остатков партий документом ""Партии ВСД""");
	КонецЕсли;
	
КонецПроцедуры

// Функция - Есть реквизит или свойство объекта
//
// Параметры:
//  Объект	 - в котором проверяется наличие реквизита или свойства
//  Свойство - проверяемое свойство по имени
// 
// Возвращаемое значение:
//  Булево - признак наличия реквизита/свойства
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

// Возвращает копию исходного массива с уникальными значениями.
//
// Параметры:
//  Массив - Массив - массив произвольных значений.
//
// Возвращаемое значение:
//  Массив - массив уникальных элементов.
//
Функция СвернутьМассив(Знач Массив) Экспорт
	
	Результат = Новый Массив;
	УникальныеЗначения = Новый Соответствие;
	
	Для Каждого Значение Из Массив Цикл
		Если УникальныеЗначения[Значение] = Неопределено Тогда
			Результат.Добавить(Значение);
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//  СокращатьНепечатаемыеСимволы - Булево - обрезать непечатаемые символы по краям подстрок перед объединением
//                                          в строку с разделителями.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
Функция СтрокаИзМассиваПодстрок(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Если Индекс > 0 Тогда
			Результат = Результат + Разделитель;
		КонецЕсли;
		
		Результат = Результат + Подстрока;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текстовое описание периода срока годности в зависимости от имеющихся параметров
// Параметры:
//  НачалоПериода - Дата - дата периода (для указания срока годности типа "Дата") или дата начала (для указания срока годности типа "Интервал").
//  КонецПериода - Дата - дата окончания периода (для указания срока годности типа "Интервал").
// Возвращаемое значение:
//  Строка - строковое описание периода (представление или описание на основе указанного периода и его точности)
// 
Функция ПредставлениеПериодаВЕТИС(Знач НачалоПериода = Неопределено, Знач КонецПериода = Неопределено) Экспорт 
		
	Если ЗначениеЗаполнено(КонецПериода)Тогда
		ШаблонФорматнойСтроки = "%1 - %2";
	Иначе
		ШаблонФорматнойСтроки = "%1";
	КонецЕсли;
	
	НачалоПериодаДата = кб99_ВСД_Запросы.СтрокаВДатаВремя(НачалоПериода);
	КонецПериодаДата = кб99_ВСД_Запросы.СтрокаВДатаВремя(КонецПериода);
	
	ШаблонФорматнойСтроки = СтрЗаменить(ШаблонФорматнойСтроки, "%1", НРег(Формат(НачалоПериодаДата, "ДЛФ=D")));
	ШаблонФорматнойСтроки = СтрЗаменить(ШаблонФорматнойСтроки, "%2", НРег(Формат(КонецПериодаДата, "ДЛФ=D")));
		
	Возврат ШаблонФорматнойСтроки;
	
КонецФункции

Процедура ПроверитьВозможностьИспользованияОтчета() Экспорт
	
	Если Метаданные.РегистрыНакопления.Найти("ТоварыНаСкладах") = Неопределено Тогда
		ВызватьИсключение "Данный отчет не совместим с вашей конфигурацией.";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	кб99_Параметры.Свойство КАК Свойство,
		|	МАКСИМУМ(кб99_Параметры.Значение) КАК Значение
		|ИЗ
		|	РегистрСведений.кб99_Параметры КАК кб99_Параметры
		|ГДЕ
		|	кб99_Параметры.Свойство = &Свойство
		|
		|СГРУППИРОВАТЬ ПО
		|	кб99_Параметры.Свойство";
	
	Запрос.УстановитьПараметр("Свойство", "КонтролироватьОстаткиПартийПоРегистру");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если Не ВыборкаДетальныеЗаписи.Значение Тогда
			ВызватьИсключение "В параметрах интеграции не включен контроль остатков партий по регистру. Отчет не будет сформирован.";
		КонецЕсли;
	Иначе
		ВызватьИсключение "В информационной базе не настроена интеграция кб99 ВетисAPI.";
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВозможностьОтправкиВСД(ДокументОснование, ДокВСД) Экспорт
	
	Результат = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование" , ДокументОснование);
	Запрос.УстановитьПараметр("Ссылка" , ДокВСД);
	
	Запрос.Текст = "ВЫБРАТЬ
       |	ВСД2_транзакция.Ссылка КАК Ссылка
       |ПОМЕСТИТЬ втВСД
       |ИЗ
       |	Документ.ВСД2_транзакция КАК ВСД2_транзакция
       |ГДЕ
       |	ВСД2_транзакция.ДокументОснование = &ДокументОснование
       |	И НЕ ВСД2_транзакция.ПометкаУдаления
	   |	И НЕ ВСД2_транзакция.Ссылка = &Ссылка
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ
       |	кб99_ЗапросыСрезПоследних.Объект КАК Объект,
       |	кб99_ЗапросыСрезПоследних.СтатусЗапроса КАК СтатусЗапроса
       |ИЗ
       |	РегистрСведений.кб99_Запросы.СрезПоследних(
       |			,
       |			Объект В
       |					(ВЫБРАТЬ
       |						втВСД.Ссылка КАК Ссылка
       |					ИЗ
       |						втВСД КАК втВСД)
       |				И СтатусЗапросаПеречисление В (ЗНАЧЕНИЕ(Перечисление.кб99_СтатусЗапроса.COMPLETED), 
	   |					ЗНАЧЕНИЕ(Перечисление.кб99_СтатусЗапроса.IN_PROCESS), 
	   |					ЗНАЧЕНИЕ(Перечисление.кб99_СтатусЗапроса.ACCEPTED))) КАК кб99_ЗапросыСрезПоследних
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ
       |	втВСД.Ссылка КАК Ссылка
       |ИЗ
       |	втВСД КАК втВСД
       |ГДЕ
       |	втВСД.Ссылка.СтатусВСД = ЗНАЧЕНИЕ(Перечисление.кб99_СтатусВСД.CONFIRMED)";

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если Не РезультатЗапроса[2].Пустой() Тогда
		кб99_ВСД.СообщитьПользователю("По документу " + ДокументОснование + " уже имеются оформленные ВСД.");
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	Если Не РезультатЗапроса[1].Пустой() Тогда
		кб99_ВСД.СообщитьПользователю("По документу " + ДокументОснование + " имеются отправленные ВСД.");
		Результат = Ложь;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТекущегоПользователя() Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьТекущегоПользователя");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.ПолучитьТекущегоПользователя();
	КонецЕсли;
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

Функция ЭтоДокументОтгрузка(ВыбДок) Экспорт

	ПереопределенныйМодуль = ФункцияПереопределена("ЭтоДокументОтгрузка");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.ЭтоДокументОтгрузка(ВыбДок);
	КонецЕсли;
	
	Возврат ТипЗнч(ВыбДок) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	
КонецФункции

Функция ЭтоДокументПеремещение(ВыбДок) Экспорт

	ПереопределенныйМодуль = ФункцияПереопределена("ЭтоДокументПеремещение");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.ЭтоДокументПеремещение(ВыбДок);
	КонецЕсли;
	
	Возврат ТипЗнч(ВыбДок) = Тип("ДокументСсылка.ПеремещениеТоваров");
	
КонецФункции

// Возвращает структуру с наименованиями объектов метаданных для использования в запросах
// Ключи структуры:
// 	ПолеСклад = Название справочника Склады в конфигураторе
// 	ТекстПоляГоловнойКонтрагент = Определение плательщика
//  НаименованиеТабличнойЧастиТовары = Название табличной части с товарами в документах
// 	ТекстПоляИсточникОтгрузка = Название документа Реализация в конфигураторе
// 	ТекстПоляИсточникЗаказ = Название документа Заказ клиента в конфигураторе
// 	ТекстПоляИсточникПеремещение = Название документа Перемещение в конфигураторе
// 	ПолеСкладОтправитель = Название реквизита Склад отправитель документа Перемещение
// 	ПолеСкладПолучатель = Название реквизита Склад получатель документа Перемещение
// 	СправочникСклады = Название справочника Склады в конфигураторе
Функция ПолучитьПредставлениеПолейДокументаВЗапрос() Экспорт
	
	// Проверка переопределения функции в Общем модуле ЕИС_Переопределения
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьПредставлениеПолейДокументаВЗапрос");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьПредставлениеПолейДокументаВЗапрос();
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПолеСклад", "Склад");
	Результат.Вставить("ТекстПоляГоловнойКонтрагент", "Контрагент.ГоловнойКонтрагент");
	Результат.Вставить("НаименованиеТабличнойЧастиТовары", "Товары");
	
	Результат.Вставить("ТекстПоляИсточникОтгрузка", "РеализацияТоваровУслуг");
	Результат.Вставить("ТекстПоляИсточникЗаказ", "ЗаказПокупателя");
	Результат.Вставить("ТекстПоляИсточникПеремещение", "ПеремещениеТоваров");
		
	Результат.Вставить("ПолеСкладОтправитель", "СкладОтправитель");
	Результат.Вставить("ПолеСкладПолучатель", "СкладПолучатель");
	Результат.Вставить("СправочникСклады", "Склады");

	Возврат Результат;
		
КонецФункции

Функция ОписаниеВерсии() Экспорт

	Версия = "2.8.37";
	Возврат Версия;
		
КонецФункции	