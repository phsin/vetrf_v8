&НаКлиенте
Перем АвтоЗаписьВСДСоответствия;

#Область НемодальныеОкна
&НаКлиенте
Процедура ПредупреждениеПользователю(ТекстПредупреждения) Экспорт
    Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждения", ЭтаФорма);	// ЭтотОбъект
    ПоказатьПредупреждение( Оповещение,   ТекстПредупреждения,   0,   "Предупреждение" );
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеЗакрытияПредупреждения(Параметры) Экспорт	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция СтруктураОтбораПартий( Выб_Продукция_Элемент = Неопределено, Выб_Получатель_Площадка, Выб_Получатель_ХозСубъект) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Получатель_Площадка", Выб_Получатель_Площадка);
	СтруктураОтбора.Вставить("Получатель_ХозСубъект", Выб_Получатель_ХозСубъект);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	Если ЗначениеЗаполнено(Выб_Продукция_Элемент) Тогда 
		СтруктураОтбора.Вставить("Продукция_Элемент", Выб_Продукция_Элемент);
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеКолонокСрокиГодности()
	
	Для Каждого Стр Из Объект.ПартииСписания Цикл
		Если ЗначениеЗаполнено( стр.Партия ) Тогда 
			Стр.ДатаСрокГодности = кб99_ВСД_Запросы.СтрокаВДатаВремя( стр.Партия.ДатаСрокГодности1 );
			Стр.ДатаСрокГодности2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( стр.Партия.ДатаСрокГодности2 );
			Стр.ДатаИзготовления = кб99_ВСД_Запросы.СтрокаВДатаВремя( стр.Партия.ДатаИзготовления1 );
			Стр.ДатаИзготовления2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( стр.Партия.ДатаИзготовления2 );			
		Иначе
			Стр.ДатаСрокГодности = "";
			Стр.ДатаСрокГодности2 = "";
			Стр.ДатаИзготовления = "";
			Стр.ДатаИзготовления2 = "";			
		КонецЕсли;
	КонецЦикла;
		
	кб99_ВСД_Общий.ОбновитьНадписи( ЭтаФорма );
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	кб99_ВСД_Общий.УстановитьУсловноеОформление(ЭтаФорма);
	ОбновитьДанныеКолонокСрокиГодности();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьДанныеКолонокСрокиГодности();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	СписокПараметров = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Объект.Производитель_ХозСубъект = СписокПараметров["Отправитель_ХозСубъект"];
	Объект.Производитель_Площадка = СписокПараметров["Отправитель_Площадка"];
	Объект.РезультатыИсследований = СписокПараметров["ВСД_РезультатыИсследований"];
    Объект.cargoInspected = true;
	АвтоЗаписьВСДСоответствия = СписокПараметров["АвтоЗаписьВСДСоответствия"];
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.Ключ.Пустая() Тогда
		Если (Не ЗначениеЗаполнено(Объект.Организация)) и ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			// заполняется ОбработкаЗаполнения - 	
			ДокВСД = кб99_ВСД.НайтиВСД_Производство(Объект.ДокументОснование);
			ОткрытьФорму("Документ.ВСД2_Производство.ФормаОбъекта",Новый Структура("Ключ", ДокВСД));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Объект.Комментарий = "";
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
       		Объект.Организация   =  кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();
			ОрганизацияПриИзменении("");
		Иначе
			СписокПараметров = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
			АвтоЗаписьВСДСоответствия = СписокПараметров["АвтоЗаписьВСДСоответствия"];
		КонецЕсли;
	Иначе
		СписокПараметров = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
		АвтоЗаписьВСДСоответствия = СписокПараметров["АвтоЗаписьВСДСоответствия"];
	КонецЕсли;
	
	ОбновитьДанныеКолонокСрокиГодности();
	
	Если СтатусЗапроса = "Завершен" Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;	
	КонецЕсли;
	
	// ЭлементОтбора = ЭтаФорма.дсЗапросы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ; 
	//ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	//
	//ЭлементОтбора = ЭтаФорма.дсОстаткиПартий.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Регистратор");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ; 
	//ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
	Элементы.ДатаЗавершения.Видимость = Объект.ЗавершениеПоРасписанию;
	Элементы.ДатаОтправки.Видимость = Объект.ОтправкаПоРасписанию;
	
	кб99_ВСД_Клиент.УстановитьОтборыДинамическихСписковПриОткрытии(ЭтаФорма);
	
КонецПроцедуры
//********************
&НаКлиенте
Процедура ВыбратьПлощадкиПоХС(Элемент, ГУИДХСдляОтбора)
	ЗначениеОтбора = Новый Структура("ХозСубъект", Объект.Производитель_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

// *******************Шапка
&НаКлиенте
Процедура Производитель_ХозСубъектПриИзменении(Элемент)
	Объект.Производитель_Площадка = "";
КонецПроцедуры

&НаКлиенте
Процедура Производитель_ПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	// Отбор по ХС включим
	ГУИДХСдляОтбора = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Объект.Производитель_ХозСубъект,"GUID");
	ВыбратьПлощадкиПоХС(Элемент,ГУИДХСдляОтбора);
КонецПроцедуры

//** ТЧ Продукция
&НаСервере
Функция ПолучитьРеквизитыЭлемента(ВыбЭлемент)
	Рез = Новый Структура;
	Рез.Вставить("Продукция",ВыбЭлемент.Продукция);
	Рез.Вставить("ВидПродукции",ВыбЭлемент.ВидПродукции);
	Рез.Вставить("Наименование",ВыбЭлемент.Наименование);
	Рез.Вставить("ЕдиницаИзмерения",ВыбЭлемент.ЕдиницаИзмерения);
	Рез.Вставить("СрокГодности",ВыбЭлемент.СрокГодности);
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыСтрокиПродукция(СтрокаТЧ,ЧтоИзменили)
	
	ПродЭлемент = ПолучитьРеквизитыЭлемента(СтрокаТЧ.Продукция_Элемент);	
	СтрокаТЧ.Продукция = ПродЭлемент.Продукция ;
	СтрокаТЧ.ВидПродукции =  ПродЭлемент.ВидПродукции;
	СтрокаТЧ.НаименованиеПродукции =  ПродЭлемент.Наименование;
	СтрокаТЧ.НомерПартии = кб99_ВСД_Производство.ПолучитьНомерПартии(Новый Структура, "");	
	СтрокаТЧ.ЕдиницаИзмерения =ПродЭлемент.ЕдиницаИзмерения;
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИзготовления1) Тогда
		СтрокаТЧ.ДатаИзготовления1 = Объект.дата;
	КонецЕсли;
	СтрокаТЧ.ДатаСрокГодности1 = СтрокаТЧ.ДатаИзготовления1+60*60*24*ПродЭлемент.СрокГодности;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриАктивизацииСтроки(Элемент)
	// Фильтруем Уровни Упаковки
	к=0;	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ЭтаФорма.Элементы.УровниУпаковки.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаПродукции", 0);//.СтрокаПродукции.Установить(0);
	Иначе
		ЭтаФорма.Элементы.УровниУпаковки.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаПродукции", Элемент.ТекущиеДанные.НомерСтроки);//.СтрокаПродукции.Установить(Элемент.ТекущиеДанные.НомерСтроки);
		ЭтаФорма.Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаПродукции",Элемент.ТекущиеДанные.НомерСтроки);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	к = 0;
	// Удалить связанные уровни упаковки и маркировки
	//ЖД  - ту косяк - все строки ниже удаленной сдвигаются - вот незадача !!!!
	// а у нас связь по № строки тч. Товары  - нужно что то уникальное
	// сдвиг строк в ТЧ Товары стандартный - аналогичный косяк !!!
	
	СтруктураДляПоиска = Новый Структура("СтрокаПродукции", Элемент.ТекущиеДанные.НомерСтроки); 
	//Получаем список строк соответсвтвующих отбору, и перебором удаляем.
	МассивПустыхСтрок = Объект.Маркировка.НайтиСтроки(СтруктураДляПоиска); 
	Для Каждого Строка Из МассивПустыхСтрок Цикл 
		Объект.Маркировка.Удалить(Строка); 
	КонецЦикла; 
	МассивПустыхСтрок = Объект.УровниУпаковки.НайтиСтроки(СтруктураДляПоиска); 
	Для Каждого Строка Из МассивПустыхСтрок Цикл 
		Объект.УровниУпаковки.Удалить(Строка); 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элемент.Родитель.ТекущиеДанные;
	СтрокаТабличнойЧасти.Продукция_Элемент = кб99_ВСД.Продукция_Элемент_ПолучитьПоНоменклатуре( СтрокаТабличнойЧасти.Номенклатура );
	ЗаполнитьРеквизитыСтрокиПродукция(СтрокаТабличнойЧасти,Элемент);	
КонецПроцедуры

&НаСервере
Процедура Установить_Соответствие_ВСД_Продукция_Элемент( ВыбНоменклатура, ВыбПродукцияЭлемент ) 
	кб99_ВСД.Установить_Соответствие_ВСД_Продукция_Элемент( ВыбНоменклатура, ВыбПродукцияЭлемент );
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПродукция_ЭлементПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	ЗаполнитьРеквизитыСтрокиПродукция(СтрокаТабличнойЧасти,Элемент);
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) и ЗначениеЗаполнено(СтрокаТабличнойЧасти.Продукция_Элемент) и АвтоЗаписьВСДСоответствия Тогда
		Установить_Соответствие_ВСД_Продукция_Элемент( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Продукция_Элемент );	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияДатаИзготовления1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элемент.Родитель.Родитель.ТекущиеДанные;
	СтрокаТабличнойЧасти.ДатаСрокГодности1 = СтрокаТабличнойЧасти.ДатаИзготовления1+60*60*24*кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(СтрокаТабличнойЧасти.Продукция_Элемент,"СрокГодности");
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если ПараметрыОрганизации["ПарамПроизводствоЗаполнятьПоСправочнику"] Тогда 			
		кнЗаполнитьПоСпецификацииНоменклатурыНаСервере();
	Иначе
		кнЗаполнитьПартииСписанияПоВСД_Продукция_ЭлементНаСервере();
	КонецЕсли;

КонецПроцедуры

//***** Работа с уровнями упаковки : на событиях и фильтрация.
#Область ТЧ_УровниУпаковки_Маркировка

&НаКлиенте
Процедура УровниУпаковкиПриАктивизацииСтроки(Элемент)
	Если (ЭтаФорма.Элементы.Продукция.ТекущаяСтрока = Неопределено) или
		(ЭтаФорма.Элементы.УровниУпаковки.ТекущаяСтрока = Неопределено) Тогда
		ЭтаФорма.Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаПродукции", 0);
	ИначеЕсли (Элемент.ТекущиеДанные <> Неопределено) Тогда  //Непонятный момент Чему равна ТекущаяСтрока
		ЭтаФорма.Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаПродукции",Элемент.ТекущиеДанные.СтрокаПродукции);
		ЭтаФорма.Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерУровня",Элемент.ТекущиеДанные.НомерУровня);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура УровниУпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если ЭтаФорма.Элементы.Продукция.ТекущаяСтрока = Неопределено Тогда
		Отказ = true;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура УровниУпаковкиПередУдалением(Элемент, Отказ)
	// Удалить маркировки по уровню
	СтруктураДляПоиска = Новый Структура("НомерУровня", Элемент.ТекущиеДанные.НомерУровня); 
	//Получаем список строк соответсвтвующих отбору, и перебором удаляем.
	МассивПустыхСтрок = Объект.Маркировка.НайтиСтроки(СтруктураДляПоиска); 
	Для Каждого Строка Из МассивПустыхСтрок Цикл 
		Объект.Маркировка.Удалить(Строка); 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УровниУпаковкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Элемент.ТекущиеДанные.СтрокаПродукции = ЭтаФорма.Элементы.Продукция.ТекущиеДанные.НомерСтроки;
КонецПроцедуры

&НаКлиенте
Процедура УровниУпаковкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ(ЗначениеЗаполнено(Элемент.ТекущиеДанные.НомерУровня))	или НЕ(ЗначениеЗаполнено(Элемент.ТекущиеДанные.ФормаУпаковки)) Тогда
		ПредупреждениеПользователю("Заполните все данные !!!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если ЭтаФорма.Элементы.УровниУпаковки.ТекущаяСтрока = Неопределено Тогда 
		Отказ = true;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если ЭтаФорма.Элементы.УровниУпаковки.ТекущиеДанные <> Неопределено Тогда 
		Элемент.ТекущиеДанные.СтрокаПродукции = ЭтаФорма.Элементы.УровниУпаковки.ТекущиеДанные.СтрокаПродукции;
		Элемент.ТекущиеДанные.НомерУровня = ЭтаФорма.Элементы.УровниУпаковки.ТекущиеДанные.НомерУровня;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ(ЗначениеЗаполнено(Элемент.ТекущиеДанные.Класс))	или НЕ(ЗначениеЗаполнено(Элемент.ТекущиеДанные.Маркировка)) Тогда
		ПредупреждениеПользователю("Заполните все данные !!!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

//********* Партии Списания
&НаКлиенте
Процедура ПартииСписанияНоменклатураПриИзменении(Элемент)
	// поищем ВСД Элемент и Партию
	СтрокаТабличнойЧасти = Элемент.Родитель.ТекущиеДанные;
	СтрокаТабличнойЧасти.Продукция_Элемент = кб99_ВСД.Продукция_Элемент_ПолучитьПоНоменклатуре( СтрокаТабличнойЧасти.Номенклатура );
	СтрокаТабличнойЧасти.Партия = кб99_ВСД.ВыбратьПартию(СтрокаТабличнойЧасти.Продукция_Элемент, Объект.Производитель_Площадка, Объект.Производитель_ХозСубъект);
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(СтрокаТабличнойЧасти.Продукция_Элемент,"ЕдиницаИзмерения");
КонецПроцедуры

&НаКлиенте
Процедура ПартииСписанияПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = СтруктураОтбораПартий( Элемент.Родитель.ТекущиеДанные.Продукция_Элемент, Объект.Производитель_Площадка, Объект.Производитель_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор, Отбор", Истина, Истина, Ложь, СтруктураОтбора);	
	
	ОткрытьФорму("Справочник.ВСД_Партия.ФормаВыбора", ПараметрыПодбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСписанияПартияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПартииСписания.ТекущиеДанные;
	
	//!!! заполнение на сервере
	ДанныеСтрокиТЧ = новый Структура("Партия, Продукция_Элемент, Продукция, ВидПродукции, ЕдиницаИзмерения, ДатаИзготовления, ДатаИзготовления2, ДатаСрокГодности, ДатаСрокГодности2");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТЧ, СтрокаТабличнойЧасти);
	ЗаполнитьРеквизитыСтрокиПродукцияСервер(ДанныеСтрокиТЧ);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТЧ);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) и ЗначениеЗаполнено(СтрокаТабличнойЧасти.Продукция_Элемент) и АвтоЗаписьВСДСоответствия Тогда
		кб99_ВСД.Установить_Соответствие_ВСД_Продукция_Элемент(СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Продукция_Элемент);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Партия) Тогда
		ПартияКоличество = ПроверитьКоличествоСписанияНаСервере(СтрокаТабличнойЧасти.Партия, СтрокаТабличнойЧасти.Количество);  
		Если ПартияКоличество.ОстатокМеньше Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Количество списания превышает остаток партии.
			|По партии ""%1"" осталось %2 %3", СтрокаТабличнойЧасти.Партия, ПартияКоличество.ОстатокПоПартии, СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.ПартииСписания[%1].Количество", СтрокаТабличнойЧасти.НомерСтроки-1);
			кб99_ВСД.СообщитьПользователю(ТекстСообщения,, Поле);	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПартииСписанияПродукция_ЭлементПриИзменении(Элемент)
	// Сопоставить Номенклатуру с ПродукцияЭлемент
	СтрокаТабличнойЧасти = Элементы.ПартииСписания.ТекущиеДанные;
	СтрокаТабличнойЧасти.Партия = кб99_ВСД.ВыбратьПартию(СтрокаТабличнойЧасти.Продукция_Элемент, Объект.Производитель_Площадка, Объект.Производитель_ХозСубъект);
	
	//!!! заполнение на сервере
	ДанныеСтрокиТЧ = новый Структура("Партия, Продукция_Элемент, Продукция, ВидПродукции, ЕдиницаИзмерения, ДатаИзготовления, ДатаИзготовления2, ДатаСрокГодности, ДатаСрокГодности2");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТЧ, СтрокаТабличнойЧасти);
	ЗаполнитьРеквизитыСтрокиПродукцияСервер(ДанныеСтрокиТЧ);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТЧ);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) и ЗначениеЗаполнено(СтрокаТабличнойЧасти.Продукция_Элемент) и АвтоЗаписьВСДСоответствия Тогда
		кб99_ВСД.Установить_Соответствие_ВСД_Продукция_Элемент(СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Продукция_Элемент);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПодбор(Команда)
	СтруктураОтбора = СтруктураОтбораПартий( Неопределено, Объект.Производитель_Площадка, Объект.Производитель_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор, Отбор", Истина, Истина, Истина, СтруктураОтбора);	
	
	ОткрытьФорму("Справочник.ВСД_Партия.ФормаВыбора", ПараметрыПодбора,Этаформа.Элементы.ПартииСписания);	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСтрокиПродукцияСервер(СтрокаТЧ)
	Если ЗначениеЗаполнено(СтрокаТЧ.Партия) Тогда
		СтрокаТЧ.Продукция_Элемент = СтрокаТЧ.Партия.Продукция_Элемент;
		СтрокаТЧ.ЕдиницаИзмерения =СтрокаТЧ.Партия.ЕдиницаИзмерения;
		СтрокаТЧ.ДатаИзготовления = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаТЧ.Партия.ДатаИзготовления1 );
		СтрокаТЧ.ДатаИзготовления2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаТЧ.Партия.ДатаИзготовления2 );
		СтрокаТЧ.ДатаСрокГодности = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаТЧ.Партия.ДатаСрокГодности1 );
		СтрокаТЧ.ДатаСрокГодности2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаТЧ.Партия.ДатаСрокГодности2 );
		
		СтрокаТЧ.Продукция = СтрокаТЧ.Партия.Продукция;
		СтрокаТЧ.ВидПродукции = СтрокаТЧ.Партия.ВидПродукции;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПартииСписанияОбработкаВыбораНаСервере(ВыбранноеЗначение)
    Для Каждого вЗнч Из ВыбранноеЗначение Цикл
        Если объект.ПартииСписания.НайтиСтроки(Новый Структура("Партия", вЗнч)).Количество() = 0 Тогда
           нСтр = объект.ПартииСписания.Добавить();
           нСтр.Партия = вЗнч.Ссылка;
		   нСтр.Количество = нСтр.Партия.Количество;
           ЗаполнитьРеквизитыСтрокиПродукцияСервер(нСтр);
        КонецЕсли;
     КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПартииСписанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПартииСписанияОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура кнЗаполнитьПоПродукцияЭлементНаСервере()
	ЭлементыСпецификации = кб99_ВСД_Производство.ЗаполнитьСырьеИзВСД_Продукция_Элемент( Объект.Продукция.Выгрузить() );
	Объект.ПартииСписания.Загрузить(ЭлементыСпецификации);
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнитьПоПродукцияЭлемент(Команда)
	кнЗаполнитьПоПродукцияЭлементНаСервере()
КонецПроцедуры

&НаСервере
Процедура кнЗаполнитьПартииСписанияПоВСД_Продукция_ЭлементНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	ПараметрыФункции.Вставить("Организация", Объект.Организация);
	ПараметрыФункции.Вставить("Отправитель_ХозСубъект", Объект.Производитель_ХозСубъект);
	ПараметрыФункции.Вставить("Отправитель_Площадка", Объект.Производитель_Площадка);
	
	Сырье = кб99_ВСД_Производство.ЗаполнитьСырьеИзВСД_Продукция_Элемент( Объект.Продукция.Выгрузить() );
	
	ПартииСписания = кб99_ВСД.тзПартииСписанияПоТзПродукция_Элемент( ПараметрыФункции, Сырье );
	
	Объект.ПартииСписания.Загрузить(ПартииСписания);
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПартииСписания Цикл
		ЗаполнитьРеквизитыСтрокиПродукцияСервер(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	ОбновитьДанныеКолонокСрокиГодности();
	
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнитьПартииСписанияПоВСД_Продукция_Элемент(Команда)
	кнЗаполнитьПартииСписанияПоВСД_Продукция_ЭлементНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура кнОткрытьЗапрос(Команда)
	ПутьКXML = "";
	Если (ЭтаФорма.Элементы.Запросы.ТекущаяСтрока <> Неопределено) Тогда
		ПутьКXML = ЭтаФорма.Элементы.Запросы.ТекущиеДанные.Файл;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьКXML) Тогда
		ЗапуститьПриложение(ПутьКXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура кнЗаполнитьПоСпецификацииНоменклатурыНаСервере()
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	ПараметрыФункции.Вставить("Организация", Объект.Организация);
	ПараметрыФункции.Вставить("Отправитель_ХозСубъект", Объект.Производитель_ХозСубъект);
	ПараметрыФункции.Вставить("Отправитель_Площадка", Объект.Производитель_Площадка);
	
	ПартииСписания = кб99_ВСД_Производство.ЗаполнитьТчСписаниеИзСпецификацииНоменклатуры( ПараметрыФункции, Объект.Продукция.Выгрузить() );
	
	Объект.ПартииСписания.Загрузить(ПартииСписания);
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПартииСписания Цикл
		ЗаполнитьРеквизитыСтрокиПродукцияСервер(СтрокаТабличнойЧасти);
	КонецЦикла;
	ОбновитьДанныеКолонокСрокиГодности();
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнитьПоСпецификацииНоменклатуры(Команда)
	кнЗаполнитьПоСпецификацииНоменклатурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура кнПересчитатьВторичнуюПродукциюНаСервере()
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Попытка
		тзВторичнаяПродукция = Новый ТаблицаЗначений;
		тзВторичнаяПродукция.Колонки.Добавить("Продукция_Элемент",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция_Элемент"));
		тзВторичнаяПродукция.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3)));
		
		тзПартииСписания = Объект.ПартииСписания.Выгрузить();
		тзПартииСписания.Свернуть("Продукция_Элемент", "Количество");
		Для Каждого СтрСырье Из тзПартииСписания Цикл
			ВторичнаяПродукция = СтрСырье.Продукция_Элемент.ВторичнаяПродукцияПриПереработке.Выгрузить();
			Для Каждого СтрВторПродукция Из ВторичнаяПродукция Цикл
				нСтр = тзВторичнаяПродукция.Добавить();
				нСтр.Продукция_Элемент = СтрВторПродукция.Продукция_Элемент;
				нСтр.Количество = СтрСырье.Количество/100*СтрВторПродукция.Коэффициент;
			КонецЦикла;
		КонецЦикла;
		
		тзВторичнаяПродукция.Свернуть("Продукция_Элемент", "Количество");
		Для Каждого стрВторПродукция Из тзВторичнаяПродукция Цикл
			стрПродукция = Объект.Продукция.Добавить();	
			стрПродукция.Продукция_Элемент 	= СтрВторПродукция.Продукция_Элемент;
			стрПродукция.Количество 		= стрВторПродукция.Количество;
			стрПродукция.ЕдиницаИзмерения 	= стрПродукция.Продукция_Элемент.ЕдиницаИзмерения;
			стрПродукция.Продукция 			= стрПродукция.Продукция_Элемент.Продукция;
			стрПродукция.ВидПродукции 		= стрПродукция.Продукция_Элемент.ВидПродукции;
			стрПродукция.НаименованиеПродукции = стрПродукция.Продукция_Элемент.Наименование;
			стрПродукция.Номенклатура 		= кб99_ВСД.ПолучитьНоменклатуруПоПродукцияЭлемент(стрПродукция.Продукция_Элемент, Истина );					
			стрПродукция.НомерПартии 		= кб99_ВСД_Производство.ПолучитьНомерПартии(ПараметрыОрганизации, стрПродукция);	
			ВыбДата = НачалоДня(ТекущаяДата()); 
			// Если биоотходы: Некачественный = ИСТИНА;
			// ДатаСрокГодности не заполняется;	
			Если стрПродукция.Продукция.GUID = "ae1a8750-3faf-4d93-b2d9-1f2111486d34" Тогда 
				стрПродукция.ДатаИзготовления1 = ВыбДата;
				стрПродукция.Некачественный = Истина;
			Иначе
				стрПродукция.ДатаИзготовления1 = ВыбДата;		
				стрПродукция.ДатаСрокГодности1 = стрПродукция.ДатаИзготовления1+60*60*24*стрПродукция.Продукция_Элемент.СрокГодности;
			КонецЕсли;
		КонецЦикла;
	Исключение
		кб99_ВСД.СообщитьИнфо("Не удалось заполнить вторичную продукцию при переработке сырья");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура кнПересчитатьВторичнуюПродукцию(Команда)
	кнПересчитатьВторичнуюПродукциюНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьКоличествоСписанияНаСервере(Партия, КоличествоСписания)
	
	Результат = Новый Структура;
	Результат.Вставить("ОстатокМеньше", Партия.Количество < КоличествоСписания);
	Результат.Вставить("ОстатокПоПартии", Партия.Количество);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПартииСписанияКоличествоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПартииСписания.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Партия) Тогда
		ПартияКоличество = ПроверитьКоличествоСписанияНаСервере(ТекСтрока.Партия, ТекСтрока.Количество);  
		Если ПартияКоличество.ОстатокМеньше Тогда 
			ОчиститьСообщения();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Количество списания превышает остаток партии.
									   |По партии ""%1"" осталось %2 %3", ТекСтрока.Партия, ПартияКоличество.ОстатокПоПартии, ТекСтрока.ЕдиницаИзмерения);
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.ПартииСписания[%1].Количество", ТекСтрока.НомерСтроки-1);
			кб99_ВСД.СообщитьПользователю(ТекстСообщения,, Поле);	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтложенноеЗавершениеПриИзменении(Элемент)
	
	Если Объект.ЗавершениеПоРасписанию Тогда
		Объект.ЗавершитьОперацию = Ложь;	
		Объект.ДатаЗавершения = ТекущаяДата();
	Иначе
		Объект.ДатаЗавершения = Неопределено;
	КонецЕсли;
	Элементы.ДатаЗавершения.Видимость = Объект.ЗавершениеПоРасписанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложеннаяОтправкаПриИзменении(Элемент)

	Если Не Объект.ОтправкаПоРасписанию Тогда
		Объект.ДатаОтправки = Неопределено;
	Иначе
		Объект.ДатаОтправки = ТекущаяДата();
	КонецЕсли;
	Элементы.ДатаОтправки.Видимость = Объект.ОтправкаПоРасписанию;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОперациюПриИзменении(Элемент)
	
	//Если Объект.ЗавершитьОперацию И Объект.ЗавершениеПоРасписанию Тогда
	//	ПоказатьВопрос(
	//		Новый ОписаниеОповещения("ИзменениеРежимаЗавершения", ЭтотОбъект),
	//		НСтр("ru = 'Отложенное завершение будет отменено, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	//КонецЕсли;

	Если Объект.ЗавершитьОперацию  Тогда
		Объект.ЗавершениеПоРасписанию = Ложь;
		Объект.ДатаЗавершения = Неопределено;
	КонецЕсли;
	Элементы.ДатаЗавершения.Видимость = Объект.ЗавершениеПоРасписанию;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьОткрытоеНезавершенноеПроизводствоНаСервере()
	
	Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   НПТ.Период,
        |   НПТ.Регистратор,
        |   НПТ.НомерСтроки,
        |   НПТ.Активность,
        |   НПТ.Номенклатура,
        |   НПТ.Контрагент,
        |   НПТ.Организация        
        |ИЗ
        |   РегистрСведений.кб_НезавершенныеПроизводственныеТранзакции КАК НПТ
        |ГДЕ
        |   НПТ.Регистратор = &ВыбРегистратор
        |УПОРЯДОЧИТЬ ПО
        |   НПТ.НомерСтроки";
 
    Запрос.УстановитьПараметр( "ВыбРегистратор", Объект );
 
    РезультатЗапроса = Запрос.Выполнить();
 
    Записи = РезультатЗапроса.Выбрать();
 
    Пока Записи.Следующий() Цикл
		//Сообщить(
		//    "[" + Записи.Организация + ", " +
		//    Записи.Контрагент + ", " + 
		//    Записи.Номенклатура + "] " +
		//    "[" + Записи.Цена + "] <" +
		//    Записи.Регистратор + ">"
		//);
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОткрытоеНезавершенноеПроизводство(Команда)
	ВыбратьОткрытоеНезавершенноеПроизводствоНаСервере();
КонецПроцедуры

//&НаКлиенте
//Процедура ИзменениеРежимаЗавершения(Ответ, Контекст) Экспорт
//	
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		Объект.ЗавершениеПоРасписанию = Ложь;
//		Объект.ДатаЗавершения = Неопределено;
//	Иначе
//		Объект.ЗавершитьОперацию = Ложь;	
//	КонецЕсли;
//	Элементы.ДатаЗавершения.Видимость = Объект.ЗавершениеПоРасписанию;
//	
//КонецПроцедуры