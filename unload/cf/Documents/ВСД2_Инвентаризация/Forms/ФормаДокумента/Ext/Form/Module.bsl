&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	кб99_ВСД_Общий.ОбновитьНадписи(ЭтаФорма);
	кб99_ВСД_Общий.УстановитьУсловноеОформление(ЭтаФорма);
	
КонецПроцедуры

#Область НемодальныеОкна
&НаКлиенте
Процедура ПредупреждениеПользователю(ТекстПредупреждения) Экспорт
    Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждения", ЭтаФорма);	
    ПоказатьПредупреждение( Оповещение,   ТекстПредупреждения,   0,   "Предупреждение" );
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеЗакрытияПредупреждения(Параметры) Экспорт	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция СтруктураОтбораПартий( Выб_Продукция_Элемент = Неопределено, Выб_Получатель_Площадка, Выб_Получатель_ХозСубъект) Экспорт
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Получатель_Площадка", Выб_Получатель_Площадка);
	СтруктураОтбора.Вставить("Получатель_ХозСубъект", Выб_Получатель_ХозСубъект);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	Если ЗначениеЗаполнено(Выб_Продукция_Элемент) Тогда 
		СтруктураОтбора.Вставить("Продукция_Элемент", Выб_Продукция_Элемент);
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СписокПараметров = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Объект.Владелец_ХозСубъект = СписокПараметров["Отправитель_ХозСубъект"];
	Объект.Владелец_Площадка = СписокПараметров["Отправитель_Площадка"];
	Объект.ПричинаРасхождения = СписокПараметров["парамПричинаРасхождения"];
	Объект.ОписаниеНесоответствия = СписокПараметров["парамОписаниеНесоответствия"];
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
       		Объект.Организация   =  кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();
			ОрганизацияПриИзменении("");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;	
	КонецЕсли;
	
	//ЭлементОтбора = ЭтаФорма.дсЗапросы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ; 
	//ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	//
	//ЭлементОтбора = ЭтаФорма.дсОстаткиПартий.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Регистратор");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ; 
	//ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;

	кб99_ВСД_Клиент.УстановитьОтборыДинамическихСписковПриОткрытии(ЭтаФорма);
	
КонецПроцедуры

// *******************Шапка
&НаКлиенте
Процедура Владелец_ХозСубъектПриИзменении(Элемент)
	Объект.Владелец_Площадка = "";
КонецПроцедуры

&НаКлиенте
Процедура Владелец_ПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеОтбора = Новый Структура("ХозСубъект", Объект.Владелец_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
	
КонецПроцедуры

//** ТЧ Продукция
&НаСервере
Функция ПолучитьРеквизитыЭлемента(ВыбЭлемент)
	
	Рез = Новый Структура;
	Рез.Вставить("Продукция",					 ВыбЭлемент.Продукция);
	Рез.Вставить("ВидПродукции",				 ВыбЭлемент.ВидПродукции);
	Рез.Вставить("Наименование",				 ВыбЭлемент.Наименование);
	Рез.Вставить("ЕдиницаИзмерения",			 ВыбЭлемент.ЕдиницаИзмерения);
	Рез.Вставить("СрокГодности",				 ВыбЭлемент.СрокГодности);
	Рез.Вставить("Производитель_площадка",		 ВыбЭлемент.Площадка);
	Рез.Вставить("Производитель_Страна",		 ?(ЗначениеЗаполнено(ВыбЭлемент.Площадка), ВыбЭлемент.Площадка.Страна, Неопределено));
	
	Возврат Рез;
	
КонецФункции

&НаСервере
Функция ПолучитьРеквизитыПартии(ВыбЭлемент)
	
	Рез = Новый Структура;
	Рез.Вставить("Продукция", ВыбЭлемент.Продукция );
	Рез.Вставить("ВидПродукции", ВыбЭлемент.ВидПродукции );
	Рез.Вставить("Продукция_Элемент", ВыбЭлемент.Продукция_Элемент );
	Рез.Вставить("НаименованиеПродукции", ВыбЭлемент.Наименование );
	Рез.Вставить("ЕдиницаИзмерения", ВыбЭлемент.ЕдиницаИзмерения );
	Рез.Вставить("ДатаСрокГодности1", кб99_ВСД_Запросы.СтрокаВДатаВремя( ВыбЭлемент.ДатаСрокГодности1) );
	Рез.Вставить("ДатаИзготовления1", кб99_ВСД_Запросы.СтрокаВДатаВремя( ВыбЭлемент.ДатаИзготовления1) );
	Рез.Вставить("ДатаСрокГодности2", кб99_ВСД_Запросы.СтрокаВДатаВремя( ВыбЭлемент.ДатаСрокГодности2) );
	Рез.Вставить("ДатаИзготовления2", кб99_ВСД_Запросы.СтрокаВДатаВремя( ВыбЭлемент.ДатаИзготовления2) );
	Рез.Вставить("Количество", ВыбЭлемент.Количество );
	Рез.Вставить("КоличествоДоИзменения", ВыбЭлемент.Количество );
	Рез.Вставить("Производитель_площадка", ВыбЭлемент.Производитель_площадка );
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Рез.Вставить("Производитель_Страна", ПараметрыОрганизации["Страна"] );
	
	Возврат Рез;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыСтрокиНаСервере(СтрокаТЧ)
	
	Если ЗначениеЗаполнено(СтрокаТЧ.Партия) Тогда
		ЗаполнитьЗначенияСвойств( СтрокаТЧ, СтрокаТЧ.Партия);
		СтрокаТЧ.КоличествоДоИзменения = СтрокаТЧ.Партия.Количество;
		СтрокаТЧ.ДатаСрокГодности1 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаТЧ.Партия.ДатаСрокГодности1);
		СтрокаТЧ.ДатаИзготовления1 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаТЧ.Партия.ДатаИзготовления1);
		СтрокаТЧ.ДатаСрокГодности2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаТЧ.Партия.ДатаСрокГодности2);
		СтрокаТЧ.ДатаИзготовления2 = кб99_ВСД_Запросы.СтрокаВДатаВремя( СтрокаТЧ.Партия.ДатаИзготовления2);
	Иначе
		ЗаполнитьЗначенияСвойств( СтрокаТЧ, СтрокаТЧ.Продукция_Элемент)
	КонецЕсли;
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	СтрокаТЧ.Производитель_Страна = ПараметрыОрганизации["Страна"];
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСтроки) Тогда
		СтрокаТЧ.КлючСтроки = Новый УникальныйИдентификатор;	
	КонецЕсли;
	
	ЗаполнитьУпаковки_и_МаркировкиНаСервере(СтрокаТЧ.Партия, СтрокаТЧ.КлючСтроки);
	
КонецПроцедуры

//Заполнение формы клиента
&НаКлиенте
Процедура ЗаполнитьРеквизитыСтрокиПродукция( СтрокаТЧ )
	
	Если ЗначениеЗаполнено(СтрокаТЧ.Партия) Тогда
		ДанныеПартии = ПолучитьРеквизитыПартии(СтрокаТЧ.Партия);
		ЗаполнитьЗначенияСвойств( СтрокаТЧ, ДанныеПартии );		
	Иначе
		ПродЭлемент = ПолучитьРеквизитыЭлемента(СтрокаТЧ.Продукция_Элемент);	
		ЗаполнитьЗначенияСвойств( СтрокаТЧ, ПродЭлемент );
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСтроки) Тогда
		СтрокаТЧ.КлючСтроки = Новый УникальныйИдентификатор;	
	КонецЕсли;
	
	ЗаполнитьУпаковки_и_Маркировки(СтрокаТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриАктивизацииСтроки(Элемент)
	
	// Фильтруем Уровни Упаковки
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ЭтаФорма.Элементы.УровниУпаковки.ОтборСтрок  = Новый ФиксированнаяСтруктура("СтрокаПродукции", "");
	Иначе
		ЭтаФорма.Элементы.УровниУпаковки.ОтборСтрок	 = Новый ФиксированнаяСтруктура("СтрокаПродукции", Элемент.ТекущиеДанные.КлючСтроки);
		ЭтаФорма.Элементы.Маркировка.ОтборСтрок		 = Новый ФиксированнаяСтруктура("СтрокаПродукции", Элемент.ТекущиеДанные.КлючСтроки);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	Для Каждого ВыделеннаяСтрока  Из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		стр = Элементы.Продукция.ДанныеСтроки(ВыделеннаяСтрока);
		
		СтруктураДляПоиска = Новый Структура("СтрокаПродукции", стр.КлючСтроки); 
		МассивПустыхСтрок = Объект.Маркировка.НайтиСтроки(СтруктураДляПоиска); 
		Для Каждого Строка Из МассивПустыхСтрок Цикл 
			Объект.Маркировка.Удалить(Строка); 
		КонецЦикла;
		
		МассивПустыхСтрок = Объект.УровниУпаковки.НайтиСтроки(СтруктураДляПоиска); 
		Для Каждого Строка Из МассивПустыхСтрок Цикл 
			Объект.УровниУпаковки.Удалить(Строка); 
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элемент.Родитель.ТекущиеДанные;
	СтрокаТабличнойЧасти.Продукция_Элемент = кб99_ВСД.Продукция_Элемент_ПолучитьПоНоменклатуре( СтрокаТабличнойЧасти.Номенклатура );
	СтрокаТабличнойЧасти.Партия = кб99_ВСД.ВыбратьПартию(СтрокаТабличнойЧасти.Продукция_Элемент, Объект.Владелец_Площадка, Объект.Владелец_ХозСубъект);
	ЗаполнитьРеквизитыСтрокиПродукция( СтрокаТабличнойЧасти  );	

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПродукция_ЭлементПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	ПродЭлемент = ПолучитьРеквизитыЭлемента(СтрокаТабличнойЧасти.Продукция_Элемент);	
	СтрокаТабличнойЧасти.Продукция				 = ПродЭлемент.Продукция ;
	СтрокаТабличнойЧасти.ВидПродукции			 =  ПродЭлемент.ВидПродукции;
	СтрокаТабличнойЧасти.НаименованиеПродукции	 =  ПродЭлемент.Наименование;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		 =	ПродЭлемент.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Производитель_площадка	 =	ПродЭлемент.Производитель_площадка;
	СтрокаТабличнойЧасти.Производитель_Страна	 =	ПродЭлемент.Производитель_Страна;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = СтруктураОтбораПартий( Элемент.Родитель.Родитель.ТекущиеДанные.Продукция_Элемент, Объект.Владелец_Площадка, Объект.Владелец_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор, Отбор", Истина, Истина, Истина, СтруктураОтбора);	
	
	ОткрытьФорму("Справочник.ВСД_Партия.ФормаВыбора", ПараметрыПодбора, Элемент);
	
КонецПроцедуры

//***** Работа с уровнями упаковки : на событиях и фильтрация.
#Область ТЧ_УровниУпаковки_Маркировка

&НаКлиенте
Процедура УровниУпаковкиПриАктивизацииСтроки(Элемент)
	
	Если (ЭтаФорма.Элементы.Продукция.ТекущаяСтрока = Неопределено) или
		(ЭтаФорма.Элементы.УровниУпаковки.ТекущаяСтрока = Неопределено) Тогда
		ЭтаФорма.Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаПродукции", 0);
	ИначеЕсли (Элемент.ТекущиеДанные <> Неопределено) Тогда  //Непонятный момент Чему равна ТекущаяСтрока
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("СтрокаПродукции",Элемент.ТекущиеДанные.СтрокаПродукции);
		ОтборСтрок.Вставить("НомерУровня",Элемент.ТекущиеДанные.НомерУровня);
		Отбор2 = Новый ФиксированнаяСтруктура(ОтборСтрок);
		ЭтаФорма.Элементы.Маркировка.ОтборСтрок = Отбор2;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УровниУпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ЭтаФорма.Элементы.Продукция.ТекущаяСтрока = Неопределено Тогда
		Отказ = true;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УровниУпаковкиПередУдалением(Элемент, Отказ)
	// Удалить маркировки по уровню
	СтруктураДляПоиска = Новый Структура("НомерУровня", Элемент.ТекущиеДанные.НомерУровня); 
	//Получаем список строк соответсвтвующих отбору, и перебором удаляем.
	МассивПустыхСтрок = Объект.Маркировка.НайтиСтроки(СтруктураДляПоиска); 
	Для Каждого Строка Из МассивПустыхСтрок Цикл 
		Объект.Маркировка.Удалить(Строка); 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УровниУпаковкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элемент.ТекущиеДанные.СтрокаПродукции = ЭтаФорма.Элементы.Продукция.ТекущиеДанные.КлючСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура УровниУпаковкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ(ЗначениеЗаполнено(Элемент.ТекущиеДанные.НомерУровня))	или НЕ(ЗначениеЗаполнено(Элемент.ТекущиеДанные.ФормаУпаковки)) Тогда
		ПредупреждениеПользователю("Заполните все данные !!!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если ЭтаФорма.Элементы.УровниУпаковки.ТекущаяСтрока = Неопределено Тогда 
		Отказ = true;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если ЭтаФорма.Элементы.УровниУпаковки.ТекущиеДанные <> Неопределено Тогда 
		Элемент.ТекущиеДанные.СтрокаПродукции = ЭтаФорма.Элементы.УровниУпаковки.ТекущиеДанные.СтрокаПродукции;
		Элемент.ТекущиеДанные.НомерУровня = ЭтаФорма.Элементы.УровниУпаковки.ТекущиеДанные.НомерУровня;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ(ЗначениеЗаполнено(Элемент.ТекущиеДанные.Класс))	или НЕ(ЗначениеЗаполнено(Элемент.ТекущиеДанные.Маркировка)) Тогда
		ПредупреждениеПользователю("Заполните все данные !!!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУпаковки_и_МаркировкиНаСервере(Партия, КлючСтроки)

	Если ЗначениеЗаполнено(Партия) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВСД_ПартияУровниУпаковки.НомерСтроки КАК НомерСтроки,
			|	ВСД_ПартияУровниУпаковки.НомерУровня КАК НомерУровня,
			|	ВСД_ПартияУровниУпаковки.ФормаУпаковки КАК ФормаУпаковки,
			|	ВСД_ПартияУровниУпаковки.Количество КАК Количество
			|ИЗ
			|	Справочник.ВСД_Партия.УровниУпаковки КАК ВСД_ПартияУровниУпаковки
			|ГДЕ
			|	ВСД_ПартияУровниУпаковки.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВСД_ПартияМаркировка.НомерУровня КАК НомерУровня,
			|	ВСД_ПартияМаркировка.Класс КАК Класс,
			|	ВСД_ПартияМаркировка.Маркировка КАК Маркировка
			|ИЗ
			|	Справочник.ВСД_Партия.Маркировка КАК ВСД_ПартияМаркировка
			|ГДЕ
			|	ВСД_ПартияМаркировка.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Партия);
		Результат = Запрос.ВыполнитьПакет();
		
		тзУпаковки	 = Результат[0].Выгрузить();
		тзМаркировки = Результат[1].Выгрузить();
		
		Для Каждого СтрУпаковки Из тзУпаковки Цикл
			
			нСтрУпаковки = Объект.УровниУпаковки.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрУпаковки, СтрУпаковки);
			нСтрУпаковки.СтрокаПродукции = КлючСтроки;
			
			СтруктураДляПоиска = Новый Структура("НомерУровня", СтрУпаковки.НомерУровня);
			МаркировкиПоУровню = тзМаркировки.НайтиСтроки(СтруктураДляПоиска);
			Для Каждого СтрМаркировки Из МаркировкиПоУровню Цикл 
				нСтрМаркировки = Объект.Маркировка.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрМаркировки, СтрМаркировки);
				нСтрМаркировки.СтрокаПродукции = КлючСтроки;
			КонецЦикла;
		
		КонецЦикла;
		
	Иначе
		//очистить
		СтруктураДляПоиска = Новый Структура("СтрокаПродукции", КлючСтроки); 
		
		МассивУдаляемыхСтрок = Объект.Маркировка.НайтиСтроки(СтруктураДляПоиска); 
		Для Каждого Строка Из МассивУдаляемыхСтрок Цикл 
			Объект.Маркировка.Удалить(Строка); 
		КонецЦикла; 
		
		МассивУдаляемыхСтрок = Объект.УровниУпаковки.НайтиСтроки(СтруктураДляПоиска); 
		Для Каждого Строка Из МассивУдаляемыхСтрок Цикл 
			Объект.УровниУпаковки.Удалить(Строка); 
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУпаковки_и_Маркировки(СтрокаТЧ)
	
	ЗаполнитьУпаковки_и_МаркировкиНаСервере(СтрокаТЧ.Партия, СтрокаТЧ.КлючСтроки);	
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПросроченнымиТоварамиНаСервере( МинДатаСрокГодности, МаксКолвоПартийВдокументе=100 )
	
	Объект.Продукция.Очистить();
	Объект.УровниУпаковки.Очистить();
	Объект.Маркировка.Очистить();

	СписокПартий = кб99_ВСД.СписокАктуальныхПартийПоФильтру_Запрос( , Объект.Владелец_Площадка, Объект.Владелец_ХозСубъект );
	
	СписокПараметров = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	Если ЗначениеЗаполнено(СписокПараметров["МаксимальноеКоличествоПартийСписанияВДокументе"]) Тогда
		МаксКолвоПартийВдокументе = СписокПараметров["МаксимальноеКоличествоПартийСписанияВДокументе"];
	КонецЕсли;
	
	Для Каждого стрПартия Из СписокПартий Цикл
		Если Объект.Продукция.Количество() > (МаксКолвоПартийВдокументе-1) Тогда
			Прервать;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено( МинДатаСрокГодности ) Тогда
			
			ДатаСрокГодности1= кб99_ВСД_Запросы.СтрокаВДатаВремя( стрПартия.ДатаСрокГодности1 );
			
			Если ДатаСрокГодности1 > МинДатаСрокГодности Тогда
				Продолжить;	
			КонецЕсли;
		КонецЕсли;
	
		стрПродукции = Объект.Продукция.Добавить();
		стрПродукции.Партия = стрПартия;
		
		ЗаполнитьРеквизитыСтрокиНаСервере(стрПродукции);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДаты(Дата, Параметры) Экспорт
	
	ЗаполнитьПросроченнымиТоварамиНаСервере( Дата );
	
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнить(Команда)
	
	ДатаНапоминания = ТекущаяДата();
	Подсказка = "Введите срок годности";
	ЧастьДаты = ЧастиДаты.Дата;
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДаты", ЭтаФорма);
	ПоказатьВводДаты(Оповещение, ДатаНапоминания, Подсказка, ЧастьДаты);	
	
КонецПроцедуры

&НаКлиенте
Процедура кнСписание(Команда)

	Для Каждого стрПродукция Из Объект.Продукция Цикл
		стрПродукция.Количество = 0;	
	КонецЦикла
	
КонецПроцедуры

// *********** Подбор в ТЧ
&НаКлиенте
Процедура кнПодбор(Команда)
	
	СтруктураОтбора   = СтруктураОтбораПартий(Неопределено, Объект.Владелец_Площадка, Объект.Владелец_ХозСубъект);
	ПараметрыПодбора  = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор, Отбор", Истина, Истина, Истина, СтруктураОтбора);	
	
	ОткрытьФорму("Справочник.ВСД_Партия.ФормаВыбора", ПараметрыПодбора, Этаформа.Элементы.Продукция);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	Для Каждого ВыбЗначение Из ВыбранноеЗначение Цикл
        Если объект.продукция.НайтиСтроки(Новый Структура("Партия", ВыбЗначение)).Количество() = 0 Тогда
           новаяСтрокаТЧ = объект.продукция.Добавить();
           новаяСтрокаТЧ.Партия = ВыбЗначение.Ссылка;
		   ЗаполнитьРеквизитыСтрокиНаСервере(новаяСтрокаТЧ);
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПродукцияОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПартияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.ВСД_Партия") Тогда 
		Элемент.Родитель.Родитель.ТекущиеДанные.Партия = ВыбранноеЗначение;
		ЗаполнитьРеквизитыСтрокиПродукция( Элемент.Родитель.Родитель.ТекущиеДанные );
	Иначе
		Для Каждого зн Из ВыбранноеЗначение Цикл
			Элемент.Родитель.Родитель.ТекущиеДанные.Партия = зн;
			ЗаполнитьРеквизитыСтрокиПродукция( Элемент.Родитель.Родитель.ТекущиеДанные );
		КонецЦикла;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПродукцияПриАктивизацииСтроки(Элемент.Родитель.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.КлючСтроки) Тогда
		ТекДанные.КлючСтроки = Новый УникальныйИдентификатор;
		ЭтаФорма.Элементы.УровниУпаковки.ОтборСтрок	 = Новый ФиксированнаяСтруктура("СтрокаПродукции", ТекДанные.КлючСтроки);
		ЭтаФорма.Элементы.Маркировка.ОтборСтрок		 = Новый ФиксированнаяСтруктура("СтрокаПродукции", ТекДанные.КлючСтроки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПартияПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.Продукция.ТекущиеДанные;
	ЗаполнитьУпаковки_и_Маркировки(СтрокаТЧ);
	
КонецПроцедуры
