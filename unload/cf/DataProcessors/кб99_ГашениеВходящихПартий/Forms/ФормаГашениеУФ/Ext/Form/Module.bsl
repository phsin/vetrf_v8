
// Форма Гашение для УП
&НаКлиенте
Перем МожноЗакрывать;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыбНачалоПериода = НачалоГода(ТекущаяДата());
	ВыбОкончаниеПериода = КонецДня(ТекущаяДата());
	НастроитьКнопкуВыводитьВходящие();
	СформироватьПредставлениеОтбора();
	
	ЗаполнитьВсдПоСправочнику();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элементы.ВСДВходящие.ТекущаяСтрока, "ПанельВСДСвернута");
	МожноЗакрывать = Ложь;
	
КонецПроцедуры

//*******************  Открытие/Закрыте формы окончание

&НаСервере
Процедура ОтправкаЗапросовНаГашение(ПараметрыОрганизации = Неопределено)
	
	Отправлено = 0;
	Для Каждого СтрокаТЗ Из Объект.ВСДВходящие Цикл
		Если Не (СтрокаТЗ.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОрганизации) Тогда
			ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ДокВСД.Получатель_Площадка) Тогда
			ДокВСД = СтрокаТЗ.ДокВСД.ПолучитьОбъект();
			ДокВСД.Получатель_Площадка = Объект.Отправитель_Площадка;
			ДокВСД.Записать();
		КонецЕсли;
		
		ПараметрыОрганизации.Отправитель_Площадка = СтрокаТЗ.ДокВСД.Получатель_Площадка;
		ПараметрыОрганизации.Вставить("флАктНесоответствия", флАктНесоответствия);
		ПараметрыОрганизации.Вставить("тПричинаАкта", тПричинаАкта);
		ПараметрыОрганизации.Вставить("тОписаниеНесоответствия", тОписаниеНесоответствия);
		ПараметрыОрганизации.Вставить("ИсключитьИзПодбораПригашении", ИсключитьИзПодбораПригашении);
		
		СтрокаТЗ.СтатусЗапроса = кб99_ВСД_Запросы.ВСД2_Входящий_ОтправитьГашение(ПараметрыОрганизации, СтрокаТЗ.ДокВСД, СтрокаТЗ.ВСД_Партия);
		СтрокаТЗ.СтатусВСД = СтрокаТЗ.ДокВСД.СтатусВСД;
		
		Отправлено = Отправлено + 1;
		СтрокаТЗ.Отметка = 0;
	КонецЦикла;
	
КонецПроцедуры // Отправка()

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	кб99_ВСД.ЗагрузитьПараметрыВОбработку(Объект, СписокКонстант);
	
	ЗаполнитьВсдПоСправочнику();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.ВСДВходящие.Очистить();
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ГУИДХСдляОтбора = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Объект.Отправитель_ХозСубъект, "GUID");
	ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора), ГУИДХСдляОтбора, "****");
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина, ЗначениеОтбора);
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ПлощадкаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	УстановитьФильтрНаСервере();
	
КонецПроцедуры

// Вкладка Гашение

&НаКлиенте
Процедура ВСДВходящиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиДокументов(Команда)
	
	Для Каждого стр Из Объект.ВСДВходящие Цикл
		Если (стр.Отметка) Тогда 
			стр.Отметка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВсдВходящие()
	
	Запрос1 = Новый Запрос("ВЫБРАТЬ
	|	кб99_ВСД2.Ссылка КАК Ссылка,
	|	кб99_ВСД2.СтатусВСД КАК СтатусВСД
	|ИЗ
	|	Справочник.кб99_ВСД2 КАК кб99_ВСД2
	|ГДЕ
	|	кб99_ВСД2.ПометкаУдаления = ЛОЖЬ
	|	И кб99_ВСД2.СтатусВСД = &ВыбСтатус
	|	И кб99_ВСД2.Получатель_Площадка = &Получатель_Площадка");
	
	Запрос1.УстановитьПараметр("ВыбСтатус", Перечисления.кб99_СтатусВСД.CONFIRMED);
	Запрос1.УстановитьПараметр("Получатель_ХозСубъект", Объект.Отправитель_ХозСубъект);
	Запрос1.УстановитьПараметр("Получатель_Площадка", Объект.Отправитель_Площадка);
	
	РезультатЗапроса = Запрос1.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	//НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		ВсдОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВсдОбъект.УстановитьПометкуУдаления(Истина);
		ВсдОбъект.Записать();
	КонецЦикла;
	//ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура кнПолучитьВСДНаСервере()
	
	УдалитьВсдВходящие();
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПолучательПлощадка", Объект.Отправитель_Площадка);
	ПараметрыЗапроса.Вставить("vetDocumentType", "INCOMING");
	ПараметрыЗапроса.Вставить("vetDocumentStatus", "CONFIRMED");
	ПараметрыЗапроса.Вставить("Смещение", 0);
	ПараметрыЗапроса.Вставить("ПоступилиС", ВыбначалоПериода);
	ПараметрыЗапроса.Вставить("ПоступилиПо", ВыбОкончаниеПериода);
	ПараметрыЗапроса.Вставить("ОтправительХозСубъект", ВыбрХозСубъект);
	ПараметрыЗапроса.Вставить("ОтправительПлощадка", ВыбрПлощадка);
	ПараметрыЗапроса.Вставить("ПолучательПлощадка", Объект.Отправитель_Площадка);
	
	ПараметрыЗапроса.Вставить("Параметры", ПараметрыОрганизации);
	ПараметрыЗапроса.Вставить("ДокОснование", Неопределено);
	ПараметрыЗапроса.Вставить("ВсдРезультатМассив", Новый Массив );
	
	//Запросов = 20;
	
	Результат = кб99_ВСД_Запросы.ПолучитьСписокВСД(ПараметрыЗапроса);
	
	ВсдМассив = ПараметрыЗапроса.ВсдРезультатМассив;
	Объект.ВСДВходящие.Очистить();
	Для Каждого строкаВыборка Из ВсдМассив Цикл
		СтрокаВСДВходящие = Объект.ВСДВходящие.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВСДВходящие, строкаВыборка);
		ГашениеЗаполнитьСтрокуТаблицы(СтрокаВСДВходящие, ПараметрыОрганизации);
	КонецЦикла;
	
	//УстановитьФильтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьВСД(Команда)
	
	ОчиститьСообщения();
	Состояние("Выполняем запрос Входящих ВСД по " + Объект.Отправитель_Площадка,, "Ожидайте...", БиблиотекаКартинок.kb99_wrench);
	кнПолучитьВСДНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

&НаКлиенте
Процедура кнПогасить(Команда)
	
	ОчиститьСообщения();
	Состояние("Выполняем запрос Гашения Входящих ВСД",, "Ожидайте...", БиблиотекаКартинок.kb99_wrench);
	
	ОтправкаЗапросовНаГашение();
	
	ПоказатьОповещениеПользователя("Выполнено");
	ВСДВходящиеПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

// ***** Соответствия
&НаСервере
Функция ПолучитьНоменклатуруПоПродукцияЭлемент(ПродукцияЭлемент, Только1элемент = Ложь)
	Возврат кб99_ВСД.ПолучитьНоменклатуруПоПродукцияЭлемент(ПродукцияЭлемент, Только1элемент);
КонецФункции

&НаСервере
Функция НайтиНоменклатуруПоРеквизиту(ВыбРеквизит, ЗначениеРеквизита)
	
	Рез = "";
	Запрос = Новый Запрос;
	ТекстЗапроса = "
		|Выбрать Номенклатура.Ссылка из Справочник.Номенклатура как Номенклатура 
		|где Номенклатура.@ИмяРекв = &ЗначРеквизита";
	текстЗапроса = СтрЗаменить(ТекстЗапроса, "@ИмяРекв", ВыбРеквизит);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначениеРеквизита);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Рез = Выборка.Ссылка;
		КонецЕсли;
	Исключение
		кб99_ВСД.СообщитьИнфо("Что-то пошло не так");
		кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());
	КонецПопытки;
	Возврат Рез;
	
КонецФункции

&НаСервере
Процедура ОчиститьСоответствие(ВыбНоменклатура, ВСДЭлемент)
	
	кб99_ВСД.ОчиститьСоответствие_ВСД_Продукция_Элемент(ВыбНоменклатура, ВСДЭлемент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗСоответствий(сзПродукцияЭлементы)
	
	//Вынести в модуль объекта
	// Заполнение Продукция_элементом  + сразу поиск установленных соответствий
	// сзПродукцияЭлементы - Список Значений
	Объект.Соответствия.Очистить();
	тз = Объект.Соответствия.Выгрузить(); //Взяли структуру
	Для Каждого стрТз Из сзПродукцияЭлементы Цикл
		стрСоотв = тз.Добавить();
		стрСоотв.Продукция_Элемент = стрТз.Значение;//Продукция_Элемент;
		стрСоотв.Производитель = стрСоотв.Продукция_Элемент.Площадка;
		стрСоотв.Артикул = стрСоотв.Продукция_Элемент.Артикул;
		стрСоотв.GTIN = стрСоотв.Продукция_Элемент.GTIN;
		стрСоотв.Номенклатура = ПолучитьНоменклатуруПоПродукцияЭлемент(стрСоотв.Продукция_Элемент, 1);
		Если ЗначениеЗаполнено(стрСоотв.Номенклатура) Тогда
			стрСоотв.Записано = true;
		КонецЕсли;
	КонецЦикла;
	//Свернем, т.к. могут повторяться
	тз.Свернуть("Продукция_Элемент,Номенклатура,Артикул,GTIN,Производитель,Записано", "");
	Объект.Соответствия.Загрузить(тз);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСПоискомПоРеквизиту(ВыбРеквизит, ИмяРекв = "Артикул")
	
	тз = Объект.Соответствия.Выгрузить();
	Для Каждого строкаТз Из тз Цикл
		Если (строкаТз.Записано) или (ЗначениеЗаполнено(строкаТз.Номенклатура)) Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяРекв = "Артикул" Тогда
			ВыбЗначение = СокрЛП(строкаТз.Артикул);
		Иначе
			ВыбЗначение = СокрЛП(строкаТз.GTIN);
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(ВыбЗначение)) Тогда
			Продолжить;
		КонецЕсли;
		строкаТз.Номенклатура = НайтиНоменклатуруПоРеквизиту(ВыбРеквизит, ВыбЗначение);
	КонецЦикла;
	Объект.Соответствия.Загрузить(Тз);
	
КонецПроцедуры

#Область Кнопки

&НаСервере
Процедура кнЗаполнитьТзСоответствийСервер()
	
	Фобъект = РеквизитФормыВЗначение("Объект");
	сзЭлементы = Новый СписокЗначений;
	сзЭлементы.ЗагрузитьЗначения(Фобъект.ВсдВходящие.ВыгрузитьКолонку("Продукция_Элемент"));
	ЗаполнитьТЗСоответствий(сзЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнитьТзСоответствий(Команда)
	кнЗаполнитьТзСоответствийСервер();
КонецПроцедуры

&НаСервере
Процедура кнЗаполнитьИзСправочникаНаСервере()
	
	// Заполним из Справочника ВСД_Продукция_Элемент
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВСД_Продукция_Элемент.Ссылка
	|ИЗ
	|	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
	|ГДЕ
	|	ВСД_Продукция_Элемент.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВСД_Продукция_Элемент.Наименование";
	Запрос.Текст = ТекстЗапроса;
	ТзВрем = Запрос.Выполнить().Выгрузить();
	сзЭлементы = Новый СписокЗначений;
	сзЭлементы.ЗагрузитьЗначения(ТзВрем.ВыгрузитьКолонку("Ссылка"));
	ЗаполнитьТЗСоответствий(сзЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнитьИзСправочника(Команда)
	кнЗаполнитьИзСправочникаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура кнНайтиПоАртикулу(Команда)
	ЗаполнитьСПоискомПоРеквизиту(ИмяРеквизитаАртикул, "Артикул");
КонецПроцедуры

&НаКлиенте
Процедура кнНайтиПоШК(Команда)
	
	//ЗаполнитьСПоискомПоРеквизиту(ИмяРеквизитаШК,"ШК");
	ЗаполнитьПоРегиструШК();
	
КонецПроцедуры

&НаСервере
Процедура кнЗаписатьСоответствияНаСервере()
	
	тз = Объект.Соответствия.Выгрузить();
	Для Каждого строкаТз Из тз Цикл
		Если (строкаТз.Записано) или Не (ЗначениеЗаполнено(строкаТз.Номенклатура)) Тогда
			Продолжить;
		КонецЕсли;
		кб99_ВСД.Установить_Соответствие_ВСД_Продукция_Элемент(СтрокаТЗ.Номенклатура,СтрокаТЗ.Продукция_Элемент);
		строкаТЗ.Записано = True;
	КонецЦикла;
	Объект.Соответствия.Загрузить(Тз);
	
КонецПроцедуры

&НаКлиенте
Процедура кнЗаписатьСоответствия(Команда)
	кнЗаписатьСоответствияНаСервере();
КонецПроцедуры

&НаСервере
Процедура кнУбратьЗаполненныеНаСервере()
	
	тз = Объект.Соответствия.Выгрузить();
	Найдено = тз.Найти(True,"Записано");
	Пока Не (Найдено = Неопределено) Цикл
		тз.Удалить(Найдено);
		Найдено = тз.Найти(True,"Записано");
	КонецЦикла;
	Объект.Соответствия.Загрузить(Тз);
	
КонецПроцедуры

&НаКлиенте
Процедура кнУбратьЗаполненные(Команда)
	кнУбратьЗаполненныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура кнФильтр(Команда)
	
	//Элементы.ГруппаОтбора.Видимость = Не Элементы.ГруппаОтбора.Видимость;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("УстановитьФильтрЗавершение", ЭтаФорма);
	
	ТекФильтр = Новый Структура();
	ТекФильтр.Вставить("НачалоПериода", ВыбНачалоПериода);
	ТекФильтр.Вставить("ОкончаниеПериода", ВыбОкончаниеПериода);
	ТекФильтр.Вставить("Хозсубъект", ВыбрХозСубъект);
	ТекФильтр.Вставить("Площадка", ВыбрПлощадка);
	ТекФильтр.Вставить("НомерТТН", НомерТТН);
	ТекФильтр.Вставить("ГашениеСВХ", ГашениеСВХ);
	
	ОткрытьФорму("Обработка.кб99_ГашениеВходящихПартий.Форма.Фильтр",
	             ТекФильтр,
	             ЭтаФорма,,,,
	             ОповещениеОЗакрытии,
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтрЗавершение(НовыйФильтр, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НовыйФильтр <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыйФильтр);
		ЗаполнитьВсдПоСправочнику();
		
	КонецЕсли;
	СформироватьПредставлениеОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура кнПогаситьСАктомНесоответствия(Команда)
	
	ОчиститьСообщения();
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗаполненияАктаНесоответствия", ЭтаФорма);
	ОткрытьФорму("Обработка.кб99_ГашениеВходящихПартий.Форма.ОформлениеАктаНесоответстсвия",,
	             ЭтаФорма,,,,
	             ОповещениеОЗакрытии,
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

// События Соответствия
&НаСервере
Процедура ЗаполнитьПоРегиструШК()
	
	тз = Объект.Соответствия.Выгрузить();
	
	Штрихкоды = тз.ВыгрузитьКолонку("GTIN");
	Штрихкоды = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Штрихкоды);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В(&Штрихкод)";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкоды);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого строкаТз Из тз Цикл
		
		Если (строкаТз.Записано) или (ЗначениеЗаполнено(строкаТз.Номенклатура)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(строкаТз.GTIN)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрРез = РезультатЗапроса.Найти(строкаТз.GTIN, "Штрихкод");
		Если СтрРез <> Неопределено Тогда
			строкаТз.Номенклатура = СтрРез.Номенклатура;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.Соответствия.Загрузить(Тз);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияНоменклатураНачалоВыбораОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСоответствие(Парам.Номенклатура,Парам.Продукция_Элемент);
		Парам.Номенклатура = "";
		Парам.Записано = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.Родитель.ТекущиеДанные.Записано Тогда
		ТекстВопроса = "Установлена связь с 
			|" + Элемент.Родитель.ТекущиеДанные.Продукция_Элемент + "
			|Отвязываем?";
		Парам = Новый Структура("Номенклатура,Продукция_Элемент,Записано", Элемент.Родитель.ТекущиеДанные.Номенклатура, 
			Элемент.Родитель.ТекущиеДанные.Продукция_Элемент, Элемент.Родитель.ТекущиеДанные.Записано);
		Оповещение = Новый ОписаниеОповещения("СоответствияНоменклатураНачалоВыбораОтвет",ЭтаФорма,Парам);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Получить_ВСД_Продукция_ЭлементНаСервере(ВыбНоменклатура)
	
	Возврат кб99_ВСД.Продукция_Элемент_ПолучитьПоНоменклатуре(ВыбНоменклатура);
	
КонецФункции

&НаКлиенте
Процедура СоответствияНоменклатураПриИзмененииОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСоответствие(Парам.Элемент.Родитель.ТекущиеДанные.Номенклатура,Парам.ВремПЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияНоменклатураПриИзменении(Элемент)
	
	ВремПЭлемент = Получить_ВСД_Продукция_ЭлементНаСервере(Элемент.Родитель.ТекущиеДанные.Номенклатура);
	Если Не ЗначениеЗаполнено(ВремПЭлемент) Тогда
		Элемент.Родитель.ТекущиеДанные.Записано = False;
	ИначеЕсли НЕ(ВремПЭлемент = Элемент.Родитель.ТекущиеДанные.Продукция_Элемент) Тогда
		ТекстВопроса = "Уже установлена связь с 
			|" + ВремПЭлемент + "
			|Отвязываем?";
		Парам = Новый Структура("Элемент,ВремПЭлемент", Элемент, ВремПЭлемент);
		Оповещение = Новый ОписаниеОповещения("СоответствияНоменклатураПриИзмененииОтвет", ЭтаФорма,Парам);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "");
		Элемент.Родитель.ТекущиеДанные.Записано = False;
	Иначе
		Элемент.Родитель.ТекущиеДанные.Записано = True;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияНоменклатураОчисткаОтвет(Ответ, Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСоответствие(Парам.Элемент.Родитель.ТекущиеДанные.Номенклатура, Парам.Элемент.Родитель.ТекущиеДанные.Продукция_Элемент);
		Парам.Элемент.Родитель.ТекущиеДанные.Номенклатура = "";
		Парам.Элемент.Родитель.ТекущиеДанные.Записано = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	Если Элемент.Родитель.ТекущиеДанные.Записано Тогда
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = "Установлена связь с
			|" + Элемент.Родитель.ТекущиеДанные.Продукция_Элемент + "
			|Отвязываем?";
		Парам = Новый Структура("Элемент,СтандартнаяОбработка", Элемент);
		Оповещение = Новый ОписаниеОповещения("СоответствияНоменклатураОчисткаОтвет", ЭтаФорма, Парам);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаВСД(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	ВыбранныйПериод = Диалог.Период;
	ВыбНачалоПериода = ВыбранныйПериод.ДатаНачала;
	ВыбокончаниеПериода = ВыбранныйПериод.ДатаОкончания;
	
	УстановитьФильтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура кнВыбратьПериодВСД(Команда)
	
	ВыбранныйПериод = Новый СтандартныйПериод;
	Если Команда.Имя = "кнВыбратьПериодВСД" Тогда
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = ВыбНачалоПериода;
		ВыбранныйПериод.ДатаОкончания = ВыбокончаниеПериода;
		КудаРезультат = "ВыборПериодаВСД";
	КонецЕсли;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ВыбранныйПериод;
	// Не модальный вызов диалога выбора периода
	
	Диалог.Показать(Новый ОписаниеОповещения(КудаРезультат, ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаСервере
Процедура кнОформитьВходящийВСДНаСервере()
	
	Фобъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.СоздатьВСД_ВходящиеПоТЗВходящих();
	ЗначениеВРеквизитФормы(Фобъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура кнОформитьВходящийВСДОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		кнОформитьВходящийВСДНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнОформитьВходящийВСД(Команда)
	Оповещение = Новый ОписаниеОповещения("кнОформитьВходящийВСДОтвет", ЭтаФорма);
	ПоказатьВопрос(Оповещение, "Создать документы в 1С?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "");
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Отправитель_Площадка) Тогда
		ЗаполнитьВсдПоСправочнику();
	Иначе
		ЗаполнитьВсдПоВсемПлощадкам();
	КонецЕсли;
	
	//НомерСтроки = Объект.ВСДВходящие.Количество();
	//Пока НомерСтроки > 0 Цикл	
	//	НомерСтроки=НомерСтроки-1;
	//	ТекСтрока = Объект.ВСДВходящие[НомерСтроки];
	
	//	Если ЗначениеЗаполнено(ВыбНачалоПериода) и ТекСтрока.ВСДДата < ВыбНачалоПериода Тогда 
	//		кб99_ВСД.СообщитьИнфо("Отфильтрована партия "+ТекСтрока.ВСДДата+" ["+ТекСтрока.НаименованиеПродукции+"] = "+ТекСтрока.Количество );
	//		Объект.ВСДВходящие.Удалить(Номерстроки);
	//		Продолжить;
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(ВыбОкончаниеПериода) и ТекСтрока.ВСДДата > ВыбОкончаниеПериода Тогда 
	//		кб99_ВСД.СообщитьИнфо("Отфильтрована партия "+ТекСтрока.ВСДДата+" ["+ТекСтрока.НаименованиеПродукции+"] = "+ТекСтрока.Количество );
	//		Объект.ВСДВходящие.Удалить(Номерстроки);
	//		Продолжить;
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(ВыбрХозСубъект) и ТекСтрока.Отправитель_Хозсубъект <> ВыбрХозСубъект Тогда 
	//		кб99_ВСД.СообщитьИнфо("Отфильтрована партия "+ТекСтрока.Отправитель_Хозсубъект+" ["+ТекСтрока.НаименованиеПродукции+"] = "+ТекСтрока.Количество );
	//		Объект.ВСДВходящие.Удалить(Номерстроки);
	//		Продолжить;
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(ВыбрПлощадка) и ТекСтрока.Отправитель_Площадка <> ВыбрПлощадка Тогда 
	//		кб99_ВСД.СообщитьИнфо("Отфильтрована партия "+ТекСтрока.Отправитель_Площадка+" ["+ТекСтрока.НаименованиеПродукции+"] = "+ТекСтрока.Количество );
	//		Объект.ВСДВходящие.Удалить(Номерстроки);
	//		Продолжить;
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(НомерТТН) и ТекСтрока.ТтнНомер <> НомерТТН Тогда 
	//		кб99_ВСД.СообщитьИнфо("Отфильтрована партия "+ТекСтрока.ВСДДата+" ["+ТекСтрока.НаименованиеПродукции+"] = "+ТекСтрока.Количество );
	//		Объект.ВСДВходящие.Удалить(НомерСтроки);			
	//		Продолжить;
	//	КонецЕсли;
	//	Если ГашениеСВХ и ЗначениеЗаполнено(текСтрока.Отправитель_Площадка) Тогда
	//		кб99_ВСД.СообщитьИнфо("Отфильтрована партия "+ТекСтрока.ВСДДата+" ["+ТекСтрока.НаименованиеПродукции+"] = "+ТекСтрока.Количество );
	//		Объект.ВСДВходящие.Удалить(НомерСтроки);
	//		Продолжить;
	//	КонецЕсли;		
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбНачалоПериодаПриИзменении(Элемент)
	УстановитьФильтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбОкончаниеПериодаПриИзменении(Элемент)
	УстановитьФильтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбрХозСубъектПриИзменении(Элемент)
	УстановитьФильтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбрПлощадкаПриИзменении(Элемент)
	УстановитьФильтрНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Отправитель_ХозСубъект") Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.Отправитель_ХозСубъект) Тогда
			кб99_ВСД.СообщитьИнфо("Не заполнен параметр [Отправитель_ХозСубъект] для загрузки параметров");
			Возврат;
		КонецЕсли;
		Объект.Организация = кб99_ВСД.ПолучитьОрганизациюПоХС(Параметры.Отправитель_ХозСубъект);
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда 
			кб99_ВСД.СообщитьИнфо("Не найдена организация для загрузки параметров по " + Параметры.Отправитель_ХозСубъект);
			Возврат;
		КонецЕсли;
		
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
		кб99_ВСД.ЗагрузитьПараметрыВОбработку(Объект, ПараметрыОрганизации);
	КонецЕсли;
	
	Если Параметры.Свойство("Отправитель_Площадка") Тогда
		
		Если НЕ ЗначениеЗаполнено( Параметры.Отправитель_Площадка ) Тогда
			кб99_ВСД.СообщитьИнфо("Не заполнен параметр [Отправитель_Площадка]");
			Возврат;
		КонецЕсли;
		
		Объект.Отправитель_Площадка = Параметры.Отправитель_Площадка;
		ПараметрыОрганизации.Отправитель_Площадка = Объект.Отправитель_Площадка;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ТаблицаВсдДляГашения") Тогда
		
		Объект.ВСДВходящие.Очистить();
		Для Каждого строкаВСД Из Параметры.ТаблицаВсдДляГашения Цикл
			
			СтрокаВСДВходящие = Объект.ВСДВходящие.Добавить();
			СтрокаВСДВходящие.Отметка = Истина;
			ЗаполнитьЗначенияСвойств(СтрокаВСДВходящие, строкаВСД);
		КонецЦикла;
		ОтправкаЗапросовНаГашение(ПараметрыОрганизации);
		
	КонецЕсли;
	
	Если Объект.Организация = Справочники.Организации.ПустаяСсылка() Тогда
		
		// заполнения по умолчению
		Объект.Организация = кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
		кб99_ВСД.ЗагрузитьПараметрыВОбработку(Объект, ПараметрыОрганизации);
		
	КонецЕсли;
	
	ЭтоПолноправныйПользователь = кб99_ВСД_Общий.ЭтоПолноправныйПользователь();
	Элементы.Отправитель_Площадка.ТолькоПросмотр = Не ЭтоПолноправныйПользователь;
	Элементы.ФормакнПолучитьВсдПоВсемПлощадкам.Видимость = ЭтоПолноправныйПользователь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВСДВходящиеКоличествоВозвратПриИзменении(Элемент)
	
	ВыбЭлемент = ЭтаФорма.Элементы.ВСДВходящие.ТекущиеДанные;
	
	Если Не ГашениеСВХ Тогда
		ВыбЭлемент.КоличествоПринять = ВыбЭлемент.Количество - ВыбЭлемент.КоличествоВозврат;
		ВыбЭлемент.Отметка = Истина;
		ВСДВходящиеКоличествоПриИзмененииНаСервере(ВыбЭлемент.ДокВСД, ВыбЭлемент.КоличествоПринять, ВыбЭлемент.КоличествоВозврат)
	Иначе
		Сообщение = "При гашении товаров с СВХ можно принимать только в полном объеме!";
		кб99_ВСД.СообщитьПользователю(Сообщение,, ВыбЭлемент.КоличествоВозврат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнПереместитьПартии(Команда)
	
	тзПартий = Новый Массив;
	
	Для Каждого стрВходящие Из объект.ВСДВходящие Цикл
		Если стрВходящие.Отметка И ЗначениеЗаполнено(стрВходящие.ВСД_Партия) Тогда
			СтрПартий = Новый Структура("Партия, Продукция_Элемент, Количество, ЕдиницаИзмерения, Цель");
			ЗаполнитьЗначенияСвойств(СтрПартий, стрВходящие);
			СтрПартий.Партия = стрВходящие.ВСД_Партия;
			СтрПартий.Количество = стрВходящие.КоличествоПринять;
			тзПартий.Добавить(стрПартий);
		КонецЕсли;
	КонецЦикла;
	
	Если тзПартий.Количество()>0 Тогда
		
		ПараметрыДокумента = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
		ЭлементыОтбора = Новый Структура("ПараметрыДокумента, Партии", ПараметрыДокумента, тзПартий);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЭлементыОтбора);
		
		ОткрытьФорму("Документ.ВСД2_транзакция.ФормаОбъекта", ПараметрыФормы);
		
	Иначе
		Сообщить("Нечего перемещать, ВСД_Партии не выбраны");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсдПоСправочнику()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	кб99_ВСД2.Ссылка КАК ДокВСД,
	|	кб99_ЗапросыСрезПоследних.СтатусЗапроса КАК СтатусЗапроса,
	|	кб99_ЗапросыСрезПоследних.Пользователь КАК Пользователь,
	|	кб99_ЗапросыСрезПоследних.ApplicationID КАК ApplicationID,
	|	кб99_ВСД2.Отправитель_ХозСубъект КАК Отправитель_ХозСубъект,
	|	кб99_ВСД2.Отправитель_Площадка КАК Отправитель_Площадка,
	|	кб99_ВСД2.Получатель_ХозСубъект КАК Получатель_ХозСубъект,
	|	кб99_ВСД2.Получатель_Площадка КАК Получатель_Площадка,
	|	кб99_ВСД2.Отправитель_Площадка.guid = кб99_ВСД2.Получатель_Площадка.guid КАК СменаВладельцаБезПеревозки,
	|	кб99_ВСД2.Количество КАК Количество,
	|	кб99_ВСД2.ТтнСерия КАК ТтнСерия,
	|	кб99_ВСД2.ТтнНомер КАК ТтнНомер,
	|	кб99_ВСД2.ТтнДата КАК ТтнДата,
	|	кб99_ВСД2.номерАвто КАК номерАвто,
	|	кб99_ВСД2.UUID КАК UUID,
	|	кб99_ВСД2.ФормаВСД КАК ФормаВСД,
	|	кб99_ВСД2.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	кб99_ВСД2.ТермическоеСостояние КАК ТермическоеСостояние,
	|	ВЫРАЗИТЬ(кб99_ВСД2.ОсобыеОтметки КАК СТРОКА(250)) КАК ОсобыеОтметки,
	|	кб99_ВСД2.cargoInspected КАК cargoInspected,
	|	кб99_ВСД2.ВсдСерия КАК ВсдСерия,
	|	кб99_ВСД2.ВсдНомер КАК ВсдНомер,
	|	кб99_ВСД2.ВсдДата КАК ВсдДата,
	|	кб99_ВСД2.Продукция КАК Продукция,
	|	кб99_ВСД2.ВидПродукции КАК ВидПродукции,
	|	ВЫРАЗИТЬ(кб99_ВСД2.НаименованиеПродукции КАК СТРОКА(250)) КАК НаименованиеПродукции,
	|	кб99_ВСД2.Продукция_Элемент КАК Продукция_Элемент,
	|	кб99_ВСД2.ДокументОснование КАК ДокументОснование,
	|	кб99_ВСД2.ВидВСД КАК ВидВСД,
	|	кб99_ВСД2.Скоропортящийся КАК Скоропортящийся,
	|	кб99_ВСД2.Некачественный КАК Некачественный,
	|	кб99_ВСД2.ТипТС КАК ТипТС,
	|	кб99_ВСД2.Организация КАК Организация,
	|	кб99_ВСД2.ДатаИзготовления КАК ДатаИзготовления,
	|	кб99_ВСД2.ДатаСрокГодности КАК ДатаСрокГодности,
	|	кб99_ВСД2.номерПолуприцепа КАК номерПолуприцепа,
	|	кб99_ВСД2.номерКонтейнера КАК номерКонтейнера,
	|	кб99_ВСД2.ТипВСД КАК ТипВСД,
	|	кб99_ВСД2.GTIN КАК GTIN,
	|	кб99_ВСД2.Артикул КАК Артикул,
	|	кб99_ВСД2.ФасовкаФормаУпаковки КАК ФасовкаФормаУпаковки,
	|	кб99_ВСД2.ФасовкаНаименование КАК ФасовкаНаименование,
	|	кб99_ВСД2.ФасовкаКоличество КАК ФасовкаКоличество,
	|	кб99_ВСД2.ФасовкаЕдиницаИзм КАК ФасовкаЕдиницаИзм,
	|	кб99_ВСД2.ФасовкаОбъем КАК ФасовкаОбъем,
	|	кб99_ВСД2.ВладелецХС КАК ВладелецХС,
	|	кб99_ВСД2.ТтнТип КАК ТтнТип,
	|	кб99_ВСД2.КоличествоПринять КАК КоличествоПринять,
	|	кб99_ВСД2.КоличествоВозврат КАК КоличествоВозврат,
	|	кб99_ВСД2.ТермическиеУсловияПеревозки КАК ТермическиеУсловияПеревозки,
	|	кб99_ВСД2.ДатаИзготовления1 КАК ДатаИзготовления1,
	|	кб99_ВСД2.ДатаИзготовления2 КАК ДатаИзготовления2,
	|	кб99_ВСД2.ДатаСрокГодности1 КАК ДатаСрокГодности1,
	|	кб99_ВСД2.ДатаСрокГодности2 КАК ДатаСрокГодности2,
	|	кб99_ВСД2.Страна КАК Страна,
	|	кб99_ВСД2.НаличиеЛабИсследований КАК НаличиеЛабИсследований,
	|	спрПартии.Ссылка КАК ВСД_Партия,
	|	МАКСИМУМ(кб99_ВСД2НомераПартий.НомерПартии) КАК НомерПартии
	|ИЗ
	|	Справочник.кб99_ВСД2 КАК кб99_ВСД2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кб99_Запросы.СрезПоследних КАК кб99_ЗапросыСрезПоследних
	|		ПО кб99_ВСД2.Ссылка = кб99_ЗапросыСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.кб99_ВСД2.НомераПартий КАК кб99_ВСД2НомераПартий
	|		ПО кб99_ВСД2.Ссылка = кб99_ВСД2НомераПартий.Ссылка";
	Если ВыводитьПогашенные Тогда
		Запрос.Текст = Запрос.Текст + "
		| ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВСД_Партия КАК спрПартии";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		| ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Партия КАК спрПартии";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ПО кб99_ВСД2.Ссылка = спрПартии.vetDocument
	|		И НЕ спрПартии.ПометкаУдаления
	|
	|ГДЕ
	|	кб99_ВСД2.ПометкаУдаления = ЛОЖЬ";
	Если НЕ ВыводитьПогашенные Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И НЕ кб99_ЗапросыСрезПоследних.СтатусЗапроса = ""НЕТ"" 
		|	И кб99_ВСД2.СтатусВСД = &ВыбСтатус ";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	И кб99_ВСД2.Получатель_Площадка = &Получатель_Площадка
	|	И кб99_ВСД2.ВсдДата МЕЖДУ &Дата1 И &Дата2
	|	&ФИЛЬТР
	|
	|СГРУППИРОВАТЬ ПО
	|	кб99_ВСД2.Ссылка,
	|	кб99_ЗапросыСрезПоследних.СтатусЗапроса,
	|	кб99_ЗапросыСрезПоследних.Пользователь,
	|	кб99_ЗапросыСрезПоследних.ApplicationID,
	|	кб99_ВСД2.Отправитель_ХозСубъект,
	|	кб99_ВСД2.Отправитель_Площадка,
	|	кб99_ВСД2.Получатель_ХозСубъект,
	|	кб99_ВСД2.Получатель_Площадка,
	|	кб99_ВСД2.Отправитель_Площадка.guid = кб99_ВСД2.Получатель_Площадка.guid,
	|	кб99_ВСД2.Количество,
	|	кб99_ВСД2.ТтнСерия,
	|	кб99_ВСД2.ТтнНомер,
	|	кб99_ВСД2.ТтнДата,
	|	кб99_ВСД2.номерАвто,
	|	кб99_ВСД2.UUID,
	|	кб99_ВСД2.ФормаВСД,
	|	кб99_ВСД2.ЕдиницаИзмерения,
	|	кб99_ВСД2.ТермическоеСостояние,
	|	ВЫРАЗИТЬ(кб99_ВСД2.ОсобыеОтметки КАК СТРОКА(250)),
	|	кб99_ВСД2.cargoInspected,
	|	кб99_ВСД2.ВсдСерия,
	|	кб99_ВСД2.ВсдНомер,
	|	кб99_ВСД2.ВсдДата,
	|	кб99_ВСД2.Продукция,
	|	кб99_ВСД2.ВидПродукции,
	|	ВЫРАЗИТЬ(кб99_ВСД2.НаименованиеПродукции КАК СТРОКА(250)),
	|	кб99_ВСД2.Продукция_Элемент,
	|	кб99_ВСД2.ДокументОснование,
	|	кб99_ВСД2.ВидВСД,
	|	кб99_ВСД2.Скоропортящийся,
	|	кб99_ВСД2.Некачественный,
	|	кб99_ВСД2.ТипТС,
	|	кб99_ВСД2.Организация,
	|	кб99_ВСД2.ДатаИзготовления,
	|	кб99_ВСД2.ДатаСрокГодности,
	|	кб99_ВСД2.номерПолуприцепа,
	|	кб99_ВСД2.номерКонтейнера,
	|	кб99_ВСД2.ТипВСД,
	|	кб99_ВСД2.GTIN,
	|	кб99_ВСД2.Артикул,
	|	кб99_ВСД2.ФасовкаФормаУпаковки,
	|	кб99_ВСД2.ФасовкаНаименование,
	|	кб99_ВСД2.ФасовкаКоличество,
	|	кб99_ВСД2.ФасовкаЕдиницаИзм,
	|	кб99_ВСД2.ФасовкаОбъем,
	|	кб99_ВСД2.ВладелецХС,
	|	кб99_ВСД2.ТтнТип,
	|	кб99_ВСД2.КоличествоПринять,
	|	кб99_ВСД2.КоличествоВозврат,
	|	кб99_ВСД2.ТермическиеУсловияПеревозки,
	|	кб99_ВСД2.ДатаИзготовления1,
	|	кб99_ВСД2.ДатаИзготовления2,
	|	кб99_ВСД2.ДатаСрокГодности1,
	|	кб99_ВСД2.ДатаСрокГодности2,
	|	кб99_ВСД2.Страна,
	|	кб99_ВСД2.НаличиеЛабИсследований,
	|	спрПартии.Ссылка";
	
	Запрос.УстановитьПараметр("ВыбСтатус", Перечисления.кб99_СтатусВСД.CONFIRMED);
	Запрос.УстановитьПараметр("Получатель_Площадка", Объект.Отправитель_Площадка);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ВыбНачалоПериода));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ВыбОкончаниеПериода));
	
	СтрФильтр = "";
	СтрФильтр = СтрФильтр + ?(ЗначениеЗаполнено(ВыбрХозСубъект), " И кб99_ВСД2.Отправитель_ХозСубъект = &ОтправительХС", "");
	СтрФильтр = СтрФильтр + ?(ЗначениеЗаполнено(ВыбрПлощадка), " И кб99_ВСД2.Отправитель_Площадка = &ОтправительПлощадка", "");
	СтрФильтр = СтрФильтр + ?(ЗначениеЗаполнено(НомерТТН), " И кб99_ВСД2.ТтнНомер ПОДОБНО &НомерТТН", "");
	СтрФильтр = СтрФильтр + ?(ГашениеСВХ, " И кб99_ВСД2.Отправитель_Площадка = ЗНАЧЕНИЕ(Справочник.ВСД_Площадка.ПустаяСсылка)", "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФИЛЬТР", СтрФильтр);
	Запрос.УстановитьПараметр("ОтправительХС", ВыбрХозСубъект);
	Запрос.УстановитьПараметр("ОтправительПлощадка", ВыбрПлощадка);
	Запрос.УстановитьПараметр("НомерТТН", НомерТТН);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Объект.ВСДВходящие.Очистить();
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	Для Каждого строкаВыборка Из Выборка Цикл
		
		СтрокаВСДВходящие = Объект.ВСДВходящие.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВСДВходящие, строкаВыборка);
		ГашениеЗаполнитьСтрокуТаблицы(СтрокаВСДВходящие, ПараметрыОрганизации);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция Гашение_НайтиСрокГодностиПоСерии(СтрокаТовары)
	
	Ответ = 0;
	СерииЗаполнены = Ложь;
	
	тзСерии = СтрокаТовары.ДокументПрихода.Серии.Выгрузить();
	Для каждого строкаСерия Из тзСерии Цикл
		Если строкаСерия.Номенклатура = СтрокаТовары.Номенклатура Тогда
			
			СерииЗаполнены = Истина;
			ДатаСрокГодности1 = кб99_ВСД_Запросы.СтрокаВДатаВремя(СтрокаТовары.ДатаСрокГодности1);
			СтрокаТовары.ДатаСрокГодности1С = строкаСерия.Серия.ГоденДо;
			
			Если ЗначениеЗаполнено(СтрокаТовары.ДатаСрокГодности2) Тогда
				
				ДатаСрокГодности2 = кб99_ВСД_Запросы.СтрокаВДатаВремя(СтрокаТовары.ДатаСрокГодности2);
				
				Если строкаСерия.Серия.ГоденДо >= ДатаСрокГодности1 И
					строкаСерия.Серия.ГоденДо <= ДатаСрокГодности2 Тогда
					Ответ = Ответ + строкаСерия.Количество;
				КонецЕсли;
			Иначе
				Если строкаСерия.Серия.ГоденДо = ДатаСрокГодности1 Тогда
					Ответ = Ответ + строкаСерия.Количество;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СерииЗаполнены Тогда
		Ответ = СтрокаТовары.Количество;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаСервере
Процедура Гашение_ЗаполнитьСтрокуПоПоступлениеТоваров(СтрокаВСДВходящие)
	
	ПереопределенныйМодуль = кб99_ВСД_Общий.ФункцияПереопределена("Гашение_ЗаполнитьСтрокуПоПоступлениеТоваров");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		ПереопределенныйМодуль.Гашение_ЗаполнитьСтрокуПоПоступлениеТоваров(СтрокаВСДВходящие);
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(СтрокаВСДВходящие.ДокументПрихода) Тогда
			тзТовары = СтрокаВСДВходящие.ДокументПрихода.Товары.Выгрузить();
			тзТовары.Свернуть("Номенклатура", "Количество");
			СтрокаТовары =  тзТовары.Найти( СтрокаВСДВходящие.Номенклатура, "Номенклатура");
			Если ЗначениеЗаполнено(СтрокаТовары) Тогда
				
				КоличествоСерия = Гашение_НайтиСрокГодностиПоСерии(СтрокаВСДВходящие);
				Если СтрокаТовары.Номенклатура.ВесЗнаменатель > 0 Тогда
					Вес = СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель;
				Иначе
					Вес = 1;
				КонецЕсли;
				Если КоличествоСерия > 0 Тогда
					СтрокаВСДВходящие.КоличествоПринято1С = КоличествоСерия * вес;
				Иначе
					СтрокаВСДВходящие.КоличествоПринято1С = СтрокаТовары.Количество * вес;
				КонецЕсли;
				
			Иначе
				СтрокаВСДВходящие.Ошибки = "Не найдена номенклатура [" + СтрокаВСДВходящие.Номенклатура + "] в документе [" + СтрокаВСДВходящие.ДокументПрихода + "]";
				кб99_ВСД.СообщитьИнфо(СтрокаВСДВходящие.Ошибки, СтрокаВСДВходящие.ДокументПрихода);
			КонецЕсли;
		КонецЕсли;
	Исключение
		кб99_ВСД.СообщитьИнфо("Не удалось найти документ ПриходнаяНакладная, переопределите функцию [Гашение_ЗаполнитьСтрокуПоПоступлениеТоваров] для Вашей конфигурации " + символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ГашениеЗаполнитьСтрокуТаблицы(СтрокаВСДВходящие, ПараметрыОрганизации)
	
	СтрокаВСДВходящие.Номенклатура = кб99_ВСД.ПолучитьНоменклатуруПоПродукцияЭлемент(СтрокаВСДВходящие.Продукция_Элемент, Истина);
	
	Попытка
		ИскатьДокументПрихода = ПараметрыОрганизации["ПарамВсдВходящиеИскатьДокументПрихода"];
	Исключение
		ИскатьДокументПрихода = Ложь;
		кб99_ВСД.СообщитьИнфо("Не заполнен параметр [ПарамВсдВходящиеИскатьДокументПрихода]. Пожалуйста, проверьте и сохраните Параметры интеграции.");
	КонецПопытки;
	
	Если ИскатьДокументПрихода Тогда
		СтрокаВСДВходящие.ДокументПрихода = кб99_ВСД_Общий.Гашение_НайтиДокументПоступлениеТоваров(СтрокаВСДВходящие.ДокВСД.ТтнДата, СтрокаВСДВходящие.ДокВСД.ТтнНомер, СтрокаВСДВходящие.Отправитель_Хозсубъект.ИНН);
		СтрокаВСДВходящие.КодТНВЭД=СтрокаВСДВходящие.Продукция_Элемент.ВидПродукции.КодТНВЭД+"/"+СтрокаВСДВходящие.Продукция_Элемент.Продукция.КодТНВЭД;
		Если ЗначениеЗаполнено(СтрокаВСДВходящие.ДокументПрихода) Тогда
			Гашение_ЗаполнитьСтрокуПоПоступлениеТоваров(СтрокаВСДВходящие);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаВСДВходящие.ДатаПроизводстваСтрока = кб99_ВСД_Общий.ПредставлениеПериодаВЕТИС(СтрокаВСДВходящие.ДатаИзготовления1, СтрокаВСДВходящие.ДатаИзготовления2);
	СтрокаВСДВходящие.СрокГодностиСтрока = кб99_ВСД_Общий.ПредставлениеПериодаВЕТИС(СтрокаВСДВходящие.ДатаСрокГодности1, СтрокаВСДВходящие.ДатаСрокГодности2);
	
	кб99_ВСД_Общий.ГашениеПроверитьСтрокуТаблицы(СтрокаВСДВходящие, ПараметрыОрганизации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВСДВходящиеКоличествоПриИзмененииНаСервере(ДокСсылка, КоличествоПринять, КоличествоВозврат)
	
	ДокОбъект = ДокСсылка.ПолучитьОбъект();
	ДокОбъект.КоличествоПринять = КоличествоПринять;
	ДокОбъект.КоличествоВозврат = КоличествоВозврат;
	ДокОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВСДВходящиеКоличествоПринятьПриИзменении(Элемент)
	
	ВыбСтрока = ЭтаФорма.Элементы.ВСДВходящие.ТекущиеДанные;
	
	Если ВыбСтрока.КоличествоПринять > ВыбСтрока.Количество Тогда
		ВыбСтрока.КоличествоПринять = ВыбСтрока.Количество;
	КонецЕсли;
	
	Если Не Элемент.Имя = "ВСДВходящиеКоличествоВозврат" Тогда
		ВыбСтрока.КоличествоВозврат = ВыбСтрока.Количество - ВыбСтрока.КоличествоПринять;
	КонецЕсли;
	
	ВСДВходящиеКоличествоПриИзмененииНаСервере(ВыбСтрока.ДокВСД, ВыбСтрока.КоличествоПринять, ВыбСтрока.КоличествоВозврат);
	
КонецПроцедуры

&НаКлиенте
Процедура кнСписатьПартии(Команда)
	
	тзПартий = Новый Массив;
	
	Для Каждого стрВходящие Из объект.ВСДВходящие Цикл
		Если стрВходящие.Отметка И ЗначениеЗаполнено(стрВходящие.ВСД_Партия) Тогда
			СтрПартий = Новый Структура("Партия, Продукция_Элемент, Количество, ЕдиницаИзмерения, Цель");
			ЗаполнитьЗначенияСвойств(СтрПартий, стрВходящие);
			СтрПартий.Партия = стрВходящие.ВСД_Партия;
			СтрПартий.Количество = 0;
			тзПартий.Добавить(стрПартий);
		КонецЕсли;
	КонецЦикла;
	
	Если тзПартий.Количество() > 0 Тогда
		
		ПараметрыДокумента = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
		ПараметрыДокумента.Отправитель_Площадка = Объект.Отправитель_Площадка;
		ЭлементыОтбора = Новый Структура("ПараметрыДокумента, Партии", ПараметрыДокумента, тзПартий);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЭлементыОтбора);
		
		ОткрытьФорму("Документ.ВСД2_Инвентаризация.ФормаОбъекта", ПараметрыФормы);
		
	Иначе
		Сообщить("Нечего перемещать, ВСД_Партии не выбраны");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура кнПолучитьВсдПоВсемПлощадкамНаСервере()
	
	УдалитьВсдВходящие();
	Объект.Отправитель_Площадка = Неопределено;
	Объект.ВСДВходящие.Очистить();
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВСД_Площадка.Ссылка КАК Площадка
	|ИЗ
	|	Справочник.ВСД_Площадка КАК ВСД_Площадка
	|ГДЕ
	|	ВСД_Площадка.GuidХозСубъекта = &GuidХозСубъекта
	|	И НЕ ВСД_Площадка.ПометкаУдаления
	|	И НЕ ВСД_Площадка.ИгнорироватьПриГрупповомГашении";
	Запрос.УстановитьПараметр("GuidХозСубъекта", ПараметрыОрганизации.Отправитель_ХозСубъект.GUID);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивВходящихВСД = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("vetDocumentType", "INCOMING");
		ПараметрыЗапроса.Вставить("vetDocumentStatus", "CONFIRMED");
		ПараметрыЗапроса.Вставить("Смещение", 0);
		ПараметрыЗапроса.Вставить("ПоступилиС", ВыбначалоПериода);
		ПараметрыЗапроса.Вставить("ПоступилиПо", ВыбОкончаниеПериода);
		ПараметрыЗапроса.Вставить("ОтправительХозСубъект", ВыбрХозСубъект);
		ПараметрыЗапроса.Вставить("ОтправительПлощадка", ВыбрПлощадка);
		ПараметрыЗапроса.Вставить("ПолучательПлощадка", Выборка.Площадка);
		
		ПараметрыЗапроса.Вставить("Параметры", ПараметрыОрганизации);
		ПараметрыЗапроса.Вставить("ДокОснование", Неопределено);
		ПараметрыЗапроса.Вставить("ВсдРезультатМассив", МассивВходящихВСД);
		
		Результат = кб99_ВСД_Запросы.ПолучитьСписокВСД(ПараметрыЗапроса);
	КонецЦикла;
	
	Объект.ВСДВходящие.Очистить();
	Для Каждого строкаВыборка Из МассивВходящихВСД Цикл
		СтрокаВСДВходящие = Объект.ВСДВходящие.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВСДВходящие, строкаВыборка);
		ГашениеЗаполнитьСтрокуТаблицы(СтрокаВСДВходящие, ПараметрыОрганизации);
	КонецЦикла;
	
	//УстановитьФильтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьВсдПоВсемПлощадкам(Команда)
	
	ОчиститьСообщения();
	Состояние("Выполняем запрос Входящих ВСД по всем площадкам ",, "Ожидайте...", БиблиотекаКартинок.kb99_wrench);
	кнПолучитьВсдПоВсемПлощадкамНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсдПоВсемПлощадкам() 
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВСД_Площадка.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втПлощадки
	|ИЗ
	|	Справочник.ВСД_Площадка КАК ВСД_Площадка
	|ГДЕ
	|	ВСД_Площадка.GuidХозСубъекта = &GuidХозСубъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	кб99_ВСД2.Ссылка КАК Площадка,
	|	кб99_ЗапросыСрезПоследних.СтатусЗапроса КАК СтатусЗапроса,
	|	кб99_ЗапросыСрезПоследних.Пользователь КАК Пользователь,
	|	кб99_ЗапросыСрезПоследних.ApplicationID КАК ApplicationID,
	|	кб99_ВСД2.Отправитель_ХозСубъект КАК Отправитель_ХозСубъект,
	|	кб99_ВСД2.Отправитель_Площадка КАК Отправитель_Площадка,
	|	кб99_ВСД2.Получатель_ХозСубъект КАК Получатель_ХозСубъект,
	|	кб99_ВСД2.Получатель_Площадка КАК Получатель_Площадка,
	|	кб99_ВСД2.Количество КАК Количество,
	|	кб99_ВСД2.ТтнСерия КАК ТтнСерия,
	|	кб99_ВСД2.ТтнНомер КАК ТтнНомер,
	|	кб99_ВСД2.ТтнДата КАК ТтнДата,
	|	кб99_ВСД2.номерАвто КАК номерАвто,
	|	кб99_ВСД2.UUID КАК UUID,
	|	кб99_ВСД2.ФормаВСД КАК ФормаВСД,
	|	кб99_ВСД2.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	кб99_ВСД2.ТермическоеСостояние КАК ТермическоеСостояние,
	|	ВЫРАЗИТЬ(кб99_ВСД2.ОсобыеОтметки КАК СТРОКА(250)) КАК ОсобыеОтметки,
	|	кб99_ВСД2.cargoInspected КАК cargoInspected,
	|	кб99_ВСД2.ВсдСерия КАК ВсдСерия,
	|	кб99_ВСД2.ВсдНомер КАК ВсдНомер,
	|	кб99_ВСД2.ВсдДата КАК ВсдДата,
	|	кб99_ВСД2.Продукция КАК Продукция,
	|	кб99_ВСД2.ВидПродукции КАК ВидПродукции,
	|	ВЫРАЗИТЬ(кб99_ВСД2.НаименованиеПродукции КАК СТРОКА(250)) КАК НаименованиеПродукции,
	|	кб99_ВСД2.Продукция_Элемент КАК Продукция_Элемент,
	|	кб99_ВСД2.ДокументОснование КАК ДокументОснование,
	|	кб99_ВСД2.ВидВСД КАК ВидВСД,
	|	кб99_ВСД2.Скоропортящийся КАК Скоропортящийся,
	|	кб99_ВСД2.Некачественный КАК Некачественный,
	|	кб99_ВСД2.ТипТС КАК ТипТС,
	|	кб99_ВСД2.Организация КАК Организация,
	|	кб99_ВСД2.ДатаИзготовления КАК ДатаИзготовления,
	|	кб99_ВСД2.ДатаСрокГодности КАК ДатаСрокГодности,
	|	кб99_ВСД2.номерПолуприцепа КАК номерПолуприцепа,
	|	кб99_ВСД2.номерКонтейнера КАК номерКонтейнера,
	|	кб99_ВСД2.ТипВСД КАК ТипВСД,
	|	кб99_ВСД2.GTIN КАК GTIN,
	|	кб99_ВСД2.Артикул КАК Артикул,
	|	кб99_ВСД2.ФасовкаФормаУпаковки КАК ФасовкаФормаУпаковки,
	|	кб99_ВСД2.ФасовкаНаименование КАК ФасовкаНаименование,
	|	кб99_ВСД2.ФасовкаКоличество КАК ФасовкаКоличество,
	|	кб99_ВСД2.ФасовкаЕдиницаИзм КАК ФасовкаЕдиницаИзм,
	|	кб99_ВСД2.ФасовкаОбъем КАК ФасовкаОбъем,
	|	кб99_ВСД2.ВладелецХС КАК ВладелецХС,
	|	кб99_ВСД2.ТтнТип КАК ТтнТип,
	|	кб99_ВСД2.КоличествоПринять КАК КоличествоПринять,
	|	кб99_ВСД2.КоличествоВозврат КАК КоличествоВозврат,
	|	кб99_ВСД2.ТермическиеУсловияПеревозки КАК ТермическиеУсловияПеревозки,
	|	кб99_ВСД2.ДатаИзготовления1 КАК ДатаИзготовления1,
	|	кб99_ВСД2.ДатаИзготовления2 КАК ДатаИзготовления2,
	|	кб99_ВСД2.ДатаСрокГодности1 КАК ДатаСрокГодности1,
	|	кб99_ВСД2.ДатаСрокГодности2 КАК ДатаСрокГодности2,
	|	кб99_ВСД2.Страна КАК Страна,
	|	кб99_ВСД2.НаличиеЛабИсследований КАК НаличиеЛабИсследований,
	|	МАКСИМУМ(кб99_ВСД2НомераПартий.НомерПартии) КАК НомерПартии
	|ИЗ
	|	Справочник.кб99_ВСД2 КАК кб99_ВСД2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кб99_Запросы.СрезПоследних КАК кб99_ЗапросыСрезПоследних
	|		ПО (кб99_ВСД2.Ссылка = кб99_ЗапросыСрезПоследних.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.кб99_ВСД2.НомераПартий КАК кб99_ВСД2НомераПартий
	|		ПО (кб99_ВСД2.Ссылка = кб99_ВСД2НомераПартий.Ссылка)
	|ГДЕ
	|	кб99_ВСД2.ПометкаУдаления = ЛОЖЬ
	|	И НЕ кб99_ЗапросыСрезПоследних.СтатусЗапроса = ""НЕТ""
	|	И кб99_ВСД2.СтатусВСД = &ВыбСтатус
	|	И кб99_ВСД2.Получатель_Площадка В
	|			(ВЫБРАТЬ
	|				втПлощадки.Ссылка
	|			ИЗ
	|				втПлощадки)
	|
	|СГРУППИРОВАТЬ ПО
	|	кб99_ВСД2.Ссылка,
	|	кб99_ЗапросыСрезПоследних.СтатусЗапроса,
	|	кб99_ЗапросыСрезПоследних.Пользователь,
	|	кб99_ЗапросыСрезПоследних.ApplicationID,
	|	кб99_ВСД2.Отправитель_ХозСубъект,
	|	кб99_ВСД2.Отправитель_Площадка,
	|	кб99_ВСД2.Получатель_ХозСубъект,
	|	кб99_ВСД2.Получатель_Площадка,
	|	кб99_ВСД2.Количество,
	|	кб99_ВСД2.ТтнСерия,
	|	кб99_ВСД2.ТтнНомер,
	|	кб99_ВСД2.ТтнДата,
	|	кб99_ВСД2.номерАвто,
	|	кб99_ВСД2.UUID,
	|	кб99_ВСД2.ФормаВСД,
	|	кб99_ВСД2.ЕдиницаИзмерения,
	|	кб99_ВСД2.ТермическоеСостояние,
	|	ВЫРАЗИТЬ(кб99_ВСД2.ОсобыеОтметки КАК СТРОКА(250)),
	|	кб99_ВСД2.cargoInspected,
	|	кб99_ВСД2.ВсдСерия,
	|	кб99_ВСД2.ВсдНомер,
	|	кб99_ВСД2.ВсдДата,
	|	кб99_ВСД2.Продукция,
	|	кб99_ВСД2.ВидПродукции,
	|	ВЫРАЗИТЬ(кб99_ВСД2.НаименованиеПродукции КАК СТРОКА(250)),
	|	кб99_ВСД2.Продукция_Элемент,
	|	кб99_ВСД2.ДокументОснование,
	|	кб99_ВСД2.ВидВСД,
	|	кб99_ВСД2.Скоропортящийся,
	|	кб99_ВСД2.Некачественный,
	|	кб99_ВСД2.ТипТС,
	|	кб99_ВСД2.Организация,
	|	кб99_ВСД2.ДатаИзготовления,
	|	кб99_ВСД2.ДатаСрокГодности,
	|	кб99_ВСД2.номерПолуприцепа,
	|	кб99_ВСД2.номерКонтейнера,
	|	кб99_ВСД2.ТипВСД,
	|	кб99_ВСД2.GTIN,
	|	кб99_ВСД2.Артикул,
	|	кб99_ВСД2.ФасовкаФормаУпаковки,
	|	кб99_ВСД2.ФасовкаНаименование,
	|	кб99_ВСД2.ФасовкаКоличество,
	|	кб99_ВСД2.ФасовкаЕдиницаИзм,
	|	кб99_ВСД2.ФасовкаОбъем,
	|	кб99_ВСД2.ВладелецХС,
	|	кб99_ВСД2.ТтнТип,
	|	кб99_ВСД2.КоличествоПринять,
	|	кб99_ВСД2.КоличествоВозврат,
	|	кб99_ВСД2.ТермическиеУсловияПеревозки,
	|	кб99_ВСД2.ДатаИзготовления1,
	|	кб99_ВСД2.ДатаИзготовления2,
	|	кб99_ВСД2.ДатаСрокГодности1,
	|	кб99_ВСД2.ДатаСрокГодности2,
	|	кб99_ВСД2.Страна,
	|	кб99_ВСД2.НаличиеЛабИсследований");
	
	Запрос.УстановитьПараметр("ВыбСтатус", Перечисления.кб99_СтатусВСД.CONFIRMED);
	Запрос.УстановитьПараметр("GuidХозСубъекта", ПараметрыОрганизации.Отправитель_ХозСубъект.GUID);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Объект.ВСДВходящие.Очистить();
	Для Каждого строкаВыборка Из Выборка Цикл
		СтрокаВСДВходящие = Объект.ВСДВходящие.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВСДВходящие, строкаВыборка);
		ГашениеЗаполнитьСтрокуТаблицы(СтрокаВСДВходящие, ПараметрыОрганизации);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВСДВходящиеДатаСрокГодности1ПриИзменении(Элемент)
	
	Ответ = Вопрос("Изменить срок годности?", РежимДиалогаВопрос.ДаНет, 60,,,);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыбСтрока = ЭтаФорма.Элементы.ВСДВходящие.ТекущиеДанные;
		Ссылка = ВыбСтрока.ДокВСД;
		ДатаСрока = ЭтаФорма.Элементы.ВСДВходящие.ТекущиеДанные.ДатаСрокГодности1;
		ВСДВходящиеДатаСрокГодности1ПриИзмененииНаСервере(Ссылка, ДатаСрока);
	Иначе
		ВыбСтрока = ЭтаФорма.Элементы.ВСДВходящие.ТекущиеДанные;
		Ссылка = ВыбСтрока.ДокВСД;
		ЭтаФорма.Элементы.ВСДВходящие.ТекущиеДанные.ДатаСрокГодности1 = Ссылка.ДатаСрокГодности1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВСДВходящиеДатаСрокГодности1ПриИзмененииНаСервере(Ссылка, ДатаСрока)
	
	ДокОбъект = Ссылка.ПолучитьОбъект();
	ДокОбъект.ДатаСрокГодности1 = ДатаСрока;
	ДокОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура флАктНесоответствияПриИзменении(Элемент)
	
	Если флАктНесоответствия Тогда
		Элемент.ЦветТекстаЗаголовка = WebЦвета.Красный;
		ЭтаФорма.Элементы.тПричинаАкта.ЦветТекстаЗаголовка = WebЦвета.Красный;
		ЭтаФорма.Элементы.тОписаниеНесоответствия.ЦветТекстаЗаголовка= WebЦвета.Красный;
	Иначе
		Элемент.ЦветТекстаЗаголовка = WebЦвета.Черный;
		ЭтаФорма.Элементы.тПричинаАкта.ЦветТекстаЗаголовка = WebЦвета.Черный;
		ЭтаФорма.Элементы.тОписаниеНесоответствия.ЦветТекстаЗаголовка = WebЦвета.Черный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументОбновитьТранспортПоСтроке(СтрВходящие, НомерАвто)
	
	Если ЗначениеЗаполнено(СтрВходящие.НомерАвто) ИЛИ ЗначениеЗаполнено(СтрВходящие.ДокОбновитьТранспорт) Тогда
		Возврат;
	Иначе
		ДокОбновитьТранспорт = Документы.ВСД2_ОбновитьТранспорт.СоздатьДокумент();
		ПараметрыДокумента = Новый Структура("Организация, Получатель_Площадка, Дата", 
		Объект.Организация, Объект.Отправитель_Площадка, ТекущаяДата());
		ЭлементыОтбора = Новый Структура("ПараметрыДокумента, ДокВсд, НомерАвто", ПараметрыДокумента, СтрВходящие.ДокВСД, НомерАвто);
		ДокОбновитьТранспорт.Заполнить(ЭлементыОтбора);
		Если Не ДокОбновитьТранспорт.ВСДВходящие.Количество() Тогда
			Возврат;
		КонецЕсли;
		ДокОбновитьТранспорт.Записать();
		СтрВходящие.ДокОбновитьТранспорт = ДокОбновитьТранспорт.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокОбновитьТранспортНаСервере(НомерАвто, ИдентификаторСтроки = Неопределено)
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Для Каждого СтрВходящие ИЗ Объект.ВСДВходящие Цикл
			ЗаполнитьДокументОбновитьТранспортПоСтроке(СтрВходящие, НомерАвто);	
		КонецЦикла;
	Иначе
		ТекущаяСтрока = Объект.ВСДВходящие.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьДокументОбновитьТранспортПоСтроке(ТекущаяСтрока, НомерАвто);
		ТекущаяСтрока.НомерАвто = НомерАвто.НомерАвто;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаНомераАвто(Строка, Параметры) Экспорт
	
	Если Не Строка = Неопределено Тогда
		СоздатьДокОбновитьТранспортНаСервере(Строка, Параметры);
	Иначе
		Возврат;
	КонецЕсли;
	ВСДВходящиеПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьНомерАвто(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаНомераАвто", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.кб99_ФормаВводаНомераАвто",, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьДокОбновитьТранспортПоСтроке(Стр, ПараметрыОрганизации)
	
	ПараметрыОрганизации.Отправитель_Площадка = Стр.ДокВСД.Получатель_Площадка;
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("ДокОснование", Стр.ДокОбновитьТранспорт);
	ПараметрыФункции.Вставить("Параметры", ПараметрыОрганизации);
	
	Стр.СтатусЗапроса = кб99_ВСД_Запросы.ВСД2_ОбновитьТранспорт_Отправить(ПараметрыФункции);
	Стр.НомерАвто = Стр.ДокВСД.НомерАвто;
	
	Стр.Отметка = 0;
	Стр.Ошибки = "";
	кб99_ВСД_Общий.ГашениеПроверитьСтрокуТаблицы(Стр, ПараметрыОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ОтправкаДокументовВсдОбновитьТранспорт(ИдентификаторСтроки = Неопределено)
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		
		Для Каждого СтрокаТЗ Из Объект.ВСДВходящие Цикл
			
			Если НЕ(СтрокаТЗ.Отметка) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЗ.ДокОбновитьТранспорт) Тогда
				Продолжить;
			КонецЕсли;
			
			ОтправитьДокОбновитьТранспортПоСтроке(СтрокаТЗ, ПараметрыОрганизации)
			
		КонецЦикла;
		
	Иначе
		
		СтрокаТЗ = Объект.ВСДВходящие.НайтиПоИдентификатору(ИдентификаторСтроки);
		ОтправитьДокОбновитьТранспортПоСтроке(СтрокаТЗ, ПараметрыОрганизации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнОтправитьДокВсдИзменитьНомерАвто(Команда)
	
	Состояние("Выполняем запрос на изменение номера автомобиля",, "Ожидайте...", БиблиотекаКартинок.kb99_wrench);
	
	ОтправкаДокументовВсдОбновитьТранспорт();
	
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

&НаСервере
Процедура кнПогаситьПараллельноНаСервере()
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	СписокВСДкГашению = Новый Массив;
	
	Для Каждого СтрокаТЗ Из Объект.ВСДВходящие Цикл
		Если НЕ СтрокаТЗ.Отметка ИЛИ ЗначениеЗаполнено(СтрокаТЗ.ВСД_Партия) Тогда
			Продолжить;
		КонецЕсли;
		СписокВСДкГашению.Добавить(СтрокаТЗ.ДокВСД);
	КонецЦикла;
	
	ПараметрыОрганизации.Вставить("СписокДокументов", СписокВСДкГашению);
	ПараметрыОрганизации.Вставить("флАктНесоответствия", флАктНесоответствия);
	ПараметрыОрганизации.Вставить("тПричинаАкта", тПричинаАкта);
	ПараметрыОрганизации.Вставить("тОписаниеНесоответствия", тОписаниеНесоответствия);
	ПараметрыОрганизации.Вставить("ИсключитьИзПодбораПригашении", ИсключитьИзПодбораПригашении);
	
	кб99_ВСД_Запросы.ВСД2_Входящий_ОтправитьГашение_Параллельно(ПараметрыОрганизации, Неопределено);
	
	Для Каждого СтрокаТз Из Объект.ВСДВходящие Цикл
		СтрокаТЗ.СтатусВСД = СтрокаТЗ.ДокВСД.СтатусВСД;
		СтрокаТЗ.Отметка = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура кнПогаситьПараллельно(Команда)
	
	ОчиститьСообщения();
	Состояние("Выполняем запрос Гашения Входящих ВСД",, "Ожидайте...", БиблиотекаКартинок.kb99_wrench);
	
	кнПогаситьПараллельноНаСервере();
	
	ПоказатьОповещениеПользователя("Выполнено");
	
	ВСДВходящиеПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТТНПриИзменении(Элемент)
	УстановитьФильтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура кнРаспределитьПродукцию(Команда)
	
	массивВСД = Новый Массив;
	Для Каждого стр из Объект.ВСДВходящие Цикл
		Если стр.Отметка И ЗначениеЗаполнено(стр.ВСД_Партия) Тогда
			СтрПартий = Новый Структура("ВСД_Партия, Количество, ЕдиницаИзмерения");
			ЗаполнитьЗначенияСвойств(СтрПартий,стр);
			массивВСД.Добавить(СтрПартий);
		КонецЕсли;
	КонецЦикла;
	
	Если массивВСД.Количество()>0 Тогда
		ПараметрыФормы = Новый Структура("ВСД", массивВСД);
		ПослеРаспределенияПродукцииСВХ = Новый ОписаниеОповещения("ПослеРаспределенияПродукцииСВХ", ЭтаФорма);
		ОткрытьФорму("Обработка.кб99_ГашениеВходящихПартий.Форма.ГашениеСВХ", ПараметрыФормы, ЭтаФорма,,,, ПослеРаспределенияПродукцииСВХ);
	Иначе
		Сообщить("Распределить возможно только погашенные партии!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРаспределенияПродукцииСВХ(РезультатЗакрытия, допПараметры = неопределено) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ПараметрыДокумента = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
		ПараметрыДокумента.Отправитель_Площадка = Объект.Отправитель_Площадка;
		ЭлементыОтбора = Новый Структура("ПараметрыДокумента, РаспределеннаяПродукция", ПараметрыДокумента, РезультатЗакрытия);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЭлементыОтбора);
		ОткрытьФорму("Документ.ВСД2_Инвентаризация.ФормаОбъекта", ПараметрыФормы );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГашениеСВХПриИзменении(Элемент)
	УстановитьФильтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбрПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ГУИДХСдляОтбора = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбрХозСубъект, "GUID");
	ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора), ГУИДХСдляОтбора, "****");
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьПринятыеНаСклад(Команда)
	
	Для Каждого Стр Из Объект.ВСДВходящие Цикл
		Стр.Отметка = Ложь;
		Если ЗначениеЗаполнено(Стр.ВСД_Партия) ИЛИ ЗначениеЗаполнено(Стр.Ошибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не (Стр.Отметка) Тогда
			Стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьТолькоВыбранные(Команда)

	Для Каждого ВыделеннаяСтрока Из Элементы.ВСДВходящие.ВыделенныеСтроки Цикл
		стр = Элементы.ВСДВходящие.ДанныеСтроки(ВыделеннаяСтрока);
		стр.Отметка = Ложь;
		Если ЗначениеЗаполнено(Стр.ВСД_Партия) Тогда
			Продолжить;
		КонецЕсли;
		Если Не (стр.Отметка) Тогда
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ОформлениеПоступления

&НаСервере
Функция ПроверитьВозможностьОформленияПоступления()
	
	Попытка
		Возврат Метаданные.ОбщиеМодули.Найти("Пользователи") <> Неопределено
		И Метаданные.ОбщиеМодули.Найти("ЗначениеНастроекПовтИсп") <> Неопределено
		И Метаданные.ОбщиеМодули.Найти("ДенежныеСредстваСервер") <> Неопределено
		И Метаданные.ОбщиеМодули.Найти("ЗакупкиСервер") <> Неопределено
		И Метаданные.ОбщиеМодули.Найти("ВзаиморасчетыСервер") <> Неопределено
		И Метаданные.ОбщиеМодули.Найти("УчетНДСУП") <> Неопределено
		И Метаданные.ОбщиеМодули.Найти("РаботаСКурсамиВалютУТ") <> Неопределено
		И Метаданные.ОбщиеМодули.Найти("ОбработкаТабличнойЧастиСервер") <> Неопределено
		И Метаданные.ОбщиеМодули.Найти("ОбработкаТабличнойЧастиКлиентСервер") <> Неопределено
		И Метаданные.ОбщиеМодули.Найти("НоменклатураСервер") <> Неопределено;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция СоздатьНовуюСерию(ВидНоменклатуры, ДатаПроизводства, ГоденДо)
	
	НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
	Если ЗначениеЗаполнено(ВидНоменклатуры.ВладелецСерий) Тогда
		НоваяСерия.ВидНоменклатуры = ВидНоменклатуры.ВладелецСерий;
	Иначе
		НоваяСерия.ВидНоменклатуры = ВидНоменклатуры;
	КонецЕсли;
	
	НомерЧислом = Справочники.СерииНоменклатуры.ВычислитьМаксимальныйНомерСерии(ВидНоменклатуры) + 1;
	Номер = Формат(НомерЧислом, "ЧЦ=8; ЧВН=; ЧГ=");
	
	НоваяСерия.Наименование = Номер;
	НоваяСерия.ДатаПроизводства = кб99_ВСД_Запросы.СтрокаВДату(ДатаПроизводства);
	НоваяСерия.ГоденДо = кб99_ВСД_Запросы.СтрокаВДату(ГоденДо);
	НоваяСерия.Номер = Номер;
	НоваяСерия.Записать();
	
	Возврат НоваяСерия.Ссылка
	
КонецФункции

&НаСервере
Функция НайтиСерию(ВидНоменклатуры, ДатаПроизводства, ГоденДо)
	
	Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|	И СерииНоменклатуры.ГоденДо = &ГоденДо
	|	И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства
	|	И НЕ СерииНоменклатуры.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(ВидНоменклатуры.ВладелецСерий) Тогда
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры.ВладелецСерий);
	Иначе
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаПроизводства", кб99_ВСД_Запросы.СтрокаВДату(ДатаПроизводства));
	Запрос.УстановитьПараметр("ГоденДо", кб99_ВСД_Запросы.СтрокаВДату(ГоденДо));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Серия = Выборка.Серия;
	КонецЕсли;
	
	Возврат Серия;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьДокументПриобретение(Док)
	
	мПользователи = кб99_ВСД_Общий.ОбщийМодуль("Пользователи");
	мЗначениеНастроекПовтИсп = кб99_ВСД_Общий.ОбщийМодуль("ЗначениеНастроекПовтИсп");
	мДенежныеСредстваСервер = кб99_ВСД_Общий.ОбщийМодуль("ДенежныеСредстваСервер");
	мЗакупкиСервер = кб99_ВСД_Общий.ОбщийМодуль("ЗакупкиСервер"); 
	мВзаиморасчетыСервер = кб99_ВСД_Общий.ОбщийМодуль("ВзаиморасчетыСервер"); 
	мУчетНДСУП = кб99_ВСД_Общий.ОбщийМодуль("УчетНДСУП");
	мРаботаСКурсамиВалютУТ = кб99_ВСД_Общий.ОбщийМодуль("РаботаСКурсамиВалютУТ");
	
	Док.Менеджер  = мПользователи.ТекущийПользователь();
	Док.Валюта = мЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Док.Валюта);
	Док.ВалютаВзаиморасчетов = мЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Док.ВалютаВзаиморасчетов);
	
	Док.Подразделение = мЗначениеНастроекПовтИсп.ПодразделениеПользователя(Док.Менеджер, Док.Подразделение);
	
	СтруктураПараметров = мДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Док.Организация;
	СтруктураПараметров.БанковскийСчет = Док.БанковскийСчетОрганизации;
	Док.БанковскийСчетОрганизации = мЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Док.БанковскийСчетКонтрагента = мЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Док.Контрагент,, Док.БанковскийСчетКонтрагента);
	Док.Склад = Объект.Отправитель_Площадка.Склад;
	Док.ПорядокРасчетов = мВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Док);
	
	СтруктураОтветственного = мЗакупкиСервер.ПолучитьОтветственногоПоСкладу(Док.Склад, Док.Менеджер);
	Если СтруктураОтветственного <> Неопределено Тогда
		Док.Принял = СтруктураОтветственного.Ответственный;
		Док.ПринялДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
	Док.ВариантПриемкиТоваров = мЗакупкиСервер.ПолучитьВариантПриемкиТоваров(, Док.Договор);
	
	мРаботаСКурсамиВалютУТ.ЗаполнитьКурсКратностьПоУмолчанию(Док.Курс, Док.Кратность, Док.Валюта, Док.ВалютаВзаиморасчетов);
	
	ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Док);
	мУчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Док.НалогообложениеНДС, ПараметрыЗаполнения);
	
	ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияВидаДеятельностиНДС(Док);
	мУчетНДСУП.ЗаполнитьВидДеятельностиНДС(Док.ЗакупкаПодДеятельность, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПриобретения(ТекущаяСтрока, Док, СтрОснование)
	
	мОбработкаТабличнойЧастиСервер = кб99_ВСД_Общий.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
	мОбработкаТабличнойЧастиКлиентСервер = кб99_ВСД_Общий.ОбщийМодуль("ОбработкаТабличнойЧастиКлиентСервер");
	мНоменклатураСервер = кб99_ВСД_Общий.ОбщийМодуль("НоменклатураСервер");
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(мНоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПриобретениеТоваровУслуг));
	
	СтруктураПересчетаСуммы = мОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Док);
	
	СтруктураДействий = Новый Структура;
	
	ВидЦены = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыЦенПоставщиков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыЦенПоставщиков КАК ВидыЦенПоставщиков
	|ГДЕ
	|	ВидыЦенПоставщиков.Владелец = &Владелец
	|	И НЕ ВидыЦенПоставщиков.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Док.Партнер);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВидЦены = Результат.Ссылка;
	КонецЕсли;
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	Если ПараметрыОрганизации.ПарамИспользоватьСерииПродукции Тогда
		СерияНоменклатуры = НайтиСерию(ТекущаяСтрока.Номенклатура.ВидНоменклатуры,
		                               СтрОснование.ДатаИзготовления1,
		                               СтрОснование.ДатаСрокГодности1);
		Если Не ЗначениеЗаполнено(СерияНоменклатуры) Тогда
			СерияНоменклатуры = СоздатьНовуюСерию(ТекущаяСтрока.Номенклатура.ВидНоменклатуры,
			                                     СтрОснование.ДатаИзготовления1, 
			                                     СтрОснование.ДатаСрокГодности1);
		КонецЕсли;
		ТекущаяСтрока.Серия = СерияНоменклатуры;
	КонецЕсли;
	
	//Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") И ЗначениеЗаполнено(Док.Соглашение) Тогда
	//	СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Док));
	//Иначе
	//	СтруктураЗаполненияЦены = Новый Структура("Соглашение,Партнер,Дата,Валюта,Соглашение,НалогообложениеНДС,ВернутьМногооборотнуюТару,Партнер,Дата,Валюта,ВидЦеныПоставщика");
	//	ЗаполнитьЗначенияСвойств(СтруктураЗаполненияЦены,Объект);
	//	СтруктураЗаполненияЦены.ВидЦеныПоставщика = ВидЦены;
	//	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураЗаполненияЦены);
	//КонецЕсли;
	
	ТекущаяСтрока.Цена = 100;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Объект.Организация));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Док.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару", 
	                                                                          Док.ПоступлениеПоЗаказам, Док.ТребуетсяЗалогЗаТару));
	
	мОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьКоличествоПрихода(СтрокаТЧДок)
	
	Коэфф = 1;
	
	Если СтрокаТЧДок.Номенклатура.ВесИспользовать Тогда
		Попытка
			Если СтрокаТЧДок.Номенклатура.ВесЗнаменатель > 0 Тогда
				Коэфф = СтрокаТЧДок.Номенклатура.ВесЧислитель / СтрокаТЧДок.Номенклатура.ВесЗнаменатель;
				Если СтрокаТЧДок.Номенклатура.ВесЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("163") Тогда
					Коэфф = Коэфф / 1000;
				КонецЕсли;
			Иначе
				Коэфф = 1;
			КонецЕсли;
		Исключение
			Коэфф = 1;
		КонецПопытки;
	КонецЕсли;
	
	Рез = СтрокаТЧДок.Количество/Коэфф;
	
	Возврат Рез;
	
КонецФункции

&НаСервере
Функция ОформитьЗакупкуУПоставщикаНаСервере()
	
	СформированныеДокументы = Новый Массив;
	
	мЗакупкиСервер = кб99_ВСД_Общий.ОбщийМодуль("ДенежныеСредстваСервер");
	
	тзВСД = Объект.ВСДВходящие.Выгрузить().Скопировать(Новый Структура("Отметка", Истина));
	
	Если Не тзВСД.Количество() Тогда
		кб99_ВСД.СообщитьИнфо("Не выбраны строки к оформлению");
		Возврат СформированныеДокументы;
	КонецЕсли;
	
	тзПоТТН = тзВСД.Скопировать();
	тзПоТТН.Колонки.Добавить("Контрагент");
	Для Каждого Стр Из тзПоТТН Цикл
		Если ЗначениеЗаполнено(Стр.Отправитель_Хозсубъект)
			И ЗначениеЗаполнено(Стр.Отправитель_Хозсубъект.ИНН) Тогда
			Стр.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", Стр.Отправитель_Хозсубъект.ИНН);
		КонецЕсли;
	КонецЦикла;
	тзПоТТН.Свернуть("ТтнНомер, ТтнДата, Контрагент");
	
	Для Каждого ТТН Из тзПоТТН Цикл
		Если Не ЗначениеЗаполнено(ТТН.Контрагент) Тогда
			кб99_ВСД.СообщитьИнфо(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Не удалось найти контрагента по накладной №%1 от %2", ТТН.ТтнНомер, ТТН.ТтнДата));
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("ТтнНомер, ТтнДата");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ТТН);
		СтрокиТовары = тзВСД.НайтиСтроки(ПараметрыОтбора);
		
		ДокументПрихода = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		ДокументПрихода.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		ДокументПрихода.Дата = ТекущаяДатаСеанса();
		ДокументПрихода.ДатаВходящегоДокумента = ТТН.ТтнДата;
		ДокументПрихода.НомерВходящегоДокумента = ТТН.ТтнНомер;
		ДокументПрихода.Организация = Объект.Организация;
		ДокументПрихода.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
		ДокументПрихода.Контрагент = ТТН.Контрагент;
		ДокументПрихода.Партнер = ТТН.Контрагент.Партнер;
		ДокументПрихода.Договор = мЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ДокументПрихода, ДокументПрихода.ХозяйственнаяОперация);
		
		ДокументПрихода.ЗаполнитьУсловияЗакупокПоУмолчанию();
		ИнициализироватьДокументПриобретение(ДокументПрихода);
		
		Для Каждого СтрТовар Из СтрокиТовары Цикл
			Если ЗначениеЗаполнено(СтрТовар.Номенклатура) Тогда
				СтрПриход = ДокументПрихода.Товары.Добавить();
				СтрПриход.Номенклатура = СтрТовар.Номенклатура;
				СтрПриход.Склад = ДокументПрихода.Склад;
				СтрПриход.КоличествоУпаковок = РассчитатьКоличествоПрихода(СтрТовар);
				СтрПриход.Количество = СтрПриход.КоличествоУпаковок;
				ЗаполнитьСтрокуПриобретения(СтрПриход, ДокументПрихода, СтрТовар);
			Иначе
				кб99_ВСД.СообщитьИнфо(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("В строке %1 не указана номенклатура, установите соответствие", СтрТовар.НомерСтроки));
			КонецЕсли;
		КонецЦикла;
		
		ДокументПрихода.ЗаполнитьЭтапыГрафикаОплаты();
		ДокументПрихода.Записать();
		
		СформированныеДокументы.Добавить(ДокументПрихода.Ссылка);
		
		кб99_ВСД.СообщитьИнфо(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Записан документ %1 №%2 от %3 %4", ДокументПрихода.Ссылка, ТТН.ТтнНомер, ТТН.ТтнДата, ТТН.Контрагент), ДокументПрихода.Ссылка);
	КонецЦикла;
	
	Возврат СформированныеДокументы;
	
КонецФункции

&НаКлиенте
Процедура ОформитьЗакупкуУПоставщика(Команда)
	
	Если Не ПроверитьВозможностьОформленияПоступления() Тогда
		кб99_ВСД.СообщитьИнфо("Не удалось оформить документ ""Приобретение товаров и услуг"" в вашей конфигурации, обратитесь в техническую поддержку");
		Возврат;
	КонецЕсли;
	
	ОформленныеДокументы = ОформитьЗакупкуУПоставщикаНаСервере();
	Если ОформленныеДокументы.Количество() Тогда
		Для Каждого Док Из ОформленныеДокументы Цикл
			ОткрытьФорму("Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Ключ", Док));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеЗаполненияАктаНесоответствия(ДанныеЗаполнения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ДанныеЗаполнения = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеЗаполнения);
		ОтправкаЗапросовНаГашение();
	Иначе
		флАктНесоответствия = Ложь;
		тОписаниеНесоответствия = "";
		тПричинаАкта = "";
	КонецЕсли;
	
КонецПроцедуры

//&НаСервере
//Процедура кнПоказатьПогашенныеВСДНаСервере()
//	ВыбНачалоПериода = НачалоГода(ТекущаяДата());
//	ВыбОкончаниеПериода = ТекущаяДата();
//	ЗаполнитьВсдПоСправочнику( ВыбНачалоПериода, ВыбОкончаниеПериода );
//КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДаты(ВыбДата, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбДата) Тогда
		
		НастроитьКнопкуВыводитьВходящие();
		
		ВыбНачалоПериода = НачалоДня(ВыбДата);
		ВыбОкончаниеПериода = КонецДня(ТекущаяДата());
		СформироватьПредставлениеОтбора();
		ЗаполнитьВсдПоСправочнику();
		
	Иначе
		
		ВыводитьПогашенные = Не ВыводитьПогашенные;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура кнПоказатьПогашенныеВСД(Команда)
	
	ВыводитьПогашенные = Не ВыводитьПогашенные;
	
	Если ВыводитьПогашенные Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеВводаДаты", ЭтаФорма);
		ВыбДата = ТекущаяДата() - 7 * 86400;
		ПоказатьВводДаты(Оповещение, ВыбДата, "Введите дату оформления ВСД", ЧастиДаты.Дата);
		
	Иначе
		
		НастроитьКнопкуВыводитьВходящие();
		ВыбДата = НачалоГода(ТекущаяДата());
		ВыбНачалоПериода = НачалоДня(ВыбДата);
		ВыбОкончаниеПериода = КонецДня(ТекущаяДата());
		СформироватьПредставлениеОтбора();
		ЗаполнитьВсдПоСправочнику();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкуВыводитьВходящие()
	
	Элементы.ВСДВходящиекнПоказатьПогашенныеВСД.Заголовок = ?(ВыводитьПогашенные,
		"Показать не погашенные", "Показать погашенные");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеОтбора()
	
	СтрокиОтбора = Новый Массив;
	
	СтрПериод = "Оформленные с " + Формат(ВыбНачалоПериода, "ДФ=dd.MM.yyyy") + 
		" по " + Формат(ВыбОкончаниеПериода, "ДФ=dd.MM.yyyy");
	
	СтрХозсубъект = ?(ЗначениеЗаполнено(ВыбрХозСубъект), " Хозсубъект отправитель: " + ВыбрХозСубъект, "");
	ДобавитьСтрокуВСтрокуОтборы(СтрокиОтбора, СтрХозсубъект);
	
	СтрПлощадка = ?(ЗначениеЗаполнено(ВыбрПлощадка), " Площадка отправитель: " + ВыбрПлощадка, "");
	ДобавитьСтрокуВСтрокуОтборы(СтрокиОтбора, СтрПлощадка);
	
	СтрНомерТТН = ?(ЗначениеЗаполнено(НомерТТН), " Номер ТТН: " + НомерТТН, "");
	ДобавитьСтрокуВСтрокуОтборы(СтрокиОтбора, СтрНомерТТН);
	
	СтрГашениеСВХ = ?(ГашениеСВХ, " Товар, принятый по СВХ", "");
	ДобавитьСтрокуВСтрокуОтборы(СтрокиОтбора, СтрГашениеСВХ);
	
	ПредставлениеОтбора = "";
	Если СтрокиОтбора.Количество() Тогда
		ПредставлениеОтбора = "Установлен фильтр: " + кб99_ВСД_Общий.СтрокаИзМассиваПодстрок(СтрокиОтбора, ";");
	КонецЕсли;
	
	Элементы.ПредставлениеОтбора.Заголовок = ПредставлениеОтбора;
	Элементы.ПредставлениеОтбора.Видимость = ЗначениеЗаполнено(ПредставлениеОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВСтрокуОтборы(СтрокиОтбора, ДобавляемаяСтрока)
	
	Если ЗначениеЗаполнено(ДобавляемаяСтрока) Тогда
		СтрокиОтбора.Добавить(ДобавляемаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанель(Команда)
	
	ПанельВСДСвернута = Не ПанельВСДСвернута;
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элементы.ВСДВходящие.ТекущаяСтрока, "ПанельВСДСвернута");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидимостьКомандыОтправитьДокОбновитьТранспорт(Док)
	
	Запрос = кб99_ВСД_Общий.НайтиПоследнийЗапрос(Док);
	Возврат Не Запрос.СтатусЗапроса = "Завершен";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, ИдентификаторСтроки = Неопределено, СписокРеквизитов = "")
	
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		ТекущиеДанные = Объект.ВСДВходящие.НайтиПоИдентификатору(ИдентификаторСтроки);
	Иначе 
		ТекущиеДанные = Неопределено;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПанельВСДСвернута") Тогда
		Элементы.ГруппаСодержимоеСтроки.Видимость = Не Форма.ПанельВСДСвернута;
		Элементы.ГруппаТоварыПанельСвернута.Видимость = Форма.ПанельВСДСвернута;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Товары") И ТекущиеДанные <> Неопределено Тогда
		Элементы.ТоварыПанельГруппаОшибка.Видимость = ЗначениеЗаполнено(ТекущиеДанные.Ошибки);
		Элементы.стрПартия.Видимость = ЗначениеЗаполнено(ТекущиеДанные.ВСД_Партия);
		Элементы.стрGTIN.Видимость = ЗначениеЗаполнено(ТекущиеДанные.GTIN);
		Элементы.стрАртикул.Видимость = ЗначениеЗаполнено(ТекущиеДанные.Артикул);
		Элементы.стрНомерПартии.Видимость = ЗначениеЗаполнено(ТекущиеДанные.НомерПартии);
		Элементы.стрУказатьНомерАвто.Видимость = Не ЗначениеЗаполнено(ТекущиеДанные.номеравто)
		И Не ТекущиеДанные.СменаВладельцаБезПеревозки;
		Элементы.стрДокументПрихода.Видимость = ЗначениеЗаполнено(ТекущиеДанные.ДокументПрихода);
		Элементы.ГруппаДокОбновитьТранспорт.Видимость = ЗначениеЗаполнено(ТекущиеДанные.ДокОбновитьТранспорт);
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокОбновитьТранспорт) Тогда
			Элементы.стрОтправитьДокОбновитьТранспорт.Видимость = ВидимостьКомандыОтправитьДокОбновитьТранспорт(ТекущиеДанные.ДокОбновитьТранспорт);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВСДВходящиеПриАктивизацииСтроки(Элемент)
	
	текСтр = Элементы.ВСДВходящие.ТекущиеДанные;
	Если текСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = текСтр.ПолучитьИдентификатор();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Идентификатор, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура стрНоменклатураПриИзменении(Элемент)
	
	текСтрТЧ = Элементы.ВСДВходящие.ТекущиеДанные;
	Если ЗначениеЗаполнено(текСтрТЧ.Номенклатура) И ЗначениеЗаполнено(текСтрТЧ.Продукция_Элемент) Тогда
		кб99_ВСД.Установить_Соответствие_ВСД_Продукция_Элемент(текСтрТЧ.Номенклатура, текСтрТЧ.Продукция_Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура стрУказатьНомерАвто(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаНомераАвто", ЭтаФорма, Элементы.ВСДВходящие.ТекущаяСтрока);
	ОткрытьФорму("ОбщаяФорма.кб99_ФормаВводаНомераАвто",, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрОтправитьДокОбновитьТранспорт(Команда)
	
	Состояние("Выполняем запрос на изменение номера автомобиля",, "Ожидайте...", БиблиотекаКартинок.kb99_wrench);
	
	ОтправкаДокументовВсдОбновитьТранспорт(Элементы.ВСДВходящие.ТекущаяСтрока);
	ВСДВходящиеПриАктивизацииСтроки("");
	
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияНоменклатураПередЗакрытием(Ответ, Отказ) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		кнЗаписатьСоответствияНаСервере();
	Иначе
		МожноЗакрывать = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Соответствия) Тогда
		Возврат;
	Иначе   
		
		ИмеютсяНеЗаписанныеСтроки = Ложь;
		Для Каждого Стр Из Объект.Соответствия Цикл
			Если ЗначениеЗаполнено(Стр.Номенклатура) И Не Стр.Записано Тогда
				ИмеютсяНеЗаписанныеСтроки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ИмеютсяНеЗаписанныеСтроки И Не МожноЗакрывать Тогда
			Отказ = Истина;
			ТекстВопроса = "Имеются незаписанные соответствия продукции. Записать соответствия?";
			Оповещение = Новый ОписаниеОповещения("СоответствияНоменклатураПередЗакрытием", ЭтаФорма, Неопределено);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "");
		Иначе
			Отказ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьИзПодбораПриГашении(Команда)
	
	ИсключитьИзПодбораПригашении = Не ИсключитьИзПодбораПригашении;
	Элементы.ВСДВходящиеИсключитьИзПодбораПригашении.Пометка = ИсключитьИзПодбораПригашении;
	Если ИсключитьИзПодбораПригашении Тогда
		Элементы.ВСДВходящиеИсключитьИзПодбораПригашении.ЦветФона = Новый Цвет(250, 204, 31);
		Элементы.ВСДВходящиеИсключитьИзПодбораПригашении.Картинка = БиблиотекаКартинок.ОформлениеФлажок;
	Иначе
		Элементы.ВСДВходящиеИсключитьИзПодбораПригашении.ЦветФона = Новый Цвет(255, 255, 255);
		Элементы.ВСДВходящиеИсключитьИзПодбораПригашении.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры
