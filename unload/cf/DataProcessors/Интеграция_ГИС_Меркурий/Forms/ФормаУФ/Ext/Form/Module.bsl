
&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем АдресПараметров;

&НаКлиенте
Перем ОчиститьПлощадку;

&НаКлиенте
Перем КэшОтмеченныеСтроки;

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДатаНачалаОтбора = НачалоДня(ТекущаяДатаСеанса());
	Объект.ДатаОкончанияОтбора = КонецДня(ТекущаяДатаСеанса());
	
	Объект.Организация = кб99_ВСД_Параметры.ПолучитьОрганизациюПоУмолчанию();
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	кб99_ВСД.ЗагрузитьПараметрыВОбработку(Объект, СписокКонстант);
	
	ЗаполнитьТабличныеЧасти(флПеремещения, флЗаказы);
	ПолучитьАктуальнуюВерсиюИзХранилища();
	
	Элементы.Отправитель_ПлощадкаНаФорме.ТолькоПросмотр = Не кб99_ВСД_Параметры.ЭтоПолноправныйПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область НемодальныеОкна
&НаКлиенте
Процедура ПредупреждениеПользователю(ТекстПредупреждения) Экспорт
	ПоказатьПредупреждение(Новый ОписаниеОповещения(), ТекстПредупреждения, 0, "Предупреждение");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ХозсубъектЗагружен" Тогда
		ОбновитьСписокРеализацийНаСервере();
	ИначеЕсли ИмяСобытия = "ВыборНезавершенногоПроизводства" Тогда
		
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
		ПараметрыОрганизации.Вставить("НомерНезавершенногоПроизводства", Параметр.НомерНезавершенногоПроизводства);
		
		СоздатьВСДПроизводствоКлиент(Параметр.ДатаПроизводства, ПараметрыОрганизации)
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Получает сообщения пользователю от фонового задания
// Использует платформенный метод ДлительныеОперации.СообщенияПользователю
// Для совместимости со старыми конфигурациями при отсутствии метода
// используется кб99_ВСД_Утилиты.СообщенияПользователю
//
// Возвращаемое значение:
//  Массив из СообщениеПользователю - сообщения от фонового задания
//
&НаСервере
Функция ПолучитьСообщенияНаСервере()
	
	Попытка
		Сообщения = ДлительныеОперации.СообщенияПользователю(Истина, ИдентификаторЗадания);
	Исключение
		// Для совместимости со старыми конфигурациями (например, Бухгалтерия 2.0)
		// где может отсутствовать метод в общем модуле ДлительныеОперации
		Сообщения = кб99_ВСД_Утилиты.СообщенияПользователю(Истина, ИдентификаторЗадания);
	КонецПопытки;
	
	Возврат Сообщения;
	
КонецФункции

// Реквизит на форме - текущая площадка = Объект Отправитель_Площадка
&НаКлиенте
Процедура Отправитель_ПлощадкаНаФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("ХозСубъект", Объект.Отправитель_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина, ЗначениеОтбора);
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);
	
КонецПроцедуры

// ************ Сведения о ХС и Площадках

&НаСервере
Функция кнХозСубъект_ПолучитьGuidПоИНН_НаСервере(ВыбХозСубъект)
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	Если Объект.ОтправлятьВФоне Тогда
		ИдентификаторЗадания = Неопределено;
		
		ПараметрыФункции["ВыбХозСубъект"] = ВыбХозСубъект;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос GUID ХозСубъекта'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
		                                                        "кб99_ВСД_Запросы.ХозСубъект_ПолучитьGuidПоИНН_ВФоне",
		                                                        ПараметрыФункции,
		                                                        НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ХозСубъект_ПолучитьGuidПоИНН(ПараметрыФункции, ВыбХозСубъект);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнХозСубъект_ПолучитьGuidПоИНН(Команда)
	
	Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект)) Тогда
		ПредупреждениеПользователю("Не выбран Хозсубъект !");
		Возврат;
	КонецЕсли;
	Состояние("Выполняем запрос GUID ХозСубъекта",, "Ожидайте...", БиблиотекаКартинок.kb99_wrench);
	Результат = кнХозСубъект_ПолучитьGuidПоИНН_НаСервере(ВыбХозСубъект);
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьПлощадкиПоХозСубъектуНаСервере(ВыбХозСубъект)
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	Если Объект.ОтправлятьВФоне Тогда
		ИдентификаторЗадания = Неопределено;
		
		//ПараметрыФункции = кб99_ВСД_Параметры.ПараметрыСервер( Объект );
		ПараметрыФункции["ВыбХозСубъект"] = ВыбХозСубъект;
		ПараметрыФункции["ЗагрузитьПлощадку"] = Истина;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос GUID ХозСубъекта'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
		                                                        "кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту_ВФоне",
		                                                        ПараметрыФункции,
		                                                        НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту(ПараметрыФункции, ВыбХозСубъект, Истина);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьПлощадкиПоХозСубъекту(Команда)
	
	Состояние("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	Результат = кнЗагрузитьПлощадкиПоХозСубъектуНаСервере( ВыбХозСубъект );
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПлощадкиСпискомПоХозСубъекту_Сервер()
	
	тзСвертка = Объект.Отгрузки.Выгрузить();
	тзСвертка.Свернуть("Отметка, Контрагент, ХозСубъект",);
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	ПараметрыФункции.Вставить("тзКонтрагенты", тзСвертка);
	
	Если Объект.ОтправлятьВФоне Тогда
		ИдентификаторЗадания = Неопределено;
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос Площадок, привязанных к ХозСубъекту'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
		                                                        "кб99_ВСД_Запросы.Площадки_ЗагрузитьСписокПоХозСубъекту",
		                                                        ПараметрыФункции,
		                                                        НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Площадки_ЗагрузитьСписокПоХозСубъекту(ПараметрыФункции, "");
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	Для Каждого ДанныеСтроки Из Объект.Отгрузки Цикл
		ДанныеСтроки.Отметка = Ложь;
	КонецЦикла;
	
	ОбновитьСписокРеализацийНаСервере();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоСпискуДокументов(Команда)
	
	Состояние("Выполняется загрузка Площадок",, "Ожидайте...", БиблиотекаКартинок.kb99_wrench);
	Результат = ЗагрузитьПлощадкиСпискомПоХозСубъекту_Сервер();
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоНаименованию(Команда)
	
	Если ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура("ВыбХозСубъект, ВыбРегион", ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные.ХозСубъект, Объект.Регион );
	Иначе
		СтруктураПараметров = Новый Структура("ВыбХозСубъект, ВыбРегион", "", "");
	КонецЕсли;
	ОткрытьФорму("Обработка.кб99_НайтиПлощадки.Форма.ФормаЗагрузкаПлощадокУФ", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("ХозСубъект", ВыбХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПлощадкиСКонтролем2(Команда)
	
	ВыбСтрока = Элементы.Отгрузки.ТекущиеДанные;
	
	Если НЕ ВыбСтрока.Отметка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбСтрока <> Неопределено Тогда
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
		ПараметрыОрганизации.Вставить("Контрагент", Выбстрока.Контрагент);
		Если НЕ ЗначениеЗаполнено(ВыбСтрока.Хозсубъект) Тогда
			МассивХозсубъектов = кб99_ВСД_Запросы.ХозСубъекты_ЗагрузитьСписокПоИнн(ПараметрыОрганизации);
			
			Если МассивХозсубъектов.Количество() > 1 Тогда
				ЗагруженныеХозсубъекты = Новый Структура("МассивХозсубъектов, Контрагент, Организация", МассивХозсубъектов, ВыбСтрока.Контрагент, Объект.Организация);
				ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор, ЗагруженныеХозсубъекты", Истина, Истина, Ложь, ЗагруженныеХозсубъекты);
				ОткрытьФорму("Справочник.ВСД_ХозСубъект.Форма.ЗагрузкаПоИНН", ПараметрыПодбора, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ИначеЕсли МассивХозсубъектов.Количество() = 1 Тогда
				ХозСубъектЗагружен = ПроверитьСуществованиеХсПоGUID(МассивХозсубъектов[0].GUID);
				Если ХозСубъектЗагружен Тогда
					ДополнительныеПараметры = Новый Структура("Контрагент, GUID, ПараметрыОрганизации", ВыбСтрока.Контрагент, МассивХозсубъектов[0].GUID, ПараметрыОрганизации);
					Оповещение = Новый ОписаниеОповещения("ВыбратьХозсубъектОтвет", ЭтаФорма, ДополнительныеПараметры);
					ТекстВопроса = "Уже имеются загруженные хозсубъекты с GUID [ "+МассивХозсубъектов[0].GUID+" ],
						| открыть список загруженных хозсубъектов для связи с контрагентом: """ + ВыбСтрока.Контрагент + """?";
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "");
				Иначе
					ВыбСтрока.ХозСубъект = кб99_ВСД.НайтиХозСубъект(ВыбСтрока.Контрагент);
					кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту(ПараметрыОрганизации, ВыбСтрока.ХозСубъект, Истина);
					ОбновитьСписокРеализацийНаСервере();
				КонецЕсли;
			КонецЕсли;
		Иначе
			кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту(ПараметрыОрганизации, ВыбСтрока.Хозсубъект, Истина);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьХозсубъектОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораЗагруженногоХозСубъекта", ЭтаФорма, Парам);
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("GUID", Парам.GUID);
		ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор, Отбор", Истина, Истина, Ложь, СтруктураОтбора);
		ОткрытьФорму("Справочник.ВСД_ХозСубъект.ФормаВыбора", ПараметрыПодбора, ЭтаФорма,,,, ОповещениеОЗакрытии);
	Иначе
		ХозСубъект = кб99_ВСД.НайтиХозСубъект(Парам.Контрагент);
		кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту(Парам.ПараметрыОрганизации, ХозСубъект, Истина);
		ОбновитьСписокРеализацийНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВыбранныйХозсубъект(РезультатЗакрытия, ДополнительныеПараметры)
	
	Если РезультатЗакрытия <> Неопределено И ДополнительныеПараметры <> Неопределено Тогда
		ХозСубъектОбъект = РезультатЗакрытия.ПолучитьОбъект();
		Если ХозСубъектОбъект.ПометкаУдаления Тогда
			ХозСубъектОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		ХозСубъектОбъект.Контрагент =  ДополнительныеПараметры.Контрагент;
		ХозсубъектОбъект.Записать();
		кб99_ВСД_Запросы.ХозСубъект_ЗагрузитьПоGUID(ДополнительныеПараметры.ПараметрыОрганизации, ХозСубъектОбъект.GUID, ХозСубъектОбъект.Ссылка);
		кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту(ДополнительныеПараметры.ПараметрыОрганизации, ХозсубъектОбъект.Ссылка, Истина);
		ОбновитьСписокРеализацийНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЗагруженногоХозСубъекта(РезультатЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатЗакрытия <> Неопределено И ДополнительныеПараметры <> Неопределено Тогда
		ЗагрузитьВыбранныйХозсубъект(РезультатЗакрытия, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСуществованиеХсПоGUID(GUID)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВСД_ХозСубъект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|ГДЕ
	|	ВСД_ХозСубъект.GUID = &GUID";
	Запрос.УстановитьПараметр("GUID", GUID);
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Если Выборка.Следующий() Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ************ Партии

&НаСервере
Функция ПолучитьПартии2_НаСервере( НачДата, КонДата, ТолькоАктуальныеПартии=Ложь )
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	ПараметрыФункции.Вставить("ВыбПлощадка", Объект.Отправитель_Площадка);
	ПараметрыФункции.Вставить("ПартииСмещение", 0);
	ПараметрыФункции.Вставить("УдалятьПартии", Ложь);
	ПараметрыФункции.Вставить("ТолькоАктуальныеПартии", ТолькоАктуальныеПартии);
	ПараметрыФункции.Вставить("ПартияНачПериода", НачДата);
	ПараметрыФункции.Вставить("ПартияКонПериода", КонДата);
	
	Если Объект.ОтправлятьВФоне Тогда
		ИдентификаторЗадания = Неопределено;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис загрузка партий'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
		                                                        "кб99_ВСД_Запросы.Партии2_Запрос_Отправить",
		                                                        ПараметрыФункции,
		                                                        НаименованиеЗадания);
		
		АдресХранилища = Результат.АдресХранилища;
	Иначе
		Ответ = кб99_ВСД_Запросы.Партии2_Запрос_Отправить(ПараметрыФункции);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ВСД_Площадка = Объект.Отправитель_Площадка.ПолучитьОбъект();
	ВСД_Площадка.ДатаАктуальностиПартий = КонДата;
	ВСД_Площадка.Записать();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПартии2_СИзменениями_НаСервере( НачДата, КонДата )
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	ПараметрыФункции.Вставить("ВыбПлощадка", Объект.Отправитель_Площадка);
	ПараметрыФункции.Вставить("ПартииСмещение", 0);
	ПараметрыФункции.Вставить("УдалятьПартии", Ложь);
	//ПараметрыФункции.Вставить("ТолькоАктуальныеПартии", Истина);
	ПараметрыФункции.Вставить("ПартияНачПериода", НачДата);
	ПараметрыФункции.Вставить("ПартияКонПериода", КонДата);
	
	Если Объект.ОтправлятьВФоне Тогда
		ИдентификаторЗадания = Неопределено;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис загрузка партий'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
		                                                        "кб99_ВСД_Запросы.Партии2_СИзменениями_Запрос_Отправить",
		                                                        ПараметрыФункции,
		                                                        НаименованиеЗадания);
		
		АдресХранилища = Результат.АдресХранилища;
	Иначе
		Ответ = кб99_ВСД_Запросы.Партии2_СИзменениями_Запрос_Отправить(ПараметрыФункции);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ВСД_Площадка = Объект.Отправитель_Площадка.ПолучитьОбъект();
	ВСД_Площадка.ДатаАктуальностиПартий = КонДата;
	ВСД_Площадка.Записать();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПартии_ОтветНаВопрос(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Результат = ПолучитьПартии2_НаСервере(ПартииНач, КонецДня(ПартииКон));
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПоказатьОповещениеПользователя("Выполнено");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии2(Команда)
	
	ТекстВопроса = "Получить Партии по Площадке " + Объект.Отправитель_Площадка + " в Меркурий ";
	
	Если ЗначениеЗаполнено(ПартииНач) Тогда
		ТекстВопроса = ТекстВопроса + "
		|за период с " + ПартииНач + " по " + ПартииКон + ".";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьПартии_ОтветНаВопрос", ЭтаФорма);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыЗагрузкиПартии(ВыбДата, Параметры) Экспорт
	
	Если ЗначениеЗаполнено( ВыбДата ) Тогда
		
		Результат = ПолучитьПартии2_НаСервере(ВыбДата, ТекущаяДатаСеанса());
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено( Результат.ИдентификаторЗадания ) Тогда
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПартии(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыЗагрузкиПартии", ЭтаФорма);
	ВыбДата = ПолучитьДатуАктуальностиПартий();
	
	ПоказатьВводДаты(Оповещение, ВыбДата, "Введите дату начала загрузки Партий", ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПартииАктуальные(Команда)
	
	Результат = ПолучитьПартии2_НаСервере(Дата("20000101"), ТекущаяДатаСеанса(), Истина);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(Результат.ИдентификаторЗадания) Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыЗагрузкиПартииСИзменениями(ВыбДата, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбДата) Тогда
		
		Результат = ПолучитьПартии2_СИзменениями_НаСервере(ВыбДата, ТекущаяДатаСеанса());
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено( Результат.ИдентификаторЗадания) Тогда
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПартииСИзменениями(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыЗагрузкиПартииСИзменениями", ЭтаФорма);
	ВыбДата = ПолучитьДатуАктуальностиПартий();
	
	ПоказатьВводДаты(Оповещение, ВыбДата, "Введите дату начала загрузки Партий", ЧастиДаты.Дата);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуАктуальностиПартий()
	
	Если ЗначениеЗаполнено(Объект.Отправитель_Площадка.ДатаАктуальностиПартий) Тогда
		ВыбДата = Объект.Отправитель_Площадка.ДатаАктуальностиПартий;
	Иначе
		ВыбДата = ТекущаяДатаСеанса() - 31536000; // Загружаем за год
	КонецЕсли;
	Возврат ВыбДата;
	
КонецФункции

// *********** Партии окончание

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()
	ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
КонецПроцедуры

&НаСервере
Функция ЗаданиеВыполнено()
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	МассивСообщений = ПолучитьСообщенияНаСервере();
	Для Каждого Сообщение Из МассивСообщений Цикл
		Сообщение.Сообщить();
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Сообщить();
	КонецЦикла;
	
	Попытка
		Если ЗаданиеВыполнено() Тогда
			ЗакрытьФормуДлительнойОперации();
			Возврат;
		КонецЕсли;
	Исключение
		ЗакрытьФормуДлительнойОперации();
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

// **************** Форма Страница Реализации
&НаСервере
Процедура ОбновитьСписокРеализацийНаСервере()
	
	ЗаполнитьТабличныеЧасти(флПеремещения, флЗаказы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТабличнуюЧасть(Команда)
	Состояние("Выполняется поиск документов для создания ВСД",, "Ожидайте...", БиблиотекаКартинок.kb99_wrench);
	ЗаполнитьТабличныеЧасти(флПеремещения, флЗаказы);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеализациями(Команда)
	
	Состояние("Выполняется поиск документов для создания ВСД",, "Ожидайте...", БиблиотекаКартинок.kb99_wrench);
	
	флПеремещения = Ложь;
	флЗаказы = Ложь;
	
	ЭтаФорма.ПодчиненныеЭлементы.ПанельСтраницы.ТекущаяСтраница.Заголовок = "Реализации";
	ЗаполнитьТабличныеЧасти(флПеремещения, флЗаказы);
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериода(Команда)
	ВыбранныйПериод = Новый СтандартныйПериод;
	Если Команда.Имя = "ВыборПериодаПартии" Тогда
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = ПартииНач;
		ВыбранныйПериод.ДатаОкончания = ПартииКон;
		КудаРезультат = "ВыборПериодаПартий";
	Иначе
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = Объект.ДатаНачалаОтбора;
		ВыбранныйПериод.ДатаОкончания = Объект.ДатаОкончанияОтбора;
		КудаРезультат = "ВыборПериодаОтгрузки";
	КонецЕсли;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ВыбранныйПериод;
	// Не модальный вызов диалога выбора периода
	
	Диалог.Показать(Новый ОписаниеОповещения(КудаРезультат, ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаОтгрузки(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Если ЗначениеЗаполнено(Период) Тогда
		ВыбранныйПериод = Диалог.Период;
		Объект.ДатаНачалаОтбора = ВыбранныйПериод.ДатаНачала;
		Объект.ДатаОкончанияОтбора = ВыбранныйПериод.ДатаОкончания;
		ОбновитьТабличнуюЧасть("");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаПартий(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Если ЗначениеЗаполнено(Период) Тогда
		ВыбранныйПериод = Диалог.Период;
		ПартииНач = ВыбранныйПериод.ДатаНачала;
		ПартииКон = ВыбранныйПериод.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеДокументы(Команда)
	
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьДокументыКСозданию(Команда)
	
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если ЗначениеЗаполнено(стр.ВСД) ИЛИ Не (ЗначениеЗаполнено(стр.Площадка)) Тогда
			Продолжить;
		КонецЕсли;
		стр.Отметка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура кнОтметитьНеотправленныеВСДСервер()
	
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если Не (ЗначениеЗаполнено(стр.ВСД)) Тогда
			Продолжить;
		КонецЕсли;
		Если Не (ЗначениеЗаполнено(стр.ВСД.СтатусВСД)) Тогда
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьНеотправленныеВСД(Команда)
	кнОтметитьНеотправленныеВСДСервер();
КонецПроцедуры

&НаСервере
Процедура кнОтметитьСОшибкойСервер()
	
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоследнийЗапрос = кб99_ВСД_Утилиты.НайтиПоследнийЗапрос(стр.ВСД);
		СтатусЗапроса = ПоследнийЗапрос.СтатусЗапроса;
		СтатусЗапросаПеречисление = ПоследнийЗапрос.СтатусЗапросаПеречисление;
		Если (СтатусЗапроса = "REJECTED") ИЛИ
			(СтатусЗапроса = "IN_PROCESS") ИЛИ
			(СтатусЗапроса = Перечисления.кб99_СтатусЗапроса.REJECTED) ИЛИ
			(СтатусЗапроса = Перечисления.кб99_СтатусЗапроса.IN_PROCESS) Тогда
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьСОшибкой(Команда)
	кнОтметитьСОшибкойСервер();
КонецПроцедуры

&НаСервере
Процедура кнОтметитьБезХССервер()
	
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если ЗначениеЗаполнено(стр.ХозСубъект.GUID) Тогда
			Продолжить;
		КонецЕсли;
		стр.Отметка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьБезХС(Команда)
	кнОтметитьБезХССервер();
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиДокументов(Команда)
	
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УменьшитьАктуальныеПартииНаРаспределенные(тзАктуальныхПартий)
	
	// Делегируем обработку в общий модуль
	ТаблицаОтгрузок = Объект.Отгрузки.Выгрузить();
	кб99_ВСД_УправлениеФормой.УменьшитьАктуальныеПартииНаРаспределенные(тзАктуальныхПартий, ТаблицаОтгрузок);
	
КонецПроцедуры

&НаСервере
Процедура ОтложеннаяОтправкаВСДНаСервере(ВыбДата)
	
	Для Каждого Стр Из Объект.Отгрузки Цикл
		Если Не Стр.Отметка Тогда
			Продолжить;	
		КонецЕсли;
		ДокОбъект = Стр.ВСД.ПолучитьОбъект();
		ДокОбъект.ОтправкаПоРасписанию = Истина;
		ДокОбъект.ДатаОтправки = ВыбДата;
		ДокОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыОтложеннойОтправки(ВыбДата, ДопПараметры) Экспорт
	
	Если ВыбДата = Неопределено Тогда
		кб99_ВСД.СообщитьИнфо("Отменено");
		Возврат;
	Иначе		
		ОтложеннаяОтправкаВСДНаСервере(ВыбДата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложеннаяОтправкаВСД(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыОтложеннойОтправки", ЭтаФорма, Неопределено);	
	ВыбДата = Объект.ДатаНачалаОтбора;
	ПоказатьВводДаты( Оповещение, ВыбДата , "Дата отправки ВСД",  ЧастиДаты.ДатаВремя);
	
КонецПроцедуры

// Заполняет партии на форме с распределением по актуальным остаткам
//
// Параметры:
//  ЗнакСортировки - Булево - переопределить сортировку (LIFO/FIFO)
//
&НаСервере
Процедура ЗаполнитьТаблицуПартийНаСервере(Знач ЗнакСортировки = Неопределено)
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	Объект.ПоказыватьПросроченныеПартии = ПараметрыОрганизации.ПоказыватьПросроченныеПартии;
	
	Объект.Партии.Очистить();
	
	// Подготовка требуемых партий из отгрузок
	ТаблицаОтгрузок = Объект.Отгрузки.Выгрузить();
	РезультатПодготовки = кб99_ВСД_УправлениеФормой.ПодготовитьТребуемыеПартии(
		ТаблицаОтгрузок, 
		ПараметрыОрганизации, 
		Объект["РеквизитГрузополучатель"]
	);
	
	ТребуемыеПартии = РезультатПодготовки.ТаблицаПартий;
	ПолеСортировкиПокупателя = РезультатПодготовки.ПолеСортировкиПокупателя;
	ЗнакСортировкиПокупателя = РезультатПодготовки.ЗнакСортировкиПокупателя;
	
	Если ТребуемыеПартии.Количество() = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Нет документов к созданию ВСД ->");
		Возврат;
	КонецЕсли;
	
	// Переопределение знака сортировки если указан явно
	Если ЗначениеЗаполнено(ЗнакСортировки) Тогда 
		ЗнакСортировкиПокупателя = ЗнакСортировки;
	КонецЕсли;
	
	// Получение актуальных партий
	АктуальныеПартии = кб99_ВСД.ПолучитьАктуальныеПартии(
		ПараметрыОрганизации, 
		ТребуемыеПартии.ВыгрузитьКолонку("ВСД_Продукция_Элемент"), 
		Объект.Отправитель_Площадка, 
		Объект.Отправитель_ХозСубъект,
		ПолеСортировкиПокупателя,
		ЗнакСортировкиПокупателя,
		ТребуемыеПартии.ВыгрузитьКолонку("Номенклатура")
	);
	
	Если НЕ (ТипЗнч(АктуальныеПартии) = Тип("ТаблицаЗначений")) И НЕ Объект.ПарамЗаполнятьТранзакциюПриОтсутствииПартий Тогда
		кб99_ВСД.СообщитьИнфо("Нет актуальных партий для создания Документов ");
		Возврат;
	КонецЕсли;
	
	// Уменьшаем актуальные партии на уже распределенные
	УменьшитьАктуальныеПартииНаРаспределенные(АктуальныеПартии);
	
	// Распределение партий
	РаспределенныеПартии = кб99_ВСД_УправлениеФормой.РаспределитьПартииПоОстаткам(
		ТребуемыеПартии, 
		АктуальныеПартии, 
		ПараметрыОрганизации
	);
	
	// Загрузка результата в форму
	Объект.Партии.Загрузить(РаспределенныеПартии);
	РаскраситьТЧПартий();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПартий(Команда, ПоУмолчанию = Ложь)
	
	ЗаполнитьТаблицуПартийНаСервере( Неопределено );
	Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаПартии;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПартийПоFIFO()
	
	ЗаполнитьТаблицуПартийНаСервере( Ложь );
	Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаПартии;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПартийПоLIFO()
	
	ЗаполнитьТаблицуПартийНаСервере( Истина );
	Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаПартии;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьПеремещенияВСДПоСписку()
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	Для Каждого строкаТЗ Из Объект.Отгрузки Цикл
		ВыбВСД = строкаТЗ.ВСД;
		Если НЕ (ЗначениеЗаполнено(ВыбВСД)) или НЕ(строкаТЗ.Отметка) Тогда
			Продолжить;	
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыбВСД.СтатусВСД) Тогда
			Продолжить;	
		КонецЕсли;		
		Попытка
			кб99_ВСД_Запросы.ВСД2_Транзакция_УсловияПеревозки_Отправить( ПараметрыОрганизации, ВыбВСД);
		Исключение
			кб99_ВСД.СообщитьИнфо(ОписаниеОшибки(), ВыбВСД);
		КонецПопытки;
	КонецЦикла;
	кб99_ВСД.СообщитьИнфо("-> Проверка условий перевозки Завершена ");
	
КонецПроцедуры

&НаСервере
Процедура кнЗапросРегионализацияНаСервере()
	ПроверитьВозможностьПеремещенияВСДПоСписку();
КонецПроцедуры

&НаКлиенте
Процедура кнЗапросРегионализация(Команда)
	
	Состояние("Выполняется запрос условий перевозки для отмеченных документов ВСД",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	кнЗапросРегионализацияНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

// Проверяет условия перевозки для межрегиональных транзакций
// 
// Параметры:
//  СписокДокументов - Массив из ДокументСсылка.ВСД2_Транзакция - документы для проверки
//  ПараметрыФункции - Структура - параметры организации
//
&НаСервере
Процедура ПроверитьУсловияПеревозкиПередОтправкой(СписокДокументов, ПараметрыФункции)
	
	ДокументыДляПроверки = Новый Массив;
	
	// Отбираем только межрегиональные перемещения
	Для Каждого ДокСсылка Из СписокДокументов Цикл
		
		Если ЗначениеЗаполнено(ДокСсылка.Отправитель_Площадка) 
			И ЗначениеЗаполнено(ДокСсылка.Получатель_Площадка) 
			И ДокСсылка.Получатель_Площадка.Регион <> ДокСсылка.Отправитель_Площадка.Регион  Тогда
			
			ДокументыДляПроверки.Добавить(ДокСсылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Отправляем запросы на проверку условий перевозки
	Для Каждого ДокСсылка Из ДокументыДляПроверки Цикл
		кб99_ВСД_Запросы.ВСД2_Транзакция_УсловияПеревозки_Отправить(ПараметрыФункции, ДокСсылка, Ложь);	
	КонецЦикла;
	
	// Пауза для обработки на стороне Меркурий
	кб99_ВСД_Запросы.Пауза(ПараметрыФункции["ПаузаСек"]);
	
	// Получаем результаты проверки
	Для Каждого ДокСсылка Из ДокументыДляПроверки Цикл
		ИдентификаторЗаявки = кб99_ВСД_Утилиты.НайтиApplicationID(ДокСсылка);
		Если ЗначениеЗаполнено(ИдентификаторЗаявки) Тогда				
			кб99_ВСД_Запросы.ВСД2_Транзакция_УсловияПеревозки_ПолучитьОтвет(ПараметрыФункции, ИдентификаторЗаявки, ДокСсылка, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьВСД_НаСервере(ОтправитьБыстро)
	
	СписокДокументовКОтправке = ПодготовитьСписокВСДКОтправке(Истина);
	
	Если СписокДокументовКОтправке.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	ПараметрыФункции.Вставить("СписокДокументов", СписокДокументовКОтправке);
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;		
		НаименованиеЗадания = НСтр("ru = 'Ветис отправка ВСД'");
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор); 
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.АдресРезультата = АдресХранилища; // всегда используем одно и то же временное хранилище
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		
		Если ОтправитьБыстро Тогда 
			Результат = ДлительныеОперации.ВыполнитьВФоне("кб99_ВСД.ОтправитьВСД_Параллельно", 
			ПараметрыФункции,
			ПараметрыВыполнения);
		Иначе
			Результат = ДлительныеОперации.ВыполнитьВФоне("кб99_ВСД.ОтправитьВСДвГИС", 
			ПараметрыФункции,
			ПараметрыВыполнения);
		КонецЕсли;
		
		//АдресХранилища       = Результат.АдресХранилища;		 //результат обработки
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;   //для получения сообщений
	Иначе
		
		Если ОтправитьБыстро Тогда 
			кб99_ВСД.ОтправитьВСД_Параллельно(ПараметрыФункции, Неопределено);
		Иначе
			// Проверяем условия перевозки для межрегиональных транзакций
			ПроверитьУсловияПеревозкиПередОтправкой(СписокДокументовКОтправке, ПараметрыФункции);
			
			// Отправляем все документы в ГИС Меркурий
			Для Каждого ДокСсылка Из СписокДокументовКОтправке Цикл
				кб99_ВСД.ОтправитьВСДвГИС(ДокСсылка, Неопределено);
			КонецЦикла;
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Формирует список документов ВСД для отправки в ГИС Меркурий
//
// Параметры:
//  ОтправлятьРанееОтправленные - Булево - включать ли в список документы с заявками
//
// Возвращаемое значение:
//  Массив из ДокументСсылка.ВСД2_Транзакция - список документов к отправке
//
&НаСервере
Функция ПодготовитьСписокВСДКОтправке(ОтправлятьРанееОтправленные)
	
	СписокДокументовКОтправке = Новый Массив;
	
	Для Каждого СтрОтгрузка Из Объект.Отгрузки Цикл
		
		ВСДДокумент = СтрОтгрузка.ВСД;
		
		// Пропускаем незаполненные и неотмеченные строки
		Если НЕ ЗначениеЗаполнено(ВСДДокумент) ИЛИ НЕ СтрОтгрузка.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропускаем уже зарегистрированные и помеченные на удаление документы
		Если ЗначениеЗаполнено(ВСДДокумент.СтатусВСД) ИЛИ ВСДДокумент.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропускаем документы с заявками, если не требуется их повторная отправка
		ИдентификаторЗаявки = кб99_ВСД_Утилиты.НайтиApplicationID(ВСДДокумент);
		Если ЗначениеЗаполнено(ИдентификаторЗаявки) И НЕ ОтправлятьРанееОтправленные Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДокументовКОтправке.Добавить(ВСДДокумент);
		
	КонецЦикла;
	
	Возврат СписокДокументовКОтправке;
	
КонецФункции

&НаКлиенте
Процедура СписокОтправкаВСДОбработатьВыбор(ЗначениеВыбора, ДопПараметры) Экспорт
	
	Если ЗначениеВыбора = Неопределено Тогда
		ВыбЭлемент = Ложь;
	Иначе 
		ВыбЭлемент = ЗначениеВыбора.Значение
	КонецЕсли;	
	
	Результат = ОтправитьВСД_НаСервере( ВыбЭлемент );	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВсдПоследовательно(Команда)
	
	ОтправитьВСД_НаСервере( Ложь );	
	
	ЗаполнитьТабличныеЧасти(флПеремещения, флЗаказы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВсдБыстро(Команда)
	
	ОтправитьВСД_НаСервере( Истина );	
	
	ЗаполнитьТабличныеЧасти(флПеремещения, флЗаказы);
	
КонецПроцедуры

&НаСервере
Процедура кнПолучитьОтветВСД2НаСервере()
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Для Каждого строкаОтгрузки Из Объект.Отгрузки Цикл
		Если строкаОтгрузки.Отметка И ЗначениеЗаполнено(строкаОтгрузки.ВСД) Тогда 
			ВыбВСД = строкаОтгрузки.ВСД;
			
			applicationID = кб99_ВСД_Утилиты.НайтиApplicationID( ВыбВСД );
			Если НЕ ЗначениеЗаполнено( applicationID ) Тогда 
				Продолжить;	
			КонецЕсли;
			
			ПараметрыФункции = Новый Структура();
			ПараметрыФункции.Вставить("ДокОснование", ВыбВСД);
			ПараметрыФункции.Вставить("Параметры", ПараметрыОрганизации);
			ПараметрыФункции.Вставить("СделатьПаузу", Ложь);
			ПараметрыФункции.Вставить("ApplicationID", applicationID);
			
			кб99_ВСД_Запросы.ПолучитьРезультат_ВСД2( ПараметрыФункции );
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьОтветВСД2(Команда)
	
	Состояние("Выполняется проверка ответов Меркурий",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	кнПолучитьОтветВСД2НаСервере(  );
	кб99_ВСД.СообщитьИнфо("Проверка ответов завершена");
	
КонецПроцедуры

&НаСервере
Процедура кнАннулироватьВыбранныеВСДНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Для Каждого строкаОтгрузки Из Объект.Отгрузки Цикл
		Если НЕ(ЗначениеЗаполнено(строкаОтгрузки.ВСД)) или НЕ(строкаОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		
		кб99_ВСД_Запросы.ВСД2_транзакция_Аннулировать( ПараметрыФункции, строкаОтгрузки.ВСД);
	КонецЦикла;
	
	// Перерисуем
	ОбновитьСписокРеализацийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура кнАннулироватьВыбранныеВСДОтвет(Ответ, Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Состояние("Выполняется Аннулирование выбранных ВСД",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
		кнАннулироватьВыбранныеВСДНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнАннулироватьВыбранныеВСД(Команда)
	// Список ВСД к Аннулированию подберем на сервере
	Оповещение = Новый ОписаниеОповещения("кнАннулироватьВыбранныеВСДОтвет",ЭтаФорма);	
	ПоказатьВопрос(Оповещение, "Аннулировать выбранные транзакции ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаКлиенте
Процедура кнУстановитьСоответствия(Команда)
	
	ОткрытьФорму("Обработка.кб99_УстановкаСоответствий.Форма.Форма_СоответствияУФ");
	
КонецПроцедуры

&НаКлиенте
Процедура кнГашение(Команда)
	
	ОткрытьФорму("Обработка.кб99_ГашениеВходящихПартий.Форма.ФормаГашениеУФ", , ЭтаФорма);
	
КонецПроцедуры

// ********  Открытие доп формы окончание

&НаКлиенте
Процедура кнПечатьСтрОтгрузки(Команда)
	
	Для Каждого стрДок Из Объект.Отгрузки Цикл
		Если Стрдок.Отметка Тогда
			ТабДок = кб99_ВСД.ПечатьВнешнейФормыВСД( СтрДок.ВСД );
			ТабДок.Показать("Кб99 печать ""Сокращенная форма ВСД""");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура кнПечатьСтрОтгрузкиНаПринтер(Команда)
	
	Для Каждого стрДок Из Объект.Отгрузки Цикл
		Если Стрдок.Отметка Тогда
			ТабДок = кб99_ВСД.ПечатьВнешнейФормыВСД( СтрДок.ВСД );
			ТабДок.Напечатать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПечатьРеестра()
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = Обработки.Интеграция_ГИС_Меркурий.ПолучитьМакет("Реестр");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Ном=0;
	Для Каждого стр Из Объект.Отгрузки Цикл				
		
		ном=ном+1;
		ОбластьМакета.Параметры.ном = ном;
		ОбластьМакета.Параметры.Грузополучатель = стр.Грузополучатель;
		ОбластьМакета.Параметры.ВСД = стр.ВСД;
		ОбластьМакета.Параметры.док = стр.Док;
		ОбластьМакета.Параметры.Количество = стр.Количество;
		ОбластьМакета.Параметры.Контрагент = стр.Контрагент;
		ОбластьМакета.Параметры.ИНН = стр.Контрагент.ИНН;
		ОбластьМакета.Параметры.ХозСубъект = стр.ХозСубъект;
		ОбластьМакета.Параметры.Площадка = стр.Площадка;
		
		Если Объект.РеквизитГрузополучатель = 0 Тогда     
			
			МодульУправлениеКонтактнойИнформацией = кб99_ВСД_Утилиты.ОбщийМодуль("УправлениеКонтактнойИнформацией");
			
			Если МодульУправлениеКонтактнойИнформацией <> Неопределено Тогда
				СведенияОГрузополучателе  = МодульУправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(стр.Грузополучатель,  ТекущаяДатаСеанса());
				СтрокаАдрес = "";
				СведенияОГрузополучателе.Свойство("ФактическийАдрес", СтрокаАдрес);
				ОбластьМакета.Параметры.Адрес = СтрокаАдрес;
			КонецЕсли; 
			
		Иначе
			ОбластьМакета.Параметры.Адрес = стр.Грузополучатель;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ВСД";
	
	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура кнПечатьРеестр(Команда)
	
	ТабДок = ПечатьРеестра();
	ТабДок.Показать("Кб99 печать ""Реестр ВСД""");
	
КонецПроцедуры

// *************  Форма стр 1 события тз Реализации
&НаКлиенте
Процедура ОтгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтгрузкиВСДОчисткаНаСервере(ДокСсылка)
	
	Попытка
		Если НЕ(ДокСсылка = Документы.ВСД2_транзакция.ПустаяСсылка()) Тогда 
			ДокОбъект = ДокСсылка.ПОлучитьОбъект();
			Если ЗначениеЗаполнено(ДокОбъект.СтатусВСД) Тогда
				Сообщить(""+ДокОбъект+" зарегистрирован в Меркурий - удаление невозможно");
				Возврат false;
			КонецЕсли;
			ДокОбъект.УстановитьПометкуУдаления(ИСТИНА);
			Возврат true;
		КонецЕсли;		
	Исключение
		Возврат false;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ОтгрузкиВСДОчисткаОтвет(Ответ, Парам) Экспорт
	
	текСтрока = Парам.Элемент.Родитель.ТекущиеДанные;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ОтгрузкиВСДОчисткаНаСервере(Парам.ДокСсылка) Тогда
			текСтрока.сЦвет = 0;
			текСтрока.ВСД = "";
			текСтрока.ВСДПредставление = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиВСДОчистка(Элемент, СтандартнаяОбработка)
	
	// Пометим на удаление док ВСД
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.ВСД) Тогда 
		ДокСсылка = Элемент.Родитель.ТекущиеДанные.ВСД;
		Если ЗначениеЗаполнено(кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ДокСсылка,"СтатусВСД")) Тогда
			кб99_ВСД.СообщитьИнфо(""+ДокСсылка+" зарегистрирован в Меркурий - удаление невозможно");
			Возврат;
		КонецЕсли;
		Парам = новый Структура("ДокСсылка,Элемент",ДокСсылка,Элемент);
		Оповещение = Новый ОписаниеОповещения("ОтгрузкиВСДОчисткаОтвет",ЭтаФорма,Парам);	
		ПоказатьВопрос(Оповещение, "Удалить "+ДокСсылка+" ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтгрузкиПлощадкаОчисткаНаСервере(ПлощадкаСсылка)
	
	Попытка
		Если НЕ(ПлощадкаСсылка = Справочники.ВСД_Площадка.ПустаяСсылка()) Тогда 
			СпрОб = ПлощадкаСсылка.ПОлучитьОбъект();
		СпрОб.Контрагент = "";
		СпрОб.Записать();
	КонецЕсли;		
Исключение
	// Игнорируем ошибки при очистке соответствия площадки
	ТекстОшибки = ОписаниеОшибки();
КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаОчистка(Элемент, СтандартнаяОбработка)
	
	// Отвяжем площадку от контрагента
	ОтгрузкиПлощадкаОчисткаНаСервере(Элемент.Родитель.ТекущиеДанные.Площадка);
	Элемент.Родитель.ТекущиеДанные.сЦвет = 2;  //Желтый
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтгрузкиПлощадкаПриИзмененииНаСервере( ПлощадкаСсылка, НовыйКонтрагент, ЭтоПеремещение )
	
	Если НЕ (ПлощадкаСсылка = Справочники.ВСД_Площадка.ПустаяСсылка()) Тогда 
		СпрОб = ПлощадкаСсылка.ПолучитьОбъект();
		Если ЭтоПеремещение Тогда
			СпрОб.Склад = НовыйКонтрагент;
		Иначе
			СпрОб.Контрагент = НовыйКонтрагент;
		КонецЕсли;
		СпрОб.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаПриИзменении(Элемент)
	
	// очищаем привязку старой площадки
	Если ЗначениеЗаполнено( ОчиститьПлощадку ) Тогда 
		ОтгрузкиПлощадкаПриИзмененииНаСервере( ОчиститьПлощадку, Неопределено, флПеремещения );
		ОчиститьПлощадку = Неопределено;
	КонецЕсли;
	
	// установим новую привязку плоащадки к грузополучателю
	//Если ЭтаФорма.ПодчиненныеЭлементы.ПанельСтраницы.ТекущаяСтраница.Заголовок = "Перемещения" Тогда	
	//	НовыйГрузополучатель = ПолучитьСкладПеремещенияНаСервере(Элемент.Родитель.ТекущиеДанные.Док);			
	//Иначе
	НовыйГрузополучатель = Элемент.Родитель.ТекущиеДанные.Грузополучатель;
	//КонецЕсли;
	
	ОтгрузкиПлощадкаПриИзмененииНаСервере( Элемент.Родитель.ТекущиеДанные.Площадка, НовыйГрузополучатель, флПеремещения );
	
	Если ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.Площадка) Тогда
		Элемент.Родитель.ТекущиеДанные.сЦвет = 0;
	Иначе
		Элемент.Родитель.ТекущиеДанные.сЦвет = 2;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Отвяжем сразу без вопросов
	ОчиститьПлощадку = Элемент.Родитель.ТекущиеДанные.Площадка;
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("ХозСубъект", Элемент.Родитель.ТекущиеДанные.ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
	
КонецПроцедуры

// *********** Вкладка Партии
&НаСервере
Процедура СоздатьВсдНаСервере()
	
	Если Объект.Партии.Количество()=0 Тогда
		кб99_ВСД.СообщитьИнфо("Не заполнена таблица партий.");
		Возврат;
	КонецЕсли;
	
	тзАктуальныхПартий = Объект.Партии.Выгрузить();
	
	Для Каждого СтрОтгрузки Из Объект.Отгрузки Цикл
		Если НЕ(СтрОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрОтгрузки.ВСД) Тогда
			Если СтрОтгрузки.ВСД.Проведен Тогда
				кб99_ВСД.СообщитьИнфо("Для "+СтрОтгрузки.Док+" уже отправлен "+СтрОтгрузки.ВСД);
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрОтгрузки.ВСД.СтатусВСД) Тогда 
				кб99_ВСД.СообщитьИнфо("Для "+СтрОтгрузки.Док+" ВСД уже создан, но не отправлен");
				Продолжить;
			КонецЕсли;		
		КонецЕсли;		
		
		Если НЕ(ЗначениеЗаполнено(СтрОтгрузки.Площадка)) или НЕ(ЗначениеЗаполнено(СтрОтгрузки.ХозСубъект)) Тогда
			кб99_ВСД.СообщитьИнфо("Для "+СтрОтгрузки.Док+" неизвестен ХС или Площадка получателя ");
			Продолжить;
		КонецЕсли;
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Получатель_ХозСубъект", СтрОтгрузки.ХозСубъект );
		ПараметрыДокумента.Вставить("Получатель_Площадка", СтрОтгрузки.Площадка );
		ПараметрыДокумента.Вставить("Отправитель_Площадка", Объект.Отправитель_Площадка );
		ПараметрыДокумента.Вставить("ДокОснование", СтрОтгрузки.Док);
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ПараметрыДокумента", ПараметрыДокумента);
		ПараметрыЗаполнения.Вставить("ДокументОснование", СтрОтгрузки.Док);
		ПараметрыЗаполнения.Вставить("тзАктуальныхПартий", тзАктуальныхПартий);
		ПараметрыЗаполнения.Вставить("НомерАвто",СтрОтгрузки.НомерАвто);
		
		ДокВСД = Документы.ВСД2_Транзакция.СоздатьДокумент();
		ДокВСД.Заполнить( ПараметрыЗаполнения );
		ДокВСД.Записать();
		
		СтрОтгрузки.ВСД = ДокВСД.Ссылка;
		ЗаполнитьПредставлениеДокументовВТЧ(СтрОтгрузки);
		
		кб99_ВСД.СообщитьИнфо("["+СтрОтгрузки.Грузополучатель+"] создан документ "+СтрОтгрузки.ВСД, СтрОтгрузки.ВСД);		
		
	КонецЦикла;								
	
КонецПроцедуры

Процедура СоздатьВсдПоТермУсловиямПеревозки() 
	
	Если Объект.Партии.Количество()=0 Тогда
		кб99_ВСД.СообщитьИнфо("Не заполнена таблица партий.");
		Возврат;
	КонецЕсли;
	
	тзПартииПоТермУсловиям = Объект.Партии.Выгрузить();
	тзПартииПоТермУсловиям.Свернуть("ТермическиеУсловияПеревозки");
	
	Для Каждого стрТермУсловие Из тзПартииПоТермУсловиям Цикл
		тзАктуальныхПартий = Объект.Партии.Выгрузить();
		Для Каждого СтрОтгрузки Из Объект.Отгрузки Цикл
			Если НЕ(СтрОтгрузки.Отметка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ(ЗначениеЗаполнено(СтрОтгрузки.Площадка)) или НЕ(ЗначениеЗаполнено(СтрОтгрузки.ХозСубъект)) Тогда
				кб99_ВСД.СообщитьИнфо("Для "+СтрОтгрузки.Док+" неизвестен ХС или Площадка получателя ");
				Продолжить;
			КонецЕсли;
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Получатель_ХозСубъект", СтрОтгрузки.ХозСубъект );
			ПараметрыДокумента.Вставить("Получатель_Площадка", СтрОтгрузки.Площадка );
			ПараметрыДокумента.Вставить("Отправитель_Площадка", Объект.Отправитель_Площадка );
			ПараметрыДокумента.Вставить("ДокОснование", СтрОтгрузки.Док);
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("ПараметрыДокумента", ПараметрыДокумента);
			ПараметрыЗаполнения.Вставить("ДокументОснование", СтрОтгрузки.Док);
			ПараметрыЗаполнения.Вставить("тзАктуальныхПартий", тзАктуальныхПартий);
			ПараметрыЗаполнения.Вставить("НомерАвто",СтрОтгрузки.НомерАвто);
			ПараметрыЗаполнения.Вставить("ТермическиеУсловияПеревозки", стрТермУсловие.ТермическиеУсловияПеревозки);
			
			ДокВСД = Документы.ВСД2_Транзакция.СоздатьДокумент();
			ДокВСД.Заполнить( ПараметрыЗаполнения );
			Если ДокВСД.Товары.Количество() > 0 Тогда
				ДокВСД.Записать();
			Иначе
				Продолжить;
			КонецЕсли;
			
			кб99_ВСД.СообщитьИнфо("["+СтрОтгрузки.Грузополучатель+"] создан документ "+ДокВСД+" по термическим условиям: "+стрТермУсловие.ТермическиеУсловияПеревозки, ДокВСД );		
		КонецЦикла;								
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьВСДОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Состояние("Создаем ВСД",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
		Если Объект.ПарамРазрешитьВводНаОснованииБолееОдногоВСД Тогда
			ЗапомнитьОтмеченныеСтроки();
			СоздатьВсдПоТермУсловиямПеревозки();
			ЗаполнитьТабличныеЧасти( флПеремещения, флЗаказы );
			ВосстановитьОтмеченныеСтроки();
		Иначе
			СоздатьВСДНаСервере();
		КонецЕсли;
		
		ПоказатьОповещениеПользователя("Выполнено");
		
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтгрузки;
		ЭтаФорма.ТекущийЭлемент = Элементы.ДатаНачалаОтбора;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьВСД(Команда)
	
	Если Объект.Партии.Количество() = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Нет Партий для создания ВСД ");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("кнСоздатьВСДОтвет",ЭтаФорма);	
	ПоказатьВопрос(Оповещение, "Создать ВСД на отмеченные Накладные ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
	
КонецПроцедуры

&НаСервере
Процедура РаскраситьТЧПартий() 
	
	Для Каждого ДанныеСтроки Из Объект.Партии Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Продукция_Элемент) Тогда
			ДанныеСтроки.сЦвет = 1;   // красный
		ИначеЕсли ДанныеСтроки.Партия = Справочники.ВСД_Партия.ПустаяСсылка()
			И НЕ ДанныеСтроки.Количество >= ДанныеСтроки.КоличествоСписания Тогда
			ДанныеСтроки.сЦвет = 2;   // желтый
		ИначеЕсли ДанныеСтроки.Количество < ДанныеСтроки.КоличествоСписания Тогда
			ДанныеСтроки.сЦвет = 1;   // красный
		ИначеЕсли ДанныеСтроки.Количество >= ДанныеСтроки.КоличествоСписания Тогда
			ДанныеСтроки.сЦвет = 3;  // зеленый
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ВСД_Производство) Тогда
			Отбор = Новый Структура( "Объект", ДанныеСтроки.ВСД_Производство );
			Обращение = РегистрыСведений.кб99_Запросы.ПолучитьПоследнее(ТекущаяДатаСеанса(), Отбор );
			Если ЗначениеЗаполнено( Обращение.ApplicationID ) И 
				((Обращение.СтатусЗапроса <> "COMPLETED") И
				(Обращение.СтатусЗапросаПеречисление <> Перечисления.кб99_СтатусЗапроса.COMPLETED)) Тогда
				ДанныеСтроки.сЦвет = 1;   // красный
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВСДПроизводствоКлиент( ВыбДата, ПараметрыОрганизации )
	
	Если ПараметрыОрганизации.Свойство("ВидыПродукции") Тогда
		ОформитьПроизводственнуюТранзакциюПоВидамПродукции(ВыбДата, ПараметрыОрганизации.ВидыПродукции);		
	Иначе
		Если ПараметрыОрганизации["ПроизводствоРазбиватьПострочно"] Тогда
			ОформитьПроизводственнуюТранзакциюПострочно(ВыбДата, ПараметрыОрганизации);
		Иначе
			ОформитьПроизводственнуюТранзакциюОбъединенно(ВыбДата, ПараметрыОрганизации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПроизводственнуюТранзакциюПострочно(ВыбДата, ПараметрыОрганизации)
	
	тзПартии = Объект.Партии.Выгрузить();
	
	Для Каждого стрПартий Из Объект.Партии Цикл
		Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент)) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+"  не указан ВСД_Продукция_Элемент. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стрПартий.ВСД_Производство) Тогда
			Продолжить;	
		КонецЕсли;
		Если ЗначениеЗаполнено(стрПартий.Партия) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" указана партия. Пропускаем...");
			Продолжить;
		КонецЕсли;
		Если СтрПартий.КоличествоСписания <= СтрПартий.Количество Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент.ЕдиницаИзмерения)) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.Продукция_Элемент.Наименование)+" не указана Единица измерения. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент.СрокГодности)) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.Продукция_Элемент.Наименование)+" не указан Срок годности. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		ДокВСД = Документы.ВСД2_Производство.СоздатьДокумент(); 
		ДокВСД.Дата = ТекущаяДатаСеанса(); 		
		ДокВСД.Организация = Объект.Организация;
		ДокВСД.Производитель_ХозСубъект = Объект.Отправитель_ХозСубъект;
		ДокВСД.Производитель_площадка = Объект.Отправитель_Площадка;
		ДокВСД.ЗавершитьОперацию = ПараметрыОрганизации["ЗавершатьПроизводство"];
		
		Если ПараметрыОрганизации.Свойство("НомерНезавершенногоПроизводства") Тогда
			ДокВСД.operationId = ПараметрыОрганизации.НомерНезавершенногоПроизводства;
		КонецЕсли;
		
		Если Не ДокВСД.ЗавершитьОперацию И Не ЗначениеЗаполнено(ДокВСД.operationId) Тогда
			ДокВСД.operationId = ПараметрыОрганизации.ПрефиксНомераНезавершенногоПроизводства+"-"+кб99_ВСД_Запросы.ДатаXML(ВыбДата);	
		КонецЕсли;
		
		ДокВСД.РезультатыИсследований = Объект.ВСД_РезультатыИсследований;
		ДокВСД.cargoInspected	= Истина;
		ДокВСД.НомерПартии = Формат(ВыбДата, "ДЛФ=Д");				
		
		тзПартии.Очистить();	
		нСтр = тзПартии.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр, стрПартий);
		
		стрПараметры = Новый Структура;
		стрПараметры.Вставить("тзПартии", тзПартии );
		стрПараметры.Вставить("ВыбДата", ВыбДата );
		стрПараметры.Вставить("ПараметрыОрганизации", ПараметрыОрганизации);
		
		ДокВСД.Заполнить( стрПараметры );
		ДокВСД.Записать();
		
		стрПартий.ВСД_Производство = ДокВСД.Ссылка;
		
		кб99_ВСД.СообщитьИнфо(" создан документ "+ДокВСД.Ссылка, ДокВСД.Ссылка);		
	КонецЦикла;
	РаскраситьТЧПартий();
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПроизводственнуюТранзакциюОбъединенно(ВыбДата, ПараметрыОрганизации)
	
	ДокВСД = Документы.ВСД2_Производство.СоздатьДокумент(); 
	ДокВСД.Дата = ТекущаяДатаСеанса(); 		
	ДокВСД.Организация = Объект.Организация;
	ДокВСД.Производитель_ХозСубъект = Объект.Отправитель_ХозСубъект;
	ДокВСД.Производитель_площадка = Объект.Отправитель_Площадка;
	ДокВСД.ЗавершитьОперацию = ПараметрыОрганизации["ЗавершатьПроизводство"];
	
	Если ПараметрыОрганизации.Свойство("НомерНезавершенногоПроизводства") Тогда
		ДокВСД.operationId = ПараметрыОрганизации.НомерНезавершенногоПроизводства;
	КонецЕсли;
	
	Если Не ДокВСД.ЗавершитьОперацию И Не ЗначениеЗаполнено(ДокВСД.operationId) Тогда
		ДокВСД.operationId = ПараметрыОрганизации.ПрефиксНомераНезавершенногоПроизводства+"-"+кб99_ВСД_Запросы.ДатаXML(ВыбДата);
	КонецЕсли;
	
	ДокВСД.РезультатыИсследований = Объект.ВСД_РезультатыИсследований;
	ДокВСД.cargoInspected	= Истина;
	Если ЗначениеЗаполнено(ДокВСД.operationId) Тогда
		ПрефиксНзп = ПараметрыОрганизации.ПрефиксНомераНезавершенногоПроизводства;
		НомерПартии = Прав(ДокВСД.operationId, СтрДлина(ДокВСД.operationId)-(СтрДлина(ПрефиксНзп)+1));
	Иначе
		НомерПартии = Формат(ВыбДата, "ДЛФ=Д");
	КонецЕсли;
	ПараметрыОрганизации.Вставить("НомерПартии", НомерПартии);
	
	тзПартии = Объект.Партии.Выгрузить();
	тзПартии.Свернуть("Продукция_Элемент, ВСД_Производство, Партия", "КоличествоСписания, Количество");
	
	стрПараметры = Новый Структура;
	стрПараметры.Вставить("тзПартии", тзПартии );
	стрПараметры.Вставить("ВыбДата", ВыбДата );
	стрПараметры.Вставить("ПараметрыОрганизации", ПараметрыОрганизации);
	
	ДокВСД.Заполнить( стрПараметры );
	ДокВСД.Записать();
	
	Для Каждого стрПартий Из Объект.Партии Цикл
		Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент)) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+"  не указан ВСД_Продукция_Элемент. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стрПартий.ВСД_Производство) Тогда
			Продолжить;	
		КонецЕсли;
		Если ЗначениеЗаполнено(стрПартий.Партия) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" указана партия. Пропускаем...");
			Продолжить;
		КонецЕсли;
		Если СтрПартий.КоличествоСписания <= СтрПартий.Количество Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент.ЕдиницаИзмерения)) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.Продукция_Элемент.Наименование)+" не указана Единица измерения. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент.СрокГодности)) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.Продукция_Элемент.Наименование)+" не указан Срок годности. Пропускаем...");
			Продолжить;
		КонецЕсли;
		// Возможно несколько производителей-площадок  / продумать
		// Если НЕ(стрПартий.ВСД_Продукция_Элемент.Площадка = Отправитель_Площадка)  Тогда
		//	ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.ВСД_Продукция_Элемент.Наименование)+" Производителем является "+стрПартий.ВСД_Продукция_Элемент.Площадка+". Пропускаем...");
		//	Продолжить;
		// КонецЕсли;
		
		стрПартий.ВСД_Производство = ДокВСД.Ссылка;
		
		кб99_ВСД.СообщитьИнфо(" создан документ "+ДокВСД.Ссылка, ДокВСД.Ссылка);		
	КонецЦикла;
	РаскраситьТЧПартий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыПроизводство(ВыбДата, ПараметрыОрганизации) Экспорт
	
	Если ВыбДата = Неопределено Тогда
		кб99_ВСД.СообщитьИнфо("Отменено");
		Возврат;
	Иначе		
		СоздатьВСДПроизводствоКлиент(ВыбДата, ПараметрыОрганизации);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПроизводственнуюТранзакциюПоВидамПродукции(ВыбДата, ВидыПродукции)
	
	тзПартии = Объект.Партии.Выгрузить();
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		
		ПартииПоВидуПродукции = тзПартии.Скопировать(Новый Структура("ВидПродукции", ВидПродукции));
		
		ДокВСД = Документы.ВСД2_Производство.СоздатьДокумент(); 
		ДокВСД.Дата = ТекущаяДатаСеанса(); 		
		ДокВСД.Организация = Объект.Организация;
		ДокВСД.Производитель_ХозСубъект = Объект.Отправитель_ХозСубъект;
		ДокВСД.Производитель_площадка = Объект.Отправитель_Площадка;
		ДокВСД.ЗавершитьОперацию = ПараметрыОрганизации["ЗавершатьПроизводство"];
		
		Если ПараметрыОрганизации.Свойство("НомерНезавершенногоПроизводства") Тогда
			ДокВСД.operationId = ПараметрыОрганизации.НомерНезавершенногоПроизводства;
		КонецЕсли;
		
		Если Не ДокВСД.ЗавершитьОперацию И Не ЗначениеЗаполнено(ДокВСД.operationId) Тогда
			ДокВСД.operationId = ПараметрыОрганизации.ПрефиксНомераНезавершенногоПроизводства+"-"+кб99_ВСД_Запросы.ДатаXML(ВыбДата);	
		КонецЕсли;
		
		ДокВСД.РезультатыИсследований = Объект.ВСД_РезультатыИсследований;
		ДокВСД.cargoInspected	= Истина;
		ДокВСД.НомерПартии = Формат(ВыбДата, "ДЛФ=Д");				
		
		ПартииПоВидуПродукции.Свернуть("Продукция_Элемент, ВСД_Производство, Партия, ВидПродукции","КоличествоСписания, Количество");
		
		стрПараметры = Новый Структура;
		стрПараметры.Вставить("тзПартии", ПартииПоВидуПродукции);
		
		стрПараметры.Вставить("ВыбДата", ВыбДата);
		стрПараметры.Вставить("ПараметрыОрганизации", ПараметрыОрганизации);
		
		ДокВСД.Заполнить( стрПараметры );
		ДокВСД.Записать();
		
		Для Каждого стрПартий Из Объект.Партии Цикл
			Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент)) Тогда
				кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+"  не указан ВСД_Продукция_Элемент. Пропускаем...");
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(стрПартий.ВСД_Производство) Тогда
				Продолжить;	
			КонецЕсли;
			Если ЗначениеЗаполнено(стрПартий.Партия) Тогда
				кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" указана партия. Пропускаем...");
				Продолжить;
			КонецЕсли;
			Если СтрПартий.КоличествоСписания <= СтрПартий.Количество Тогда
				Продолжить;	
			КонецЕсли;
			
			Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент.ЕдиницаИзмерения)) Тогда
				кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.Продукция_Элемент.Наименование)+" не указана Единица измерения. Пропускаем...");
				Продолжить;
			КонецЕсли;
			
			Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент.СрокГодности)) Тогда
				кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.Продукция_Элемент.Наименование)+" не указан Срок годности. Пропускаем...");
				Продолжить;
			КонецЕсли;
			
			Если стрПартий.ВидПродукции = ВидПродукции Тогда	
				стрПартий.ВСД_Производство = ДокВСД.Ссылка;
			КонецЕсли
		КонецЦикла;
		кб99_ВСД.СообщитьИнфо("Создан документ "+ДокВСД.Ссылка+" по виду продукции: "+ВидПродукции, ДокВСД.Ссылка);
	КонецЦикла;
	РаскраситьТЧПартий();
	
КонецПроцедуры

&НаКлиенте
Процедура кнПроизводствоОтвет(Ответ, ПараметрыОрганизации) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыПроизводство", ЭтаФорма, ПараметрыОрганизации);	
		ВыбДата = Объект.ДатаНачалаОтбора;
		ПоказатьВводДаты( Оповещение, ВыбДата , "Дата выпуска продукции",  ЧастиДаты.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводствоВопрос(ТекстВопроса, ПараметрыОрганизации)
	
	Оповещение = Новый ОписаниеОповещения("кнПроизводствоОтвет", ЭтаФорма, ПараметрыОрганизации);	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   ); 	
	
КонецПроцедуры

&НаКлиенте
Процедура кнПроизводство(Команда)
	
	Если Объект.Партии.Количество() = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Нет данных в таблице ");
		Возврат;
	КонецЕсли;
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	Если Не ПараметрыОрганизации["ЗавершатьПроизводство"] Тогда
		
		НезавершенноеПроизводство = НайтиНезавершенноеПроизводство();
		
		Если НезавершенноеПроизводство.ОформитьНовоеПроизводство Тогда
			ТекстВопроса = "Создать производственные ВСД на недостающую продукцию ?";
			ПроизводствоВопрос(ТекстВопроса, ПараметрыОрганизации);
		ИначеЕсли ЗначениеЗаполнено(НезавершенноеПроизводство.тзДокументовНезавершенноеПроизводство) Тогда
			ПараметрыВыбора = Новый Структура();
			ПараметрыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
			ПараметрыВыбора.Вставить("РежимВыбора", Истина);
			ПараметрыВыбора.Вставить("МножественныйВыбор", Ложь);
			ПараметрыВыбора.Вставить("НезавершенныеТранзакции", НезавершенноеПроизводство.тзДокументовНезавершенноеПроизводство);
			ПараметрыВыбора.Вставить("Организация", Объект.Организация);
			
			ОткрытьФорму("Документ.ВСД2_Производство.Форма.ФормаСпискаНезавершенногоПроизводства", ПараметрыВыбора, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		КонецЕсли;
		
	Иначе
		ТекстВопроса = "Создать производственные ВСД на недостающую продукцию ?";
		ПроизводствоВопрос(ТекстВопроса, ПараметрыОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиНезавершенноеПроизводство()
	
	МассивДокументовНезавершенноеПроизводство = Новый Массив;
	
	Результат = Новый Структура;
	Результат.Вставить("ОформитьНовоеПроизводство", Ложь);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних.НомерОперацииНезавершенногоПроизводства КАК НомерОперацииНезавершенногоПроизводства,
	|	МИНИМУМ(кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних.ТранзакцияОткрыта) КАК ТранзакцияОткрыта
	|ПОМЕСТИТЬ втПоследниеСтатусыТранзакций
	|ИЗ
	|	РегистрСведений.кб_НезавершенныеПроизводственныеТранзакции.СрезПоследних(, Площадка = &Площадка) КАК кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних.НомерОперацииНезавершенногоПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоследниеСтатусыТранзакций.НомерОперацииНезавершенногоПроизводства КАК НомерОперации
	|ПОМЕСТИТЬ втНезавершенныеТранзакции
	|ИЗ
	|	втПоследниеСтатусыТранзакций КАК втПоследниеСтатусыТранзакций
	|ГДЕ
	|	втПоследниеСтатусыТранзакций.ТранзакцияОткрыта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНезавершенныеТранзакции.НомерОперации КАК НомерОперации,
	|	кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних.ТранзакцияОткрыта КАК Отметка,
	|	кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних.Период КАК Период,
	|	кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних.ПродукцияЭлемент КАК ПродукцияЭлемент,
	|	кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних.Площадка КАК Площадка,
	|	кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних.ДатаПроизводства КАК ДатаПроизводства,
	|	кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних.Организация КАК Организация
	|ИЗ
	|	втНезавершенныеТранзакции КАК втНезавершенныеТранзакции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кб_НезавершенныеПроизводственныеТранзакции.СрезПоследних(
	|				,
	|				НомерОперацииНезавершенногоПроизводства В
	|						(ВЫБРАТЬ
	|							СписокНезавершенных.НомерОперации
	|						ИЗ
	|							втНезавершенныеТранзакции КАК СписокНезавершенных)
	|					И ТранзакцияОткрыта
	|					И Площадка = &Площадка) КАК кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних
	|		ПО втНезавершенныеТранзакции.НомерОперации = кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних.НомерОперацииНезавершенногоПроизводства
	|			И (кб_НезавершенныеПроизводственныеТранзакцииСрезПоследних.ТранзакцияОткрыта)
	|ИТОГИ
	|	МИНИМУМ(Отметка),
	|	МАКСИМУМ(Период),
	|	МАКСИМУМ(Площадка),
	|	МАКСИМУМ(ДатаПроизводства),
	|	МАКСИМУМ(Организация)
	|ПО
	|	НомерОперации");
	
	Запрос.УстановитьПараметр("Площадка", Объект.Отправитель_Площадка);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СписокДокументов = Новый ТаблицаЗначений;
	СписокДокументов.Колонки.Добавить("Документ",		 	Новый ОписаниеТипов("ДокументСсылка.ВСД2_Производство"));
	СписокДокументов.Колонки.Добавить("Отметка",		 	Новый ОписаниеТипов("Булево"));
	СписокДокументов.Колонки.Добавить("НомерОперации",	 	Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(50)));
	СписокДокументов.Колонки.Добавить("Площадка",		 	Новый ОписаниеТипов("СправочникСсылка.ВСД_Площадка"));
	СписокДокументов.Колонки.Добавить("СписокПродукции",	Новый ОписаниеТипов("СписокЗначений"));
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		нСтр = СписокДокументов.Добавить();
		нСтр.НомерОперации = ВыборкаПоДокументам.НомерОперации;
		нСтр.Отметка = ВыборкаПоДокументам.Отметка;
		нСтр.Площадка = ВыборкаПоДокументам.Площадка;
		ВыборкаПоПродукции = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаПоПродукции.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура("ПродукцияЭлемент, ДатаПроизводства");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, ВыборкаПоПродукции);
			
			нСтр.СписокПродукции.Добавить(СтруктураСтроки);
			
		КонецЦикла;
	КонецЦикла;
	
	Результат.Вставить( "тзДокументовНезавершенноеПроизводство", ПоместитьВоВременноеХранилище(СписокДокументов, УникальныйИдентификатор));
	Результат.ОформитьНовоеПроизводство = СписокДокументов.Количество() = 0;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОтправитьВСД2_ПроизводствоНаСервере( СписокВСД )
	
	кб99_ВСД.СообщитьИнфо("Начало отправки документов");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВСД_Производство.Ссылка
	|ИЗ
	|	Документ.ВСД2_Производство КАК ВСД_Производство
	|ГДЕ
	|	ВСД_Производство.Производитель_ХозСубъект = &ВыбХС
	|	И ВСД_Производство.ПометкаУдаления = ЛОЖЬ
	|	И ВСД_Производство.Проведен = ЛОЖЬ
	|	И ВСД_Производство.Ссылка В (&СписокВСД)";
	
	Запрос.УстановитьПараметр("СписокВСД", СписокВСД );
	Запрос.УстановитьПараметр("ВыбХС", Объект.Отправитель_Хозсубъект);
	
	СписокВСД.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	ПараметрыОрганизации.Вставить("ВыбПлощадка", Объект.Отправитель_Площадка);
	
	Для Каждого ДокВСД Из СписокВСД Цикл
		
		ВСДСсылка = ДокВСД.Значение;
		кб99_ВСД.ОтправитьВСДвГИС(ВСДСсылка, Неопределено);
		
	КонецЦикла;
	ОбновитьТчПартииСписанияПослеОтправкиПроизводства(ПараметрыОрганизации);
	кб99_ВСД.СообщитьИнфо("Отправка документов завершена");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводствоОтправить(Команда)
	
	СЗДок = Новый СписокЗначений;
	Для Каждого стр Из Объект.Партии Цикл				
		Если ЗначениеЗаполнено(стр.ВСД_Производство) Тогда	
			СЗДок.Добавить(стр.ВСД_Производство);
		КонецЕсли;		
	КонецЦикла;	
	
	Если СзДок.Количество() = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Нет производственных ВСД для отправки");
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется отправка производственных ВСД",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	
	ОтправитьВСД2_ПроизводствоНаСервере(СзДок);
	
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьОтветВСДПроизводство(Команда)
	
	сзДокументыКОтправке = новый СписокЗначений;
	Для Каждого строкаТЗ Из Объект.Партии Цикл
		ВыбВСД = строкаТЗ.ВСД_Производство;
		Если НЕ ЗначениеЗаполнено(ВыбВСД) Тогда
			Продолжить;	
		КонецЕсли;
		_applicationID = кб99_ВСД_Утилиты.НайтиApplicationID( ВыбВСД );
		Если (НЕ ЗначениеЗаполнено(_applicationID)) Тогда
			Продолжить;	
		КонецЕсли;
		сзДокументыКОтправке.Добавить(ВыбВСД);
		кб99_ВСД.СообщитьИнфо(""+ВыбВСД+" Добавлен в очередь на проверку ответа Меркурий");
	КонецЦикла;
	
	Если сзДокументыКОтправке.Количество() > 0 Тогда
		Состояние("Выполняется запрос ответов в Меркурий",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
		кнПолучитьОтветВСД2НаСервере(  );
		ПоказатьОповещениеПользователя("Выполнено");
	Иначе
		кб99_ВСД.СообщитьИнфо("Не выбрано документов к проверке");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект, СписокКонстант ); 
	
	ЗаполнитьТабличныеЧасти(флПеремещения, флЗаказы);
	
	ПолучитьАктуальнуюВерсиюИзХранилища();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура Отправитель_ПлощадкаНаФормеПриИзмененииНаСервере()
	
	ЗаполнитьТабличныеЧасти(флПеремещения, флЗаказы);	
	
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ПлощадкаНаФормеПриИзменении(Элемент)
	Отправитель_ПлощадкаНаФормеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РаскраситьТЧОтгрузки()
	
	Для Каждого ДанныеСтроки Из Объект.Отгрузки Цикл
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ВСД) Тогда
			Запрос = кб99_ВСД_Утилиты.НайтиПоследнийЗапрос( ДанныеСтроки.ВСД );
			СтатусЗапроса = Запрос.СтатусЗапроса;
			СтатусЗапросаПеречисление = Запрос.СтатусЗапросаПеречисление;
			СтатусВСД = ДанныеСтроки.СтатусВСД;
			Если Не ЗначениеЗаполнено(СтатусВСД) Тогда
				СтатусВСД = ДанныеСтроки.ВСД.СтатусВСД;	
			КонецЕсли;				
		Иначе
			СтатусВСД = "";
			СтатусЗапроса = "";
		КонецЕсли;
		
		Если ПустаяСтрока(ДанныеСтроки.ХозСубъект.GUID)Тогда
			ДанныеСтроки.Сцвет = 1;   // красный
		ИначеЕсли ДанныеСтроки.Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда
			ДанныеСтроки.Сцвет = 2;  // желтый 
		ИначеЕсли СтатусВСД = Перечисления.кб99_СтатусВСД.CONFIRMED Тогда 
			ДанныеСтроки.Сцвет = 3;   
		ИначеЕсли СтатусВСД = Перечисления.кб99_СтатусВСД.WITHDRAWN Тогда 
			ДанныеСтроки.Сцвет = 4;   
		ИначеЕсли СтатусЗапроса = "REJECTED" ИЛИ
			СтатусЗапросаПеречисление = Перечисления.кб99_СтатусЗапроса.REJECTED Тогда
			ДанныеСтроки.Сцвет = 4;   
		ИначеЕсли СтатусЗапроса = "IN_PROCESS" ИЛИ
			СтатусЗапросаПеречисление = Перечисления.кб99_СтатусЗапроса.IN_PROCESS Тогда
			ДанныеСтроки.Сцвет = 5;  
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//// Заполняет табличные части обработки документами
////
//// Параметры:
////	Перемещения
////
//// Возвращаемое значение:
////	Булево - Истина, если успешно выполнено заполнение, Иначе Ложь
////
//// Автозаполнение
&НаСервере
Функция ЗаполнитьТабличныеЧасти( Перемещения = Ложь, Заказы = Ложь )
	
	ПереопределенныйМодуль = кб99_ВСД_Утилиты.ФункцияПереопределена("ЗаполнитьТабличныеЧасти");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		ПереопределенныйМодуль.ЗаполнитьТабличныеЧасти( Перемещения = Ложь, Заказы = Ложь );
	КонецЕсли;	
	
	Объект.Отгрузки.Очистить();
	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Объект.ПоказыватьПросроченныеПартии = СписокКонстант.ПоказыватьПросроченныеПартии;
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("Организации", Объект.Организация);
	ПараметрыФункции.Вставить("ПлощадкаОтправителя", Объект.Отправитель_Площадка);
	ПараметрыФункции.Вставить("ДатаНачала", Объект.ДатаНачалаОтбора);
	ПараметрыФункции.Вставить("ДатаОкончания", Объект.ДатаОкончанияОтбора);
	ПараметрыФункции.Вставить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя", СписокКонстант.ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя);
	ПараметрыФункции.Вставить("Маршрут", Объект.Маршрут);
	ПараметрыФункции.Вставить("ПропускатьПустыеСвойства", СписокКонстант.ПропускатьПустыеСвойства);
	ПараметрыФункции.Вставить("РеквизитГрузополучатель", СписокКонстант.РеквизитГрузополучатель);
	ПараметрыФункции.Вставить("ПарамКоэффициентПересчетаКоличества", СписокКонстант.ПарамКоэффициентПересчетаКоличества);
	ПараметрыФункции.Вставить("НазваниеРеквизитаКоличество", СписокКонстант.НазваниеРеквизитаКоличество);
	ПараметрыФункции.Вставить("НазваниеРеквизитаКоличествоМест", СписокКонстант.НазваниеРеквизитаКоличествоМест);    
	ПараметрыФункции.Вставить("Отправитель_Хозсубъект", Объект.Отправитель_Хозсубъект);    
	ПараметрыФункции.Вставить("СкрытьОформленные", флСкрытьОформленные);
	
	Если кб99_ВСД_Параметры.ПроверитьЗначениеПараметра(СписокКонстант, "НомерАвто") Тогда
		ПараметрыФункции.Вставить("НомерАвто", СписокКонстант.НомерАвто);    
	Иначе
		ПараметрыФункции.Вставить("НомерАвто", """""");    
	КонецЕсли;
	
	Если кб99_ВСД_Параметры.ПроверитьЗначениеПараметра(СписокКонстант, "СвойКонтрагент", "Свой контрагент") Тогда
		ПараметрыФункции.Вставить("СвойКонтрагент", СписокКонстант.СвойКонтрагент);
	Иначе
		ПараметрыФункции.Вставить("СвойКонтрагент", Неопределено);
	КонецЕсли;
	
	Если Перемещения Тогда
		РезультатЗапроса = кб99_ВСД_Общий.СформироватьЗапросПеремещения( ПараметрыФункции );
	ИначеЕсли Заказы  Тогда
		РезультатЗапроса = кб99_ВСД_Общий.СформироватьЗапросЗаказы( ПараметрыФункции );
	Иначе
		РезультатЗапроса = кб99_ВСД_Общий.ПолучитьТзРеализаций( ПараметрыФункции );
	КонецЕсли;
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Объект.Отгрузки.Загрузить(РезультатЗапроса.Выгрузить());			
	Объект.Партии.Очистить();
	РаскраситьТЧОтгрузки();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредставлениеДокументовВТЧ(СтрОтгрузки)
	
	Если ЗначениеЗаполнено(СтрОтгрузки.ВСД) Тогда
		СтрОтгрузки.ВСДПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("№ %1 от %2", СтрОтгрузки.ВСД.Номер, Формат(СтрОтгрузки.ВСД.Дата, "ДЛФ=D"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрОтгрузки.Док) Тогда
		СтрОтгрузки.ДокПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("№ %1 от %2", СтрОтгрузки.Док.Номер, Формат(СтрОтгрузки.Док.Дата, "ДЛФ=D"));
	КонецЕсли;
	
КонецПроцедуры

#Область ДанныеОТехподдержке

&НаКлиенте
Процедура АктуальнаяВерсияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ЗапускПриложения", ЭтаФорма);
	НачатьЗапускПриложения(Оповещение, СсылкаНаОписаниеАктуальнойВерсии,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложения(КодВозврата, ДополнительныйПараметр) Экспорт
	
	а = 1;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьВерсиюНаФорме( ОтветСервера )
	
	Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
		
		АктуальнаяВерсия =  ОтветСервера.АктуальнаяВерсия;
		СсылкаНаОписаниеАктуальнойВерсии = ОтветСервера.ОписаниеВерсии;
		
		Если ОтветСервера.ДоговорДействует Тогда 
		ИнформацияОДоговореТехподдержки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Техподдержка действует до %1.", Формат(ОтветСервера.ДатаОкончанияПоддержки, "ДФ=dd.MM.yyyy") );
		Элементы.НадписьИнформацияОТехподдержке.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1", ИнформацияОДоговореТехподдержки);
		Элементы.НадписьИнформацияОТехподдержке.ЦветТекста = WebЦвета.Зеленый;
	Иначе 
		ИнформацияОДоговореТехподдержки = "Нет активного договора техподдержки.";
		Элементы.НадписьИнформацияОТехподдержке.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1", ИнформацияОДоговореТехподдержки);
		Элементы.НадписьИнформацияОТехподдержке.ЦветТекста = WebЦвета.Красный;
		КонецЕсли;
		
		мсТекВерсияОбработки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВерсияОбработки, ".", Ложь);
		Разряд1ТекВерсия	 = Число(мсТекВерсияОбработки[0]);
		Разряд2ТекВерсия	 = Число(мсТекВерсияОбработки[1]);
		Разряд3ТекВерсия	 = Число(мсТекВерсияОбработки[2]);
		
		мсАктВерсияОбработки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВерсияОбработки, ".", Ложь);
		Разряд1АктВерсия	 = Число(мсАктВерсияОбработки[0]);
		Разряд2АктВерсия	 = Число(мсАктВерсияОбработки[1]);
		Разряд3АктВерсия	 = Число(мсАктВерсияОбработки[2]);
		
		Если Разряд3ТекВерсия < Разряд3АктВерсия
			Или Разряд2ТекВерсия < Разряд2АктВерсия
			Или Разряд1ТекВерсия < Разряд1АктВерсия Тогда
			
			ИнформацияОНеобходимостиОбновления = "Доступно обновление, актуальная версия:";
			
		Иначе
			ИнформацияОНеобходимостиОбновления = "Актуальная версия:"; 
		КонецЕсли;
		
		Элементы.НадписьИнформацияОВерсии.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1", ИнформацияОНеобходимостиОбновления); 
		
		Элементы.АктуальнаяВерсия.Видимость = ЗначениеЗаполнено(ИнформацияОНеобходимостиОбновления);
		Элементы.АктуальнаяВерсия.Гиперссылка = ЗначениеЗаполнено(СсылкаНаОписаниеАктуальнойВерсии);
		
		//Элементы.ПолучитьИнформациюОбОбновлениях.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1", ИнформацияОДоговореТехподдержки); 
	Иначе
		Элементы.НадписьИнформацияОТехподдержке.Заголовок = "";
		Элементы.АктуальнаяВерсия.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАктуальнуюВерсиюИзХранилища()
	
	ВерсияОбработки  = кб99_ВСД_Утилиты.ОписаниеВерсии();
	ОтветСервераКэш = кб99_ВСД_Отправка.ПолучитьАктуальнуюВерсию(Объект.Организация);
	
	ПоказатьВерсиюНаФорме( ОтветСервераКэш );
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнформациюОбОбновленияхНаСервере()
	
	НаименованиеОрганизации = Объект.Организация.Наименование;
	ИНН = Объект.Организация.ИНН;
	ЛогинВетис = Объект.param_username;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ИНН",					 ИНН);
		ПараметрыЗапроса.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
		ПараметрыЗапроса.Вставить("ЛогинВетис",				 ЛогинВетис);
		ПараметрыЗапроса.Вставить("ТекущаяВерсия",			 ВерсияОбработки);
		ПараметрыЗапроса.Вставить("Организация",			 Объект.Организация);
		
		ОтветСервера = кб99_ВСД_Отправка.ПолучитьДанныеОтехподдержке(ПараметрыЗапроса);
		Если Не ОтветСервера.Ошибка Тогда
			ПоказатьВерсиюНаФорме( ОтветСервера );
		КонецЕсли;
		
	Иначе
		Элементы.НадписьИнформацияОТехподдержке.Заголовок = "";
		Элементы.АктуальнаяВерсия.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАктуальнуюВерсиюКэш()
	
	Возврат кб99_ВСД_Отправка.ПолучитьАктуальнуюВерсию(Объект.Организация);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьИнформациюОбОбновлениях(Команда)
	
	ПолучитьИнформациюОбОбновленияхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПолученияИнформацииОбОбновлениях(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЛогинВетис", Объект.param_username);
	ПараметрыФормы.Вставить("ВерсияОбработки", ВерсияОбработки);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПолучитьИнфоормациюОбОбновленииЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.Форма", ПараметрыФормы, ЭтаФОрма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнфоормациюОбОбновленииЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	ОтветСервераКэш = ПолучитьАктуальнуюВерсиюКэш();
	ПоказатьВерсиюНаФорме( ОтветСервераКэш );
	
КонецПроцедуры

#КонецОбласти

#Область Инвентаризация 
&НаСервере
Функция СоздатьИнвентаризациюНаСервере()
	
	ДокВСД = Документы.ВСД2_Инвентаризация.СоздатьДокумент();
	
	ДокВСД.Дата = Объект.ДатаНачалаОтбора; 
	ДокВСД.Организация = Объект.Организация;
	ДокВСД.Владелец_ХозСубъект = Объект.Отправитель_ХозСубъект;
	ДокВСД.Владелец_площадка = Объект.Отправитель_Площадка;
	ДокВСД.ПричинаРасхождения = "Инвентаризация партий";
	ДокВСД.ОписаниеНесоответствия = "Инвентаризация партий";
	
	ДокВСД.Заполнить( Объект.Партии.Выгрузить() );
	ДокВСД.Записать();
	
	Возврат ДокВСД.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура СоздатьИнвентаризацию(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДокВСД = СоздатьИнвентаризациюНаСервере();
		ОткрытьФорму("Документ.ВСД2_Инвентаризация.ФормаОбъекта",Новый Структура("Ключ", ДокВСД));	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьИнвентаризацию(Команда)
	ТВопроса = "Создать ВСД2_Инвентаризация по списку недостающих партий ?";
	Оповещение = Новый ОписаниеОповещения("СоздатьИнвентаризацию",ЭтаФорма);	
	ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

#КонецОбласти

#Область ВнутреннееПеремещение 

&НаСервере
Функция ЗаполнитьТабЧастьЭлементовДляСозданияВСД( )
	
	РезТаб = Новый ТаблицаЗначений;
	РезТаб.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РезТаб.Колонки.Добавить("Продукция_Элемент",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция_Элемент"));
	РезТаб.Колонки.Добавить("Количество",новый ОписаниеТипов("Число"));
	РезТаб.Колонки.Добавить("Упаковки"); 
	РезТаб.Колонки.Добавить("ТермУсловияПеревозки"); 
	РезТаб.Колонки.Добавить("СерияНоменклатуры"); 
	РезТаб.Колонки.Добавить("Контрагент"); 
	
	Для Каждого стрПартии Из Объект.Партии Цикл
		Если НЕ(ЗначениеЗаполнено(стрПартии.Продукция_Элемент)) Тогда
			Продолжить;	
		КонецЕсли;
		Если (стрПартии.КоличествоСписания - стрПартии.Количество) <= 0 Тогда 
			Продолжить; // пропустим то что есть в наличии				
		КонецЕсли;			
		стрТаб = Резтаб.Добавить();
		СтрТаб.Номенклатура = стрПартии.Номенклатура;
		СтрТаб.ТермУсловияПеревозки = стрПартии.ТермическиеУсловияПеревозки;
		стрТаб.Продукция_Элемент = стрПартии.Продукция_Элемент;
		стрТаб.Количество = стрПартии.КоличествоСписания - стрПартии.Количество;
		стрТаб.Упаковки = стрПартии.КоличествоСписания - стрПартии.Количество;
		стрТаб.СерияНоменклатуры = стрПартии.ПолеСортировки;
		стрТаб.Контрагент = стрПартии.Документ.Контрагент;
	КонецЦикла;
	
	Возврат резТаб;
	
КонецФункции

// ПолучитьДанныеДляСозданияВСДПеремещения
&НаСервере
Функция ВСД_ПеремещениеСРазделениемПоТермическимУсловиям()
	
	тзТовары = ЗаполнитьТабЧастьЭлементовДляСозданияВСД();
	
	тзПартииПоТермУсловиям = Объект.Партии.Выгрузить();
	тзПартииПоТермУсловиям.Свернуть("ТермическиеУсловияПеревозки");
	
	МассивДокументовНаПеремещение = Новый Массив;
	
	Для Каждого стрТермУсловие Из тзПартииПоТермУсловиям Цикл
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Организация", Объект.ПарамПоставщикОрганизация);
		ПараметрыДокумента.Вставить("Отправитель_Хозсубъект", Объект.ПарамПоставщикХозСубъект);
		ПараметрыДокумента.Вставить("Отправитель_Площадка", Объект.ПарамПоставщикПлощадка);
		ПараметрыДокумента.Вставить("ОрганизацияПолучатель", Объект.Организация);
		ПараметрыДокумента.Вставить("Получатель_Хозсубъект", Объект.Отправитель_Хозсубъект);
		ПараметрыДокумента.Вставить("Получатель_Площадка", Объект.Отправитель_Площадка);
		ПараметрыДокумента.Вставить("ДокОснование", Неопределено);	
		ПараметрыДокумента.Вставить("ТтнНомер","1");	
		ПараметрыДокумента.Вставить("Товары", тзТовары );	
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ПараметрыДокумента", ПараметрыДокумента);
		ПараметрыЗаполнения.Вставить("ТермическиеУсловияПеревозки", стрТермУсловие.ТермическиеУсловияПеревозки);
		
		СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Объект.ПарамПоставщикОрганизация );
		тзАктуальныхПартий = кб99_ВСД.ПолучитьАктуальныеПартии(СписокКонстант, тзТовары.ВыгрузитьКолонку("Продукция_Элемент"), Объект.ПарамПоставщикПлощадка, Объект.ПарамПоставщикХозСубъект,,,тзТовары.ВыгрузитьКолонку("Номенклатура") );
		ПараметрыЗаполнения.Вставить("тзАктуальныхПартий", тзАктуальныхПартий);	
		
		ДокВСД = Документы.ВСД2_Транзакция.СоздатьДокумент();
		ДокВСД.Заполнить( ПараметрыЗаполнения );
		Если ДокВсд.Товары.Количество() > 0 Тогда
			ДокВСД.Записать();
			МассивДокументовНаПеремещение.Добавить(ДокВСД.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивДокументовНаПеремещение;
	
КонецФункции

&НаСервере
Функция ВСД_Перемещение()
	
	тзТовары = ЗаполнитьТабЧастьЭлементовДляСозданияВСД();
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Организация", Объект.ПарамПоставщикОрганизация);
	ПараметрыДокумента.Вставить("Отправитель_Хозсубъект", Объект.ПарамПоставщикХозСубъект);
	ПараметрыДокумента.Вставить("Отправитель_Площадка", Объект.ПарамПоставщикПлощадка);
	ПараметрыДокумента.Вставить("ОрганизацияПолучатель", Объект.Организация);
	ПараметрыДокумента.Вставить("Получатель_Хозсубъект", Объект.Отправитель_Хозсубъект);
	ПараметрыДокумента.Вставить("Получатель_Площадка", Объект.Отправитель_Площадка);
	ПараметрыДокумента.Вставить("ДокОснование", Неопределено);	
	ПараметрыДокумента.Вставить("ТтнНомер","1");	
	ПараметрыДокумента.Вставить("Товары", тзТовары );	
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПараметрыДокумента", ПараметрыДокумента);
	//ПараметрыЗаполнения.Вставить("ДокументОснование", Неопределено);
	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Объект.ПарамПоставщикОрганизация );
	тзАктуальныхПартий = кб99_ВСД.ПолучитьАктуальныеПартии(СписокКонстант, тзТовары.ВыгрузитьКолонку("Продукция_Элемент"), Объект.ПарамПоставщикПлощадка, Объект.ПарамПоставщикХозСубъект,,,тзТовары.ВыгрузитьКолонку("Номенклатура") );
	ПараметрыЗаполнения.Вставить("тзАктуальныхПартий", тзАктуальныхПартий);	
	
	ДокВСД = Документы.ВСД2_Транзакция.СоздатьДокумент();
	ДокВСД.Заполнить( ПараметрыЗаполнения );
	ДокВСД.Записать();
	
	Возврат ДокВСД.Ссылка;
	
КонецФункции

&НаКлиенте
Функция ВнутреннееПеремещение() Экспорт
	
	Если (НЕ ЗначениеЗаполнено(Объект.ПарамПоставщикОрганизация)) или
		(НЕ ЗначениеЗаполнено(Объект.ПарамПоставщикХозСубъект)) или
		(НЕ ЗначениеЗаполнено(Объект.ПарамПоставщикПлощадка)) Тогда
		Сообщить("Не заполнены параметры [Основной Постащик]");
		Возврат "НЕТПАРАМЕТРОВ";
	КонецЕсли;
	
	Если Объект.ПарамРазрешитьВводНаОснованииБолееОдногоВСД Тогда
		МассивДокВСД = ВСД_ПеремещениеСРазделениемПоТермическимУсловиям();
		Для Каждого ДокПеремещение Из МассивДокВСД Цикл
			ОткрытьФорму("Документ.ВСД2_транзакция.ФормаОбъекта",Новый Структура("Ключ", ДокПеремещение));	
		КонецЦикла;
	Иначе
		ДокПеремещение = ВСД_Перемещение();
		ОткрытьФорму("Документ.ВСД2_транзакция.ФормаОбъекта",Новый Структура("Ключ", ДокПеремещение));	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура кнПереместитьОтПоставщикаОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Состояние("Выполняется пермещение..",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
		ВнутреннееПеремещение();
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнПереместитьОтПоставщика(Команда)
	
	ТВопроса = "Создать ВСД2_Транзакцию по списку недостающих партий
	|на перемещение от "+Объект.ПарамПоставщикПлощадка+ " ?";
	Оповещение = Новый ОписаниеОповещения("кнПереместитьОтПоставщикаОтвет",ЭтаФорма);	
	ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   ); 
	
КонецПроцедуры

#КонецОбласти

#Область ЛабИсследования 

&НаКлиенте
Процедура кнОформитьЛабИсследованияОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДокОснование = Новый Структура;
		СписокДокументов = Новый Массив;
		Для Каждого стр Из Объект.Партии Цикл
			Если ЗначениеЗаполнено(стр.ВСД_Производство) Тогда
				СписокДокументов.Добавить(стр.ВСД_Производство);
			КонецЕсли;
		КонецЦикла;
		СписокДокументов = кб99_ВСД_Утилиты.СвернутьМассив(СписокДокументов);
		
		Если СписокДокументов.Количество() Тогда
			ДокОснование.Вставить("Док", СписокДокументов);
			формЛаб = ОткрытьФорму("Обработка.кб99_ЛабИсследования.Форма.Форма",ДокОснование);
		Иначе
			кб99_ВСД.СообщитьИнфо("Нет производственных ВСД для создания лабораторных исследований или документ не оформлен!");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнОформитьЛабИсследования(Команда)
	
	Если Объект.Партии.Количество() = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Нет Партий для оформления лабораторных исследований. ");
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("кнОформитьЛабИсследованияОтвет",ЭтаФорма);	
	ПоказатьВопрос(Оповещение, "Оформить лабораторные исследования на выбранные партии?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьПараметры(Команда)
	ОткрытьФорму("Обработка.кб99_Параметры.Форма.ФормаПараметры", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПеремещения(Команда)
	
	Состояние("Выполняется поиск документов для создания ВСД",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	
	флПеремещения = Истина;
	флЗаказы = Ложь;
	
	ЭтаФорма.ПодчиненныеЭлементы.ПанельСтраницы.ТекущаяСтраница.Заголовок = "Перемещения";
	ЗаполнитьТабличныеЧасти( флПеремещения, флЗаказы );
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументов(Элемент)
	
	Состояние("Обновление списка документов",, "Начало в "+ТекущаяДатаСеанса()+" Подождите...", БиблиотекаКартинок.kb99_clock_24x24);	
	ЗаполнитьТабличныеЧасти( флПеремещения, флЗаказы );
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = СтруктураОтбораПартий( Элемент.Родитель.ТекущиеДанные.Продукция_Элемент , Объект.Отправитель_Площадка, Объект.Отправитель_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, Отбор, ПоказыватьПросроченныеПартии", Истина, Истина, СтруктураОтбора, Объект.ПоказыватьПросроченныеПартии);	
	
	ОткрытьФорму("Справочник.ВСД_Партия.ФормаВыбора", ПараметрыПодбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураОтбораПартий( Выб_Продукция_Элемент = Неопределено, Выб_Получатель_Площадка, Выб_Получатель_ХозСубъект) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Получатель_Площадка", Объект.Отправитель_Площадка);
	СтруктураОтбора.Вставить("Получатель_ХозСубъект", Объект.Отправитель_ХозСубъект);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	Если ЗначениеЗаполнено(Выб_Продукция_Элемент) Тогда 
		СтруктураОтбора.Вставить("Продукция_Элемент", Выб_Продукция_Элемент);
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаКлиенте
Процедура ПартииПартияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПарамКолонкаСортировкиПартииСписания) Тогда 
		ПолеСортировки = Объект.ПарамКолонкаСортировкиПартииСписания;
	Иначе
		ПолеСортировки = "ДатаИзменения";
	КонецЕсли;
	Стр = Элементы.Партии.ТекущиеДанные;
	Стр.ПолеСортировки = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Стр.Партия,ПолеСортировки);
	
КонецПроцедуры

// Заполняем ТЧ партиями после отправки производства
&НаСервере
Процедура ОбновитьТчПартииСписанияПослеОтправкиПроизводства (ПараметрыОрганизации)
	
	Если ЗначениеЗаполнено(Объект.ПарамКолонкаСортировкиПартииСписания) Тогда 
		ПолеСортировки = Объект.ПарамКолонкаСортировкиПартииСписания;
	Иначе
		ПолеСортировки = "ДатаИзменения";
	КонецЕсли;
	
	тзПартииСписания	 = Объект.Партии.Выгрузить();
	СписокДокументовПроизводство = тзПартииСписания.ВыгрузитьКолонку("ВСД_Производство");
	тзАктуальныхПартий = кб99_ВСД.ПолучитьПартииПоДокументамПроизводства(СписокДокументовПроизводство, Объект.ПарамКолонкаСортировкиПартииСписания);
	//тзАктуальныхПартий	 = кб99_ВСД.ПолучитьАктуальныеПартии(ПараметрыОрганизации, 
	//	тзПартииСписания.ВыгрузитьКолонку("Продукция_Элемент"), 
	//	Объект.Отправитель_Площадка, 
	//	Объект.Отправитель_ХозСубъект,
	//	Неопределено,
	//	Неопределено );		
	
	Для Каждого Стр Из Объект.Партии Цикл
		Если ЗначениеЗаполнено(Стр.ВСД_Производство) Тогда
			СтрокиПартий = кб99_ВСД.ПодобратьПартииПоПродукцияЭлемент( ПараметрыОрганизации, тзАктуальныхПартий, Стр.Продукция_Элемент, Стр.КоличествоСписания );	
			Для Каждого СтрПартии Из СтрокиПартий Цикл
				Стр.Партия = СтрПартии.Партия;
				Стр.Количество = СтрПартии.Количество;
				Стр.ПолеСортировки = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Стр.Партия, ПолеСортировки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	РаскраситьТЧПартий();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказами(Команда)
	
	Состояние("Выполняется поиск заказов",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	
	флЗаказы = Истина;
	флПеремещения = Ложь;
	
	ЭтаФорма.ПодчиненныеЭлементы.ПанельСтраницы.ТекущаяСтраница.Заголовок = "Заказы";
	ЗаполнитьТабличныеЧасти( флПеремещения , флЗаказы );
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

&НаКлиенте
Процедура кнПечатьНаборныйЛист(Команда)
	
	Для Каждого стрДок Из Объект.Отгрузки Цикл
		Если Стрдок.Отметка Тогда
			ТабДок = кб99_ВСД.ПечатьНаборныйЛист( СтрДок.ВСД );
			ТабДок.Показать("Кб99 печать ""Наборный лист""");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиВСДПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Отгрузки.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВСД) Тогда
		
		ПоказатьЗначение( Неопределено, ТекущаяСтрока.ВСД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиДокПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Отгрузки.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Док) Тогда
		
		ПоказатьЗначение( Неопределено, ТекущаяСтрока.Док);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВидовПродукцииНаСервере()
	
	Если Объект.Партии.Количество()=0 Тогда
		кб99_ВСД.СообщитьИнфо("Не заполнена таблица партий.");
		Возврат Новый Массив;
	КонецЕсли;
	
	тзПартииПоВидуПродукции = Объект.Партии.Выгрузить();
	тзПартииПоВидуПродукции.Свернуть("ВидПродукции");
	
	Возврат тзПартииПоВидуПродукции.ВыгрузитьКолонку("ВидПродукции");
	
КонецФункции

&НаКлиенте
Процедура ПроизводствоОтправитьдствоПоВидамПродукции(Команда)
	
	ВидыПродукции = ПолучитьСписокВидовПродукцииНаСервере();
	Если ВидыПродукции.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораВидовПродукции", ЭтаФорма);
		ПараметрыФормы = Новый Структура("ВидыПродукции", ВидыПродукции);
		ОткрытьФорму("ОбщаяФорма.кб99_ФормаВыбораВидаПродукции", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидовПродукции(РезультатВыбора, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыПроизводство", ЭтаФорма, Новый Структура("ВидыПродукции", РезультатВыбора));	
		ВыбДата = Объект.ДатаНачалаОтбора;
		ПоказатьВводДаты(Оповещение, ВыбДата , "Дата выпуска продукции",  ЧастиДаты.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьВСДВоВложенияЕИС(Команда)
	
	ОчиститьСообщения();
	
	Для Каждого стрДок Из Объект.Отгрузки Цикл
		Если Стрдок.Отметка Тогда
			ТабДок = кб99_ВСД.ПечатьВнешнейФормыВСД( СтрДок.ВСД );
			ВремФайл = ПолучитьИмяВременногоФайла("pdf");
			ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.PDF);
			
			ВыбранныеФайлы = Новый Массив;
			ВыбранныеФайлы.Добавить(ВремФайл);
			
			ПрисоединенныеФайлыМассив = Новый Массив;
			ПоместитьВыбранныеФайлыВХранилище(
			ВыбранныеФайлы,
			стрДок.Док,
			ПрисоединенныеФайлыМассив,
			УникальныйИдентификатор,
			"",
			Неопределено);
			
		Для Каждого Файл Из ПрисоединенныеФайлыМассив Цикл
			ПрикрепитьВложениеЕИС(Файл, стрДок.Док);
			кб99_ВСД_Утилиты.СообщенияПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Прикреплен файл %1 к документу %2", ВремФайл, стрДок.Док));
		КонецЦикла;
		
	// Удаление временного файла после использования
	Попытка
		УдалитьФайлы(ВремФайл);
	Исключение
		// Игнорируем ошибки при удалении временного файла
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьВложениеЕИС(Файл, ТекДок)
	
	НаборЗаписейПриложения = РегистрыСведений.ПриложенныеФайлыДляЭлектронногоАктированияЕИС.СоздатьНаборЗаписей();
	НаборЗаписейПриложения.Отбор.Документ.Установить(ТекДок);
	
	//Для Каждого Строка Из ПриложенныеДокументы Цикл
	ЗаписьПриложение = НаборЗаписейПриложения.Добавить();
	ЗаписьПриложение.Документ = ТекДок;
	ЗаписьПриложение.Активность = Ложь;
	ЗаписьПриложение.Организация = ТекДок.Организация;	
	ЗаписьПриложение.ПрисоединенныйФайл = Файл;
	ЗаписьПриложение.ВидВложения = Справочники.ВидыВложенийДляАктированияЕИС.ИнформацияОСтранеПроисхожденияИлиОПроизводителеТовара;
	//КонецЦикла;
	
	НаборЗаписейПриложения.Записать();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоместитьВыбранныеФайлыВХранилище(Знач ВыбранныеФайлы,
	Знач ВладелецФайла,
	ПрисоединенныеФайлыМассив,
	Знач ИдентификаторФормы,
	Знач ИмяСоздаваемогоФайла = "",
	Знач ГруппаФайлов = Неопределено)
	
	// Функция временно не используется
	// TODO: Реализовать логику помещения файлов в хранилище
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьОтмеченныеСтроки()
	
	КэшОтмеченныеСтроки = Новый Массив;
	
	Для Каждого Стр Из Объект.Отгрузки Цикл
		
		Если Стр.Отметка Тогда	
			КэшОтмеченныеСтроки.Добавить(Стр.Док);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьОтмеченныеСтроки()
	
	Для Каждого Док Из КэшОтмеченныеСтроки Цикл
		
		ОтмеченныеСтроки = Объект.Отгрузки.НайтиСтроки(Новый Структура("Док", Док));
		Для Каждого Стр Из ОтмеченныеСтроки Цикл
			Стр.Отметка = Истина;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура флСкрытьОформленныеПриИзменении(Элемент)
	
	ЗаполнитьТабличныеЧасти(флПеремещения, флЗаказы);
	
КонецПроцедуры
