&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем АдресПараметров Экспорт;

&НаКлиенте
Перем ОчиститьПлощадку;

#Область НемодальныеОкна
&НаКлиенте
Процедура ПредупреждениеПользователю(ТекстПредупреждения) Экспорт
    Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждения", ЭтаФорма);	
    ПоказатьПредупреждение( Оповещение,   ТекстПредупреждения,   0,   "Предупреждение" );
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеЗакрытияПредупреждения(Параметры) Экспорт	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьСообщенияНаСервере( ) 
    
	// Сообщения=ПолучитьСообщенияПользователю(Истина);
	Попытка		
		Сообщения = ДлительныеОперации.СообщенияПользователю( Истина, ИдентификаторЗадания );
	Исключение
		// если в ОбщемМодуле нет функции 
		// например в Бухгалтерии 2.0
		Сообщения = кб99_ВСД_Общий.СообщенияПользователю( Истина, ИдентификаторЗадания );
	КонецПопытки;
	
 	Возврат Сообщения;
    
КонецФункции

// Реквизит на форме - текущая площадка = Объект Отправитель_Площадка
&НаКлиенте
Процедура Отправитель_ПлощадкаНаФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("ХозСубъект", Объект.Отправитель_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина, ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
	
КонецПроцедуры

// ************ Сведения о ХС и Площадках

&НаСервере
Функция кнХозСубъект_ПолучитьGuidПоИНН_НаСервере(ВыбХозСубъект) Экспорт
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;

		ПараметрыФункции["ВыбХозСубъект"] = ВыбХозСубъект;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос GUID ХозСубъекта'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ХозСубъект_ПолучитьGuidПоИНН_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ХозСубъект_ПолучитьGuidПоИНН( ПараметрыФункции, ВыбХозСубъект );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;	
КонецФункции

&НаКлиенте
Процедура кнХозСубъект_ПолучитьGuidПоИНН(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект)) Тогда
		ПредупреждениеПользователю("Не выбран Хозсубъект !");
		Возврат;	
	КонецЕсли;
	ПоказатьОповещениеПользователя("Выполняем запрос GUID ХозСубъекта",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	// ХС_ПолучитьGuid_Сервер(ВыбранныйХС);
	Результат = кнХозСубъект_ПолучитьGuidПоИНН_НаСервере(ВыбХозСубъект);
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция кнЗагрузитьПлощадкиПоХозСубъектуНаСервере(ВыбХозСубъект)	Экспорт
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
	
		ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
		ПараметрыФункции["ВыбХозСубъект"] = ВыбХозСубъект;
		ПараметрыФункции["ЗагрузитьПлощадку"] = Истина;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос GUID ХозСубъекта'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту( ПараметрыФункции, ВыбХозСубъект, Истина );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;	

КонецФункции

&НаКлиенте
Процедура кнЗагрузитьПлощадкиПоХозСубъекту(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	// ЗагрузитьПлощадки_Сервер(ВыбранныйХС);
	Результат = кнЗагрузитьПлощадкиПоХозСубъектуНаСервере( ВыбХозСубъект );	
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПлощадкиСпискомПоХозСубъекту_Сервер( )
	
	тзСвертка = Объект.Отгрузки.Выгрузить();
	тзСвертка.Свернуть("Отметка, Контрагент, ХозСубъект",);
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );	
	ПараметрыФункции.Вставить("тзКонтрагенты", тзСвертка );
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос Площадок, привязанных к ХозСубъекту'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Площадки_ЗагрузитьСписокПоХозСубъекту",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Площадки_ЗагрузитьСписокПоХозСубъекту( ПараметрыФункции, "" );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Для Каждого ДанныеСтроки Из Объект.Отгрузки Цикл
		ДанныеСтроки.Отметка = Ложь;
	КонецЦикла;
	
	ОбновитьСписокРеализацийНаСервере();	
	
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоСпискуДокументов(Команда)

	ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Результат = ЗагрузитьПлощадкиСпискомПоХозСубъекту_Сервер( );
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоНаименованию(Команда)
	
	Если ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура("ВыбХозСубъект, ВыбРегион", ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные.ХозСубъект, Объект.Регион );
	Иначе
		СтруктураПараметров = Новый Структура("ВыбХозСубъект, ВыбРегион","","");
	КонецЕсли;
	ОткрытьФорму("Обработка.кб99_НайтиПлощадки.Форма.ФормаЗагрузкаПлощадокУФ",СтруктураПараметров, ЭтаФорма,,,, , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("ХозСубъект", ВыбХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
	
КонецПроцедуры

// ************ Партии

&НаСервере
Функция ПолучитьПартии2_НаСервере( НачДата, КонДата )
	
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );	
	ПараметрыФункции.Вставить("ВыбПлощадка", Объект.Отправитель_Площадка);
	ПараметрыФункции.Вставить("ПартииСмещение", 0);
	ПараметрыФункции.Вставить("УдалятьПартии", Ложь);
	ПараметрыФункции.Вставить("ТолькоАктуальныеПартии", Ложь);
	ПараметрыФункции.Вставить("ПартияНачПериода", НачДата);
	ПараметрыФункции.Вставить("ПартияКонПериода", КонДата);
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;	
		
		НаименованиеЗадания = НСтр("ru = 'Ветис загрузка партий'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Партии2_Запрос_Отправить_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		АдресХранилища       = Результат.АдресХранилища;		
	Иначе;
		Ответ = кб99_ВСД_Запросы.Партии2_Запрос_Отправить( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПартии_ОтветНаВопрос(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Результат = ПолучитьПартии2_НаСервере( ПартииНач, КонецДня( ПартииКон ) );
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПоказатьОповещениеПользователя("Выполнено");
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии2(Команда)
	ТекстВопроса = "Получить Партии по Площадке "+Объект.Отправитель_Площадка+" в Меркурий ";

	Если ЗначениеЗаполнено(ПартииНач)  Тогда
		ТекстВопроса = ТекстВопроса + "
		|за период с "+ПартииНач+" по "+ПартииКон+"";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьПартии_ОтветНаВопрос", ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, ""  );    
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыЗагрузкиПартии(ВыбДата, Параметры) Экспорт
    Если ЗначениеЗаполнено( ВыбДата ) Тогда
		
		Результат = ПолучитьПартии2_НаСервере(ВыбДата, ТекущаяДата());
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено( Результат.ИдентификаторЗадания ) Тогда
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
		
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыЗагрузкиПартии", ЭтаФорма);	
    ВыбДата = ТекущаяДата()-30*60*60*30;
    ПоказатьВводДаты( Оповещение, ВыбДата , "Введите дату начала загрузки Партий",  ЧастиДаты.Дата);   	
КонецПроцедуры


// *********** Партии окончание

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации( ФормаДлительнойОперации );
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеВыполнено() 
	Возврат ДлительныеОперации.ЗаданиеВыполнено( ИдентификаторЗадания );
КонецФункции

//&НаСервере
//Процедура ЗагрузитьПараметры( )
//	
//	Попытка
//		Результат = ПолучитьИзВременногоХранилища( АдресХранилища );
//		
//		Если ЗначениеЗаполнено( Результат["Параметры"] ) Тогда 	
//			кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект , Результат["Параметры"] );
//		КонецЕсли;
//	Исключение КонецПопытки;
//	
//КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	МассивСообщений = ПолучитьСообщенияНаСервере( );
	Для Каждого Сообщение Из МассивСообщений Цикл
		Сообщение.Сообщить();
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Сообщить();
	КонецЦикла;
	
	Попытка
		Если ЗаданиеВыполнено() Тогда 
			//ЗагрузитьПараметры( );			
			ЗакрытьФормуДлительнойОперации();
			Возврат;
		КонецЕсли;		
	Исключение
		ЗакрытьФормуДлительнойОперации();
		ВызватьИсключение;
	КонецПопытки;
 
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

// **************** Форма Страница Реализации
&НаСервере
Процедура ОбновитьСписокРеализацийНаСервере()
	
	ЗаполнитьТабличныеЧасти( флПеремещения );	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРеализаций(Команда)
	ПоказатьОповещениеПользователя("Выполняется поиск документов для создания ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	флПеремещения = ложь;
	ЗаполнитьТабличныеЧасти( флПеремещения );
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериода(Команда)
	ВыбранныйПериод = Новый СтандартныйПериод;
	Если Команда.Имя = "ВыборПериодаПартии" Тогда
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = ПартииНач;
		ВыбранныйПериод.ДатаОкончания = ПартииКон;
		КудаРезультат = "ВыборПериодаПартий";
	Иначе
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = Объект.ДатаНачалаОтбора;
		ВыбранныйПериод.ДатаОкончания = Объект.ДатаОкончанияОтбора;
		КудаРезультат = "ВыборПериодаОтгрузки";
	КонецЕсли;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ВыбранныйПериод;
	// Не модальный вызов диалога выбора периода
		
	Диалог.Показать(Новый ОписаниеОповещения(КудаРезультат, ЭтаФорма, Новый Структура("Диалог", Диалог)));
		
КонецПроцедуры
 
&НаКлиенте
Процедура ВыборПериодаОтгрузки(Период, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Если ЗначениеЗаполнено(Период) Тогда 
		ВыбранныйПериод = Диалог.Период;
		Объект.ДатаНачалаОтбора = ВыбранныйПериод.ДатаНачала;
		Объект.ДатаОкончанияОтбора = ВыбранныйПериод.ДатаОкончания;
		ОбновитьСписокРеализаций("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаПартий(Период, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Если ЗначениеЗаполнено(Период) Тогда 
		ВыбранныйПериод = Диалог.Период;
		ПартииНач = ВыбранныйПериод.ДатаНачала;
		ПартииКон = ВыбранныйПериод.ДатаОкончания;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОтметитьВсеДокументы(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьДокументыКСозданию(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если ЗначениеЗаполнено(стр.ВСД) или НЕ(ЗначениеЗаполнено(стр.Площадка)) Тогда
			Продолжить;
		КонецЕсли;	
		стр.Отметка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура кнОтметитьНеотправленныеВСДСервер()
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД.СтатусВСД)) Тогда
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьНеотправленныеВСД(Команда)
	кнОтметитьНеотправленныеВСДСервер();
КонецПроцедуры

&НаСервере
Процедура кнОтметитьСОшибкойСервер()
	
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтатусЗапроса = кб99_ВСД_Общий.НайтиПоследнийЗапрос( стр.ВСД ).СтатусЗапроса;
		Если (СтатусЗапроса = "REJECTED") или (СтатусЗапроса = "IN_PROCESS")  Тогда
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьСОшибкой(Команда)
	кнОтметитьСОшибкойСервер();
КонецПроцедуры

&НаСервере
Процедура кнОтметитьБезХССервер()
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если ЗначениеЗаполнено(стр.ХозСубъект.GUID) Тогда
			Продолжить;
		КонецЕсли;
		стр.Отметка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьБезХС(Команда)
	кнОтметитьБезХССервер();
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиДокументов(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УменьшитьАктуальныеПартииНаРаспределенные(тзАктуальныхПартий)
	// Уменьшаем Акт партии на Неотправленные ВСД
	// Подберем уже заполненнные, но не отправленные ВСД, 
	// Выбираем ВСЕ документы, т.к. они м.б. не отмечены, но в них есть эти партии к отправке!!!
	// тзАктуальныхПартий.ВыбратьСтроку(); ТЕСТ
	тз = Объект.Отгрузки.Выгрузить();
	тз.Свернуть("ВСД","");
	//	тз.Сортировать("ВСД");
	Для Каждого Строкатз Из Тз Цикл
		Если НЕ ЗначениеЗаполнено(Строкатз.ВСД) Тогда
		    Продолжить;
		КонецЕсли;
		Если (Строкатз.ВСД.Проведен) или ЗначениеЗаполнено(Строкатз.ВСД.СтатусВСД) Тогда
		    Продолжить;
		КонецЕсли;
		
		тзДокВСД = Строкатз.ВСД.Товары.Выгрузить();
		тзДокВСД.Свернуть("Партия","Количество");
		
		Для Каждого СтрокаВСД Из тзДокВСД Цикл
		    Если НЕ ЗначениеЗаполнено(СтрокаВСД.Партия) Тогда
		        Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ТзАктуальныхПартий.Найти(СтрокаВСД.Партия,"Партия");

			Если НайденнаяСтрока = Неопределено Тогда
    			// Предупреждение("Товар не найден!");
			Иначе
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаВСД.Количество;
				Если НайденнаяСтрока.Количество < 0  Тогда
					кб99_ВСД.СообщитьИнфо("В заполненных ранее ВСД на отправку обнаружено ПРЕВЫШЕНИЕ количества имеющейся партии по "+НайденнаяСтрока.Продукция_Элемент+"; (№ записи : "+СокрЛП(НайденнаяСтрока.Партия.НомерЗаписи)+") ; документ "+Строкатз.ВСД);
					НайденнаяСтрока.Количество = 0;    
				КонецЕсли;
				// ВСД.СообщитьИнфо("Есть в документах на отправку "+ТзАктуальныхПартий.ВСД_Партия+ ", уменьшаем на " + тздокСтр.Количество)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Совсем выкинем уже распределенные Партии из списка Актуальных
	НайденнаяСтрока = ТзАктуальныхПартий.Найти(0,"Количество");
	Пока НЕ(НайденнаяСтрока = Неопределено) Цикл
		ТзАктуальныхПартий.Удалить(НайденнаяСтрока);
		НайденнаяСтрока = ТзАктуальныхПартий.Найти(0,"Количество");
	КонецЦикла;
	
КонецПроцедуры

// Заполняем Партии на форме с Распределением
&НаСервере
Процедура ЗаполнитьТаблицуПартийНаСервере( ЗнакСортировки=Неопределено ) Экспорт
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	Объект.Партии.Очистить();
	ВремПартии = Новый ТаблицаЗначений;   
	ВремПартии.Колонки.Добавить("Номенклатура");
	ВремПартии.Колонки.Добавить("ВСД_Продукция_Элемент");
	ВремПартии.Колонки.Добавить("КоличествоСписания");
	ВремПартии.Колонки.Добавить("СерияНоменклатуры");  //Тип = Строка, Запоняем если нужен отбор по сериям

	РаспределенныеПартии = Новый ТаблицаЗначений; // итоговая ТЗ
	РаспределенныеПартии.Колонки.Добавить("Номенклатура");
	РаспределенныеПартии.Колонки.Добавить("Продукция_Элемент");
	РаспределенныеПартии.Колонки.Добавить("Партия");
	РаспределенныеПартии.Колонки.Добавить("Количество");
	РаспределенныеПартии.Колонки.Добавить("КоличествоСписания");
	РаспределенныеПартии.Колонки.Добавить("ПолеСортировки");
	
	ПолеСортировкиПокупателя = Неопределено;
	ЗнакСортировкиПокупателя = Неопределено;
	
	Для Каждого СтрОтгрузки Из Объект.Отгрузки Цикл
		Если НЕ(СтрОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		
		// ЖД Контроль уже отправленного/удаленного ВСД
		Если ЗначениеЗаполнено(СтрОтгрузки.ВСД) Тогда
			кб99_ВСД.СообщитьИнфо("Для "+СтрОтгрузки.Док+" уже создан "+СтрОтгрузки.ВСД+" ->Пропускаю");
			// Если (СтрОтгрузки.ВСД.Проведен) или (СтрОтгрузки.ВСД.ПометкаУдаления)  Тогда 
				Продолжить;
			// КонецЕсли;
		КонецЕсли;
		
		тз = кб99_ВСД_Общий.ВыгрузитьТЧ(СтрОтгрузки.Док, ПараметрыОрганизации);
		Для Каждого стрТЗ Из ТЗ Цикл
	        СтрПартий = Времпартии.Добавить();
			СтрПартий.Номенклатура = стрТЗ.Номенклатура;
			СтрПартий.ВСД_Продукция_Элемент = стрТЗ.Продукция_Элемент;
			СтрПартий.КоличествоСписания = стрТЗ.Количество;
			СтрПартий.СерияНоменклатуры = стрТЗ.СерияНоменклатуры;
		КонецЦикла;
		
		// если хотя бы в 1 ХозСбъекте или Площадке указаны персональные настройки для заполнения партий, 
		// тогда применяем эти настройки для всех выбранных документов
		Если СтрОтгрузки.Площадка.ПерсональныеПараметрыСписанияПартий Тогда 
			ПолеСортировкиПокупателя = СтрОтгрузки.Площадка.ПарамКолонкаСортировкиПартииСписания;
			ЗнакСортировкиПокупателя = СтрОтгрузки.Площадка.ПарамЗнакСортировкиУбывание;			
			Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда 
				кб99_ВСД.СообщитьИнфо("! Сортировка партий в Площадке ["+СтрОтгрузки.Площадка+"] = "+ПолеСортировкиПокупателя+" сортировка по LIFO = "+ЗнакСортировкиПокупателя);
			КонецЕсли;
		ИначеЕсли СтрОтгрузки.ХозСубъект.ПерсональныеПараметрыСписанияПартий Тогда 
			ПолеСортировкиПокупателя = СтрОтгрузки.ХозСубъект.ПарамКолонкаСортировкиПартииСписания;
			ЗнакСортировкиПокупателя = СтрОтгрузки.ХозСубъект.ПарамЗнакСортировкиУбывание;
			Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда 
				кб99_ВСД.СообщитьИнфо("! Сортировка партий в ХозСубъекте ["+СтрОтгрузки.ХозСубъект+"] = "+ПолеСортировкиПокупателя+" сортировка по LIFO = "+ЗнакСортировкиПокупателя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	ВремПартии.Свернуть("ВСД_Продукция_Элемент, СерияНоменклатуры","КоличествоСписания");    // !!!
	ВремПартии.Сортировать("ВСД_Продукция_Элемент");

	Если ВремПартии.Количество() = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Нет документов к созданию ВСД ->");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено( ЗнакСортировки ) Тогда 
		ЗнакСортировкиПокупателя = ЗнакСортировки;
	КонецЕсли;
	
	тзАктуальныхПартий = кб99_ВСД.ПолучитьАктуальныеПартии(ПараметрыОрганизации, 
		ВремПартии.ВыгрузитьКолонку("ВСД_Продукция_Элемент"), 
		Объект.Отправитель_Площадка, 
		Объект.Отправитель_ХозСубъект,
		ПолеСортировкиПокупателя,
		ЗнакСортировкиПокупателя );
	
	Если НЕ (ТипЗнч(тзАктуальныхПартий) = Тип("ТаблицаЗначений")) и НЕ Объект.ПарамЗаполнятьТранзакциюПриОтсутствииПартий Тогда
		кб99_ВСД.СообщитьИнфо("Нет актуальных партий для создания Документов ");
		Возврат;
	КонецЕсли;
	
	УменьшитьАктуальныеПартииНаРаспределенные(тзАктуальныхПартий);
	
	Для Каждого стрНужныеПартии Из ВремПартии Цикл
		// Код из ЗаполнитьТЧВСД, только с отключенным Условием ПарамЗаполнятьТранзакциюПриОтсутствииПартий - покажем недостающие партии
		СтрокиПартий = кб99_ВСД.ПодобратьПартииПоПродукцияЭлемент( ПараметрыОрганизации, тзАктуальныхПартий, стрНужныеПартии.ВСД_Продукция_Элемент, стрНужныеПартии.КоличествоСписания, стрНужныеПартии.СерияНоменклатуры ); 
		Если СтрокиПартий.Количество() = 0  Тогда
			НоваяСтрока = РаспределенныеПартии.Добавить();
			НоваяСтрока.Продукция_Элемент = стрНужныеПартии.ВСД_Продукция_Элемент;
			НоваяСтрока.КоличествоСписания = стрНужныеПартии.КоличествоСписания;
			НоваяСтрока.Количество = 0;
			кб99_ВСД.СообщитьИнфо("Нет партий для ["+стрНужныеПартии.ВСД_Продукция_Элемент +"]");
		   	Продолжить;
		КонецЕсли;
		
		Для Каждого СтрПартии Из СтрокиПартий Цикл
			НоваяСтрока = РаспределенныеПартии.Добавить();
			НоваяСтрока.Партия = СтрПартии.Партия;
			НоваяСтрока.Продукция_Элемент = стрНужныеПартии.ВСД_Продукция_Элемент;
			НоваяСтрока.Количество = СтрПартии.Количество; 
			НоваяСтрока.КоличествоСписания = СтрПартии.Количество;
			НоваяСтрока.ПолеСортировки 		= СтрПартии.ПолеСортировки;
		КонецЦикла;
		
		Если (СтрокиПартий.Итог("Количество") < стрНужныеПартии.КоличествоСписания) Тогда 
			// Добавим с пустыми партиями
			НоваяСтрока = РаспределенныеПартии.Добавить();
			НоваяСтрока.Продукция_Элемент = стрНужныеПартии.ВСД_Продукция_Элемент;
			НоваяСтрока.КоличествоСписания	=  стрНужныеПартии.КоличествоСписания - СтрокиПартий.Итог("Количество") ;
			НоваяСтрока.Количество = 0; 
		КонецЕсли;
	КонецЦикла;
	Объект.Партии.Загрузить(РаспределенныеПартии);
	РаскраситьТЧПартий();
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьТаблицуПартий(Команда, ПоУмолчанию = Ложь)
	
	//Если ПоУмолчанию Тогда 
		ЗаполнитьТаблицуПартийНаСервере( Неопределено );
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаПартии;
	//Иначе
	//	СписокВыбора = Новый СписокЗначений;
	//	СписокВыбора.Добавить( Неопределено, "Заполнения по умолчанию");
	//	СписокВыбора.Добавить( Ложь, "Заполнить по FIFO");
	//	СписокВыбора.Добавить( Истина, "Заполнить по LIFO");
	//	
	//	ОписаниеОповещения = Новый ОписаниеОповещения("СписокЗаполненияПартийОбработатьВыбор",ЭтаФорма, Новый Структура );		
	//	ПоказатьВыборИзМеню( ОписаниеОповещения, СписокВыбора, Команда );	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПартийПоFIFO()
	ЗаполнитьТаблицуПартийНаСервере( Ложь );
	Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаПартии;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПартийПоLIFO()
	ЗаполнитьТаблицуПартийНаСервере( Истина );
	Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаПартии;
КонецПроцедуры


&НаСервере
Процедура ПроверитьВозможностьПеремещенияВСДПоСписку() Экспорт
	// СообщитьИнфо("Выполняется запрос условий перевозки для выделенных документов ВСД");
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	// тзОтгрузки = Объект.Отгрузки.Выгрузить();
	Для Каждого строкаТЗ Из Объект.Отгрузки Цикл
		ВыбВСД = строкаТЗ.ВСД;
		Если НЕ (ЗначениеЗаполнено(ВыбВСД)) или НЕ(строкаТЗ.Отметка) Тогда
			Продолжить;	
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыбВСД.СтатусВСД) Тогда
			Продолжить;	
		КонецЕсли;		
		Попытка
			// ПроверитьВозможностьПеремещения(ВыбВСД);
			кб99_ВСД_Запросы.ВСД2_Транзакция_УсловияПеревозки_Отправить( ПараметрыОрганизации, ВыбВСД);
		Исключение
		    кб99_ВСД.СообщитьИнфо(ОписаниеОшибки(), ВыбВСД);
		КонецПопытки;
	КонецЦикла;
	кб99_ВСД.СообщитьИнфо("-> Проверка условий перевозки Завершена ");
КонецПроцедуры

&НаСервере
Процедура кнЗапросРегионализацияНаСервере()
	ПроверитьВозможностьПеремещенияВСДПоСписку();
КонецПроцедуры

&НаКлиенте
Процедура кнЗапросРегионализация(Команда)
	ПоказатьОповещениеПользователя("Выполняется запрос условий перевозки для отмеченных документов ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗапросРегионализацияНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Функция ОтправитьВСД_НаСервере( ОтправитьБыстро )
	
	сзДокументыКОтправке = ПодготовитьСписокВСДКОтправке( Истина );	

	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	ПараметрыФункции.Вставить("СписокДокументов", сзДокументыКОтправке);
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;		
		НаименованиеЗадания = НСтр("ru = 'Ветис отправка ВСД'");
		
		Если ОтправитьБыстро Тогда 
			Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
				"кб99_ВСД_Запросы.ОтправитьВСД_Параллельно", 
				ПараметрыФункции,
				НаименованиеЗадания);
		Иначе
			Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
				"кб99_ВСД_Запросы.ОтправитьВСДвГИС", 
				ПараметрыФункции,
				НаименованиеЗадания);
		КонецЕсли;
		
		АдресХранилища       = Результат.АдресХранилища;		 //результат обработки
		ИдентификаторЗадания = Результат.ИдентификаторЗадания; //для получения сообщений
	Иначе;
		
		Если ОтправитьБыстро Тогда 
			кб99_ВСД_Запросы.ОтправитьВСД_Параллельно( ПараметрыФункции, Неопределено );
		Иначе
			кб99_ВСД_Запросы.ОтправитьВСДвГИС( ПараметрыФункции, Неопределено );
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
		
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПодготовитьСписокВСДКОтправке( ОтправлятьРанееОтправленные ) Экспорт
	
	сзДокументыКОтправке = новый Массив;
	Для Каждого СтрОтгрузка Из Объект.Отгрузки Цикл
		_ВСД = СтрОтгрузка.ВСД;
		Если НЕ(ЗначениеЗаполнено(_ВСД)) или НЕ(СтрОтгрузка.Отметка) Тогда 		
			Продолжить;    
		КонецЕсли;
		
		Если Объект.ПарамКонтроллироватьСрокГодностиПриОтправке Тогда
			Если НЕ  ПроверитьСрокиГодностиПередОтправкой(_ВСД) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(_ВСД.СтатусВСД) или _ВСД.ПометкаУдаления Тогда
			// ВСД.СообщитьИнфоСервер("Документ ["+_ВСД+"] статус=["+_ВСД.Статус+"] уже был обработан");
			Продолжить;
		КонецЕсли;
		
		applicationID = кб99_ВСД_Общий.НайтиApplicationID( _ВСД );
		Если ЗначениеЗаполнено( applicationID ) и НЕ ОтправлятьРанееОтправленные Тогда 
			Продолжить;
		КонецЕсли;
		
		сзДокументыКОтправке.Добавить(_ВСД);		
	КонецЦикла;
	
	Возврат сзДокументыКОтправке;
	
КонецФункции

&НаКлиенте
Процедура СписокОтправкаВСДОбработатьВыбор(ЗначениеВыбора, ДопПараметры) Экспорт

	Если ЗначениеВыбора = Неопределено Тогда
		ВыбЭлемент = Ложь;
	Иначе 
		ВыбЭлемент = ЗначениеВыбора.Значение
	КонецЕсли;	
	
	Результат = ОтправитьВСД_НаСервере( ВыбЭлемент );	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВсдПоследовательно(Команда)
	
	//СписокВыбора = Новый СписокЗначений;
	//СписокВыбора.Добавить( Ложь, "Отправить ВСД последовательно");
	//СписокВыбора.Добавить( Истина, "Отправить ВСД быстро");
	//
	//ОписаниеОповещения = Новый ОписаниеОповещения("СписокОтправкаВСДОбработатьВыбор", ЭтаФорма );
	//ПоказатьВыборИзСписка( ОписаниеОповещения, СписокВыбора );	
	
	ОтправитьВСД_НаСервере( Ложь );	
	
	ЗаполнитьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВсдБыстро(Команда)
	
	ОтправитьВСД_НаСервере( Истина );	
	
	ЗаполнитьТабличныеЧасти();
	
КонецПроцедуры


&НаСервере
Процедура кнПолучитьОтветВСД2НаСервере()
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	Для Каждого строкаОтгрузки Из Объект.Отгрузки Цикл
		Если строкаОтгрузки.Отметка И ЗначениеЗаполнено(строкаОтгрузки.ВСД) Тогда 
			ВыбВСД = строкаОтгрузки.ВСД;
			
			applicationID = кб99_ВСД_Общий.НайтиApplicationID( ВыбВСД );
			Если НЕ ЗначениеЗаполнено( applicationID ) Тогда 
				Продолжить;	
			КонецЕсли;
			
			кб99_ВСД_Запросы.ПолучитьРезультат_ВСД2( ПараметрыФункции, applicationID, ВыбВСД, Ложь );
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьОтветВСД2(Команда)
	ПоказатьОповещениеПользователя("Выполняется проверка ответов Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнПолучитьОтветВСД2НаСервере(  );
	кб99_ВСД.СообщитьИнфо("Проверка ответов завершена");
КонецПроцедуры

&НаСервере
Процедура кнАннулироватьВыбранныеВСДНаСервере()
	
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	Для Каждого строкаОтгрузки Из Объект.Отгрузки Цикл
		Если НЕ(ЗначениеЗаполнено(строкаОтгрузки.ВСД)) или НЕ(строкаОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		
		кб99_ВСД_Запросы.ВСД2_транзакция_Аннулировать( ПараметрыФункции, строкаОтгрузки.ВСД);
	КонецЦикла;
	
	// Перерисуем
	ОбновитьСписокРеализацийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура кнАннулироватьВыбранныеВСДОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется Аннулирование выбранных ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнАннулироватьВыбранныеВСДНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнАннулироватьВыбранныеВСД(Команда)
	// Список ВСД к Аннулированию подберем на сервере
    Оповещение = Новый ОписаниеОповещения("кнАннулироватьВыбранныеВСДОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Аннулировать выбранные транзакции ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаКлиенте
Процедура кнУстановитьСоответствия(Команда)
	
	ОткрытьФорму("Обработка.кб99_УстановкаСоответствий.Форма.Форма_СоответствияУФ");
	
КонецПроцедуры

&НаКлиенте
Процедура кнГашение(Команда)
	
	ОткрытьФорму("Обработка.кб99_ГашениеВходящихПартий.Форма.ФормаГашениеУФ", , ЭтаФорма);
	
КонецПроцедуры

// ********  Открытие доп формы окончание

&НаКлиенте
Процедура кнПечатьСтрОтгрузки(Команда)
	
	Для Каждого стрДок Из Объект.Отгрузки Цикл
		Если Стрдок.Отметка Тогда
			// ТабДок = кнПечатьВСДВнешняя(СтрДок.док,Адресобработки);
			ТабДок = кб99_ВСД.ПечатьВнешнейФормыВСД( СтрДок.ВСД );
			ТабДок.Показать();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура кнПечатьСтрОтгрузкиНаПринтер(Команда)
	Для Каждого стрДок Из Объект.Отгрузки Цикл
		Если Стрдок.Отметка Тогда
			// ТабДок = кнПечатьВСДВнешняя(СтрДок.док,Адресобработки);
			ТабДок = кб99_ВСД.ПечатьВнешнейФормыВСД( СтрДок.ВСД );
			// ТабДок.Показать();
			ТабДок.Напечатать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПечатьРеестра() Экспорт
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = Обработки.Интеграция_ГИС_Меркурий.ПолучитьМакет("Реестр");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	// ОбластьМакета.Параметры.НомерДок = СсылкаНаОбъект.Номер;
	// ОбластьМакета.Параметры.ДатаДок = Формат(СсылкаНаОбъект.Дата,"ДЛФ=Д");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Ном=0;
	Для Каждого стр Из Объект.Отгрузки Цикл				

		ном=ном+1;
		ОбластьМакета.Параметры.ном = ном;
		ОбластьМакета.Параметры.Грузополучатель = стр.Грузополучатель;
		ОбластьМакета.Параметры.ВСД = стр.ВСД;
		ОбластьМакета.Параметры.док = стр.Док;
		ОбластьМакета.Параметры.Количество = стр.Количество;
		ОбластьМакета.Параметры.Контрагент = стр.Контрагент;
		ОбластьМакета.Параметры.ИНН = стр.Контрагент.ИНН;
		ОбластьМакета.Параметры.ХозСубъект = стр.ХозСубъект;
		ОбластьМакета.Параметры.Площадка = стр.Площадка;
		
		Если Объект.РеквизитГрузополучатель = 0 Тогда     
			// стр.Грузополучатель = Контрагент
			СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(стр.Грузополучатель,  ТекущаяДата());
			// ОбластьМакета.Параметры.Адрес = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
			СтрокаАдрес="";
			СведенияОГрузополучателе.Свойство("ФактическийАдрес", СтрокаАдрес);
			ОбластьМакета.Параметры.Адрес = СтрокаАдрес;
		Иначе
			ОбластьМакета.Параметры.Адрес = стр.Грузополучатель;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ВСД";
	
	Возврат ТабДокумент;
	
КонецФункции


&НаКлиенте
Процедура кнПечатьРеестр(Команда)
	
	ТабДок = ПечатьРеестра();
	ТабДок.Показать();
	
КонецПроцедуры

// *************  Форма стр 1 события тз Реализации
&НаКлиенте
Процедура ОтгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтгрузкиВСДОчисткаНаСервере(ДокСсылка)
	Попытка
		Если НЕ(ДокСсылка = Документы.ВСД2_транзакция.ПустаяСсылка()) Тогда 
			ДокОбъект = ДокСсылка.ПОлучитьОбъект();
			Если ЗначениеЗаполнено(ДокОбъект.СтатусВСД) Тогда
				Сообщить(""+ДокОбъект+" зарегистрирован в Меркурий - удаление невозможно");
				Возврат false;
			КонецЕсли;
			ДокОбъект.УстановитьПометкуУдаления(ИСТИНА);
			Возврат true;
		КонецЕсли;		
	Исключение
		Возврат false;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ОтгрузкиВСДОчисткаОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ОтгрузкиВСДОчисткаНаСервере(Парам.ДокСсылка) Тогда
			Парам.Элемент.Родитель.ТекущиеДанные.сЦвет = 0;
			Парам.Элемент.Родитель.ТекущиеДанные.ВСД = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОтгрузкиВСДОчистка(Элемент, СтандартнаяОбработка)
	// Пометим на удаление док ВСД
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.ВСД) Тогда 
		ДокСсылка = Элемент.Родитель.ТекущиеДанные.ВСД;
		Если ЗначениеЗаполнено(кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ДокСсылка,"СтатусВСД")) Тогда
			кб99_ВСД.СообщитьИнфо(""+ДокСсылка+" зарегистрирован в Меркурий - удаление невозможно");
			Возврат;
		КонецЕсли;
		Парам = новый Структура("ДокСсылка,Элемент",ДокСсылка,Элемент);
    	Оповещение = Новый ОписаниеОповещения("ОтгрузкиВСДОчисткаОтвет",ЭтаФорма,Парам);	
    	ПоказатьВопрос(Оповещение, "Удалить "+ДокСсылка+" ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтгрузкиПлощадкаОчисткаНаСервере(ПлощадкаСсылка)
	Попытка
		Если НЕ(ПлощадкаСсылка = Справочники.ВСД_Площадка.ПустаяСсылка()) Тогда 
			СпрОб = ПлощадкаСсылка.ПОлучитьОбъект();
			СпрОб.Контрагент = "";
			СпрОб.Записать();
		КонецЕсли;		
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаОчистка(Элемент, СтандартнаяОбработка)
	// Отвяжем площадку от контрагента
//	СтандартнаяОбработка = Ложь;
//    ПредупреждениеПользователю("Отвязка Площадки из формы в Разработке");
//	Возврат;	
	ОтгрузкиПлощадкаОчисткаНаСервере(Элемент.Родитель.ТекущиеДанные.Площадка);
	Элемент.Родитель.ТекущиеДанные.сЦвет = 2;  //Желтый
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтгрузкиПлощадкаПриИзмененииНаСервере( ПлощадкаСсылка, НовыйКонтрагент )
	Если НЕ (ПлощадкаСсылка = Справочники.ВСД_Площадка.ПустаяСсылка()) Тогда 
		СпрОб = ПлощадкаСсылка.ПОлучитьОбъект();
		СпрОб.Контрагент = НовыйКонтрагент;
		СпрОб.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаПриИзменении(Элемент)
	
	// очищаем привязку старой площадки
	Если ЗначениеЗаполнено( ОчиститьПлощадку ) Тогда 
		ОтгрузкиПлощадкаПриИзмененииНаСервере( ОчиститьПлощадку, Неопределено );
		ОчиститьПлощадку = Неопределено;
	КонецЕсли;
	
	// установим новую привязку плоащадки к грузополучателю
	ОтгрузкиПлощадкаПриИзмененииНаСервере( Элемент.Родитель.ТекущиеДанные.Площадка, Элемент.Родитель.ТекущиеДанные.Грузополучатель );
	Если ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.Площадка) Тогда
		Элемент.Родитель.ТекущиеДанные.сЦвет = 0;
	Иначе
		Элемент.Родитель.ТекущиеДанные.сЦвет = 2;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Выбор_ВСД_Площадка = Элемент.Родитель.ТекущиеДанные.Площадка; // для последующего удаления привязки - в переменную формы !
	// Отвяжем сразу без вопросов
	ОчиститьПлощадку = Элемент.Родитель.ТекущиеДанные.Площадка;
	// ОтгрузкиПлощадкаОчисткаНаСервере(Элемент.Родитель.ТекущиеДанные.Площадка);
	// Отбор по ХС включим
	// ГУИДХСдляОтбора = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Элемент.Родитель.ТекущиеДанные.ХозСубъект,"GUID");
	// ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	// ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ЗначениеОтбора = Новый Структура("ХозСубъект", Элемент.Родитель.ТекущиеДанные.ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

// *********** Вкладка Партии

&НаСервере
Процедура СоздатьВсдНаСервере()
	
	Если Объект.Партии.Количество()=0 Тогда
		кб99_ВСД.СообщитьИнфо("Не заполнена таблица партий.");
		Возврат;
	КонецЕсли;
		
	тзАктуальныхПартий = Объект.Партии.Выгрузить();
	
	Для Каждого СтрОтгрузки Из Объект.Отгрузки Цикл
		Если НЕ(СтрОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрОтгрузки.ВСД <> Неопределено Тогда
			Если СтрОтгрузки.ВСД.Проведен Тогда
				кб99_ВСД.СообщитьИнфо("Для "+СтрОтгрузки.Док+" уже отправлен "+СтрОтгрузки.ВСД);
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрОтгрузки.ВСД.СтатусВСД) Тогда 
				кб99_ВСД.СообщитьИнфо("Для "+СтрОтгрузки.Док+" ВСД уже создан, но не отправлен");
				Продолжить;
			КонецЕсли;		
		КонецЕсли;		
		
		Если НЕ(ЗначениеЗаполнено(СтрОтгрузки.Площадка)) или НЕ(ЗначениеЗаполнено(СтрОтгрузки.ХозСубъект)) Тогда
			кб99_ВСД.СообщитьИнфо("Для "+СтрОтгрузки.Док+" неизвестен ХС или Площадка получателя ");
			Продолжить;
		КонецЕсли;
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Получатель_ХозСубъект", СтрОтгрузки.ХозСубъект );
		ПараметрыДокумента.Вставить("Получатель_Площадка", СтрОтгрузки.Площадка );
		ПараметрыДокумента.Вставить("Отправитель_Площадка", Объект.Отправитель_Площадка );
		ПараметрыДокумента.Вставить("ДокОснование", СтрОтгрузки.Док);
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ПараметрыДокумента", ПараметрыДокумента);
		ПараметрыЗаполнения.Вставить("ДокументОснование", СтрОтгрузки.Док);
		ПараметрыЗаполнения.Вставить("тзАктуальныхПартий", тзАктуальныхПартий);
		
		ДокВСД = Документы.ВСД2_Транзакция.СоздатьДокумент();
		ДокВСД.Заполнить( ПараметрыЗаполнения );
		ДокВСД.Записать();
		
		СтрОтгрузки.ВСД = ДокВСД.Ссылка;		
		кб99_ВСД.СообщитьИнфо("["+СтрОтгрузки.Грузополучатель+"] создан документ "+СтрОтгрузки.ВСД, СтрОтгрузки.ВСД);		
				
	КонецЦикла;								

КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьВСДОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Создаем ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		
		СоздатьВСДНаСервере();
		
		ПоказатьОповещениеПользователя("Выполнено");
		
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтгрузки;
		ЭтаФорма.ТекущийЭлемент = Элементы.ДатаНачалаОтбора;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьВСД(Команда)
	
	Если Объект.Партии.Количество() = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Нет Партий для создания ВСД ");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("кнСоздатьВСДОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Создать ВСД на отмеченные Накладные ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
	
КонецПроцедуры

&НаСервере
Процедура РаскраситьТЧПартий() 
	Для Каждого ДанныеСтроки Из Объект.Партии Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Продукция_Элемент) Тогда
			 ДанныеСтроки.сЦвет = 1;   // красный
		ИначеЕсли ДанныеСтроки.Партия = Справочники.ВСД_Партия.ПустаяСсылка()И НЕ ДанныеСтроки.Количество >= ДанныеСтроки.КоличествоСписания Тогда
			ДанныеСтроки.сЦвет = 2;   // желтый
		ИначеЕсли ДанныеСтроки.Количество < ДанныеСтроки.КоличествоСписания Тогда
			ДанныеСтроки.сЦвет = 1;   // красный
		ИначеЕсли ДанныеСтроки.Количество >= ДанныеСтроки.КоличествоСписания Тогда
			ДанныеСтроки.сЦвет = 3;  // зеленый
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ВСД_Производство) Тогда
			
			Отбор = Новый Структура( "Объект", Объект);
			Обращение = РегистрыСведений.кб99_Запросы.ПолучитьПоследнее(ТекущаяДата(), Отбор );
			
			Если ЗначениеЗаполнено( Обращение.ApplicationID ) И ( Обращение.СтатусЗапроса <> "COMPLETED") Тогда
				ДанныеСтроки.сЦвет = 1;   // красный
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры


&НаСервере
Функция СоздатьВСДПроизводствоНаСервере( ВыбДата )
	
	ДокВСД = Документы.ВСД2_Производство.СоздатьДокумент(); 
	//ДокВСД.Дата = ВыбДата; 		
	ДокВСД.Дата = ТекущаяДата(); 		
	ДокВСД.Организация = Объект.Организация;
	ДокВСД.Производитель_ХозСубъект = Объект.Отправитель_ХозСубъект;
	ДокВСД.Производитель_площадка = Объект.Отправитель_Площадка;
	
	ДокВСД.РезультатыИсследований = Объект.ВСД_РезультатыИсследований;
	ДокВСД.cargoInspected	= Истина;
	ДокВСД.НомерПартии = Формат(ВыбДата, "ДЛФ=Д");				
	
	стрПараметры = Новый Структура;
	стрПараметры.Вставить("тзПартии", Объект.Партии.Выгрузить() );
	стрПараметры.Вставить("ВыбДата", ВыбДата );
	
	ДокВСД.Заполнить( стрПараметры );
	ДокВСД.Записать();

		
	Для Каждого стрПартий Из Объект.Партии Цикл
		Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент)) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+"  не указан ВСД_Продукция_Элемент. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стрПартий.ВСД_Производство) Тогда
			Продолжить;	
		КонецЕсли;
		Если ЗначениеЗаполнено(стрПартий.Партия) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" указана партия. Пропускаем...");
			Продолжить;
		КонецЕсли;
		Если СтрПартий.КоличествоСписания <= СтрПартий.Количество Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент.ЕдиницаИзмерения)) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.Продукция_Элемент.Наименование)+" не указана Единица измерения. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.Продукция_Элемент.СрокГодности)) Тогда
			кб99_ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.Продукция_Элемент.Наименование)+" не указан Срок годности. Пропускаем...");
			Продолжить;
		КонецЕсли;
		// Возможно несколько производителей-площадок  / продумать
		// Если НЕ(стрПартий.ВСД_Продукция_Элемент.Площадка = Отправитель_Площадка)  Тогда
		//	ВСД.СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.ВСД_Продукция_Элемент.Наименование)+" Производителем является "+стрПартий.ВСД_Продукция_Элемент.Площадка+". Пропускаем...");
		//	Продолжить;
		// КонецЕсли;
		
		стрПартий.ВСД_Производство = ДокВСД.Ссылка;
		
		кб99_ВСД.СообщитьИнфо(" создан документ "+ДокВСД.Ссылка, ДокВСД.Ссылка);		
	КонецЦикла;
	РаскраситьТЧПартий();
		
	Возврат ДокВСД.Ссылка;
	 
КонецФункции

&НаКлиенте
Процедура ПослеВводаДатыПроизводство(ВыбДата,Парам) Экспорт
	Если ВыбДата = Неопределено Тогда
		кб99_ВСД.СообщитьИнфо("Отменено");
		Возврат;
	Иначе		
		ДокВСД = СоздатьВСДПроизводствоНаСервере(ВыбДата);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПроизводствоОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыПроизводство", ЭтаФорма);	
    	ВыбДата = Объект.ДатаНачалаОтбора;
    	ПоказатьВводДаты( Оповещение, ВыбДата , "Введите дату выпуска для создания документов Производство",  ЧастиДаты.Дата);		
	КонецЕсли;		
КонецПроцедуры


&НаКлиенте
Процедура кнПроизводство(Команда)
	Если Объект.Партии.Количество() = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Нет данных в таблице ");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнПроизводствоОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Создать производственные ВСД на недостающую продукцию ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Процедура ОтправитьВСД2_ПроизводствоНаСервере( СписокВСД ) Экспорт
	
	кб99_ВСД.СообщитьИнфо("Начало отправки документов");
	
 	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_Производство.Ссылка
	               |ИЗ
	               |	Документ.ВСД2_Производство КАК ВСД_Производство
	               |ГДЕ
	               |	ВСД_Производство.Производитель_ХозСубъект = &ВыбХС
	               |	И ВСД_Производство.ПометкаУдаления = ЛОЖЬ
	               |	И ВСД_Производство.Проведен = ЛОЖЬ
	               |	И ВСД_Производство.Ссылка В (&СписокВСД)";

	Запрос.УстановитьПараметр("СписокВСД", СписокВСД );
	Запрос.УстановитьПараметр("ВыбХС", Объект.Отправитель_Хозсубъект);
	
	СписокВСД.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	ПараметрыОрганизации.Вставить("ВыбПлощадка",Объект.Отправитель_Площадка);

	Для Каждого ДокВСД Из СписокВСД Цикл
		ВСДСсылка = ДокВСД.Значение ;
		
		кб99_ВСД_Запросы.ВСД2_Производство_Отправить( ПараметрыОрганизации, ВСДСсылка );

	КонецЦикла;
	
	кб99_ВСД.СообщитьИнфо("Отправка документов завершена");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводствоОтправить(Команда)
	
	СЗДок = Новый СписокЗначений;
	Для Каждого стр Из Объект.Партии Цикл				
		Если ЗначениеЗаполнено(стр.ВСД_Производство) Тогда
			Если Объект.ПарамКонтроллироватьСрокГодностиПриОтправке Тогда
				Если ПроверитьСрокиГодностиПередОтправкой(стр.ВСД_Производство) Тогда
					СЗДок.Добавить(стр.ВСД_Производство);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе	
			СЗДок.Добавить(стр.ВСД_Производство);
		КонецЕсли;		
	КонецЦикла;	
	
	Если СзДок.Количество() = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Нет производственных ВСД для отправки");
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя("Выполняется отправка производственных ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	
	ОтправитьВСД2_ПроизводствоНаСервере(СзДок);
	ЗаполнитьТаблицуПартийНаСервере( Неопределено );
		
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьОтветВСДПроизводство(Команда)
	
	сзДокументыКОтправке = новый СписокЗначений;
	Для Каждого строкаТЗ Из Объект.Партии Цикл
		ВыбВСД = строкаТЗ.ВСД_Производство;
		Если НЕ ЗначениеЗаполнено(ВыбВСД) Тогда
			Продолжить;	
		КонецЕсли;
		_applicationID = кб99_ВСД_Общий.НайтиApplicationID( ВыбВСД );
		Если (НЕ ЗначениеЗаполнено(_applicationID)) Тогда
			Продолжить;	
		КонецЕсли;
		сзДокументыКОтправке.Добавить(ВыбВСД);
		кб99_ВСД.СообщитьИнфо(""+ВыбВСД+" Добавлен в очередь на проверку ответа Меркурий");
	КонецЦикла;
	
	Если сзДокументыКОтправке.Количество() > 0 Тогда
		// ВСД.СообщитьИнфо("Выполняется запрос ответов от ВЕТИС на отправленные документы из списка партий без ответа");
		ПоказатьОповещениеПользователя("Выполняется запрос ответов в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнПолучитьОтветВСД2НаСервере(  );
		ПоказатьОповещениеПользователя("Выполнено");
	Иначе
		кб99_ВСД.СообщитьИнфо("Не выбрано документов к проверке");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры


&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект, СписокКонстант ); 
	
	ЗаполнитьТабличныеЧасти(флПеремещения);
	
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура Отправитель_ПлощадкаНаФормеПриИзмененииНаСервере()
	
	ЗаполнитьТабличныеЧасти(флПеремещения);	
	
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ПлощадкаНаФормеПриИзменении(Элемент)
	Отправитель_ПлощадкаНаФормеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РаскраситьТЧОтгрузки() Экспорт
	
	Для Каждого ДанныеСтроки Из Объект.Отгрузки Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ВСД) Тогда
			ДокОб = ДанныеСтроки.ВСД.ПолучитьОбъект(); // !!!
			Запрос = кб99_ВСД_Общий.НайтиПоследнийЗапрос( ДанныеСтроки.ВСД );
			СтатусЗапроса = Запрос.СтатусЗапроса;
			СтатусВСД = ДокОб.СтатусВСД;
		Иначе
			СтатусВСД = "";
			СтатусЗапроса = "";
		КонецЕсли;
		
		Если ПустаяСтрока(ДанныеСтроки.ХозСубъект.GUID)Тогда
			ДанныеСтроки.Сцвет = 1;   // красный
		ИначеЕсли ДанныеСтроки.Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда
			ДанныеСтроки.Сцвет = 2;  // желтый
		//ИначеЕсли ДанныеСтроки.ВСД = Неопределено Тогда
			// ОформлениеСтроки.ЦветФона = Новый Цвет(0, 150, 26);   
		//ИначеЕсли СтатусВСД = "COMPLETED" Тогда
		//	ДанныеСтроки.Сцвет = 3;   
		ИначеЕсли СтатусВСД = Перечисления.кб99_СтатусВСД.CONFIRMED Тогда 
			ДанныеСтроки.Сцвет = 3;   
		ИначеЕсли СтатусВСД = Перечисления.кб99_СтатусВСД.WITHDRAWN Тогда 
			ДанныеСтроки.Сцвет = 4;   
		ИначеЕсли СтатусЗапроса = "REJECTED" Тогда
			ДанныеСтроки.Сцвет = 4;   
		ИначеЕсли СтатусЗапроса = "IN_PROCESS" Тогда
			ДанныеСтроки.Сцвет = 5;  
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//// Заполняет табличные части обработки документами
////
//// Параметры:
////	Перемещения
////
//// Возвращаемое значение:
////	Булево - Истина, если успешно выполнено заполнение, Иначе Ложь
////
//// Автозаполнение
&НаСервере
Функция ЗаполнитьТабличныеЧасти( Перемещения = Ложь ) Экспорт

	Объект.Отгрузки.Очистить();
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("Организации", Объект.Организация);
	ПараметрыФункции.Вставить("ПлощадкаОтправителя", Объект.Отправитель_Площадка);
	ПараметрыФункции.Вставить("ДатаНачала", Объект.ДатаНачалаОтбора);
	ПараметрыФункции.Вставить("ДатаОкончания", Объект.ДатаОкончанияОтбора);
	ПараметрыФункции.Вставить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя", Объект.ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя);
	ПараметрыФункции.Вставить("Маршрут", Объект.Маршрут);
	ПараметрыФункции.Вставить("ПропускатьПустыеСвойства", Объект.ПропускатьПустыеСвойства);
	ПараметрыФункции.Вставить("РеквизитГрузополучатель", Объект.РеквизитГрузополучатель);
	ПараметрыФункции.Вставить("ПарамКоэффициентПересчетаКоличества", Объект.ПарамКоэффициентПересчетаКоличества);
	ПараметрыФункции.Вставить("НазваниеРеквизитаКоличество", Объект.НазваниеРеквизитаКоличество);
	ПараметрыФункции.Вставить("НазваниеРеквизитаКоличествоМест", Объект.НазваниеРеквизитаКоличествоМест);
		
	Если Перемещения Тогда
		РезультатЗапроса = кб99_ВСД_Общий.СформироватьЗапросПеремещения( ПараметрыФункции );
	Иначе
		РезультатЗапроса = кб99_ВСД_Общий.ПолучитьТзРеализаций( ПараметрыФункции );
	КонецЕсли;
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Объект.Отгрузки.Загрузить(РезультатЗапроса.Выгрузить());
	Если Перемещения Тогда
		// ЖД Вероятно это все можно в запросе сделать
		// ну а так возъмем из текущих параметров
		Для Каждого СтрОтгрузки Из Объект.Отгрузки Цикл
			СтрОтгрузки.ХозСубъект = Объект.Отправитель_Хозсубъект;
			СтрОтгрузки.Контрагент = Объект.Отправитель_Хозсубъект.Контрагент;
		КонецЦикла;
	КонецЕсли;
	
	// Очистим ТЗ Партий
	Объект.Партии.Очистить();
	РаскраситьТЧОтгрузки();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДатаНачалаОтбора = НачалоДня(ТекущаяДата());
	Объект.ДатаОкончанияОтбора = КонецДня(ТекущаяДата());
	
	Объект.Организация = кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект, СписокКонстант ); 
	
	ЗаполнитьТабличныеЧасти(флПеремещения);
	
КонецПроцедуры

#Область Инвентаризация 
&НаСервере
Функция СоздатьИнвентаризациюНаСервере()
	
	ДокВСД = Документы.ВСД2_Инвентаризация.СоздатьДокумент();
	
	ДокВСД.Дата = Объект.ДатаНачалаОтбора; 
	ДокВСД.Организация = Объект.Организация;
	ДокВСД.Владелец_ХозСубъект = Объект.Отправитель_ХозСубъект;
	ДокВСД.Владелец_площадка = Объект.Отправитель_Площадка;
	ДокВСД.ПричинаРасхождения = "Инвентаризация партий";
	ДокВСД.ОписаниеНесоответствия = "Инвентаризация партий";
	
	ДокВСД.Заполнить( Объект.Партии.Выгрузить() );
	ДокВСД.Записать();

	Возврат ДокВСД.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура СоздатьИнвентаризацию(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДокВСД = СоздатьИнвентаризациюНаСервере();
		ОткрытьФорму("Документ.ВСД2_Инвентаризация.ФормаОбъекта",Новый Структура("Ключ", ДокВСД));	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьИнвентаризацию(Команда)
	ТВопроса = "Создать ВСД2_Инвентаризация по списку недостающих партий ?";
    Оповещение = Новый ОписаниеОповещения("СоздатьИнвентаризацию",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

#КонецОбласти

#Область ВнутреннееПеремещение 

&НаСервере
Функция ЗаполнитьТабЧастьЭлементовДляСозданияВСД( ) Экспорт
	
	РезТаб = Новый ТаблицаЗначений;
	РезТаб.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РезТаб.Колонки.Добавить("Продукция_Элемент",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция_Элемент"));
	РезТаб.Колонки.Добавить("Количество",новый ОписаниеТипов("Число"));
	РезТаб.Колонки.Добавить("Упаковки"); 
	
	Для Каждого стрПартии Из Объект.Партии Цикл
		Если НЕ(ЗначениеЗаполнено(стрПартии.Продукция_Элемент)) Тогда
			Продолжить;	
		КонецЕсли;
		Если (стрПартии.КоличествоСписания - стрПартии.Количество) <= 0 Тогда 
			Продолжить; // пропустим то что есть в наличии				
		КонецЕсли;			
		стрТаб = Резтаб.Добавить();
		стрТаб.Продукция_Элемент = стрПартии.Продукция_Элемент;
		стрТаб.Количество = стрПартии.КоличествоСписания - стрПартии.Количество;
	КонецЦикла;

	Возврат резТаб;
КонецФункции

&НаСервере
// ПолучитьДанныеДляСозданияВСДПеремещения
Функция ВСД_Перемещение_Отправить(  ) Экспорт
	
    ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Организация", Объект.ПарамПоставщикОрганизация);
	ПараметрыДокумента.Вставить("Отправитель_Хозсубъект", Объект.ПарамПоставщикХозСубъект);
	ПараметрыДокумента.Вставить("Отправитель_Площадка", Объект.ПарамПоставщикПлощадка);
	ПараметрыДокумента.Вставить("ОрганизацияПолучатель", Объект.Организация);
	ПараметрыДокумента.Вставить("Получатель_Хозсубъект", Объект.Отправитель_Хозсубъект);
	ПараметрыДокумента.Вставить("Получатель_Площадка", Объект.Отправитель_Площадка);
	ПараметрыДокумента.Вставить("ДокОснование", Неопределено);	
	ПараметрыДокумента.Вставить("ТтнНомер","1");	
	
	тзТовары = ЗаполнитьТабЧастьЭлементовДляСозданияВСД( );
	ПараметрыДокумента.Вставить("Товары", тзТовары );	
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПараметрыДокумента", ПараметрыДокумента);
	ПараметрыЗаполнения.Вставить("ДокументОснование", Неопределено);
	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Объект.ПарамПоставщикОрганизация );
	тзАктуальныхПартий = кб99_ВСД.ПолучитьАктуальныеПартии(СписокКонстант, тзТовары.ВыгрузитьКолонку("Продукция_Элемент"), Объект.ПарамПоставщикПлощадка, Объект.ПарамПоставщикХозСубъект );
	ПараметрыЗаполнения.Вставить("тзАктуальныхПартий", тзАктуальныхПартий);	
	
	ДокВСД = Документы.ВСД2_Транзакция.СоздатьДокумент();
	ДокВСД.Заполнить( ПараметрыЗаполнения );
	ДокВСД.Записать();
		
	Возврат ДокВСД.Ссылка;
КонецФункции

&НаКлиенте
Функция ВнутреннееПеремещение() Экспорт
	
	Если (НЕ ЗначениеЗаполнено(Объект.ПарамПоставщикОрганизация)) или
		(НЕ ЗначениеЗаполнено(Объект.ПарамПоставщикХозСубъект)) или
		(НЕ ЗначениеЗаполнено(Объект.ПарамПоставщикПлощадка)) Тогда
		Сообщить("Не заполнены параметры [Основной Постащик]");
		Возврат "НЕТПАРАМЕТРОВ";
	КонецЕсли;
	
	ДокВСД = ВСД_Перемещение_Отправить();	
	ОткрытьФорму("Документ.ВСД2_транзакция.ФормаОбъекта",Новый Структура("Ключ", ДокВСД));	
		
КонецФункции

&НаКлиенте
Процедура кнПереместитьОтПоставщикаОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется пермещение..",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		ВнутреннееПеремещение();
		// Рез = кнПереместитьОтПоставщикаНаСервере();	
		// Если Рез = "ОК" Тогда
		//	кнЗаполнитьТаблицуПартий("");
		// ИначеЕсли Рез = "ОШИБКААВТОГАШЕНИЯ" Тогда
		//	// ??? для УФ не прокатит
		//	Форма = ПолучитьФорму("ФормаГашение");
		//	ОткрытьФормуМодально(Форма);
		// КонецЕсли;
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПереместитьОтПоставщика(Команда)
	// ПредупреждениеПользователю("В Разработке");
	ТВопроса = "Создать ВСД2_Транзакцию по списку недостающих партий
	|на перемещение от "+Объект.ПарамПоставщикПлощадка+ " ?";
    Оповещение = Новый ОписаниеОповещения("кнПереместитьОтПоставщикаОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

#КонецОбласти

#Область ЛабИсследования 

&НаКлиенте
Процедура кнОформитьЛабИсследованияОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДокОснование = Новый Структура;
		Для Каждого стр Из Объект.Партии Цикл
			Если ЗначениеЗаполнено(стр.ВСД_Производство) Тогда
				ДокОснование.Вставить("Док", стр.ВСД_Производство);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ДокОснование) Тогда
			формЛаб = ОткрытьФорму("Обработка.кб99_ЛабИсследования.Форма.Форма",ДокОснование);
		Иначе
			кб99_ВСД.СообщитьИнфо("Нет производственных ВСД для создания лабораторных исследований или документ не оформлен!");
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура кнОформитьЛабИсследования(Команда)
	
	Если Объект.Партии.Количество() = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Нет Партий для оформления лабораторных исследований. ");
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("кнОформитьЛабИсследованияОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Оформить лабораторные исследования на выбранные партии?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьПараметры(Команда)
	ОткрытьФорму("Обработка.кб99_Параметры.Форма.ФормаПараметры", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПеремещения(Команда)
	ПоказатьОповещениеПользователя("Выполняется поиск документов для создания ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	флПеремещения = Истина;
	ЗаполнитьТабличныеЧасти( флПеремещения );
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументов(Элемент)
	ЗаполнитьТабличныеЧасти( флПеремещения );
КонецПроцедуры

&НаКлиенте
Процедура ПартииПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = СтруктураОтбораПартий( Элемент.Родитель.ТекущиеДанные.Продукция_Элемент , Объект.Отправитель_Площадка, Объект.Отправитель_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина, СтруктураОтбора);	
	
	ОткрытьФорму("Справочник.ВСД_Партия.ФормаВыбора", ПараметрыПодбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураОтбораПартий( Выб_Продукция_Элемент = Неопределено, Выб_Получатель_Площадка, Выб_Получатель_ХозСубъект) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Получатель_Площадка", Объект.Отправитель_Площадка);
	СтруктураОтбора.Вставить("Получатель_ХозСубъект", Объект.Отправитель_ХозСубъект);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	Если ЗначениеЗаполнено(Выб_Продукция_Элемент) Тогда 
		СтруктураОтбора.Вставить("Продукция_Элемент", Выб_Продукция_Элемент);
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаКлиенте
Процедура ПартииПартияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПарамКолонкаСортировкиПартииСписания) Тогда 
		ПолеСортировки = Объект.ПарамКолонкаСортировкиПартииСписания;
	Иначе
		ПолеСортировки = "ДатаИзменения";
	КонецЕсли;
	Стр = Элементы.Партии.ТекущиеДанные;
	Стр.ПолеСортировки = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Стр.Партия,ПолеСортировки);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСрокиГодностиПередОтправкой(Знач ДокСсылка)
	
	Докобъект = ДокСсылка.ПолучитьОбъект();
	Рез = Истина;
	тчПартии = ?(ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_Транзакция"),ДокОбъект.Товары, ДокОбъект.ПартииСписания);
	ДокОбъект.Комментарий = "";
	
	Для Каждого Стр Из тчПартии Цикл
		ДатаСрокГодности2 = кб99_ВСД_Запросы.СтрокаВДатаВремя(Стр.Партия.ДатаСрокГодности2);
		ДатаСрокГодности1 = кб99_ВСД_Запросы.СтрокаВДатаВремя(Стр.Партия.ДатаСрокГодности1);
		Если ЗначениеЗаполнено(ДатаСрокГодности2) Тогда
			Если ДатаСрокГодности2 - Объект.СрокГодностиДней * 86400 <= ТекущаяДата() Тогда
				кб99_ВСД.СообщитьИнфо("В документе " + ДокОбъект + " Выбранна просроченная партия По срокам годности2 (менее "+ Объект.СрокГодностиДней +" дней до окончания срока) в строке "+Стр.НомерСтроки+"!", ДокСсылка);
				Рез = Ложь;
				ДокОбъект.Комментарий  = ДокОбъект.Комментарий +  "В строке "+Стр.НомерСтроки+ " выбранна просроченная партия по срокам годности2 (менее "+ Объект.СрокГодностиДней +" дней до окончания срока)!";
			Иначе
				Если Рез = Истина Тогда
					Рез = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ДатаСрокГодности1 - Объект.СрокГодностиДней * 86400 <= ТекущаяДата() Тогда
				кб99_ВСД.СообщитьИнфо("В документе " + ДокОбъект + " Выбранна просроченная партия По срокам годности (менее "+ Объект.СрокГодностиДней +" дней до окончания срока) в строке "+Стр.НомерСтроки + "!", ДокСсылка);
				Рез = Ложь;
				ДокОбъект.Комментарий  = ДокОбъект.Комментарий +  "В строке "+Стр.НомерСтроки+ " выбранна просроченная партия по срокам годности (менее "+ Объект.СрокГодностиДней +" дней до окончания срока)!";
			Иначе
				Если Рез = Истина Тогда
					Рез = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДокОбъект.Записать();
	Возврат Рез;
	
КонецФункции