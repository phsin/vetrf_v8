&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем АдресПараметров Экспорт;

&НаКлиенте
Перем ОчиститьПлощадку;

#Область НемодальныеОкна
&НаКлиенте
Процедура ПредупреждениеПользователю(ТекстПредупреждения) Экспорт
    Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждения", ЭтаФорма);	
    ПоказатьПредупреждение( Оповещение,   ТекстПредупреждения,   0,   "Предупреждение" );
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеЗакрытияПредупреждения(Параметры) Экспорт	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьСообщенияНаСервере( ) 
    
	// Сообщения=ПолучитьСообщенияПользователю(Истина);
	Попытка		
		Сообщения = ДлительныеОперации.СообщенияПользователю( Истина, ИдентификаторЗадания );
	Исключение
		// если в ОбщемМодуле нет функции 
		// например в Бухгалтерии 2.0
		Сообщения = ВСД_Общий.СообщенияПользователю( Истина, ИдентификаторЗадания );
	КонецПопытки;
	
 	Возврат Сообщения;
    
КонецФункции

&НаКлиенте
Функция ВыбратьФайл()
	// Временный вариант для тестирования, т.к Компонента.LogFileName вызывает ступор системы
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл ответа на запрос";
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "XML (*result.xml)|*result.xml"; 
	Диалог.Фильтр = Фильтр; 
    Диалог.МножественныйВыбор = Ложь;
	// Диалог.Каталог = "F:\";
	Если Диалог.Выбрать() Тогда
		Возврат Диалог.ПолноеИмяФайла;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции   

Функция ПутьКфайлуИзПолного(ПутьИИмяВход)
	// mista
	ПутьИИмя = ПутьИИмяВход;
	Путь = "";
	Имя  = "";
	ПозСлэш = Найти(ПутьИИмя,"\");
	Пока ПозСлэш > 0 Цикл
    	Путь = Путь+Сред(ПутьИИмя,1,ПозСлэш);
	    ПутьИИмя = Сред(ПутьИИмя,ПозСлэш+1);
    	ПозСлэш = Найти(ПутьИИмя,"\");
	КонецЦикла;
	Имя = ПутьИИмя;
	Возврат Путь;
//	КаталогОбработок = Путь;
//	ИмяОбработкиИнтеграции = Имя;
	// Сообщить(Путь);
	// Сообщить(Имя);	
КонецФункции

// Реквизит на форме - текущая площадка = Объект Отправитель_Площадка
&НаКлиенте
Процедура Отправитель_ПлощадкаНаФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отбор по ХС включим
	// ГУИДХСдляОтбора = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Объект.Отправитель_ХозСубъект,"GUID");
	// ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	// ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ЗначениеОтбора = Новый Структура("ХозСубъект", Объект.Отправитель_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина, ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

// ************ Сведения о ХС и Площадках

&НаСервере
Функция кнХозСубъект_ПолучитьGuidПоИНН_НаСервере(ВыбХозСубъект) Экспорт
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;

		ПараметрыФункции["ВыбХозСубъект"] = ВыбХозСубъект;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос GUID ХозСубъекта'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.ХозСубъект_ПолучитьGuidПоИНН_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.ХозСубъект_ПолучитьGuidПоИНН( ПараметрыФункции, ВыбХозСубъект );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;	
КонецФункции

&НаКлиенте
Процедура кнХозСубъект_ПолучитьGuidПоИНН(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект)) Тогда
		ПредупреждениеПользователю("Не выбран Хозсубъект !");
		Возврат;	
	КонецЕсли;
	ПоказатьОповещениеПользователя("Выполняем запрос GUID ХозСубъекта",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	// ХС_ПолучитьGuid_Сервер(ВыбранныйХС);
	Результат = кнХозСубъект_ПолучитьGuidПоИНН_НаСервере(ВыбХозСубъект);
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция кнЗагрузитьПлощадкиПоХозСубъектуНаСервере(ВыбХозСубъект)	Экспорт
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
	
		ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
		ПараметрыФункции["ВыбХозСубъект"] = ВыбХозСубъект;
		ПараметрыФункции["ЗагрузитьПлощадку"] = Истина;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос GUID ХозСубъекта'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту( ПараметрыФункции, ВыбХозСубъект, Истина );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;	

КонецФункции

&НаКлиенте
Процедура кнЗагрузитьПлощадкиПоХозСубъекту(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	// ЗагрузитьПлощадки_Сервер(ВыбранныйХС);
	Результат = кнЗагрузитьПлощадкиПоХозСубъектуНаСервере( ВыбХозСубъект );	
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПлощадкиСпискомПоХозСубъекту_Сервер( )
	// ФОбъект = РеквизитФормыВЗначение("Объект");
	тзСвертка = Объект.Отгрузки.Выгрузить();
	тзСвертка.Свернуть("Отметка, Контрагент, ХозСубъект",);
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );	
	ПараметрыФункции.Вставить("тзКонтрагенты", тзСвертка );
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос Площадок, привязанных к ХозСубъекту'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.Площадки_ЗагрузитьСписокПоХозСубъекту",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.Площадки_ЗагрузитьСписокПоХозСубъекту( ПараметрыФункции, "" );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	// отменяем пометки в ТЧ
	Для Каждого ДанныеСтроки Из Объект.Отгрузки Цикл
		// Если ЗначениеЗаполнено(ДанныеСтроки.ХозСубъект.GUID)Тогда
			ДанныеСтроки.Отметка = Ложь;
		// КонецЕсли;
	КонецЦикла;
	
	ОбновитьСписокРеализацийНаСервере();	
	
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоСпискуДокументов(Команда)

	ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Результат = ЗагрузитьПлощадкиСпискомПоХозСубъекту_Сервер( );
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыЗагрузкаПлощадок(РезультатВыбора, ДопПараметры) Экспорт
	// КопироватьДанныеФормы(РезультатВыбора, Объект);
	//// все данные объекта заполнились
	// Если ДопПараметры.ИмяКоманды = "ТутБылоПереданоИмяКоманды" Тогда
	//	// выполняем дополнительные процедуры, если они нужны
	// КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоНаименованию(Команда)
	Если ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура("ВыбХозСубъект, ВыбРегион", ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные.ХозСубъект, Объект.Регион );
	Иначе
		СтруктураПараметров = Новый Структура("ВыбХозСубъект, ВыбРегион","","");
	КонецЕсли;
	ОповещениеОВыборе  = Новый ОписаниеОповещения("ОткрытиеФормыЗагрузкаПлощадок", ЭтаФорма, Новый Структура("ИмяКоманды", Команда.Имя));
	ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаЗагрузкаПлощадокУФ",СтруктураПараметров, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отбор по ХС включим
	// ГУИДХСдляОтбора = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбранныйХС,"GUID");
	// ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	// ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ЗначениеОтбора = Новый Структура("ХозСубъект", ВыбХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

&НаСервере
Процедура кнХС_СоздатьНаСервере( ВыбХозСубъект )
	// ФООбъект = РеквизитФормыВЗначение("Объект");
	// ФООбъект.ХС_Создать(ВыбранныйХС);
	
	ПараметрыОрганизации = ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	ВСД_Запросы.ХозСубъект_Создать( ПараметрыОрганизации, ВыбХозСубъект );

КонецПроцедуры

&НаКлиенте
Процедура кнХС_СоздатьОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Создаем ХС в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнХС_СоздатьНаСервере( ВыбХозСубъект );
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнХС_Создать(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект)) Тогда
		ВСД.СообщитьИнфо("Укажите ХС");
		Возврат;
	КонецЕсли;
	ТекстВопроса = "Создать ХС "+ВыбХозСубъект+" в Меркурий ?";
    Оповещение = Новый ОписаниеОповещения("кнХС_СоздатьОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры


&НаСервере
Функция кнПлощадкаПоХССоздатьНаСервере(ВыбХС)
	// ФООбъект = РеквизитФормыВЗначение("Объект");
	// СведенияОКонтрагенте = ФООбъект.ПолучитьСведенияОКонтрагенте(ВыбХС.Контрагент,ТекущаяДата());	
	СпрПл = Справочники.ВСД_Площадка.СоздатьЭлемент();
	СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
	СпрПл.Контрагент = ВыбХС.Контрагент.Ссылка;
	СпрПл.GuidХозСубъекта = ВыбХС.GUID;
	// Попытка СпрПл.Адрес = СведенияОКонтрагенте.ФактическийАдрес; Исключение КонецПопытки;
	СпрПл.Записать();
	ВСД.СообщитьИнфо("Создан ВСД_Площадка "+СпрПл);
	Возврат СпрПл.Ссылка;
КонецФункции

&НаКлиенте
Процедура кнПлощадкаПоХССоздатьОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыбраннаяПлощадка = кнПлощадкаПоХССоздатьНаСервере(ВыбХозСубъект);
	КонецЕсли;	
КонецПроцедуры

// &НаКлиенте
// Процедура кнПлощадкаПоХССоздать(Команда)
//	// Создание Площадки в справочнике 1С
//	Если НЕ(ЗначениеЗаполнено(ВыбранныйХС)) Тогда
//		ПредупреждениеПользователю("Выберите Хоз субъект");
//		Возврат;
//	КонецЕсли;
//	Если ЗначениеЗаполнено(ВыбраннаяПлощадка) Тогда
//		ПредупреждениеПользователю("Уже создана Площадка в Справочнике 1С - для создания новой очистите поле");
//		Возврат;
//	КонецЕсли;
//	Если НЕ(ЗначениеЗаполнено(ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбранныйХС,"GUID"))) Тогда
//		ПредупреждениеПользователю("Хоз субъект не определен в ГИС Меркурий - Выполните поиск или Создайте");
//		Возврат;
//	КонецЕсли;
//	ТВопроса = "Создать Площадку в справочнике 1С для 
//	|"+ВыбранныйХС+" ?"; 
//	
//    Оповещение = Новый ОписаниеОповещения("кнПлощадкаПоХССоздатьОтвет",ЭтаФорма);	
//    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
// КонецПроцедуры

&НаСервере
Процедура кнСоздатьПлощадкувМеркурийНаСервере(ВыбПлощадка)
	// ФООбъект = РеквизитФормыВЗначение("Объект");
	// ФООбъект.СоздатьПлощадку(ВыбПлощадка);
	
	ПараметрыОрганизации = ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	ВСД_Запросы.Площадка_Создать( ПараметрыОрганизации, ВыбПлощадка );
	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПлощадкувМеркурий(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбраннаяПлощадка)) Тогда
		ПредупреждениеПользователю("Не указана Площадка 1С для создания в Меркурий");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Создаем площадку в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнСоздатьПлощадкувМеркурийНаСервере(ВыбраннаяПлощадка);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура кнПривязатьПлощадкуНаСервере(ВыбПлощадка)
	// ФООбъект = РеквизитФормыВЗначение("Объект");
	// ФООбъект.СоздатьСвязьХозсубъектПлощадка(ВыбПлощадка);
	
	ПараметрыОрганизации = ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	ВСД_Запросы.Площадка_СвязатьСХозСубъектом( ПараметрыОрганизации, ВыбПлощадка );
	
КонецПроцедуры

&НаКлиенте
Процедура кнПривязатьПлощадку(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбраннаяПлощадка)) Тогда
		ПредупреждениеПользователю("Не указана Площадка для привязки к ХС");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Привязываем Площадку к ХС",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнПривязатьПлощадкуНаСервере(ВыбраннаяПлощадка);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры


// ************* Сведения о ХС и Площадках окончание

// *** Загрузка НСИ

&НаСервере
Функция ЗагрузитьЦелиНаСервере()
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос Цели транспортировки'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.ИнициализацияХС_ЗагрузитьЦели_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.ИнициализацияХС_ЗагрузитьЦели( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции
 
&НаКлиенте
Процедура ЗагрузитьЦели(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Классификатора Цели");
	Результат = ЗагрузитьЦелиНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
КонецПроцедуры
// *** Загрузка НСИ Окончание


// ************* Открытие, Инициализация и сохранение параметров
// &НаСервере
// Процедура ИнициализацияСервер()
//	//ФОбъект = РеквизитФормыВЗначение("Объект");
//	////ФОбъект.Инициализация();
//	//ФОбъект.ЗагрузитьПараметры(ФОбъект.Организация);	
//	
//	Если НЕ(ЗначениеЗаполнено( Объект.Организация ) ) Тогда
//		Объект.Организация = ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();
//	КонецЕсли;
//	
//	СписокКонстант = ВСД.ЗагрузитьПараметры( Объект.Организация );
//	ВСД.ЗагрузитьПараметрыВОбработку( Объект, СписокКонстант ); 
//	
//	ЗаполнитьТабличныеЧасти(флПеремещения);
//	//ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
//		
// КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ВСД.СохранитьПараметры(ФОбъект);
	
	_Организация = ФОбъект.Организация;
	
	ВСД.СообщитьИнфо("Настройки сохранены для  - "+_Организация);
    // Этап 4. Обратное преобразование прикладного объекта в реквизит формы
    ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметры(Команда)
	СохранитьПараметрыНаСервере();
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция кнИнициализацияНаСервере()
	// основные параметры
	Объект.НазваниеРеквизитаКоличество = "Количество";
	Объект.ПарамКоэффициентПересчетаКоличества = 1;
	Объект.ПарамЗнакСортировкиУбывание = Ложь;
	Объект.ПарамКолонкаСортировкиПартииСписания = "ДатаСрокГодности1";
	Объект.НазваниеРеквизитаКоличествоМест = "Количество";
	// Объект.ТермУсловияПеревозки = 1;
	Объект.ВСД_РезультатыИсследований = Перечисления.ВСД_РезультатИсследования.VSERAW;
	Объект.ПарамЗаполнятьТранзакциюПриОтсутствииПартий = Ложь;	
	
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );	
	Если Объект.ОтправлятьВФоне Тогда 
	
		ИдентификаторЗадания = Неопределено;		
	
		НаименованиеЗадания = НСтр("ru = 'Ветис инициализация - загрузка справочников'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.ИнициализацияХС_ЗагрузитьВсеСправочники",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.ИнициализацияХС_ЗагрузитьВсеСправочники( ПараметрыФункции,"" );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура кнИнициализацияОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется начальная Инициализация",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		Результат = кнИнициализацияНаСервере();
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура кнИнициализация(Команда)
	Если ПустаяСтрока(Объект.param_username)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [param_username]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Объект.param_password)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [param_password]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Объект.param_issuer_id)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [issuer_id]");
		Возврат;
	КонецЕсли;
	
	ТВопроса = "Будет произведена загрузка классификаторов Меркурий 
	| и заполнены начальные данные. 
	|Операция может занять продолжительное время.";
	Оповещение = Новый ОписаниеОповещения("кнИнициализацияОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
	
КонецПроцедуры

// ************* Инициализация и сохранение параметров Окончание

// ************ Партии

&НаСервере
Функция ПолучитьПартии2_НаСервере( НачДата, КонДата )
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );	
	ПараметрыФункции.Вставить("ВыбПлощадка", Объект.Отправитель_Площадка);
	ПараметрыФункции.Вставить("ПартииСмещение", 0);
	ПараметрыФункции.Вставить("УдалятьПартии", Ложь);
	ПараметрыФункции.Вставить("ТолькоАктуальныеПартии", Ложь);
	ПараметрыФункции.Вставить("ПартияНачПериода", НачДата);
	ПараметрыФункции.Вставить("ПартияКонПериода", КонДата);
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;	
		
		НаименованиеЗадания = НСтр("ru = 'Ветис загрузка партий'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.Партии2_Запрос_Отправить_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		// ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.Партии2_Запрос_Отправить( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПартии_ОтветНаВопрос(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Результат = ПолучитьПартии2_НаСервере( ПартииНач, КонецДня( ПартииКон ) );
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		// ИначеЕсли ЗначениеЗаполнено( Результат.ИдентификаторЗадания ) Тогда
		//	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		//	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		//	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		//	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии2(Команда)
	ТекстВопроса = "Получить Партии по Площадке "+Объект.Отправитель_Площадка+" в Меркурий ";

	Если ЗначениеЗаполнено(ПартииНач)  Тогда
		ТекстВопроса = ТекстВопроса + "
		|за период с "+ПартииНач+" по "+ПартииКон+"";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьПартии_ОтветНаВопрос", ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, ""  );    
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыЗагрузкиПартии(ВыбДата, Параметры) Экспорт
    Если ЗначениеЗаполнено( ВыбДата ) Тогда
		// ФОбъект = РеквизитФормыВЗначение("Объект");
		// ФОбъект.ПолучитьПартии2( Объект.Отправитель_Площадка ,,,ВыбДата,ТекущаяДата());	
		
		Результат = ПолучитьПартии2_НаСервере(ВыбДата, ТекущаяДата());
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено( Результат.ИдентификаторЗадания ) Тогда
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
		
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыЗагрузкиПартии", ЭтаФорма);	
    ВыбДата = ТекущаяДата()-30*60*60*30;
    ПоказатьВводДаты( Оповещение, ВыбДата , "Введите дату начала загрузки Партий",  ЧастиДаты.Дата);   	
КонецПроцедуры

&НаСервере
Процедура кнПолучитьПартии14НаСервере()
	ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ПолучитьПартии(Объект.Отправитель_Площадка);
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии14Ответ(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется загрузка Партий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнПолучитьПартии14НаСервере();
		ПоказатьОповещениеПользователя("Загрузка Партий завершена");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии14(Команда)
	ТВопроса = "Получить Партии по Площадке "+Объект.Отправитель_Площадка+" в Меркурий ";
	ТВопроса = ТВопроса + "
	| Операция может занять продолжительное время.";
	
    Оповещение = Новый ОписаниеОповещения("кнПолучитьПартии14Ответ",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    

КонецПроцедуры


// *********** Партии окончание

// *** На форме

// ===========================================================================
// Загрузка Классификаторов

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации( ФормаДлительнойОперации );
	
	// Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") Тогда
	//	Если ФормаДлительнойОперации.Открыта() Тогда
	//		ФормаДлительнойОперации.Закрыть();
	//	КонецЕсли;
	// КонецЕсли;	
	
КонецПроцедуры
&НаСервере
Функция ЗаданиеВыполнено() 
	Возврат ДлительныеОперации.ЗаданиеВыполнено( ИдентификаторЗадания );
КонецФункции

&НаСервере
// как результат выполнения функции в фоне
Процедура ЗагрузитьПараметры( )
	ФОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		Результат = ПолучитьИзВременногоХранилища( АдресХранилища );
		
		Если ЗначениеЗаполнено( Результат["Параметры"] ) Тогда 	
			ВСД.ЗагрузитьПараметрыВОбработку( ФОбъект , Результат["Параметры"] );
		КонецЕсли;
	Исключение КонецПопытки;
	
	// ФОбъект.ЗагрузитьПараметры(ФОбъект.Организация);
	// ФОбъект.ЗаполнитьТабличныеЧасти(флПеремещения);
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");			
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	МассивСообщений = ПолучитьСообщенияНаСервере( );
	// МассивСообщений = ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из МассивСообщений Цикл
		Сообщение.Сообщить();
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Сообщить();
	КонецЦикла;
	
	Попытка
		Если ЗаданиеВыполнено() Тогда 
			// ЗагрузитьПодготовленныеДанные();
			ЗагрузитьПараметры( );
			
			ЗакрытьФормуДлительнойОперации();
			Возврат;
		КонецЕсли;		
	Исключение
		ЗакрытьФормуДлительнойОперации();
		ВызватьИсключение;
	КонецПопытки;
 
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПродукциюНаСервере()
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
	
		ИдентификаторЗадания = Неопределено;	
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос продукции'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.ИнициализацияХС_ЗагрузитьПродукцию_Все",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.ИнициализацияХС_ЗагрузитьПродукцию_Все( ПараметрыФункции, "");
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьПродукцию( АдресПараметров )
	ПоказатьОповещениеПользователя("Выполняется загрузка Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	
	Результат = ЗагрузитьПродукциюНаСервере( );	
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
 	
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьЕдИзмНаСервере( )
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
	
		ИдентификаторЗадания = Неопределено;
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос Единиц Измерения'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьЕдИзм(Команда)
	// СтруктураПараметров = ИнициализацияКлиент( УникальныйИдентификатор );	
	
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	
	Результат = кнЗагрузитьЕдИзмНаСервере( );	
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьСтраныНаСервере()
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
			
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка стран'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.ИнициализацияХС_ЗагрузитьСтраны_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.ИнициализацияХС_ЗагрузитьСтраны( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьСтраны(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	
	Результат = кнЗагрузитьСтраныНаСервере();	
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьРегионыНаСервере()
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
	
		ИдентификаторЗадания = Неопределено;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Регионы'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.ИнициализацияХС_ЗагрузитьРегионы_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;	
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.ИнициализацияХС_ЗагрузитьРегионы( ПараметрыФункции, Объект.Страна );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьРегионы(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Результат = кнЗагрузитьРегионыНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьГородаНаСервере()
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Города'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.ИнициализацияХС_ЗагрузитьГорода_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;	
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.ИнициализацияХС_ЗагрузитьГорода( ПараметрыФункции, Объект.Регион );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьГорода(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Результат = кнЗагрузитьГородаНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьФормыУпаковкиНаСервере()
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Форма упаковки'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.ЗаполнитьФормыУпаковки",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;	
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.ЗаполнитьФормыУпаковки( ПараметрыФункции, "" );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура кнЗагрузитьФормыУпаковки(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Результат = кнЗагрузитьФормыУпаковкиНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры
// **************** Форма Страница Реализации
// **** Список документов перечитать
&НаСервере
Процедура ОбновитьСписокРеализацийНаСервере()
	// ФОбъект = РеквизитФормыВЗначение("Объект");
	// ФОбъект.ЗаполнитьТабличныеЧасти(флПеремещения);
	//// Этап 4. Обратное преобразование прикладного объекта в реквизит формы
	// ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
	ЗаполнитьТабличныеЧасти(флПеремещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРеализаций(Команда)
	ПоказатьОповещениеПользователя("Выполняется поиск документов для создания ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ОбновитьСписокРеализацийНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры
// **** Список документов перечитать  Окончание
&НаКлиенте
Процедура ВыборПериода(Команда)
	ВыбранныйПериод = Новый СтандартныйПериод;
	Если Команда.Имя = "ВыборПериодаПартии" Тогда
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = ПартииНач;
		ВыбранныйПериод.ДатаОкончания = ПартииКон;
		КудаРезультат = "ВыборПериодаПартий";
	Иначе
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = Объект.ДатаНачалаОтбора;
		ВыбранныйПериод.ДатаОкончания = Объект.ДатаОкончанияОтбора;
		КудаРезультат = "ВыборПериодаОтгрузки";
	КонецЕсли;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ВыбранныйПериод;
	// Не модальный вызов диалога выбора периода
		
	Диалог.Показать(Новый ОписаниеОповещения(КудаРезультат, ЭтаФорма, Новый Структура("Диалог", Диалог)));
		
КонецПроцедуры
 
&НаКлиенте
Процедура ВыборПериодаОтгрузки(Период, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Если ЗначениеЗаполнено(Период) Тогда 
		ВыбранныйПериод = Диалог.Период;
		Объект.ДатаНачалаОтбора = ВыбранныйПериод.ДатаНачала;
		Объект.ДатаОкончанияОтбора = ВыбранныйПериод.ДатаОкончания;
		ОбновитьСписокРеализаций("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаПартий(Период, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Если ЗначениеЗаполнено(Период) Тогда 
		ВыбранныйПериод = Диалог.Период;
		ПартииНач = ВыбранныйПериод.ДатаНачала;
		ПартииКон = ВыбранныйПериод.ДатаОкончания;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОтметитьВсеДокументы(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьДокументыКСозданию(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если ЗначениеЗаполнено(стр.ВСД) или НЕ(ЗначениеЗаполнено(стр.Площадка)) Тогда
			Продолжить;
		КонецЕсли;	
		стр.Отметка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура кнОтметитьНеотправленныеВСДСервер()
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД.Статус)) Тогда
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьНеотправленныеВСД(Команда)
	кнОтметитьНеотправленныеВСДСервер();
КонецПроцедуры

&НаСервере
Процедура кнОтметитьСОшибкойСервер()
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) Тогда
			Продолжить;
		КонецЕсли;
		СтатусДок = СокрЛП(стр.ВСД.Статус);
		Если (СтатусДок = "REJECTED") или (СтатусДок = "IN_PROCESS")  Тогда
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьСОшибкой(Команда)
	кнОтметитьСОшибкойСервер();
КонецПроцедуры

&НаСервере
Процедура кнОтметитьБезХССервер()
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
		Если ЗначениеЗаполнено(стр.ХозСубъект.GUID) Тогда
			Продолжить;
		КонецЕсли;
		стр.Отметка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьБезХС(Команда)
	кнОтметитьБезХССервер();
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиДокументов(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПартийНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ЗаполнитьТаблицуПартий();
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнитьТаблицуПартий(Команда)
	ПоказатьОповещениеПользователя("Заполняем таблицу Партий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ЗаполнитьТаблицуПартийНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
	Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаПартии;
	// Перейти на страницу Партий и посчитать Итог
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьПеремещенияВСДПоСписку() Экспорт
	// СообщитьИнфо("Выполняется запрос условий перевозки для выделенных документов ВСД");
	ПараметрыОрганизации = ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	// тзОтгрузки = Объект.Отгрузки.Выгрузить();
	Для Каждого строкаТЗ Из Объект.Отгрузки Цикл
		ВыбВСД = строкаТЗ.ВСД;
		Если НЕ (ЗначениеЗаполнено(ВыбВСД)) или НЕ(строкаТЗ.Отметка) Тогда
			Продолжить;	
		КонецЕсли;
		Если (СокрЛП(ВыбВСД.Статус) = "COMPLETED") или (СокрЛП(ВыбВСД.Статус) = "IN_PROCESS") Тогда
			Продолжить;	
		КонецЕсли;		
		Попытка
			// ПроверитьВозможностьПеремещения(ВыбВСД);
			ВСД_Запросы.ВСД2_Транзакция_УсловияПеревозки_Отправить( ПараметрыОрганизации, ВыбВСД);
		Исключение
		    ВСД.СообщитьИнфо(ОписаниеОшибки(), ВыбВСД);
		КонецПопытки;
	КонецЦикла;
	ВСД.СообщитьИнфо("-> Проверка условий перевозки Завершена ");
КонецПроцедуры

&НаСервере
Процедура кнЗапросРегионализацияНаСервере()
	// ФОбъект = РеквизитФормыВЗначение("Объект");
	// ФОбъект.ПроверитьВозможностьПеремещенияВСДПоСписку();
//	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
	ПроверитьВозможностьПеремещенияВСДПоСписку();
КонецПроцедуры

&НаКлиенте
Процедура кнЗапросРегионализация(Команда)
	ПоказатьОповещениеПользователя("Выполняется запрос условий перевозки для отмеченных документов ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗапросРегионализацияНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Функция ОтправитьВСД_НаСервере( ОтправлятьРанееОтправленные )
	
	сзДокументыКОтправке = ПодготовитьСписокВСДКОтправке( ОтправлятьРанееОтправленные );	

	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
	ПараметрыФункции.Вставить("СписокДокументов", сзДокументыКОтправке);
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;		
		НаименованиеЗадания = НСтр("ru = 'Ветис отправка ВСД'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.ОтправитьВСДвГИС",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Для Каждого ДокСсылка Из сзДокументыКОтправке Цикл
			ПараметрыФункции = ВСД.ЗагрузитьПараметры( ДокСсылка.Организация );
			Ответ = ВСД_Запросы.ВСД2_транзакция_Отправить( ПараметрыФункции, ДокСсылка);
		КонецЦикла;
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПодготовитьСписокВСДКОтправке( ОтправлятьРанееОтправленные ) Экспорт
	// сзДокументыКОтправке = новый СписокЗначений;
	сзДокументыКОтправке = новый Массив;
	Для Каждого СтрОтгрузка Из Объект.Отгрузки Цикл
		_ВСД = СтрОтгрузка.ВСД;
		Если НЕ(ЗначениеЗаполнено(_ВСД)) или НЕ(СтрОтгрузка.Отметка) Тогда 		
			Продолжить;    
		КонецЕсли;
		
		Если (_ВСД.Статус = "COMPLETED") или (_ВСД.ПометкаУдаления) Тогда
			// ВСД.СообщитьИнфоСервер("Документ ["+_ВСД+"] статус=["+_ВСД.Статус+"] уже был обработан");
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(_ВСД.applicationID) и НЕ ОтправлятьРанееОтправленные Тогда 
			Продолжить;
		КонецЕсли;
		
		сзДокументыКОтправке.Добавить(_ВСД);
		// ВСД.СообщитьИнфоСервер(""+_ВСД+" Добавлен в очередь на отправку");
	КонецЦикла;
	Возврат сзДокументыКОтправке;
КонецФункции

&НаКлиенте
// Процедура кнОтправитьВСДОтвет(Ответ,Парам) Экспорт
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		сзДокументыКОтправке = ПодготовитьСписокВСДКОтправке(Истина);	
//	Иначе
//		сзДокументыКОтправке = ПодготовитьСписокВСДКОтправке(Ложь);	
//	КонецЕсли;
//	
//	Если сзДокументыКОтправке.Количество() > 0 тогда		
//		ПоказатьОповещениеПользователя("Выполняется отправка ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
//		Результат = кнОтправитьВСДНаСервере(сзДокументыКОтправке);
//		
//		Если Результат.ЗаданиеВыполнено Тогда
//			// Задание отработало, результат получен
//			ПоказатьОповещениеПользователя("Выполнено");
//		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
//			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
//			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
//			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
//		КонецЕсли;		
//	Иначе
//		ВСД.СообщитьИнфо("Нет документов к отправке");
//	КонецЕсли;	
// КонецПроцедуры
Процедура кнОтправитьВСДОтвет( Ответ, Парам ) Экспорт
	
	// Если сзДокументыКОтправке.Количество() > 0 тогда		
		ПоказатьОповещениеПользователя("Выполняется отправка ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Результат = ОтправитьВСД_НаСервере( Истина );
		Иначе
			Результат = ОтправитьВСД_НаСервере( Ложь );
		КонецЕсли;
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;		
	// Иначе
	//	ВСД.СообщитьИнфо("Нет документов к отправке");
	// КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнОтправитьВСД(Команда)
	ТекстВопроса = "Отправлять ранее обработанные ВСД (с ошибкой) ?";
    Оповещение = Новый ОписаниеОповещения("кнОтправитьВСДОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Процедура кнПолучитьОтветВСД2НаСервере()
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
	Для Каждого строкаОтгрузки Из Объект.Отгрузки Цикл
		Если строкаОтгрузки.Отметка Тогда 
			ВыбВСД = строкаОтгрузки.ВСД;
			Если НЕ ЗначениеЗаполнено(ВыбВСД) Тогда
				Продолжить;	
			КонецЕсли;
			Если (НЕ ЗначениеЗаполнено(ВыбВСД.applicationID)) Тогда 
				// или (_Статус = "COMPLETED") Тогда
				Продолжить;	
			КонецЕсли;
			
			ВСД_Запросы.ПолучитьРезультат_ВСД2( ПараметрыФункции, ВыбВСД.applicationID, ВыбВСД, Ложь );
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьОтветВСД2(Команда)
	ПоказатьОповещениеПользователя("Выполняется проверка ответов Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнПолучитьОтветВСД2НаСервере(  );
	ВСД.СообщитьИнфо("Проверка ответов завершена");
КонецПроцедуры

&НаСервере
Процедура кнАннулироватьВыбранныеВСДНаСервере()
	
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
	Для Каждого строкаОтгрузки Из Объект.Отгрузки Цикл
		Если НЕ(ЗначениеЗаполнено(строкаОтгрузки.ВСД)) или НЕ(строкаОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		
		ВСД_Запросы.ВСД2_транзакция_Аннулировать( ПараметрыФункции, строкаОтгрузки.ВСД);
	КонецЦикла;
	
	// Перерисуем
	ОбновитьСписокРеализацийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура кнАннулироватьВыбранныеВСДОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется Аннулирование выбранных ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнАннулироватьВыбранныеВСДНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнАннулироватьВыбранныеВСД(Команда)
	// Список ВСД к Аннулированию подберем на сервере
    Оповещение = Новый ОписаниеОповещения("кнАннулироватьВыбранныеВСДОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Аннулировать выбранные транзакции ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаКлиенте
Процедура кнУстановитьСоответствия(Команда)
	Если Объект.флИспользоватьВнешнююОбработку Тогда
		ОткрытьФорму("ВнешняяОбработка.Интеграция_ГИС_Меркурий.Форма.Форма_СоответствияУФ");
	Иначе
		ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.Форма_СоответствияУФ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнГашение(Команда)
	// ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаГашениеУФ",, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	// ПараметрыФормы = Новый Структура;
	// ПараметрыФормы.Вставить("Объект", Объект);
	ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаГашениеУФ", , ЭтаФорма);
КонецПроцедуры

// &НаКлиенте
// Процедура кнСоздатьВСДЭлементы(Команда)
//	// ОповещениеОВыборе  = Новый ОписаниеОповещения("ОткрытиеФормыСозданиеЭлементов", ЭтаФорма, Новый Структура("ИмяКоманды", Команда.Имя));
//	// Если Объект.флИспользоватьВнешнююОбработку Тогда
//	//	ОткрытьФорму("ВнешняяОбработка.Интеграция_ГИС_Меркурий.Форма.ФормаСоздатьВСД_ЭлементыУФ",, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//	// Иначе
//		ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаСоздатьВСД_ЭлементыУФ",, ЭтаФорма);
//	// КонецЕсли;
// КонецПроцедуры

// ********  Открытие доп формы окончание

&НаКлиенте
Процедура кнПечатьСтрОтгрузки(Команда)
	
	Для Каждого стрДок Из Объект.Отгрузки Цикл
		Если Стрдок.Отметка Тогда
			// ТабДок = кнПечатьВСДВнешняя(СтрДок.док,Адресобработки);
			ТабДок = ВСД.ПечатьВнешнейФормыВСД( СтрДок.ВСД );
			ТабДок.Показать();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура кнПечатьСтрОтгрузкиНаПринтер(Команда)
	Для Каждого стрДок Из Объект.Отгрузки Цикл
		Если Стрдок.Отметка Тогда
			// ТабДок = кнПечатьВСДВнешняя(СтрДок.док,Адресобработки);
			ТабДок = ВСД.ПечатьВнешнейФормыВСД( СтрДок.ВСД );
			// ТабДок.Показать();
			ТабДок.Напечатать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// &НаСервере
// Процедура ПечатьВСД(ТабДок, МассивДок )
//	Документы.ВСД2_транзакция.Печать( ТабДок, МассивДок );
// КонецПроцедуры

// &НаКлиенте
// Процедура кнПечатьДок(Команда)
//	
//	Для каждого стрДок Из Объект.Отгрузки Цикл
//		Если Стрдок.Отметка Тогда
//			ТабДок = Новый ТабличныйДокумент();
//			МассивДок = новый Массив;
//			МассивДок.Добавить( СтрДок.ВСД );
//			ПечатьВСД(ТабДок, МассивДок);
//						
//			ТабДок.Показать( СтрДок.ВСД );
//		КонецЕсли;
//	КонецЦикла;

// КонецПроцедуры

// &НаКлиенте
// Процедура кнПечатьДокНаПринтер(Команда)
//	
//	Для каждого стрДок Из Объект.Отгрузки Цикл
//		Если Стрдок.Отметка Тогда
//			ТабДок = Новый ТабличныйДокумент();
//			МассивДок = новый Массив;
//			МассивДок.Добавить( СтрДок.ВСД );
//			ПечатьВСД(ТабДок, МассивДок);						
//			ТабДок.Напечатать();
//		КонецЕсли;
//	КонецЦикла;

// КонецПроцедуры

&НаСервере
Функция ПечатьРеестра() Экспорт
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = Обработки.Интеграция_ГИС_Меркурий.ПолучитьМакет("Реестр");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	// ОбластьМакета.Параметры.НомерДок = СсылкаНаОбъект.Номер;
	// ОбластьМакета.Параметры.ДатаДок = Формат(СсылкаНаОбъект.Дата,"ДЛФ=Д");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Ном=0;
	Для Каждого стр Из Объект.Отгрузки Цикл				

		ном=ном+1;
		ОбластьМакета.Параметры.ном = ном;
		ОбластьМакета.Параметры.Грузополучатель = стр.Грузополучатель;
		ОбластьМакета.Параметры.ВСД = стр.ВСД;
		ОбластьМакета.Параметры.док = стр.Док;
		ОбластьМакета.Параметры.Количество = стр.Количество;
		ОбластьМакета.Параметры.Контрагент = стр.Контрагент;
		ОбластьМакета.Параметры.ИНН = стр.Контрагент.ИНН;
		ОбластьМакета.Параметры.ХозСубъект = стр.ХозСубъект;
		ОбластьМакета.Параметры.Площадка = стр.Площадка;
		
		Если Объект.РеквизитГрузополучатель = 0 Тогда     
			// стр.Грузополучатель = Контрагент
			СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(стр.Грузополучатель,  ТекущаяДата());
			// ОбластьМакета.Параметры.Адрес = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
			СтрокаАдрес="";
			СведенияОГрузополучателе.Свойство("ФактическийАдрес", СтрокаАдрес);
			ОбластьМакета.Параметры.Адрес = СтрокаАдрес;
		Иначе
			ОбластьМакета.Параметры.Адрес = стр.Грузополучатель;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ВСД";
	
	Возврат ТабДокумент;
	
КонецФункции


&НаКлиенте
Процедура кнПечатьРеестр(Команда)
	
	ТабДок = ПечатьРеестра();
	ТабДок.Показать();
	
КонецПроцедуры

// *************  Форма стр 1 события тз Реализации
&НаКлиенте
Процедура ОтгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтгрузкиВСДОчисткаНаСервере(ДокСсылка)
	Попытка
		Если НЕ(ДокСсылка = Документы.ВСД2_транзакция.ПустаяСсылка()) Тогда 
			ДокОбъект = ДокСсылка.ПОлучитьОбъект();
			Если СокрЛП(ДокОбъект.Статус) = "COMPLETED" Тогда
				Сообщить(""+ДокОбъект+" зарегистрирован в Меркурий - удаление невозможно");
				Возврат false;
			КонецЕсли;
			ДокОбъект.УстановитьПометкуУдаления(ИСТИНА);
			Возврат true;
		КонецЕсли;		
	Исключение
		Возврат false;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ОтгрузкиВСДОчисткаОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ОтгрузкиВСДОчисткаНаСервере(Парам.ДокСсылка) Тогда
			Парам.Элемент.Родитель.ТекущиеДанные.сЦвет = 0;
			Парам.Элемент.Родитель.ТекущиеДанные.ВСД = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОтгрузкиВСДОчистка(Элемент, СтандартнаяОбработка)
	// Пометим на удаление док ВСД
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.ВСД) Тогда 
		ДокСсылка = Элемент.Родитель.ТекущиеДанные.ВСД;
		Если СокрЛП(ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ДокСсылка,"Статус")) = "COMPLETED" Тогда
			ВСД.СообщитьИнфо(""+ДокСсылка+" зарегистрирован в Меркурий - удаление невозможно");
			Возврат;
		КонецЕсли;
		Парам = новый Структура("ДокСсылка,Элемент",ДокСсылка,Элемент);
    	Оповещение = Новый ОписаниеОповещения("ОтгрузкиВСДОчисткаОтвет",ЭтаФорма,Парам);	
    	ПоказатьВопрос(Оповещение, "Удалить "+ДокСсылка+" ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтгрузкиПлощадкаОчисткаНаСервере(ПлощадкаСсылка)
	Попытка
		Если НЕ(ПлощадкаСсылка = Справочники.ВСД_Площадка.ПустаяСсылка()) Тогда 
			СпрОб = ПлощадкаСсылка.ПОлучитьОбъект();
			СпрОб.Контрагент = "";
			СпрОб.Записать();
		КонецЕсли;		
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаОчистка(Элемент, СтандартнаяОбработка)
	// Отвяжем площадку от контрагента
//	СтандартнаяОбработка = Ложь;
//    ПредупреждениеПользователю("Отвязка Площадки из формы в Разработке");
//	Возврат;	
	ОтгрузкиПлощадкаОчисткаНаСервере(Элемент.Родитель.ТекущиеДанные.Площадка);
	Элемент.Родитель.ТекущиеДанные.сЦвет = 2;  //Желтый
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтгрузкиПлощадкаПриИзмененииНаСервере( ПлощадкаСсылка, НовыйКонтрагент )
	Если НЕ (ПлощадкаСсылка = Справочники.ВСД_Площадка.ПустаяСсылка()) Тогда 
		СпрОб = ПлощадкаСсылка.ПОлучитьОбъект();
		СпрОб.Контрагент = НовыйКонтрагент;
		СпрОб.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаПриИзменении(Элемент)
	
	// очищаем привязку старой площадки
	Если ЗначениеЗаполнено( ОчиститьПлощадку ) Тогда 
		ОтгрузкиПлощадкаПриИзмененииНаСервере( ОчиститьПлощадку, Неопределено );
		ОчиститьПлощадку = Неопределено;
	КонецЕсли;
	
	// установим новую привязку плоащадки к грузополучателю
	ОтгрузкиПлощадкаПриИзмененииНаСервере( Элемент.Родитель.ТекущиеДанные.Площадка, Элемент.Родитель.ТекущиеДанные.Грузополучатель );
	Если ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.Площадка) Тогда
		Элемент.Родитель.ТекущиеДанные.сЦвет = 0;
	Иначе
		Элемент.Родитель.ТекущиеДанные.сЦвет = 2;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Выбор_ВСД_Площадка = Элемент.Родитель.ТекущиеДанные.Площадка; // для последующего удаления привязки - в переменную формы !
	// Отвяжем сразу без вопросов
	ОчиститьПлощадку = Элемент.Родитель.ТекущиеДанные.Площадка;
	// ОтгрузкиПлощадкаОчисткаНаСервере(Элемент.Родитель.ТекущиеДанные.Площадка);
	// Отбор по ХС включим
	// ГУИДХСдляОтбора = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Элемент.Родитель.ТекущиеДанные.ХозСубъект,"GUID");
	// ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	// ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ЗначениеОтбора = Новый Структура("ХозСубъект", Элемент.Родитель.ТекущиеДанные.ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

// *********** Вкладка Партии

&НаСервере
Процедура кнСоздатьВСДНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.СоздатьВСД2();
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	// Перерисовка формы  - нужно ли ?
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьВСДОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Создаем ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнСоздатьВСДНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтгрузки;
		ЭтаФорма.ТекущийЭлемент = Элементы.кнОтправитьВСД;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьВСД(Команда)
	Если Объект.Партии.Количество() = 0 Тогда
		ВСД.СообщитьИнфо("Нет Партий для создания ВСД ");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнСоздатьВСДОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Создать ВСД на отмеченные Накладные ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Процедура СоздатьВСДПроизводствоНаСервере(ВыбДата)
	ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Создать_ВСД2_Производство(ВыбДата);
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
	
	//	ДокВСД = Документы.ВСД2_Производство.СоздатьДокумент(); 
	//	ДокВСД.Дата = ВыбДата;//ДатаНачалаОтбора;			
	//	ДокВСД.Организация = Объект.Организация;
	//	ДокВСД.Производитель_ХозСубъект = Объект.Отправитель_ХозСубъект;
	//	ДокВСД.Производитель_площадка = Объект.Отправитель_Площадка;
	//	
	//	ДокВСД.РезультатыИсследований = Объект.ВСД_РезультатыИсследований;//СписокКонстант.Получить("ВСД_РезультатыИсследований");//Перечисления.ВСД_РезультатИсследования.VSEFULL;
	//	ДокВСД.cargoInspected	= Истина;
	//	ДокВСД.НомерПартии = Формат(ВыбДата, "ДЛФ=Д");				
	//	
	//	ДокВСД.Заполнить( Объект.Партии.Выгрузить() );
	//	ДокВСД.Записать();

	//	// ФормаДок = ДокВСД.ПолучитьФорму("ФормаДокумента");
	//	// ФормаДок.Открыть();
	//	// ОткрытьФорму(ФормаДок);
	// Возврат ДокВСД.Ссылка;
КонецПроцедуры

// &НаСервере
// Функция ПартииНаСервере()
//	Возврат Объект.Партии.Выгрузить();
// КонецФункции

&НаКлиенте
Процедура ПослеВводаДатыПроизводство(ВыбДата,Парам) Экспорт
	Если ВыбДата = Неопределено Тогда
		ВСД.СообщитьИнфо("Отменено");
		Возврат;
	Иначе
		ДокСсылка = СоздатьВСДПроизводствоНаСервере(ВыбДата);
	// ПараметрыФормы = Новый Структура("ВСД_Продукция_Элемент, Партия, Количество, КоличествоМест, КоличествоСписания, КоличествоМестСписания, ВСД_Производство ");	
	// Для каждого стр Из Объект.Партии Цикл 
		// ЗаполнитьЗначенияСвойств(стр, ПараметрыФормы);
	// КонецЦикла;
	// ПараметрыПодбора = ПартииНаСервере();
	// ОткрытьФорму("Документ.ВСД2_Производство.Форма.ФормаДокумента", , ДокСсылка);	
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПроизводствоОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыПроизводство", ЭтаФорма);	
    	ВыбДата = Объект.ДатаНачалаОтбора;
    	ПоказатьВводДаты( Оповещение, ВыбДата , "Введите дату выпуска для создания документов Производство",  ЧастиДаты.Дата);		
	КонецЕсли;		
КонецПроцедуры


&НаКлиенте
Процедура кнПроизводство(Команда)
	Если Объект.Партии.Количество() = 0 Тогда
		ВСД.СообщитьИнфо("Нет данных в таблице ");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнПроизводствоОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Создать производственные ВСД на недостающую продукцию ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Процедура ОтправитьВСДПроизводствоНаСервере(СзДок)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ОтправитьВсе_ВСД2_Производство(СзДок,,);	
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецПроцедуры

&НаКлиенте
Процедура кнПроизводствоОтправить(Команда)
	СЗДок = Новый СписокЗначений;
	Для Каждого стр Из Объект.Партии Цикл				
		Если НЕ(ЗначениеЗаполнено(стр.ВСД_Производство)) Тогда
			Продолжить;
		КонецЕсли;
		Если ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(стр.ВСД_Производство,"Проведен") Тогда
			Продолжить	
		КонецЕсли;
		СЗДок.Добавить(стр.ВСД_Производство);
	КонецЦикла;
	Если СзДок.Количество() = 0 Тогда
		ВСД.СообщитьИнфо("Нет производственных ВСД для отправки");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Выполняется отправка производственных ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ОтправитьВСДПроизводствоНаСервере(СзДок);
	ПоказатьОповещениеПользователя("Выполнено");
		// Обновим партии на форме, проверим, все ли хорошо оправилось
	ОтправкаОК = true;
	Для Каждого стр Из Объект.Партии Цикл				
		Если НЕ(ЗначениеЗаполнено(стр.ВСД_Производство)) Тогда
			Продолжить;
		КонецЕсли;
		// ЖД - вызовы сервера в цикле !!!! переделать
		Если (СокрЛП(ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(стр.ВСД_Производство,"Статус")) = "COMPLETED") Тогда
			стр.Количество = стр.КоличествоСписания; // ЖД чтобы окрасилось правильно
			Продолжить	
		КонецЕсли;
		ОтправкаОК = false;
	КонецЦикла;
	Если ОтправкаОК Тогда
		ПоказатьОповещениеПользователя("Обновляем таблицу Партий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнЗаполнитьТаблицуПартий(Команда);
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьОтветВСДПроизводство(Команда)
	сзДокументыКОтправке = новый СписокЗначений;
	Для Каждого строкаТЗ Из Объект.Партии Цикл
		ВыбВСД = строкаТЗ.ВСД_Производство;
		Если НЕ ЗначениеЗаполнено(ВыбВСД) Тогда
			Продолжить;	
		КонецЕсли;
		_Статус = СокрЛП(ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбВСД,"Статус"));
		_applicationID = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбВСД,"applicationID");
		Если (НЕ ЗначениеЗаполнено(_applicationID)) Тогда
			// или (_Статус = "COMPLETED") 
			Продолжить;	
		КонецЕсли;
		сзДокументыКОтправке.Добавить(ВыбВСД);
		ВСД.СообщитьИнфо(""+ВыбВСД+" Добавлен в очередь на проверку ответа Меркурий");
	КонецЦикла;
	
	Если сзДокументыКОтправке.Количество() > 0 Тогда
		// ВСД.СообщитьИнфо("Выполняется запрос ответов от ВЕТИС на отправленные документы из списка партий без ответа");
		ПоказатьОповещениеПользователя("Выполняется запрос ответов в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнПолучитьОтветВСД2НаСервере(  );
		ПоказатьОповещениеПользователя("Выполнено");
	Иначе
		ВСД.СообщитьИнфо("Не выбрано документов к проверке");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПартииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

// **** Продукция
&НаСервере
Функция кнПолучитьСписокПродукцииНаСервере(ВыбПлощадка)
	
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
	ПараметрыФункции["ВыбПлощадка"] = ВыбПлощадка;
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		НаименованиеЗадания = НСтр("ru = 'Ветис загрузка продукции площадки'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.Продукция_Элемент_Получить_Список_По_Площадке_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		ВСД_Запросы.Продукция_Элемент_Получить_Список_По_Площадке( ПараметрыФункции, ВыбПлощадка);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнПолучитьСписокПродукцииОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Получаем список продукции по выбранной площадке",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		Результат = кнПолучитьСписокПродукцииНаСервере( ВыбПлощадкаПродукция );
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьСписокПродукции(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПлощадкаПродукция)) Тогда
		ВСД.СообщитьИнфо("Укажите Площадку");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнПолучитьСписокПродукцииОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Получить полный список продукции по площадке "+ВыбПлощадкаПродукция+"?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Функция кнПолучитьИнфоПродукцияНаСервере( Выб_ВСД_Продукция_Элемент )
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );

	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;

		ПараметрыФункции["Выб_ВСД_Продукция_Элемент"] = Выб_ВСД_Продукция_Элемент;
		
		НаименованиеЗадания = НСтр("ru = 'КБ99. Ветис загрузка партий'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.Продукция_Элемент_Получить_Инфо_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.Продукция_Элемент_Получить_Инфо( ПараметрыФункции, Выб_ВСД_Продукция_Элемент);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура кнПолучитьИнфоПродукция(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Получаем инфо о продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Результат = кнПолучитьИнфоПродукцияНаСервере( ВыбПродукция );
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Функция ИзменитьПродукциюНаСервере(Выб_ВСД_Продукция_Элемент, ВыбКоманда)
	ПараметрыФункции = ВСД_Общий.ПараметрыСервер( Объект );
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		
		ПараметрыФункции["Выб_ВСД_Продукция_Элемент"] = Выб_ВСД_Продукция_Элемент;
		ПараметрыФункции["ВыбКоманда"] = ВыбКоманда;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис создать продукцию'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"ВСД_Запросы.Продукция_Элемент_Изменить_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = ВСД_Запросы.Продукция_Элемент_Изменить( ПараметрыФункции, Выб_ВСД_Продукция_Элемент, ВыбКоманда);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнИзменитьПродукциюОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на изменение продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		Результат = ИзменитьПродукциюНаСервере(ВыбПродукция, "UPDATE");
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнИзменитьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнИзменитьПродукциюОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Изменить продукцию "+ВыбПродукция+" ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПродукциюОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на создание Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	   	
		Результат = ИзменитьПродукциюНаСервере(ВыбПродукция, "CREATE");
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнСоздатьПродукциюОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Создать продукцию "+ВыбПродукция+" у ХС "+Объект.Отправитель_ХозСубъект+" ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПродукциюОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на удаление Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		Результат = ИзменитьПродукциюНаСервере(ВыбПродукция,"DELETE");
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнУдалитьПродукциюОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Удалить продукцию "+ВыбПродукция+" в Меркурий?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	// Фобъект = РеквизитФормыВЗначение("Объект");
	// ФОбъект.Инициализация();
	// ФОбъект.ЗаполнитьТабличныеЧасти(флПеремещения);
	// ЗначениеВРеквизитФормы(Фобъект,"Объект");
	
	СписокКонстант = ВСД.ЗагрузитьПараметры( Объект.Организация );
	ВСД.ЗагрузитьПараметрыВОбработку( Объект, СписокКонстант ); 
	
	ЗаполнитьТабличныеЧасти(флПеремещения);
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура Отправитель_ПлощадкаНаФормеПриИзмененииНаСервере()
	// Фобъект = РеквизитФормыВЗначение("Объект");
	// ФОбъект.Отгрузки.Очистить();
	// Фобъект.Партии.Очистить();
	// Фобъект.ВСДВходящие.Очистить();
	// ФОбъект.ЗаполнитьТабличныеЧасти(флПеремещения);
	// ЗначениеВРеквизитФормы(Фобъект,"Объект");
	ЗаполнитьТабличныеЧасти(флПеремещения);	
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ПлощадкаНаФормеПриИзменении(Элемент)
	Отправитель_ПлощадкаНаФормеПриИзмененииНаСервере();
КонецПроцедуры

#Область ЗаполнениеТаблицыОтгрузок
// ================ Заполнение табличной части ============================

&НаСервере
// Функция СформироватьЗапрос(Организации = Неопределено, ПлощадкаОтправителя = Неопределено, ДатаНачала, ДатаОкончания) Экспорт
Функция ПолучитьТзРеализаций( ПараметрыФункции ) Экспорт
	ПереопределенныйМодуль = ВСД_Общий.ФункцияПереопределена("ПолучитьТзРеализаций");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.ПолучитьТзРеализаций( ПараметрыФункции );
	КонецЕсли;	
	
	// ЖД добавлена фильтрация Реализации по Складу отправителю (=текущая ПлощадкаОтправителя.Склад)
    // м.б. при незаполненном реквизите Склад у Площадки не фильтровать по складу ????
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ДатаНачала", ПараметрыФункции["ДатаНачала"] );
    Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыФункции["ДатаОкончания"] );

    Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыФункции["Организации"]);
//    Попытка Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",    ПлощадкаОтправителя.Склад); Исключение КонецПопытки;
    Если ПараметрыФункции["ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя"] Тогда
        Попытка 
            Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",    ПараметрыФункции["ПлощадкаОтправителя"].Склад );
            Если НЕ(ЗначениеЗаполнено( ПараметрыФункции["ПлощадкаОтправителя"].Склад ) ) Тогда
                ВСД.СообщитьИнфо("Не определен Склад по Площадке "+ПараметрыФункции["ПлощадкаОтправителя"]+" привяжите склад к площадке либо отключите параметр [Фильтровать Реализацию По Складу Площадки Отправителя]!");    
            КонецЕсли;
        Исключение 
            Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад", ""); 
            ВСД.СообщитьИнфо("Не определен Склад по Площадке для фильтрации документов!"); 
        КонецПопытки;    
    КонецЕсли;

    Попытка Запрос.УстановитьПараметр("ВыбМаршрут", ПараметрыФункции["Маршрут"] ); Исключение КонецПопытки;

    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

    Запрос.Текст =
    "ВЫБРАТЬ
    |    РеализацияТоваровУслуг.Ссылка КАК Док,
    |    @Грузополучатель@ КАК Грузополучатель,
    |    РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент КАК Контрагент,
    |    СУММА(РеализацияТоваровУслугТовары.@КоличествоМест@) КАК КоличествоМест,
    |    СУММА( РеализацияТоваровУслугТовары.@Количество@ ) КАК Количество,
    |    ЗапросПлощадки.ВСД_Площадка КАК Площадка,
    |    ВСД_ХозСубъект.Ссылка КАК ХозСубъект,	
    |    СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
    |    ЗапросВСД.Ссылка КАК ВСД,
    |    @Маршрут@
    |    РеализацияТоваровУслуг.Номер КАК Номер,
    |    РеализацияТоваровУслуг.Дата КАК Дата
    |ИЗ
    |    Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |        ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
	    |            ВСД_транзакция.Ссылка КАК Ссылка,
	    |            ВСД_транзакция.ДокументОснование КАК ДокОснование
	    |        ИЗ
	    |            Документ.ВСД_транзакция КАК ВСД_транзакция
	    |        ГДЕ
	    |            ВСД_транзакция.ПометкаУдаления = ЛОЖЬ	
	    |        ОБЪЕДИНИТЬ ВСЕ
	    |        ВЫБРАТЬ
	    |            ВСД2_транзакция.Ссылка,
	    |            ВСД2_транзакция.ДокументОснование
	    |        ИЗ
	    |            Документ.ВСД2_транзакция КАК ВСД2_транзакция
	    |        ГДЕ
	    |            ВСД2_транзакция.ПометкаУдаления = ЛОЖЬ
		|            И ВСД2_транзакция.ЭтоПеремещениеОтПоставщика = ЛОЖЬ) КАК ЗапросВСД
    |        ПО (ЗапросВСД.ДокОснование = РеализацияТоваровУслуг.Ссылка)
	|        ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			ВСД_ХозСубъект.Ссылка КАК ХС,
		|			ВСД_ХозСубъект.Контрагент КАК КонтрагентХС,
	    |           ВСД_Площадка.Ссылка КАК ВСД_Площадка,
		|			ВСД_Площадка.Контрагент КАК Контрагент
	    |        ИЗ
		|            Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
		|        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка
		// |	 		ПО ВСД_Площадка.GuidХозСубъекта = ВСД_ХозСубъект.GUID
		|	 		ПО ВСД_Площадка.ХозСубъект = ВСД_ХозСубъект.Ссылка
		|			И ВСД_Площадка.ПометкаУдаления = ЛОЖЬ	
		|		ГДЕ 
		|		 	ВСД_ХозСубъект.ПометкаУдаления = ЛОЖЬ
		|		 	И НЕ ВСД_ХозСубъект.Контрагент ЕСТЬ NULL
		|		) КАК ЗапросПлощадки
		|		ПО @Грузополучатель_Связи@
		|        И РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ЗапросПлощадки.КонтрагентХС
		|        И НЕ ( РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент ЕСТЬ NULL )
	|
	|
	|
	|        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|        	ПО РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ВСД_ХозСубъект.Контрагент
	|			И ВСД_ХозСубъект.ПометкаУдаления = ЛОЖЬ
	|    @Отбор_по_НоменклатураСоответствия@
    |ГДЕ
    |    РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
    |    И РеализацияТоваровУслугТовары.Сумма > 0
    |    И РеализацияТоваровУслуг.Организация В ИЕРАРХИИ(&СписокОрганизаций)
    |    @Отбор_по_Складам@
    |    @Маршрут_Условие@
    |
    |СГРУППИРОВАТЬ ПО
    |    РеализацияТоваровУслуг.Ссылка,
    |    @Грузополучатель_Группировка@
    |    РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент,
    |    ЗапросПлощадки.ВСД_Площадка,
	| 	 ВСД_ХозСубъект.Ссылка,
    |    ЗапросВСД.Ссылка,
    |    РеализацияТоваровУслуг.Номер,
    |    РеализацияТоваровУслуг.Дата
    |УПОРЯДОЧИТЬ ПО
    |    Дата,
    |    Номер";

	// @	
	Если ПараметрыФункции["ПропускатьПустыеСвойства"] Тогда
		ТекстОтбор = "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|	(ВЫБРАТЬ
				|	ДокСтроки1.Ссылка КАК Ссылка,
		        |	ДокСтроки1.Номенклатура КАК Номенклатура,
		        |	ЗапросТовары.ПродукцияЭлемент КАК ПродукцияЭлемент,				
		        |	(ДокСтроки1.@Количество@ * @КоэффициентПересчета@ ) КАК @Количество@,
				|	ДокСтроки1.Сумма КАК Сумма
		        |ИЗ
		        |	Документ.РеализацияТоваровУслуг.Товары КАК ДокСтроки1
		        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |			Спр1.ПродукцияЭлемент КАК ПродукцияЭлемент,
		        |			Спр1.Владелец КАК Номенклатура
		        |		ИЗ
		        |			Справочник.ВСД_Соответсвия КАК Спр1
		        |		ГДЕ
		        |			НЕ Спр1.ПродукцияЭлемент ЕСТЬ NULL
				|			И Спр1.ПометкаУдаления = ЛОЖЬ
				|		) КАК ЗапросТовары
		        |		ПО (ЗапросТовары.Номенклатура = ДокСтроки1.Номенклатура) 				
				|) КАК РеализацияТоваровУслугТовары
			|ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка) ";
	Иначе
		ТекстОтбор = "
	|        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|        	ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка) ";	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_НоменклатураСоответствия@", ТекстОтбор );
	
    Если ПараметрыФункции["РеквизитГрузополучатель"] = 0 Тогда
        // Контрагент
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "РеализацияТоваровУслуг.Контрагент ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (РеализацияТоваровУслуг.Контрагент = ЗапросПлощадки.Контрагент)  ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", "РеализацияТоваровУслуг.Контрагент,  ");        
    Иначе // Грузополучатель
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель@", "ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) ");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Связи@", " (ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) = ЗапросПлощадки.Контрагент) ") ;
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Грузополучатель_Группировка@", " ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100), ");
    КонецЕсли;

    Если ПараметрыФункции["ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя"] Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_Складам@", " И РеализацияТоваровУслуг.Склад В ИЕРАРХИИ(&ПлощадкаОтправителяСклад) ");        
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Отбор_по_Складам@", "  ");        
    КонецЕсли;

    Если ЗначениеЗаполнено( ПараметрыФункции["Маршрут"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут@", "РеализацияТоваровУслуг.Маршрут КАК Маршрут,");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут_Условие@", " И РеализацияТоваровУслуг.Маршрут В ИЕРАРХИИ(&ВыбМаршрут) ");        
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут@", " ");        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Маршрут_Условие@", " ");        		
	КонецЕсли;    

	// Пересчет ШТ в КГ
	Версия = Лев(Метаданные.Версия,2);		
	Если Метаданные.Имя = "УправлениеТорговлей" И Версия="11" Тогда 				
		КПересчета = "ДокСтроки1.Номенклатура.ВесЧислитель / ДокСтроки1.Номенклатура.ВесЗнаменатель";
		Запрос.Текст = СтрЗаменить( Запрос.Текст, "@КоэффициентПересчета@", КПересчета );				
	Иначе // остальные считаем с учетом параметра [ПарамКоэффициентПересчетаКоличества]		
	    КПересчета = ПараметрыФункции["ПарамКоэффициентПересчетаКоличества"];
	    Коэфф = 0;
	    Попытка
	        Коэфф = Число(КПересчета);
	    Исключение
	        Коэфф = 0;
	    КонецПопытки;
	    Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
	        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета@","1");
	    ИначеЕсли Строка(Коэфф)    = КПересчета Тогда  // Это число
	        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета@",КПересчета);
		Иначе 			
			// Не работает, если коэфф не целочисленный
			Запрос.Текст = СтрЗаменить( Запрос.Текст, "@КоэффициентПересчета@", "ДокСтроки1."+КПересчета );	
			
	    // Ошибка        ТЗамены = "РеализацияТоваровУслугТовары."+КПересчета;
	    //        ТекстПодстановки = " 
	    //        |Выбор Когда Значение("+ТЗамены+")= 0 Тогда
	    //        |СУММА(РеализацияТоваровУслугТовары.@Количество) 
	    //        |Иначе
	    //        |СУММА("+Тзамены+"*РеализацияТоваровУслугТовары.@Количество)
	    //        |Конец
	    //        |КАК Количество,";
	    //        ТекстПодстановки = СтрЗаменить(ТекстПодстановки,"@Количество",СписокКонстант.Получить("НазваниеРеквизитаКоличество"));
	    //        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета",ТекстПодстановки);
		КонецЕсли;
	КонецЕсли; 
	
    Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличество"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", ПараметрыФункции["НазваниеРеквизитаКоличество"]);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", "Количество");
	КонецЕсли;
    Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличествоМест"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", ПараметрыФункции["НазваниеРеквизитаКоличествоМест"]);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", "Количество");
	КонецЕсли;


    Попытка
        Рез = Запрос.Выполнить();
    Исключение
        Рез = Неопределено;
        ВСД.СообщитьИнфо("Указан неверный параметр НазваниеРеквизитаКоличество или ПарамКоэффициентПересчетаКоличества "+Описаниеошибки());
    КонецПопытки;

    Возврат Рез;
	
КонецФункции // СформироватьЗапрос()

&НаСервере
Функция СформироватьЗапросПеремещения( ПараметрыФункции ) Экспорт
	ПереопределенныйМодуль = ВСД_Общий.ФункцияПереопределена("СформироватьЗапросПеремещения");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.СформироватьЗапросПеремещения( ПараметрыФункции );
	КонецЕсли;	
	
	// ЖД - В документе ПеремещениеТоваров участвуют склады ХС
	// в таком случае как в 7.7 нужно добавить реквизит Склад к спр. ВСД_Площадка
	// По Складу Получателю определяем площадку
	// ХС один и тот же -или по фирме документа определять, или берем тек параметры, т.к фирма уже определена там
	// также ищем уже созданные транзакции
	
	Запрос = Новый Запрос;
	// Запрос.УстановитьПараметр("Регистраторы",				Регистраторы);
	Запрос.УстановитьПараметр("ДатаНачала",					НачалоДня( ПараметрыФункции["ДатаНачала"] ) );
	Запрос.УстановитьПараметр("ДатаОкончания",				КонецДня( ПараметрыФункции["ДатаОкончания"] ));
	Запрос.УстановитьПараметр("СписокОрганизаций",			ПараметрыФункции["Организации"] );
//	Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",				ПлощадкаОтправителя.Склад);  
	Попытка 
		Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",	ПараметрыФункции["ПлощадкаОтправителя"].Склад); 
	Исключение 
		Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",	""); 
		ВСД.СообщитьИнфо("Не определили Склад!"); 
	КонецПопытки;

	// Запрос.УстановитьПараметр("ПодразделениеОрганизации",	ПодразделениеОрганизации);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Док,
	|	ПеремещениеТоваров.СкладПолучатель КАК Грузополучатель,
	|	СУММА(ПеремещениеТоваровТовары.@Количество@) КАК Количество,
	|	СУММА(ПеремещениеТоваровТовары.@КоличествоМест@) КАК КоличествоМест,
	|	ВСД_Площадка.Ссылка КАК Площадка,
	|	ВСД_транзакция.Ссылка КАК ВСД,
	|	ПеремещениеТоваров.Номер КАК Номер,
	|	ПеремещениеТоваров.Дата КАК Дата
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД_транзакция КАК ВСД_транзакция
	|		ПО (ВСД_транзакция.ДокументОснование = ПеремещениеТоваров.Ссылка)
	|			И (ВСД_транзакция.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка
	|		ПО (ПеремещениеТоваров.СкладПолучатель = ВСД_Площадка.Склад)
	|			И (ВСД_Площадка.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ПО (ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка)
	|ГДЕ
	|	ПеремещениеТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПеремещениеТоваров.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|	И ПеремещениеТоваров.СкладОтправитель = &ПлощадкаОтправителяСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваров.Ссылка,
	|	ВСД_Площадка.Ссылка,
	|	ВСД_транзакция.Ссылка,
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	
	// v 2.*
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВСД_транзакция","ВСД2_транзакция");
    Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличество"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", ПараметрыФункции["НазваниеРеквизитаКоличество"]);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество@", "Количество");
	КонецЕсли;
	
	Если ЗначениеЗаполнено( ПараметрыФункции["НазваниеРеквизитаКоличествоМест"] ) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", ПараметрыФункции["НазваниеРеквизитаКоличествоМест"]);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоличествоМест@", "Количество");
	КонецЕсли;
	
	Запрос.Выполнить();
		
	Возврат Запрос.Выполнить();
КонецФункции // СформироватьЗапрос()

&НаСервере
Процедура РаскраситьТЧОтгрузки() Экспорт
	// времТЗ = Отгрузки.Выгрузить();
	Для Каждого ДанныеСтроки Из Объект.Отгрузки Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ВСД) Тогда
			ДокОб = ДанныеСтроки.ВСД.ПолучитьОбъект();
			СтатусВСД = СокрЛП(Докоб.Статус);
		Иначе
			СтатусВСД = "";	
		КонецЕсли;
		Если ПустаяСтрока(ДанныеСтроки.ХозСубъект.GUID)Тогда
			ДанныеСтроки.Сцвет = 1;   // красный
		ИначеЕсли ДанныеСтроки.Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда
			ДанныеСтроки.Сцвет = 2;  // желтый
		ИначеЕсли ДанныеСтроки.ВСД = Неопределено Тогда
			// ОформлениеСтроки.ЦветФона = Новый Цвет(0, 150, 26);   
		ИначеЕсли СтатусВСД = "COMPLETED" Тогда
			ДанныеСтроки.Сцвет = 3;   
		ИначеЕсли СтатусВСД = "REJECTED" Тогда
			ДанныеСтроки.Сцвет = 4;   
		ИначеЕсли СтатусВСД = "IN_PROCESS" Тогда
			ДанныеСтроки.Сцвет = 5;  
		КонецЕсли;
	КонецЦикла;
	// отгрузки.Загрузить(ВремТЗ);
КонецПроцедуры

//// Заполняет табличные части обработки документами
////
//// Параметры:
////	Перемещения
////
//// Возвращаемое значение:
////	Булево - Истина, если успешно выполнено заполнение, Иначе Ложь
////
//// Автозаполнение
&НаСервере
Функция ЗаполнитьТабличныеЧасти( Перемещения = Ложь ) Экспорт

	Объект.Отгрузки.Очистить();
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("Организации", Объект.Организация);
	ПараметрыФункции.Вставить("ПлощадкаОтправителя", Объект.Отправитель_Площадка);
	ПараметрыФункции.Вставить("ДатаНачала", Объект.ДатаНачалаОтбора);
	ПараметрыФункции.Вставить("ДатаОкончания", Объект.ДатаОкончанияОтбора);
	ПараметрыФункции.Вставить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя", Объект.ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя);
	ПараметрыФункции.Вставить("Маршрут", Объект.Маршрут);
	ПараметрыФункции.Вставить("ПропускатьПустыеСвойства", Объект.ПропускатьПустыеСвойства);
	ПараметрыФункции.Вставить("РеквизитГрузополучатель", Объект.РеквизитГрузополучатель);
	ПараметрыФункции.Вставить("ПарамКоэффициентПересчетаКоличества", Объект.ПарамКоэффициентПересчетаКоличества);
	ПараметрыФункции.Вставить("НазваниеРеквизитаКоличество", Объект.НазваниеРеквизитаКоличество);
	ПараметрыФункции.Вставить("НазваниеРеквизитаКоличествоМест", Объект.НазваниеРеквизитаКоличествоМест);
		
	Если Перемещения Тогда
		РезультатЗапроса = СформироватьЗапросПеремещения( ПараметрыФункции );
	Иначе
		РезультатЗапроса = ПолучитьТзРеализаций( ПараметрыФункции );
	КонецЕсли;
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Объект.Отгрузки.Загрузить(РезультатЗапроса.Выгрузить());
	// СообщитьИнфо("Список заполнен");
	Если Перемещения Тогда
		// ЖД Вероятно это все можно в запросе сделать
		// ну а так возъмем из текущих параметров
		Для Каждого СтрОтгрузки Из Объект.Отгрузки Цикл
			СтрОтгрузки.ХозСубъект = Объект.Отправитель_Хозсубъект;
			СтрОтгрузки.Контрагент = Объект.Отправитель_Хозсубъект.Контрагент;
		КонецЦикла;
	КонецЕсли;
	
	// Очистим ТЗ Партий
	Объект.Партии.Очистить();
	РаскраситьТЧОтгрузки();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.ДатаНачалаОтбора = НачалоДня(ТекущаяДата());
	Объект.ДатаОкончанияОтбора = КонецДня(ТекущаяДата());
	
	Объект.Организация = ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();	
	СписокКонстант = ВСД.ЗагрузитьПараметры( Объект.Организация );
	ВСД.ЗагрузитьПараметрыВОбработку( Объект, СписокКонстант ); 
	
	ЗаполнитьТабличныеЧасти(флПеремещения);
	
	// ПоказатьОповещениеПользователя("Выполняется инициализация обработки",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	// ИнициализацияСервер(); // Загрузим параметры и список документов
	// ЗаполнитьТабличныеЧасти(флПеремещения);
	// ПоказатьОповещениеПользователя("Выполнено");
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура кнУдалитьПартииНаСервере(НачДата, КонДата)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_Партия.Ссылка,
	               |	ВСД_Партия.ДатаИзменения
	               |ИЗ
	               |	Справочник.ВСД_Партия КАК ВСД_Партия
	               |ГДЕ
	               |	ВСД_Партия.Получатель_Площадка = &Получатель_Площадка ";
	
	Запрос.УстановитьПараметр("Получатель_Площадка", Объект.Отправитель_Площадка);
	Если ЗначениеЗаполнено( ПартииНач ) Тогда 
		Запрос.Текст = Запрос.Текст + "
	    |	И ВСД_Партия.ДатаИзменения МЕЖДУ &НачДата И &КонДата";
		Запрос.УстановитьПараметр("НачДата", НачДата);
		Запрос.УстановитьПараметр("КонДата", КонДата);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПартияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПартияОбъект.УстановитьПометкуУдаления(Истина, Ложь);		
	КонецЦикла;
	ВСД.СообщитьИнфо("ВСД_Партии помечены на удаление");
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПартии(Команда)
	кнУдалитьПартииНаСервере( ПартииНач, ПартииКон );
КонецПроцедуры

&НаСервере
Процедура кнВерсия2ОбновитьСправочникиНаСервере()
	ПараметрыОрганизации = ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	СпрПлощадки = Справочники.ВСД_Площадка.Выбрать();
	Пока СпрПлощадки.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(СпрПлощадки.ХозСубъект) Тогда 
			СпрОбъект = СпрПлощадки.ПолучитьОбъект();
			СпрОбъект.ХозСубъект = ВСД_Запросы.ХозСубъект_НайтиПоGUID(ПараметрыОрганизации, СпрПлощадки.GuidХозСубъекта );
			СпрОбъект.Записать();
			ВСД.СообщитьИнфо(СпрПлощадки.Наименование, СпрПлощадки.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_Соответсвия.Номенклатура,
	               |	ВСД_Соответсвия.ПродукцияЭлемент,
	               |	ВСД_Соответсвия1.Владелец КАК СпрНоменклатура,
	               |	КОЛИЧЕСТВО(ВСД_Соответсвия1.ПродукцияЭлемент) КАК КолвоПродукцияЭлемент
	               |ИЗ
	               |	РегистрСведений.ВСД_Соответсвия КАК ВСД_Соответсвия
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия1
	               |		ПО ВСД_Соответсвия.Номенклатура = ВСД_Соответсвия1.Владелец
	               |			И ВСД_Соответсвия.ПродукцияЭлемент = ВСД_Соответсвия1.ПродукцияЭлемент
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВСД_Соответсвия.Номенклатура,
	               |	ВСД_Соответсвия.ПродукцияЭлемент,
	               |	ВСД_Соответсвия1.Владелец";
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.КолвоПродукцияЭлемент=0 Тогда 
				СпрОб = Справочники.ВСД_Соответсвия.СоздатьЭлемент();
				СпрОб.Владелец = Выборка.Номенклатура;
				СпрОб.ПродукцияЭлемент = Выборка.ПродукцияЭлемент;
				СпрОб.Наименование =  СпрОб.ПродукцияЭлемент;
				СпрОб.Записать();
				ВСД.СообщитьИнфо("Записан "+СпрОб,СпрОб.Ссылка);
			КонецЕсли;
		КонецЦикла;
	
	Исключение 
	КонецПопытки
	
КонецПроцедуры

&НаКлиенте
Процедура кнВерсия2ОбновитьСправочники(Команда)
	кнВерсия2ОбновитьСправочникиНаСервере();
КонецПроцедуры

&НаСервере
Функция СоздатьИнвентаризациюНаСервере()
	
	ДокВСД = Документы.ВСД2_Инвентаризация.СоздатьДокумент();
	
	ДокВСД.Дата = Объект.ДатаНачалаОтбора; 
	ДокВСД.Организация = Объект.Организация;
	ДокВСД.Владелец_ХозСубъект = Объект.Отправитель_ХозСубъект;
	ДокВСД.Владелец_площадка = Объект.Отправитель_Площадка;
	ДокВСД.ПричинаРасхождения = "Отсутсвие партий";
	ДокВСД.ОписаниеНесоответствия = "Отсутсвие партий";
	
	// ПараметрыЗаполнения = Новый Структура;
	// ПараметрыЗаполнения.Вставить("ПараметрыДокумента", ПараметрыДокумента);
	// ПараметрыЗаполнения.Вставить("ДокументОснование", СтрОтгрузки.Док);
	// ПараметрыЗаполнения.Вставить("тзАктуальныхПартий", тзАктуальныхПартий);

	ДокВСД.Заполнить( Объект.Партии.Выгрузить() );
	ДокВСД.Записать();

	Возврат ДокВСД.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура СоздатьИнвентаризацию(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// ПоказатьОповещениеПользователя("Выполняется пермещение..",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		ДокВСД = СоздатьИнвентаризациюНаСервере();	
		
		ОткрытьЗначение(ДокВСД);
		
		// ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьИнвентаризацию(Команда)
	ТВопроса = "Создать ВСД2_Инвентаризация по списку недостающих партий ?";
    Оповещение = Новый ОписаниеОповещения("СоздатьИнвентаризацию",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

#Область ВнутреннееПеремещение 

&НаСервере
Функция ЗаполнитьТабЧастьЭлементовДляСозданияВСД( ) Экспорт
	// Обработка = ФункцияПереопределена("ЗаполнитьТабЧастьЭлементовДляСозданияВСД");
	// Если обработка <> Неопределено Тогда
	//	Возврат Обработка.ЗаполнитьТабЧастьЭлементовДляСозданияВСД(ЭтотОбъект, ДокОсн);		
	// КонецЕсли;		
 	// Данные из таблицы Партии по недостающим к реализации
	// либо из докОснования - ВыгрузитьТЧ выполняется
	
	РезТаб = Новый ТаблицаЗначений;
	РезТаб.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РезТаб.Колонки.Добавить("Продукция_Элемент",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция_Элемент"));
	РезТаб.Колонки.Добавить("Количество",новый ОписаниеТипов("Число"));
	РезТаб.Колонки.Добавить("Упаковки"); // для совместимости с ВыгрузитьТЧ
	// Если Докосн = Неопределено Тогда
		Для Каждого стрПартии Из Объект.Партии Цикл
			Если НЕ(ЗначениеЗаполнено(стрПартии.ВСД_Продукция_Элемент)) Тогда
				Продолжить;	
			КонецЕсли;
			Если (стрПартии.КоличествоСписания - стрПартии.Количество) <= 0 Тогда 
				Продолжить; // пропустим то что есть в наличии				
			КонецЕсли;			
			стрТаб = Резтаб.Добавить();
			стрТаб.Продукция_Элемент = стрПартии.ВСД_Продукция_Элемент;
			стрТаб.Количество = стрПартии.КоличествоСписания - стрПартии.Количество;
		КонецЦикла;
	// иначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.ВСД2_транзакция") Тогда		
	//	Для каждого строкаДок Из Докосн.Товары  Цикл
	//		стрТаб = Резтаб.Добавить();
	//		стрТаб.Номенклатура = строкаДок.Номенклатура;
	//		стрТаб.Продукция_Элемент = ?(ЗначениеЗаполнено(строкаДок.Продукция_Элемент), строкаДок.Продукция_Элемент, ВСД.ПолучитьВСДПродукцияЭлементПоНоменклатуре(строкаДок.Номенклатура) );
	//		стрТаб.Количество = строкаДок.Количество;			
	//	КонецЦикла
	// Иначе
	//	// возьмем реализацию тогда за Основу...
	//	Возврат ВСД_Общий.ВыгрузитьТЧ(ДокОсн);
	// КонецЕсли;
	
	Возврат резТаб;
КонецФункции

&НаСервере
// ПолучитьДанныеДляСозданияВСДПеремещения
Функция ВСД_Перемещение_Отправить(  ) Экспорт
	
    ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Организация", Объект.ПарамПоставщикОрганизация);
	ПараметрыДокумента.Вставить("Отправитель_Хозсубъект", Объект.ПарамПоставщикХозСубъект);
	ПараметрыДокумента.Вставить("Отправитель_Площадка", Объект.ПарамПоставщикПлощадка);
	ПараметрыДокумента.Вставить("ОрганизацияПолучатель", Объект.Организация);
	ПараметрыДокумента.Вставить("Получатель_Хозсубъект", Объект.Отправитель_Хозсубъект);
	ПараметрыДокумента.Вставить("Получатель_Площадка", Объект.Отправитель_Площадка);
	ПараметрыДокумента.Вставить("ДокОснование", Неопределено);	
	ПараметрыДокумента.Вставить("ТтнНомер","1");	
	
	тзТовары = ЗаполнитьТабЧастьЭлементовДляСозданияВСД( );
	ПараметрыДокумента.Вставить("Товары", тзТовары );	
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПараметрыДокумента", ПараметрыДокумента);
	ПараметрыЗаполнения.Вставить("ДокументОснование", Неопределено);
	
	СписокКонстант = ВСД.ЗагрузитьПараметры( Объект.ПарамПоставщикОрганизация );
	тзАктуальныхПартий = ВСД.ПолучитьАктуальныеПартии(СписокКонстант, тзТовары.ВыгрузитьКолонку("Продукция_Элемент"), Объект.ПарамПоставщикПлощадка, Объект.ПарамПоставщикХозСубъект );
	ПараметрыЗаполнения.Вставить("тзАктуальныхПартий", тзАктуальныхПартий);	
	
	//ДокВСД = СоздатьДокумент_ВСД2_Транзакция(СписокПараметров);
	ДокВСД = Документы.ВСД2_Транзакция.СоздатьДокумент();
	ДокВСД.Заполнить( ПараметрыЗаполнения );
	ДокВСД.Записать();
		
	Возврат ДокВСД.Ссылка;
КонецФункции

&НаКлиенте
Функция ВнутреннееПеремещение() Экспорт
	////Контрользаполненности параметров Поставщика
	//Если (НЕ ЗначениеЗаполнено(ПарамПоставщикОрганизация)) или
	//	(НЕ ЗначениеЗаполнено(ПарамПоставщикХозСубъект)) или
	//	(НЕ ЗначениеЗаполнено(ПарамПоставщикПлощадка)) Тогда
	//	Сообщить("Не заполнен Параметр Основной Постащик");
	//	Возврат "НЕТПАРАМЕТРОВ";
	//КонецЕсли;
	
	ДокВСД = ВСД_Перемещение_Отправить();
		
	Сообщить("Отправляем запрос на Внутреннее перемещение...");
	
	ТаблицаВсдДляГашения = Неопределено;
	ПараметрыОрганизации = ВСД.ЗагрузитьПараметры( ДокВСД.Организация );
	Ответ = ВСД_Запросы.ВСД2_транзакция_Отправить( ПараметрыОрганизации, ДокВСД, ТаблицаВсдДляГашения );
	
	Если Ответ = "COMPLETED" Тогда
		
		ПоказатьОповещениеПользователя("Выполняем Гашение ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТаблицаВсдДляГашения", ТаблицаВсдДляГашения);
		//СтруктураПараметров.Вставить("Организация", ДокСсылка.Организация );
		СтруктураПараметров.Вставить("Организация", ДокВСД.ОрганизацияПолучатель );
		СтруктураПараметров.Вставить("Отправитель_ХозСубъект", ДокВСД.Получатель_ХозСубъект );
		СтруктураПараметров.Вставить("Отправитель_Площадка", ДокВСД.Получатель_Площадка );
		ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаГашениеУФ",СтруктураПараметров,);
		
		ПоказатьОповещениеПользователя("Выполнено");
				
	Иначе		
		Сообщить("Неудача при отправке "+ДокВСД, СтатусСообщения.ОченьВажное);
		Сообщить("Отправьте вручную, погасите у Получателя.", СтатусСообщения.ОченьВажное);
		ОткрытьЗначение( ДокВСД );
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// &НаСервере
// Функция кнПереместитьОтПоставщикаНаСервере()
//    ФОбъект = РеквизитФормыВЗначение("Объект");
//	Возвртат = ФОбъект.СменаВладельцаВызовИзФормы();
//	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
// КонецФункции

&НаКлиенте
Процедура кнПереместитьОтПоставщикаОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется пермещение..",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		ВнутреннееПеремещение();
		// Рез = кнПереместитьОтПоставщикаНаСервере();	
		// Если Рез = "ОК" Тогда
		//	кнЗаполнитьТаблицуПартий("");
		// ИначеЕсли Рез = "ОШИБКААВТОГАШЕНИЯ" Тогда
		//	// ??? для УФ не прокатит
		//	Форма = ПолучитьФорму("ФормаГашение");
		//	ОткрытьФормуМодально(Форма);
		// КонецЕсли;
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПереместитьОтПоставщика(Команда)
	// ПредупреждениеПользователю("В Разработке");
	ТВопроса = "Создать ВСД2_Транзакцию по списку недостающих партий
	|на перемещение от "+Объект.ПарамПоставщикПлощадка+ " ?";
    Оповещение = Новый ОписаниеОповещения("кнПереместитьОтПоставщикаОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

#КонецОбласти
