// Форма Гашение для УП

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Попытка
		КопироватьДанныеФормы(ВладелецФормы.Объект, Объект);
	Исключение КонецПопытки;
	
	Объект.флСоздаватьВсдВходящий = Ложь; // не создаем ВСД в 1С
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СтандартнаяОбработка         = Ложь;
	Закрыть(Объект);
КонецПроцедуры
//*******************  Открытие/Закрыте формы окончание

&НаСервере
Функция ЗаполнитьВСДВходящийИзТЗ( стрвход ) Экспорт
//	Для каждого стрВход из ВСДВходящие Цикл
//		если НЕ стрвход.Отметка Тогда
//			Продолжить;	
//		КонецЕсли;
		докОбъект = кб99_ВСД_Запросы.ВСД2_Входящий_НайтиПоUUID( стрВход.uuid );//Документы.ВСД2_входящий.СоздатьДокумент();//	
		докОбъект.ФормаВСД 	 = стрВход.ФормаВСД;
	
		докОбъект.applicationId = стрВход.applicationId;
		докОбъект.uuid = стрВход.uuid;
		докОбъект.Статус = стрВход.Статус;
		докОбъект.Дата = стрВход.Дата;
		докОбъект.ВСДДата = стрВход.ВСДДата;		
		докОбъект.Организация = стрВход.Организация;
		докОбъект.ТипВСД = стрВход.ТипВСД;
		
		докОбъект.всдсерия =стрВход.всдсерия;
		докОбъект.всдномер =стрВход.всдномер;  
		докОбъект.ВидВСД = стрВход.ВидВСД ; 
		
		докОбъект.Отправитель_ХозСубъект = стрВход.Отправитель_ХозСубъект;
		докОбъект.Отправитель_Площадка 	= стрВход.Отправитель_Площадка;
		докОбъект.Получатель_ХозСубъект = стрВход.Получатель_ХозСубъект;
		докОбъект.Получатель_Площадка 	= стрВход.Получатель_Площадка;
		докОбъект.ВладелецХС = стрВход.ВладелецХС;
        докОбъект.Перевозчик_ХозСубъект = стрВход.Перевозчик_ХозСубъект;
		
		докОбъект.номеравто = стрВход.номеравто; 
		докОбъект.номерПолуприцепа = стрВход.номерПолуприцепа;
		докОбъект.номерКонтейнера = стрВход.номерКонтейнера;
		докОбъект.ТипТС = стрВход.ТипТС;
		докОбъект.термическоесостояние = стрВход.термическоесостояние;
			
		докОбъект.Продукция 	= стрВход.Продукция;
		докОбъект.ВидПродукции 	= стрВход.ВидПродукции; 
		докОбъект.Продукция_Элемент = стрВход.Продукция_Элемент;
		докОбъект.НаименованиеПродукции = стрВход.НаименованиеПродукции;
		докОбъект.GTIN = стрВход.GTIN;
		докОбъект.Артикул = стрВход.Артикул;
		докОбъект.ФасовкаНаименование = стрВход.ФасовкаНаименование;
		докОбъект.ФасовкаФормаУпаковки = стрВход.ФасовкаФормаУпаковки;
		докОбъект.ФасовкаКоличество = стрВход.ФасовкаКоличество;
		докОбъект.ФасовкаОбъем = стрВход.ФасовкаОбъем;
		докОбъект.ФасовкаЕдиницаИзм = стрВход.ФасовкаЕдиницаИзм;
		
		
		// Объем продукции
		Попытка
			докОбъект.КоличествоПринять = стрВход.КоличествоПринять;// - стрВход.КоличествоВозврат;
			докОбъект.КоличествоВозврат = стрВход.КоличествоВозврат;
		Исключение КонецПопытки;
	
		докОбъект.Количество 		= стрВход.Количество;
		докОбъект.ЕдиницаИзмерения	= стрВход.ЕдиницаИзмерения;
		
		докОбъект.ДатаИзготовления1 = стрВход.ДатаИзготовления1;
		докОбъект.ДатаИзготовления2 = стрВход.ДатаИзготовления2; 
		докОбъект.ДатаИзготовления = стрВход.ДатаИзготовления; 
		
		//ДокОбъект.ДатаИзготовления1XML.Очистить();
		//ДокОбъект.ДатаИзготовления2XML.Очистить();
		//ДокОбъект.ДатаСрокГодности1XML.Очистить();
		//ДокОбъект.ДатаСрокГодности2XML.Очистить();

		//Если ЗначениеЗаполнено(стрВход.ДатаИзготовления1СЗ) Тогда
		//	сзДаты = ЗначениеИзСтрокиВнутр(стрВход.ДатаИзготовления1СЗ);
		//	для каждого элементсз из сзДаты Цикл
		//		стрТЧ = ДокОбъект.ДатаИзготовления1XML.Добавить();
		//		стрТЧ.СтрокаXML = элементсз.значение;
		//	КонецЦикла;
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(стрВход.ДатаИзготовления2СЗ) Тогда
		//	сзДаты = ЗначениеИзСтрокиВнутр(стрВход.ДатаИзготовления2СЗ);
		//	для каждого элементсз из сзДаты Цикл
		//		стрТЧ = ДокОбъект.ДатаИзготовления2XML.Добавить();
		//		стрТЧ.СтрокаXML = элементсз.значение;
		//	КонецЦикла;
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(стрВход.ДатаСрокГодности1СЗ) Тогда
		//	сзДаты = ЗначениеИзСтрокиВнутр(стрВход.ДатаСрокГодности1СЗ);
		//	для каждого элементсз из сзДаты Цикл
		//		стрТЧ = ДокОбъект.ДатаСрокГодности1XML.Добавить();
		//		стрТЧ.СтрокаXML = элементсз.значение;
		//	КонецЦикла;
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(стрВход.ДатаСрокГодности2СЗ) Тогда
		//	сзДаты = ЗначениеИзСтрокиВнутр(стрВход.ДатаСрокГодности2СЗ);
		//	для каждого элементсз из сзДаты Цикл
		//		стрТЧ = ДокОбъект.ДатаСрокГодности2XML.Добавить();
		//		стрТЧ.СтрокаXML = элементсз.значение;
		//	КонецЦикла;
		//КонецЕсли;		
		
		докОбъект.ДатаСрокГодности1 = стрВход.ДатаСрокГодности1;
		докОбъект.ДатаСрокГодности = стрВход.ДатаСрокГодности; 
		докОбъект.ДатаСрокГодности2 = стрВход.ДатаСрокГодности2;

		докОбъект.НомераПартий.Очистить();
		Если ЗначениеЗаполнено(стрВход.НомерПартии) Тогда
			спНомераПартий = ЗначениеИзСтрокиВнутр(стрВход.НомерПартии);
			Для Каждого СтрокаНомера Из спНомераПартий Цикл
				стрТЧ = ДокОбъект.НомераПартий.Добавить();
				стрТЧ.НомерПартии = СокрЛП(СтрокаНомера.Значение); 
			КонецЦикла;
		КонецЕсли;
		
		докОбъект.Скоропортящийся = стрВход.Скоропортящийся;
		докОбъект.Некачественный =  стрВход.Некачественный;

		докОбъект.Производители.Очистить();		
		Если ЗначениеЗаполнено(стрВход.ПроизводителиСписок) Тогда    
			СпПроизводители = ЗначениеИзСтрокиВнутр(стрВход.ПроизводителиСписок);
			Для Каждого Производитель Из СпПроизводители Цикл
				стрТЧ = ДокОбъект.Производители.Добавить();
				стрТЧ.Площадка = Производитель.Площадка;
				стрТч.Роль = СокрЛП(Производитель.Роль);
				стрТЧ.Имя = СокрЛП(Производитель.Имя);
			КонецЦикла;
		КонецЕсли;
		
		докОбъект.УровниУпаковки.Очистить();
		докобъект.Маркировка.Очистить();
		
		Если ЗначениеЗаполнено(стрВход.УровниУпаковки) Тогда 
    		ТЗУровни = ЗначениеИзСтрокиВнутр(стрВход.УровниУпаковки);
		Иначе
			ТЗУровни = "";
		КонецЕсли;
		Если ТипЗнч(ТЗУровни) = Тип("ТаблицаЗначений") Тогда
			Для Каждого стрУровня Из ТЗУровни Цикл
				стрТч = докобъект.УровниУпаковки.Добавить();
				стрТЧ.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);
				стрТЧ.ФормаУпаковки = стрУровня.Упаковка;
				стрТЧ.Количество = стрУровня.Колво;
				Попытка	СзМаркировок = ЗначениеИзСтрокиВнутр(стрУровня.Маркировки); Исключение СзМаркировок = ""; КонецПопытки;
				Если ТипЗнч(СзМаркировок) = Тип("СписокЗначений") Тогда
					Для Каждого стрМаркировки Из СзМаркировок Цикл
						стрТчМ = докобъект.Маркировка.Добавить();
						стрТЧМ.Маркировка = стрМаркировки.Значение;
						стрТЧМ.Класс = Перечисления.ВСД_Маркировка[стрМаркировки.Представление];//стрМаркировки.Представление;
						стрТЧМ.НомерУровня = стрТЧ.НомерУровня;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		докобъект.СвязанныеДокументы.Очистить();
		докобъект.МаршрутСледования.Очистить();
		Если ЗначениеЗаполнено(стрВход.СвязанныеДокументы) Тогда    
			СпСвязанныеДокументы = ЗначениеИзСтрокиВнутр(стрВход.СвязанныеДокументы);
			Для Каждого строкаДок Из СпСвязанныеДокументы Цикл
				стрТЧ = ДокОбъект.СвязанныеДокументы.Добавить();
				СтрТЧ.ТипДокумента = строкаДок.ТипДокумента;
				стрТЧ.ДатаДокумента = кб99_ВСД_Запросы.СтрокаВДату(строкаДок.ДатаДокумента);
				стрТЧ.НомерДокумента = строкаДок.НомерДокумента;
				стрТЧ.СерияДокумента = строкаДок.СерияДокумента;
				стрТЧ.ТипОтношенияДок = строкаДок.ТипОтношенияДок;
			КонецЦикла;
		КонецЕсли;
		докобъект.ТтнДата = стрВход.ТтнДата;
		докобъект.ТтнСерия = стрВход.ТтнСерия;
		докобъект.ТтнНомер = стрВход.ТтнНомер;
		докобъект.ТтнТип = стрВход.ТтнТип;
		Если ЗначениеЗаполнено(стрВход.МаршрутСледования) Тогда    
			Маршруты = ЗначениеИзСтрокиВнутр(стрВход.МаршрутСледования);
			Для Каждого точкаМаршрута Из Маршруты Цикл
				стрТЧ = ДокОбъект.МаршрутСледования.Добавить();
				стрТЧ.UUID = точкаМаршрута.UUID;
				стрТЧ.НомерТочки = точкаМаршрута.НомерТочки;
				стрТЧ.Перегрузка = точкаМаршрута.Перегрузка;
				стрТЧ.Площадка = точкаМаршрута.ВыбПлощадка;
				стрТЧ.ТипТранспорта  = точкаМаршрута.ТипТранспорта;
				стрТЧ.номеравто = точкаМаршрута.номеравто;
				стрТЧ.номерПрицепа = точкаМаршрута.номерПрицепа;
				стрТЧ.номерКонтейнера = точкаМаршрута.номерКонтейнера;
				стрТЧ.номерВагона = точкаМаршрута.номерВагона;
				стрТЧ.НомерАвиарейса = точкаМаршрута.НомерАвиарейса;
				стрТЧ.НазваниеСудна = точкаМаршрута.НазваниеСудна;
			КонецЦикла;
		КонецЕсли;

		докОбъект.Страна_ГУИД = стрВход.Страна_ГУИД;

		докОбъект.cargoInspected = стрВход.cargoInspected;
		докОбъект.РезультатыИсследований = стрВход.РезультатыИсследований;
		докОбъект.особыеотметки = стрВход.особыеотметки;
		докОбъект.Местность = стрВход.Местность; //В гашении ВСДМестность
		докОбъект.ТермическиеУсловияПеревозки = стрВход.ТермическиеУсловияПеревозки;
		
		докОбъект.Записать(РежимЗаписиДокумента.Запись);// .Проведение);
		кб99_ВСД.СообщитьИнфо("Записан "+докОбъект+" "+докОбъект.Номер+" от "+докОбъект.Дата+" ["+докОбъект.uuid+"]");
		Возврат докобъект.ссылка;
//	КонецЦикла;
КонецФункции

&НаСервере
Процедура ОтправкаЗапросовНаГашение() Экспорт
	Отправлено = 0;
	Для Каждого СтрокаТЗ Из Объект.ВСДВходящие Цикл 
		Если НЕ(СтрокаТЗ.Отметка) Тогда
		    Продолжить;
		КонецЕсли;
		
		Если (СтрокаТЗ.КоличествоВозврат > 0) И НЕ ЗначениеЗаполнено(СтрокаТЗ.ДокВСД) Тогда 
			СтрокаТЗ.ДокВСД = ЗаполнитьВСДВходящийИзТЗ(СтрокаТЗ);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.ДокВСД) Тогда
			СтрокаТЗ.ДокВСД = ЗаполнитьВСДВходящийИзТЗ(СтрокаТЗ); // Перезаполнить данными из ТЗ - вдруг юзер поменял все в колонках
		КонецЕсли;

		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );		
		ПараметрыОрганизации.Вставить("флАктНесоответствия", флАктНесоответствия);
		ПараметрыОрганизации.Вставить("тПричинаАкта", тПричинаАкта);
		ПараметрыОрганизации.Вставить("тОписаниеНесоответствия", тОписаниеНесоответствия);
		
		Если Объект.флСоздаватьВсдВходящий Тогда
			//или (ЗначениеЗаполнено(СтрокаТЗ.ДокВСД)) Тогда   - изменить запрос на гашение по документу
			Если НЕ(ЗначениеЗаполнено(СтрокаТЗ.ДокВСД)) Тогда
			    Продолжить;
			КонецЕсли;
			Если СтрокаТЗ.ДокВСД.Проведен Тогда
			    Продолжить;
			КонецЕсли;
			СтрокаТЗ.Статус = кб99_ВСД_Запросы.ВСД2_Входящий_ОтправитьГашение( ПараметрыОрганизации, СтрокаТЗ.ДокВСД, СтрокаТЗ.ВСД_Партия );
		Иначе
			Если СокрЛП(СтрокаТЗ.Статус) = "COMPLETED" Тогда
				кб99_ВСД.СообщитьИнфо("Партия уже оформлена. uuid "+СтрокаТЗ.uuid);
		    	Продолжить;
			КонецЕсли;
			СтрокаТЗ.Статус = кб99_ВСД_Запросы.ВСД2_Входящий_ОтправитьГашение( ПараметрыОрганизации, СтрокаТЗ, СтрокаТЗ.ВСД_Партия ); // не создаем документ ВСД2_Входящий в 1с
		КонецЕсли;
		
		//Если СтрокаТЗ.Статус = "COMPLETED" Тогда
		//	СтрокаТЗ.Сцвет = 3;   //
		//ИначеЕсли СтрокаТЗ.Статус = "REJECTED" Тогда
		//	СтрокаТЗ.Сцвет = 4;   //
		//ИначеЕсли СтрокаТЗ.Статус = "IN_PROCESS" Тогда
		//	СтрокаТЗ.Сцвет = 5;  
		//КонецЕсли;
		
		Отправлено = Отправлено + 1;
		СтрокаТЗ.Отметка = 0;
	КонецЦикла;

КонецПроцедуры // Отправка()


&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	//Фобъект = РеквизитФормыВЗначение("Объект");
	//ФОбъект.Инициализация();
	//ЗначениеВРеквизитФормы(Фобъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.ВСДВходящие.Очистить();
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отбор по ХС включим
	Если Элемент.имя = "ВыбрПлощадка" Тогда
		ГУИДХСдляОтбора = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбрХозСубъект,"GUID");
	Иначе
		ГУИДХСдляОтбора = кб99_ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Объект.Отправитель_ХозСубъект,"GUID");
	КонецЕсли;
	ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ПлощадкаПриИзменении(Элемент)
	Объект.ВСДЭлементы.Очистить();
	объект.Отгрузки.Очистить();
	Объект.Партии.Очистить();
	объект.ВСДВходящие.Очистить();
КонецПроцедуры

// Вкладка Гашение

&НаКлиенте
Процедура ВСДВходящиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьВсеДокументы(Команда)
	Для Каждого стр Из объект.ВСДВходящие Цикл
		стр.Отметка = Ложь;
		Если стр.Статус = "COMPLETED" Тогда
			Продолжить;	
		КонецЕсли;
		Если НЕ(стр.Отметка) Тогда 
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиДокументов(Команда)
	Для Каждого стр Из Объект.ВСДВходящие Цикл
		Если (стр.Отметка) Тогда 
			стр.Отметка = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура кнПолучитьВСДНаСервере()
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	Запросов = 20;
	ВсдМассив = Новый Массив;
	Результат = кб99_ВСД_Запросы.ПолучитьСписокВСД( ПараметрыОрганизации, Объект.Отправитель_Площадка, "INCOMING", "CONFIRMED", 0, ВыбначалоПериода, ВыбОкончаниеПериода, ВыбрХозСубъект, ВыбрПлощадка, Ложь, ВсдМассив );
	Пока Результат = "REJECTED" и (Запросов > 0) Цикл
		Запросов = Запросов - 1;
		кб99_ВСД.СообщитьИнфо("Попыток запроса ВСД осталось "+Запросов);
		Результат = кб99_ВСД_Запросы.ПолучитьСписокВСД( ПараметрыОрганизации, Объект.Отправитель_Площадка, "INCOMING", "CONFIRMED", 0, ВыбначалоПериода, ВыбОкончаниеПериода, ВыбрХозСубъект, ВыбрПлощадка, Ложь, ВсдМассив );
	КонецЦикла;
	
	Объект.ВСДВходящие.Очистить();
	Для Каждого строкаВСД Из ВсдМассив Цикл
		СтрокаВСДВходящие = Объект.ВСДВходящие.Добавить();
		ЗаполнитьЗначенияСвойств( СтрокаВСДВходящие, строкаВСД );
		СтрокаВСДВходящие.Статус = "";
	КонецЦикла;
	
	УстановитьФильтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьВСД(Команда)
	ПоказатьОповещениеПользователя("Выполняем запрос Входящих ВСД по "+Объект.Отправитель_Площадка,,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнПолучитьВСДНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

//&НаСервере
//Процедура кнПогаситьНаСервере()
//	//Объект.ФлАктНесоответствия = флАктНесоответствия;
//	//объект.тПричинаАкта = тПричинаАкта;
//	//объект.тОписаниеНесоответствия = тОписаниеНесоответствия;
//	//Фобъект = РеквизитФормыВЗначение("Объект");
//	//ФОбъект.ОтправкаЗапросовНаГашение();
//	//ЗначениеВРеквизитФормы(Фобъект,"Объект");
//	ОтправкаЗапросовНаГашение();
//КонецПроцедуры

&НаКлиенте
Процедура кнПогасить(Команда)
	ПоказатьОповещениеПользователя("Выполняем запрос Гашения Входящих ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	//кнПогаситьНаСервере();
	ОтправкаЗапросовНаГашение();
	ПоказатьОповещениеПользователя("Выполнено");	
КонецПроцедуры


// ТЕСТ Раработчик
&НаСервере
Процедура кнЗагрузитьИзФайлаНаСервере()
	//Объект - ДанныеФормыСтруктура, Объект.ВСДВходящие = ДанныеФормыКоллекция
	//ФОбъект - ОбработкаОбъект
	Фобъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ЗагрузитьXML_ВСД2(ФОбъект.СтрИмяФайла,ФОбъект.ВСДВходящие);
	Для Каждого стрВход Из ФОбъект.ВСДВходящие Цикл
		стрВход.ДокВСД = ФОбъект.НайтиВСД_ВходящийпоUUID(стрВход.uuid);
		Если значениеЗаполнено(стрВход.ДокВСД) Тогда
			стрВход.КоличествоПринять = стрВход.ДокВСД.КоличествоПринять;
			стрВход.КоличествоВозврат = стрВход.ДокВСД.КоличествоВозврат;
			
			//стрВход.ДокВозврат = ВСД.НайтиВСД_ИсходящийНаВозврат(стрВход.ДокВСД);	
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Фобъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьИзФайла(Команда)
	Объект.ВСДВходящие.Очистить();
	кнЗагрузитьИзФайлаНаСервере();
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьПартииИзФайлаНаСервере()
	Фобъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ЗагрузитьXML_Партии2(Объект.СтрИмяФайла);
	ЗначениеВРеквизитФормы(Фобъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьПартииИзФайла(Команда)
	кнЗагрузитьПартииИзФайлаНаСервере();
КонецПроцедуры

// ***** Соответствия
&НаСервере
Функция ПолучитьНоменклатуруПоПродукцияЭлемент(ПродукцияЭлемент, Только1элемент = Ложь)
	//// Возврашает массив со ссылками на Номенклатуру или первый элемент Номенклатура
	//// Вынести в ГМ
	//Запрос = Новый Запрос;
	//Запрос.Текст = "Выбрать ВСД_Соответсвия.Номенклатура из РегистрСведений.ВСД_Соответсвия как ВСД_Соответсвия где ВСД_Соответсвия.ПродукцияЭлемент = &Ресурс1";
	//Запрос.УстановитьПараметр("Ресурс1", ПродукцияЭлемент);	
	//Если Не Только1Элемент Тогда
	//	ТзВрем = Запрос.Выполнить().Выгрузить();
	//	ТзВрем.ВыгрузитьКолонку("Номенклатура");
	//	Возврат ТзВрем.ВыгрузитьКолонку("Номенклатура");		
	//Иначе
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Возврат Выборка.Номенклатура;
	//	Иначе
	//		Возврат "";
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат кб99_ВСД.ПолучитьНоменклатуруПоПродукцияЭлемент( ПродукцияЭлемент, Только1элемент);
	
КонецФункции

&НаСервере
Функция НайтиНоменклатуруПоРеквизиту(ВыбРеквизит,ЗначениеРеквизита)
	Рез = "";
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|Выбрать Номенклатура.Ссылка из Справочник.Номенклатура как Номенклатура 
	|где Номенклатура.@ИмяРекв = &ЗначРеквизита";
	текстЗапроса = СтрЗаменить(ТекстЗапроса,"@ИмяРекв",ВыбРеквизит);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначениеРеквизита);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Рез = Выборка.Ссылка;	
		КонецЕсли;
	Исключение
		кб99_ВСД.СообщитьИнфо("Что-то пошло не так");
		кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());
	КонецПопытки;
	Возврат Рез;
	
КонецФункции

&НаСервере
Процедура ОчиститьСоответствие(ВыбНоменклатура,ВСДЭлемент)
	// Вынести в ГМ
	//Набор = РегистрыСведений.ВСД_Соответсвия.СоздатьНаборЗаписей();
	//Набор.Отбор.Номенклатура.Установить(ВыбНоменклатура);
	//Набор.Отбор.Номенклатура.Использование = Истина;
	//Набор.Прочитать();
	//Набор.Очистить();
	//Набор.Записать(true);
	
	кб99_ВСД.ОчиститьСоответствие_ВСД_Продукция_Элемент( ВыбНоменклатура, ВСДЭлемент );
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗСоответствий(сзПродукцияЭлементы)
	//Вынести в модуль объекта
	// Заполнение Продукция_элементом  + сразу поиск установленных соответствий
	// сзПродукцияЭлементы - Список Значений
	Объект.Соответствия.Очистить();
	тз = Объект.Соответствия.Выгрузить(); //Взяли структуру
	Для Каждого стрТз Из сзПродукцияЭлементы Цикл
		стрСоотв = тз.Добавить();
		стрСоотв.Продукция_Элемент = стрТз.Значение;//Продукция_Элемент;
		стрСоотв.Производитель = стрСоотв.Продукция_Элемент.Площадка;
		стрСоотв.Артикул = стрСоотв.Продукция_Элемент.Артикул;
		стрСоотв.GTIN = стрСоотв.Продукция_Элемент.GTIN;
		стрСоотв.Номенклатура = ПолучитьНоменклатуруПоПродукцияЭлемент(стрСоотв.Продукция_Элемент, 1);
		Если ЗначениеЗаполнено(стрСоотв.Номенклатура) Тогда
			стрСоотв.Записано = true;	
		КонецЕсли;
	КонецЦикла;
	//Свернем, т.к. могут повторяться
	тз.Свернуть("Продукция_Элемент,Номенклатура,Артикул,GTIN,Производитель,Записано","");
	Объект.Соответствия.Загрузить(тз);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСПоискомПоРеквизиту(ВыбРеквизит,ИмяРекв = "Артикул")
	тз = Объект.Соответствия.Выгрузить();
	Для Каждого строкаТз Из тз Цикл
		Если (строкаТз.Записано) или (ЗначениеЗаполнено(строкаТз.Номенклатура)) Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяРекв = "Артикул" Тогда
		    ВыбЗначение = СокрЛП(строкаТз.Артикул);
		Иначе
		    ВыбЗначение = СокрЛП(строкаТз.GTIN);
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(ВыбЗначение)) Тогда
			Продолжить;	
		КонецЕсли;		
		строкаТз.Номенклатура = НайтиНоменклатуруПоРеквизиту(ВыбРеквизит,ВыбЗначение);
	КонецЦикла;
	Объект.Соответствия.Загрузить(Тз);
КонецПроцедуры

//**** кнопки

&НаСервере
Процедура кнЗаполнитьТзСоответствийСервер()
	Фобъект = РеквизитФормыВЗначение("Объект");
	сзЭлементы = Новый СписокЗначений;
	сзЭлементы.ЗагрузитьЗначения(Фобъект.ВсдВходящие.ВыгрузитьКолонку("Продукция_Элемент"));
	ЗаполнитьТЗСоответствий(сзЭлементы);
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнитьТзСоответствий(Команда)
	кнЗаполнитьТзСоответствийСервер();
КонецПроцедуры

&НаСервере
Процедура кнЗаполнитьИзСправочникаНаСервере()
	// Заполним из Справочника ВСД_Продукция_Элемент
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВСД_Продукция_Элемент.Ссылка
	               |ИЗ
	               |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
	               |ГДЕ
	               |	ВСД_Продукция_Элемент.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВСД_Продукция_Элемент.Наименование";
	Запрос.Текст = ТекстЗапроса;
	ТзВрем = Запрос.Выполнить().Выгрузить();
	сзЭлементы = Новый СписокЗначений;
	сзЭлементы.ЗагрузитьЗначения(ТзВрем.ВыгрузитьКолонку("Ссылка"));
	ЗаполнитьТЗСоответствий(сзЭлементы);
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнитьИзСправочника(Команда)
	кнЗаполнитьИзСправочникаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура кнНайтиПоАртикулу(Команда)
	ЗаполнитьСПоискомПоРеквизиту(ИмяРеквизитаАртикул,"Артикул");
КонецПроцедуры

&НаКлиенте
Процедура кнНайтиПоШК(Команда)
	ЗаполнитьСПоискомПоРеквизиту(ИмяРеквизитаШК,"ШК");
КонецПроцедуры

&НаСервере
Процедура кнЗаписатьСоответствияНаСервере()
	тз = Объект.Соответствия.Выгрузить();
	Для Каждого строкаТз Из тз Цикл
		Если (строкаТз.Записано) или НЕ(ЗначениеЗаполнено(строкаТз.Номенклатура)) Тогда
			Продолжить;
		КонецЕсли;
		кб99_ВСД.Установить_Соответствие_ВСД_Продукция_Элемент(СтрокаТЗ.Номенклатура,СтрокаТЗ.Продукция_Элемент);
		строкаТЗ.Записано = True;
	КонецЦикла;
	Объект.Соответствия.Загрузить(Тз);
КонецПроцедуры

&НаКлиенте
Процедура кнЗаписатьСоответствия(Команда)
	кнЗаписатьСоответствияНаСервере();
КонецПроцедуры

&НаСервере
Процедура кнУбратьЗаполненныеНаСервере()
	тз = Объект.Соответствия.Выгрузить();
	Найдено = тз.Найти(True,"Записано"); 
	Пока НЕ(Найдено = Неопределено) Цикл
		тз.Удалить(Найдено);
		Найдено = тз.Найти(True,"Записано");
	КонецЦикла;
	Объект.Соответствия.Загрузить(Тз);
КонецПроцедуры

&НаКлиенте
Процедура кнУбратьЗаполненные(Команда)
	кнУбратьЗаполненныеНаСервере();
КонецПроцедуры
// События Соответствия

&НаКлиенте
Процедура СоответствияНоменклатураНачалоВыбораОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСоответствие(Парам.Номенклатура,Парам.Продукция_Элемент);
		Парам.Номенклатура = "";
		Парам.Записано = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоответствияНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Родитель.ТекущиеДанные.Записано Тогда
		ТекстВопроса = "Установлена связь с 
		|"+Элемент.Родитель.ТекущиеДанные.Продукция_Элемент+"
		|Отвязываем ?";
		Парам = Новый Структура("Номенклатура,Продукция_Элемент,Записано",Элемент.Родитель.ТекущиеДанные.Номенклатура,Элемент.Родитель.ТекущиеДанные.Продукция_Элемент,Элемент.Родитель.ТекущиеДанные.Записано);
    	Оповещение = Новый ОписаниеОповещения("СоответствияНоменклатураНачалоВыбораОтвет",ЭтаФорма,Парам);	
    	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция Получить_ВСД_Продукция_ЭлементНаСервере(ВыбНоменклатура)
	Возврат  кб99_ВСД.Получить_ВСД_Продукция_Элемент(ВыбНоменклатура);	
КонецФункции

&НаКлиенте
Процедура СоответствияНоменклатураПриИзмененииОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
   		Парам.Элемент.Родитель.ТекущиеДанные.Номенклатура = "";
	Иначе
		ОчиститьСоответствие(Парам.Элемент.Родитель.ТекущиеДанные.Номенклатура,Парам.ВремПЭлемент);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоответствияНоменклатураПриИзменении(Элемент)
	ВремПЭлемент = Получить_ВСД_Продукция_ЭлементНаСервере(Элемент.Родитель.ТекущиеДанные.Номенклатура);
	Если НЕ ЗначениеЗаполнено(ВремПЭлемент) Тогда
		Элемент.Родитель.ТекущиеДанные.Записано = False;
	ИначеЕсли НЕ(ВремПЭлемент = Элемент.Родитель.ТекущиеДанные.Продукция_Элемент) Тогда
		ТекстВопроса = "Уже установлена связь с 
		|"+ВремПЭлемент+"
		|Отвязываем ?";
		Парам = Новый Структура("Элемент,ВремПЭлемент",Элемент,ВремПЭлемент);
    	Оповещение = Новый ОписаниеОповещения("СоответствияНоменклатураПриИзмененииОтвет",ЭтаФорма,Парам);	
    	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );
		Элемент.Родитель.ТекущиеДанные.Записано = False;
	Иначе
		Элемент.Родитель.ТекущиеДанные.Записано = True;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияНоменклатураОчисткаОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСоответствие(Парам.Элемент.Родитель.ТекущиеДанные.Номенклатура,Парам.Элемент.Родитель.ТекущиеДанные.Продукция_Элемент);
		Парам.Элемент.Родитель.ТекущиеДанные.Номенклатура = "";
		Парам.Элемент.Родитель.ТекущиеДанные.Записано = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоответствияНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Родитель.ТекущиеДанные.Записано Тогда
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = "Установлена связь с 
		|"+Элемент.Родитель.ТекущиеДанные.Продукция_Элемент+"
		|Отвязываем ?";
		Парам = Новый Структура("Элемент,СтандартнаяОбработка",Элемент);
    	Оповещение = Новый ОписаниеОповещения("СоответствияНоменклатураОчисткаОтвет",ЭтаФорма,Парам);	
    	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоответствияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры


//*****


&НаКлиенте
Процедура ВыборПериодаВСД(Период, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Если ЗначениеЗаполнено(Период) Тогда 
		ВыбранныйПериод = Диалог.Период;
		ВыбНачалоПериода = ВыбранныйПериод.ДатаНачала;
		ВыбокончаниеПериода = ВыбранныйПериод.ДатаОкончания;
		
		УстановитьФильтрНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнВыбратьПериодВСД(Команда)
	ВыбранныйПериод = Новый СтандартныйПериод;
	Если Команда.Имя = "кнВыбратьПериодВСД" Тогда
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = ВыбНачалоПериода;
		ВыбранныйПериод.ДатаОкончания = ВыбокончаниеПериода;
		КудаРезультат = "ВыборПериодаВСД";
	КонецЕсли;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ВыбранныйПериод;
	// Не модальный вызов диалога выбора периода
		
	Диалог.Показать(Новый ОписаниеОповещения(КудаРезультат, ЭтаФорма, Новый Структура("Диалог", Диалог)));
		
КонецПроцедуры


&НаСервере
Процедура кнОформитьВходящийВСДНаСервере()
	Фобъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.СоздатьВСД_ВходящиеПоТЗВходящих();
	ЗначениеВРеквизитФормы(Фобъект,"Объект");

КонецПроцедуры

&НаКлиенте
Процедура кнОформитьВходящийВСДОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
   		кнОформитьВходящийВСДНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнОформитьВходящийВСД(Команда)
   	Оповещение = Новый ОписаниеОповещения("кнОформитьВходящийВСДОтвет",ЭтаФорма);	
   	ПоказатьВопрос(Оповещение, "Создать документы в 1С ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрНаСервере()
	НомерСтроки = Объект.ВСДВходящие.Количество()-1;
	пока НомерСтроки>=0 Цикл
		ТекСтрока = Объект.ВСДВходящие[НомерСтроки];
		Если ЗначениеЗаполнено(ВыбНачалоПериода) и ТекСтрока.ВСДДата < ВыбНачалоПериода Тогда 
			кб99_ВСД.СообщитьИнфо("Отфильтрована партия "+ТекСтрока.ВСДДата+" ["+ТекСтрока.НаименованиеПродукции+"] = "+ТекСтрока.Количество );
			Объект.ВСДВходящие.Удалить(Номерстроки);			
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыбОкончаниеПериода) и ТекСтрока.ВСДДата > ВыбОкончаниеПериода Тогда 
			кб99_ВСД.СообщитьИнфо("Отфильтрована партия "+ТекСтрока.ВСДДата+" ["+ТекСтрока.НаименованиеПродукции+"] = "+ТекСтрока.Количество );
			Объект.ВСДВходящие.Удалить(Номерстроки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыбрХозСубъект) и ТекСтрока.Отправитель_Хозсубъект <> ВыбрХозСубъект Тогда 
			кб99_ВСД.СообщитьИнфо("Отфильтрована партия "+ТекСтрока.Отправитель_Хозсубъект+" ["+ТекСтрока.НаименованиеПродукции+"] = "+ТекСтрока.Количество );
			Объект.ВСДВходящие.Удалить(Номерстроки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыбрПлощадка) и ТекСтрока.Отправитель_Площадка <> ВыбрПлощадка Тогда 
			кб99_ВСД.СообщитьИнфо("Отфильтрована партия "+ТекСтрока.Отправитель_Площадка+" ["+ТекСтрока.НаименованиеПродукции+"] = "+ТекСтрока.Количество );
			Объект.ВСДВходящие.Удалить(Номерстроки);
		КонецЕсли;
		НомерСтроки=НомерСтроки-1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбНачалоПериодаПриИзменении(Элемент)
	УстановитьФильтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбОкончаниеПериодаПриИзменении(Элемент)
	УстановитьФильтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбрХозСубъектПриИзменении(Элемент)
	УстановитьФильтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбрПлощадкаПриИзменении(Элемент)
	УстановитьФильтрНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если Параметры.Свойство("Организация") Тогда 
	//	Объект.Организация = Параметры.Организация;
	//	ПараметрыОрганизации = ВСД.ЗагрузитьПараметры( Объект.Организация );		
	//	ВСД.ЗагрузитьПараметрыВОбработку( Объект, ПараметрыОрганизации ); 					
	//КонецЕсли;
	
	Если Параметры.Свойство("Отправитель_ХозСубъект") Тогда 
		Если НЕ ЗначениеЗаполнено( Параметры.Отправитель_ХозСубъект ) Тогда 
			кб99_ВСД.СообщитьИнфо("Не заполнен параметр [Отправитель_ХозСубъект] для загрузки параметров");
			Возврат;			
		КонецЕсли;
		Объект.Организация = кб99_ВСД.ПолучитьОрганизациюПоХС( Параметры.Отправитель_ХозСубъект );
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда 
			кб99_ВСД.СообщитьИнфо("Не найдена организация для загрузки параметров по "+Параметры.Отправитель_ХозСубъект);
			Возврат;
		КонецЕсли;
		
		//Объект.Организация = Параметры.Организация;
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );		
		кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект, ПараметрыОрганизации ); 					
	КонецЕсли;

	
	
	Если Параметры.Свойство("Отправитель_Площадка") Тогда 
		Если НЕ ЗначениеЗаполнено( Параметры.Отправитель_Площадка ) Тогда 
			кб99_ВСД.СообщитьИнфо("Не заполнен параметр [Отправитель_Площадка]");
			Возврат;			
		КонецЕсли;
		
		Объект.Отправитель_Площадка = Параметры.Отправитель_Площадка;
	КонецЕсли;
	
	Объект.флСоздаватьВсдВходящий = Ложь; // документы не создаем
	
	Если Параметры.Свойство("ТаблицаВсдДляГашения") Тогда 
		
		Объект.ВСДВходящие.Очистить();
		Для Каждого строкаВСД Из Параметры.ТаблицаВсдДляГашения Цикл

			СтрокаВСДВходящие = Объект.ВСДВходящие.Добавить();
			СтрокаВСДВходящие.Отметка = Истина;
			ЗаполнитьЗначенияСвойств( СтрокаВСДВходящие, строкаВСД );
		КонецЦикла;
		ОтправкаЗапросовНаГашение();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВСДВходящиеКоличествоВозвратПриИзменении(Элемент)
	ЭтаФорма.Элементы.ВСДВходящие.ТекущиеДанные.КоличествоПринять = ЭтаФорма.Элементы.ВСДВходящие.ТекущиеДанные.Количество - ЭтаФорма.Элементы.ВСДВходящие.ТекущиеДанные.КоличествоВозврат;
	ЭтаФорма.Элементы.ВСДВходящие.ТекущиеДанные.Отметка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура кнПереместитьПартии(Команда)
	
	тзПартий = Новый ТаблицаЗначений;
	тзПартий.Колонки.Добавить("Партия");
	тзПартий.Колонки.Добавить("Продукция_Элемент");
	тзПартий.Колонки.Добавить("Количество");
	тзПартий.Колонки.Добавить("ЕдиницаИзмерения");
	тзПартий.Колонки.Добавить("Цель");
	
	Для Каждого стрВходящие Из объект.ВСДВходящие Цикл
		Если стрВходящие.Отметка И ЗначениеЗаполнено( стрВходящие.ВСД_Партия ) Тогда 
			СтрПартий = тзПартий.Добавить();
			ЗаполнитьЗначенияСвойств( СтрПартий, стрВходящие );
			СтрПартий.Партия = стрВходящие.ВСД_Партия;
			СтрПартий.Количество = стрВходящие.КоличествоПринять;
		КонецЕсли;
	КонецЦикла;

	Если тзПартий.Количество()>0 Тогда 
		
		ПараметрыДокумента = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
		ЭлементыОтбора = Новый Структура("ПараметрыДокумента, Партии", ПараметрыДокумента, тзПартий);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЭлементыОтбора);

		ОткрытьФорму("Документ.ВСД2_транзакция.ФормаОбъекта", ПараметрыФормы );
				
	Иначе
		Сообщить("нечего перемещать, ВСД_Партии не выбраны");
	КонецЕсли;
	
КонецПроцедуры


