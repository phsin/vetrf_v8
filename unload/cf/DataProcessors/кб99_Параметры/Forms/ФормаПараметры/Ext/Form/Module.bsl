&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ОчиститьПлощадку;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект, СписокКонстант ); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СрокГодностиДней.Видимость = Объект.ПарамКонтроллироватьСрокГодностиПриОтправке;
	Элементы.Декорация4.Видимость = Объект.ПарамКонтроллироватьСрокГодностиПриОтправке;
	Элементы.ПроцентРасхожденияСырьеПродукция.Доступность = Объект.ПроверятьБалансРасходаСырья;
	Элементы.ДатаНачалаКонтроляОстатковПартйиПоРегистру.Видимость = Объект.КонтролироватьОстаткиПартийПоРегистру;
	
	ВходящиеПроверятьДатуИзготовленияПриИзменении("");
	
	СохранятьЗапросыXmlВФайлПриИзменении("");
		
КонецПроцедуры

#Область НемодальныеОкна

&НаКлиенте
Процедура ПредупреждениеПользователю(ТекстПредупреждения) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждения", ЭтаФорма);	
    ПоказатьПредупреждение( Оповещение,   ТекстПредупреждения,   0,   "Предупреждение" );
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеЗакрытияПредупреждения(Параметры) Экспорт	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьСообщенияНаСервере( ) 
    
	Попытка		
		Сообщения = ДлительныеОперации.СообщенияПользователю( Истина, ИдентификаторЗадания );
	Исключение
		Сообщения = кб99_ВСД_Общий.СообщенияПользователю( Истина, ИдентификаторЗадания );
	КонецПопытки;
	
 	Возврат Сообщения;
    
КонецФункции

#Область СведенияХСиПлощадки

&НаСервере
Функция кнХозСубъект_ПолучитьGuidПоИНН_НаСервере(ВыбХозСубъект) Экспорт
	
	ПараметрыФункции = кб99_ВСД_Общий.Загру();	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;

		ПараметрыФункции["ВыбХозСубъект"] = ВыбХозСубъект;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос GUID ХозСубъекта'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ХозСубъект_ПолучитьGuidПоИНН_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ХозСубъект_ПолучитьGuidПоИНН( ПараметрыФункции, ВыбХозСубъект );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Процедура кнХозСубъект_ПолучитьGuidПоИНН(Команда)
	
	Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект)) Тогда
		ПредупреждениеПользователю("Не выбран Хозсубъект !");
		Возврат;	
	КонецЕсли;
	Состояние("Выполняем запрос GUID ХозСубъекта",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	Результат = кнХозСубъект_ПолучитьGuidПоИНН_НаСервере(ВыбХозСубъект);
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция кнЗагрузитьПлощадкиПоХозСубъектуНаСервере(ВыбХозСубъект)	Экспорт
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
	
		//ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
		ПараметрыФункции.Вставить("ВыбХозСубъект", ВыбХозСубъект);
		ПараметрыФункции.Вставить("ЗагрузитьПлощадку", Истина);
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос GUID ХозСубъекта'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту( ПараметрыФункции, ВыбХозСубъект, Истина );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;	

КонецФункции

&НаКлиенте
Процедура кнЗагрузитьПлощадкиПоХозСубъекту(Команда)
	
	Состояние("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	Результат = кнЗагрузитьПлощадкиПоХозСубъектуНаСервере( ВыбХозСубъект );	
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПлощадкиСпискомПоХозСубъекту_Сервер( )
	
	тзСвертка = Объект.Отгрузки.Выгрузить();
	тзСвертка.Свернуть("Отметка, Контрагент, ХозСубъект",);
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );	
	ПараметрыФункции.Вставить("тзКонтрагенты", тзСвертка );
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос Площадок, привязанных к ХозСубъекту'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Площадки_ЗагрузитьСписокПоХозСубъекту",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Площадки_ЗагрузитьСписокПоХозСубъекту( ПараметрыФункции, "" );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Для Каждого ДанныеСтроки Из Объект.Отгрузки Цикл
		ДанныеСтроки.Отметка = Ложь;
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоСпискуДокументов(Команда)

	Состояние("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	Результат = ЗагрузитьПлощадкиСпискомПоХозСубъекту_Сервер( );
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоНаименованию(Команда)
	
	Если ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура("ВыбХозСубъект, ВыбРегион", ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные.ХозСубъект, Объект.Регион );
	Иначе
		СтруктураПараметров = Новый Структура("ВыбХозСубъект, ВыбРегион","","");
	КонецЕсли;
	ОповещениеОВыборе  = Новый ОписаниеОповещения("ОткрытиеФормыЗагрузкаПлощадок", ЭтаФорма, Новый Структура("ИмяКоманды", Команда.Имя));
	
	ОткрытьФорму("Обработка.кб99_НайтиПлощадки.Форма.ФормаЗагрузкаПлощадокУФ",СтруктураПараметров, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура кнХС_СоздатьНаСервере( ВыбХозСубъект )
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	кб99_ВСД_Запросы.ХозСубъект_Создать( ПараметрыОрганизации, ВыбХозСубъект );

КонецПроцедуры

&НаКлиенте
Процедура кнХС_СоздатьОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Состояние("Создаем ХС в Меркурий",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
    	кнХС_СоздатьНаСервере( ВыбХозСубъект );
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура кнХС_Создать(Команда)
	
	Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите ХС");
		Возврат;
	КонецЕсли;
	ТекстВопроса = "Создать ХС "+ВыбХозСубъект+" в Меркурий ?";
    Оповещение = Новый ОписаниеОповещения("кнХС_СоздатьОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""); 
	
КонецПроцедуры

&НаСервере
Функция кнПлощадкаПоХССоздатьНаСервере(ВыбХС)

	СпрПл = Справочники.ВСД_Площадка.СоздатьЭлемент();
	СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
	СпрПл.Контрагент = ВыбХС.Контрагент.Ссылка;
	СпрПл.GuidХозСубъекта = ВыбХС.GUID;
	СпрПл.Записать();
	кб99_ВСД.СообщитьИнфо("Создан ВСД_Площадка "+СпрПл);
	
	Возврат СпрПл.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура кнПлощадкаПоХССоздатьОтвет(Ответ, Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыбраннаяПлощадка = кнПлощадкаПоХССоздатьНаСервере(ВыбХозСубъект);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура кнСоздатьПлощадкувМеркурийНаСервере(ВыбПлощадка)
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	кб99_ВСД_Запросы.Площадка_Создать( ПараметрыОрганизации, ВыбПлощадка );
	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПлощадкувМеркурий(Команда)
	
	Если НЕ(ЗначениеЗаполнено(ВыбраннаяПлощадка)) Тогда
		ПредупреждениеПользователю("Не указана Площадка 1С для создания в Меркурий");
		Возврат;
	КонецЕсли;
	
	Состояние("Создаем площадку в Меркурий",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	кнСоздатьПлощадкувМеркурийНаСервере(ВыбраннаяПлощадка);
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

&НаСервере
Процедура кнПривязатьПлощадкуНаСервере(ВыбПлощадка)
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	кб99_ВСД_Запросы.Площадка_СвязатьСХозСубъектом( ПараметрыОрганизации, ВыбПлощадка );
	
КонецПроцедуры

&НаКлиенте
Процедура кнПривязатьПлощадку(Команда)
	
	Если НЕ(ЗначениеЗаполнено(ВыбраннаяПлощадка)) Тогда
		ПредупреждениеПользователю("Не указана Площадка для привязки к ХС");
		Возврат;
	КонецЕсли;
	
	Состояние("Привязываем Площадку к ХС",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	кнПривязатьПлощадкуНаСервере(ВыбраннаяПлощадка);
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

#КонецОбласти

// *** Загрузка НСИ
&НаСервере
Функция ЗагрузитьЦелиНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос Цели транспортировки'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьЦели_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьЦели( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции
 
&НаКлиенте
Процедура ЗагрузитьЦели(Команда)
	Состояние("Выполняется загрузка Классификатора Цели");
	Результат = ЗагрузитьЦелиНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
КонецПроцедуры
// *** Загрузка НСИ Окончание

&НаСервере
Процедура СохранитьПараметрыНаСервере()
	
	кб99_ВСД.СохранитьПараметры( Объект );
	
	_Организация = Объект.Организация;
	
	кб99_ВСД.СообщитьИнфо("Настройки сохранены для  - "+_Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметры(Команда)
	
	СохранитьПараметрыНаСервере();
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция кнИнициализацияНаСервере()
	// основные параметры
	//Объект.НазваниеРеквизитаКоличество = "Количество";
	//Объект.ПарамКоэффициентПересчетаКоличества = 1;
	//Объект.ПарамЗнакСортировкиУбывание = Ложь;
	//Объект.ПарамКолонкаСортировкиПартииСписания = "ДатаСрокГодности1";
	//Объект.НазваниеРеквизитаКоличествоМест = "Количество";
	//Объект.ВСД_РезультатыИсследований = Перечисления.кб99_РезультатИсследования.VSERAW;
	//Объект.ПарамЗаполнятьТранзакциюПриОтсутствииПартий = Ложь;	
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
	   	ИдентификаторЗадания = Неопределено;		
	
		НаименованиеЗадания = НСтр("ru = 'Ветис инициализация - загрузка справочников'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьВсеСправочники",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьВсеСправочники( ПараметрыФункции,"" );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнИнициализацияОтвет(Ответ, Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Состояние("Выполняется начальная Инициализация",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
		Результат = кнИнициализацияНаСервере();
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура кнИнициализация(Команда)
	
	Если ПустаяСтрока(Объект.param_username)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [param_username]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Объект.param_password)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [param_password]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Объект.param_issuer_id)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [issuer_id]");
		Возврат;
	КонецЕсли;
	
	ТВопроса = "Будет произведена загрузка классификаторов Меркурий 
	| и заполнены начальные данные. 
	|Операция может занять продолжительное время.";
	Оповещение = Новый ОписаниеОповещения("кнИнициализацияОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, "");    
	
КонецПроцедуры
// ************* Инициализация и сохранение параметров Окончание

// ************ Партии
&НаСервере
Функция ПолучитьПартии2_НаСервере( НачДата, КонДата )
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	ПараметрыФункции.Вставить("ВыбПлощадка", Объект.Отправитель_Площадка);
	ПараметрыФункции.Вставить("ПартииСмещение", Объект.Смещение);
	ПараметрыФункции.Вставить("УдалятьПартии", флУдалятьПартии);
	ПараметрыФункции.Вставить("ТолькоАктуальныеПартии", флПартииНенулевые);
	ПараметрыФункции.Вставить("ПартияНачПериода", НачДата);
	ПараметрыФункции.Вставить("ПартияКонПериода", КонДата);
	ПараметрыФункции.Вставить("СписокНовыхПартий", Новый Массив);
	ПараметрыФункции.Вставить("ПоказатьНовыеПартии", ПоказатьНовыеПартии);
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;	
		
		НаименованиеЗадания = НСтр("ru = 'Ветис загрузка партий'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Партии2_Запрос_Отправить_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		АдресХранилища       = Результат.АдресХранилища;		
	Иначе;
		Ответ = кб99_ВСД_Запросы.Партии2_Запрос_Отправить( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 
	
	Результат.Вставить("СписокНовыхПартий", ПараметрыФункции.СписокНовыхПартий);
	Результат.Вставить("ЗаданиеВыполнено", Истина);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПартии_ОтветНаВопрос(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Результат = ПолучитьПартии2_НаСервере( ПартииНач, КонецДня( ПартииКон ) );
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПоказатьОповещениеПользователя("Выполнено");
			Если ПоказатьНовыеПартии Тогда
				Если Результат.СписокНовыхПартий.Количество() Тогда
					
					ПараметрыОткрытия = Новый Структура();
					ПараметрыОткрытия.Вставить("СписокНовыхПартий", Результат.СписокНовыхПартий);
					ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
					ПараметрыОткрытия.Вставить("Площадка", Объект.Отправитель_Площадка);
					
					ОткрытьФорму("Обработка.кб99_ОграничениеПартийВПодборе.Форма.Форма", 
						ПараметрыОткрытия, 
						ЭтотОбъект, 
						, 
						, 
						,
						,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				Иначе
					кб99_ВСД.СообщитьИнфо("В полученных партиях отсутствуют новые партии.");	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии2(Команда)
	
	ТекстВопроса = "Получить партии площадки ["+Объект.Отправитель_Площадка+"] из Меркурия ?";

	Если ЗначениеЗаполнено(ПартииНач)  Тогда
		ТекстВопроса = ТекстВопроса + "
		|за период с "+ПартииНач+" по "+ПартииКон+"";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьПартии_ОтветНаВопрос", ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, ""); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыЗагрузкиПартии(ВыбДата, Параметры) Экспорт
	
	Если ЗначениеЗаполнено( ВыбДата ) Тогда
		
		Результат = ПолучитьПартии2_НаСервере(ВыбДата, ТекущаяДата());
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено( Результат.ИдентификаторЗадания ) Тогда
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыЗагрузкиПартии", ЭтаФорма);	
    ВыбДата = ТекущаяДата()-30*60*60*30;
    ПоказатьВводДаты( Оповещение, ВыбДата , "Введите дату начала загрузки Партий",  ЧастиДаты.Дата);
	
КонецПроцедуры
// *********** Партии окончание

// *** На форме
// Загрузка Классификаторов
&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации( ФормаДлительнойОперации );
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеВыполнено() 
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено( ИдентификаторЗадания );
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПараметры( )
	
	Попытка
		Результат = ПолучитьИзВременногоХранилища( АдресХранилища );
		
		Если ЗначениеЗаполнено( Результат["Параметры"] ) Тогда 	
			кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект , Результат["Параметры"] );
		КонецЕсли;
	Исключение КонецПопытки;
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	МассивСообщений = ПолучитьСообщенияНаСервере( );
	Для Каждого Сообщение Из МассивСообщений Цикл
		Сообщение.Сообщить();
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Сообщить();
	КонецЦикла;
	
	Попытка
		Если ЗаданиеВыполнено() Тогда 
			ЗакрытьФормуДлительнойОперации();
			Возврат;
		КонецЕсли;		
	Исключение
		ЗакрытьФормуДлительнойОперации();
		ВызватьИсключение;
	КонецПопытки;
 
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПродукциюНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
	
		ИдентификаторЗадания = Неопределено;	
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос продукции'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьПродукцию_Все",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьПродукцию_Все( ПараметрыФункции, "");
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьПродукцию( )
	
	Состояние("Выполняется загрузка Продукции",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	
	Результат = ЗагрузитьПродукциюНаСервере( );	
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
 	
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьЕдИзмНаСервере( )
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
	
		ИдентификаторЗадания = Неопределено;
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос Единиц Измерения'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
			
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьЕдИзм(Команда)
	
	Состояние("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	
	Результат = кнЗагрузитьЕдИзмНаСервере( );	
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиЭлементовАдрес

#Область ЗагрузкаАдресныхКлассификаторов

&НаСервере
Функция кнЗагрузитьСтраныНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
			
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка стран'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьСтраны_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьСтраны( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьСтраны(Команда)
	
	Состояние("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	
	Результат = кнЗагрузитьСтраныНаСервере();	
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьРегионыНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
	
		ИдентификаторЗадания = Неопределено;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Регионы'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьРегионы_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьРегионы( ПараметрыФункции, Объект.Страна );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьРегионы(Команда)
	
	Состояние("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	Результат = кнЗагрузитьРегионыНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьРайоныНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Районы'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьРайоны_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;	
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьРайоны( ПараметрыФункции, Объект.Регион );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура кнЗагрузитьРайоны(Команда)
	
	Состояние("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	Результат = кнЗагрузитьРайоныНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция кнЗагрузитьГородаПоРегионуНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Города'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьГородаПоРегиону_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьГородаПоРегиону( ПараметрыФункции, Объект.Регион );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции 

&НаСервере
Функция кнЗагрузитьГородаПоРайонуНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Города'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьГородаПоРайону_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьГородаПоРайону( ПараметрыФункции, Объект.Район );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьГорода(Команда)
	
	Состояние("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	
	Если ЗначениеЗаполнено(Объект.Район) Тогда
		Результат = кнЗагрузитьГородаПоРайонуНаСервере();
	ИначеЕсли ЗначениеЗаполнено(Объект.Регион) Тогда
		Результат = кнЗагрузитьГородаПоРегионуНаСервере();
	Иначе 
		кб99_ВСД.СообщитьПользователю("Укажите Регион или Район",,"Регион");
		Возврат;	
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьПоселкиНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Населенные пункты'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
		"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьНаселенныеПунктыПоГороду_ВФоне",
		ПараметрыФункции,
		НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;	
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьНаселенныеПунктыПоГороду( ПараметрыФункции, Объект.Город );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Ответ); 
	КонецЕсли; 
		
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьПоселки(Команда)
	
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		
		Состояние("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
		Результат = кнЗагрузитьПоселкиНаСервере();
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
		
	Иначе
		кб99_ВСД.СообщитьПользователю("Укажите город",,"Город");
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция кнЗагрузитьУлицыНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Улицы'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьУлицы_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;	
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Если Не ЗначениеЗаполнено(Объект.НаселенныйПункт) И Не ЗначениеЗаполнено(Объект.Город) 
			И ЗначениеЗаполнено(Объект.Регион)Тогда
			_Город = Объект.Регион;
		ИначеЕсли ЗначениеЗаполнено(Объект.НаселенныйПункт) Тогда
			_Город = Объект.НаселенныйПункт;
		ИначеЕсли ЗначениеЗаполнено(Объект.Город) Тогда
			_Город = Объект.Город;
		Иначе
			_Город = Неопределено;
		КонецЕсли;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьУлицы( ПараметрыФункции, _Город);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура кнЗагрузитьУлицы(Команда)
	
	Состояние("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	Результат = кнЗагрузитьУлицыНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры
#КонецОбласти
	
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГородНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОповещениеОВыбореГорода = Новый ОписаниеОповещения("ВыборГорода", ЭтаФорма, Новый Структура());
	ЗначениеОтбора = Новый Структура("Владелец", ?(ЗначениеЗаполнено(Объект.Район),Объект.Район,Объект.Регион));
	ПараметрыОткрытия = Новый Структура("Отбор, ЗакрыватьПриВыборе", ЗначениеОтбора, Истина);
	
	ОткрытьФорму("Справочник.ВСД_Город.ФормаВыбора" ,ПараметрыОткрытия,,,,, ОповещениеОВыбореГорода);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборГорода(Результат, ДопПараметры = Неопределено) Экспорт
	
	Объект.Город = Результат; 
	ГородПриИзменении("");
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОповещениеОВыбореУлицы = Новый ОписаниеОповещения("ВыборУлицы", ЭтаФорма, Новый Структура());
	Если Не ЗначениеЗаполнено(Объект.НаселенныйПункт) И Не ЗначениеЗаполнено(Объект.Город) 
														 И ЗначениеЗаполнено(Объект.Регион)Тогда
		НаселенныйПункт = Объект.Регион;
	ИначеЕсли ЗначениеЗаполнено(Объект.НаселенныйПункт) Тогда
		НаселенныйПункт = Объект.НаселенныйПункт;
	ИначеЕсли ЗначениеЗаполнено(Объект.Город) Тогда
		НаселенныйПункт = Объект.Город;
	Иначе
		НаселенныйПункт = Неопределено;
	КонецЕсли;

	ЗначениеОтбора = Новый Структура("Владелец", НаселенныйПункт);
	ПараметрыОткрытия = Новый Структура("Отбор, ЗакрыватьПриВыборе", ЗначениеОтбора, Истина);
	
	ОткрытьФорму("Справочник.ВСД_Улица.ФормаВыбора", ПараметрыОткрытия,,,,, ОповещениеОВыбореУлицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборУлицы(Результат, ДопПараметры = Неопределено) Экспорт
	
	Объект.Улица = Результат;
	УлицаПриИзменении("");
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаПриИзменении(Элемент)
	
	Объект.Регион 		   = Неопределено;
	Объект.Район 		   = Неопределено;
	Объект.Город  		   = Неопределено;
	Объект.НаселенныйПункт = Неопределено;
	Объект.Улица  		   = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РегионПриИзменении(Элемент)
	
	Объект.Район 		   = Неопределено;
	Объект.Город  		   = Неопределено;
	Объект.НаселенныйПункт = Неопределено;
	Объект.Улица  		   = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РайонПриИзменении(Элемент)
	
	Объект.Город  		   = Неопределено;
	Объект.НаселенныйПункт = Неопределено;
	Объект.Улица  		   = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ГородПриИзменении(Элемент)
	
	Владелец_ = ?(ЗначениеЗаполнено(Объект.Район),Объект.Район,Объект.Регион);
	
	Если Не кб99_ВСД_Общий.ПроверитьВладельцаСправочника(Объект.Город, Владелец_) Тогда
		Объект.Город = Неопределено;
	КонецЕсли;
	
	Объект.НаселенныйПункт = Неопределено;
	Объект.Улица  		   = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктПриИзменении(Элемент)
	
	Объект.Улица = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаПриИзменении(Элемент)
	
	Владелец_ = ?(ЗначениеЗаполнено(Объект.НаселенныйПункт), Объект.НаселенныйПункт, Объект.Город);
	
	Если Не кб99_ВСД_Общий.ПроверитьВладельцаСправочника(Объект.Улица, Владелец_) Тогда
    	Объект.Улица = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПроверятьДатуИзготовленияПриИзменении(Элемент)
	
	Если Объект.ВходящиеПроверятьДатуИзготовления Тогда 
		Элементы.ВходящиеПроверятьДатуИзготовленияКоличествоДней.Доступность = 1;
	Иначе
		Элементы.ВходящиеПроверятьДатуИзготовленияКоличествоДней.Доступность = 0;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ПлощадкаНаФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеОтбора = Новый Структура("ХозСубъект", Объект.Отправитель_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина, ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеОтбора = Новый Структура("ХозСубъект", ВыбХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьОстаткиПартийПоРегиструПриИзменении(Элемент)
	
	Элементы.ДатаНачалаКонтроляОстатковПартйиПоРегистру.Видимость = Объект.КонтролироватьОстаткиПартийПоРегистру;
	
	Если Не Объект.КонтролироватьОстаткиПартийПоРегистру Тогда
		Объект.ДатаНачалаКонтроляОстатковПартийПоРегистру = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Отправитель_ХозСубъектПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Отправитель_ХозСубъект) Тогда
		ЗаполнитьЗначенияСвойств(Объект, Объект.Отправитель_ХозСубъект, "Страна, Регион, Район, Город, НаселенныйПункт, Улица");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ХозСубъектПриИзменении(Элемент)
	Отправитель_ХозСубъектПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция кнЗагрузитьФормыУпаковкиНаСервере()
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Форма упаковки'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ЗаполнитьФормыУпаковки",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		кб99_ВСД_Запросы.ЗаполнитьФормыУпаковки( ПараметрыФункции, "" );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура кнЗагрузитьФормыУпаковки(Команда)
	
	Состояние("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	Результат = кнЗагрузитьФормыУпаковкиНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

// **** Продукция
&НаСервере
Функция кнПолучитьСписокПродукцииНаСервере(ВыбПлощадка)
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	ПараметрыФункции.Вставить("ВыбПлощадка", ВыбПлощадка);
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		НаименованиеЗадания = НСтр("ru = 'Ветис загрузка продукции площадки'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Продукция_Элемент_Получить_Список_По_Площадке_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		кб99_ВСД_Запросы.Продукция_Элемент_Получить_Список_По_Площадке_ВФоне( ПараметрыФункции, ВыбПлощадка);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнПолучитьСписокПродукцииОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Состояние("Получаем список продукции по выбранной площадке",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
		Результат = кнПолучитьСписокПродукцииНаСервере( ВыбПлощадкаПродукция );
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьСписокПродукции(Команда)
	
	Если НЕ(ЗначениеЗаполнено(ВыбПлощадкаПродукция)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите Площадку");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнПолучитьСписокПродукцииОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Получить полный список продукции по площадке "+ВыбПлощадкаПродукция+"?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
	
КонецПроцедуры

&НаСервере
Функция кнПолучитьИнфоПродукцияНаСервере( Выб_ВСД_Продукция_Элемент )
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );

	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;

		ПараметрыФункции["Выб_ВСД_Продукция_Элемент"] = Выб_ВСД_Продукция_Элемент;
		
		НаименованиеЗадания = НСтр("ru = 'КБ99. Ветис загрузка партий'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Продукция_Элемент_Получить_Инфо_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Продукция_Элемент_Получить_Инфо( ПараметрыФункции, Выб_ВСД_Продукция_Элемент);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура кнПолучитьИнфоПродукция(Команда)
	
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
	
	Состояние("Получаем инфо о продукции",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	Результат = кнПолучитьИнфоПродукцияНаСервере( ВыбПродукция );
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьПродукциюНаСервере(Выб_ВСД_Продукция_Элемент, ВыбКоманда)
	
	ПараметрыФункции = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		
		ПараметрыФункции["Выб_ВСД_Продукция_Элемент"] = Выб_ВСД_Продукция_Элемент;
		ПараметрыФункции["ВыбКоманда"] = ВыбКоманда;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис создать продукцию'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Продукция_Элемент_Изменить_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Продукция_Элемент_Изменить( ПараметрыФункции, Выб_ВСД_Продукция_Элемент, ВыбКоманда);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнИзменитьПродукциюОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Состояние("Выполняется запрос на изменение продукции",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
		Результат = ИзменитьПродукциюНаСервере(ВыбПродукция, "UPDATE");
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура кнИзменитьПродукцию(Команда)
	
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("кнИзменитьПродукциюОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Изменить продукцию "+ВыбПродукция+" ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, "");    
	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПродукциюОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Состояние("Выполняется запрос на создание Продукции",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
	   	
		Результат = ИзменитьПродукциюНаСервере(ВыбПродукция, "CREATE");
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПродукцию(Команда)
	
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнСоздатьПродукциюОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Создать продукцию "+ВыбПродукция+" у ХС "+Объект.Отправитель_ХозСубъект+" ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""); 
	
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПродукциюОтвет(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Состояние("Выполняется запрос на удаление Продукции",,"Ожидайте...",БиблиотекаКартинок.kb99_wrench);
		Результат = ИзменитьПродукциюНаСервере(ВыбПродукция,"DELETE");
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПродукцию(Команда)
	
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнУдалитьПродукциюОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Удалить продукцию "+ВыбПродукция+" в Меркурий?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""); 
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект, СписокКонстант ); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаБалансаРасходСырьяПриИзменении(Элемент)
	
	Элементы.ПроцентРасхожденияСырьеПродукция.Доступность = Объект.ПроверятьБалансРасходаСырья;
	Если Не  Объект.ПроверятьБалансРасходаСырья Тогда
		Объект.ПроцентРасхожденияСырьеПродукция = 0;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура кнУдалитьПартииНаСервере(НачДата, КонДата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_Партия.Ссылка,
	               |	ВСД_Партия.ДатаИзменения
	               |ИЗ
	               |	Справочник.ВСД_Партия КАК ВСД_Партия
	               |ГДЕ
	               |	ВСД_Партия.Получатель_Площадка = &Получатель_Площадка ";
	
	Запрос.УстановитьПараметр("Получатель_Площадка", Объект.Отправитель_Площадка);
	Если ЗначениеЗаполнено( ПартииНач ) Тогда 
		Запрос.Текст = Запрос.Текст + "
	    |	И ВСД_Партия.ДатаИзменения МЕЖДУ &НачДата И &КонДата";
		Запрос.УстановитьПараметр("НачДата", НачДата);
		Запрос.УстановитьПараметр("КонДата", КонДата);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПартияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПартияОбъект.УстановитьПометкуУдаления(Истина, Ложь);		
	КонецЦикла;
	кб99_ВСД.СообщитьИнфо("ВСД_Партии помечены на удаление");
	
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПартии(Команда)
	
	кнУдалитьПартииНаСервере( ПартииНач, ПартииКон );
	
КонецПроцедуры

&НаСервере
Процедура кнВерсия2ОбновитьСправочникиНаСервере()
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	СпрПлощадки = Справочники.ВСД_Площадка.Выбрать();
	Пока СпрПлощадки.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(СпрПлощадки.ХозСубъект) Тогда 
			СпрОбъект = СпрПлощадки.ПолучитьОбъект();
			СпрОбъект.ХозСубъект = кб99_ВСД_Запросы.ХозСубъект_НайтиПоGUID(ПараметрыОрганизации, СпрПлощадки.GuidХозСубъекта, Истина, Истина );
			СпрОбъект.Записать();
			кб99_ВСД.СообщитьИнфо(СпрПлощадки.Наименование, СпрПлощадки.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_Соответсвия.Номенклатура,
	               |	ВСД_Соответсвия.ПродукцияЭлемент,
	               |	ВСД_Соответсвия1.Владелец КАК СпрНоменклатура,
	               |	КОЛИЧЕСТВО(ВСД_Соответсвия1.ПродукцияЭлемент) КАК КолвоПродукцияЭлемент
	               |ИЗ
	               |	РегистрСведений.ВСД_Соответсвия КАК ВСД_Соответсвия
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия1
	               |		ПО ВСД_Соответсвия.Номенклатура = ВСД_Соответсвия1.Владелец
	               |			И ВСД_Соответсвия.ПродукцияЭлемент = ВСД_Соответсвия1.ПродукцияЭлемент
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВСД_Соответсвия.Номенклатура,
	               |	ВСД_Соответсвия.ПродукцияЭлемент,
	               |	ВСД_Соответсвия1.Владелец";
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.КолвоПродукцияЭлемент=0 Тогда 
				СпрОб = Справочники.ВСД_Соответсвия.СоздатьЭлемент();
				СпрОб.Владелец = Выборка.Номенклатура;
				СпрОб.ПродукцияЭлемент = Выборка.ПродукцияЭлемент;
				СпрОб.Наименование =  СпрОб.ПродукцияЭлемент;
				СпрОб.Записать();
				кб99_ВСД.СообщитьИнфо("Записан "+СпрОб,СпрОб.Ссылка);
			КонецЕсли;
		КонецЦикла;
	Исключение 
	КонецПопытки
	
КонецПроцедуры

&НаКлиенте
Процедура кнВерсия2ОбновитьСправочники(Команда)
	
	кнВерсия2ОбновитьСправочникиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарамКонтроллироватьСрокГодностиПриОтправкеПриИзменении(Элемент)
	
	Элементы.СрокГодностиДней.Видимость = Объект.ПарамКонтроллироватьСрокГодностиПриОтправке;
	Элементы.Декорация4.Видимость = Объект.ПарамКонтроллироватьСрокГодностиПриОтправке;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРегламентноеЗаданиеОчиститьЗапросы(Команда)
	
	ОткрытьФорму("ОбщаяФорма.кб99_РегламентныеЗадания");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура кнОбработатьСпрСоответствияНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВСД_Соответсвия.Ссылка КАК элСоответствие,
	|	ВСД_Соответсвия.Владелец КАК Владелец
	|ИЗ
	|	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	|ГДЕ
	|	НЕ ВСД_Соответсвия.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВСД_Соответсвия.Владелец,
	|	ВСД_Соответсвия.Ссылка
	|ИТОГИ ПО
	|	Владелец";
	Результат = Запрос.Выполнить();
	ВыборкаПоСправочнику = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Владелец");
		
	Пока ВыборкаПоСправочнику.Следующий() Цикл
		
		ВыборкаПоВладельцу = ВыборкаПоСправочнику.Выбрать();
		флагУстановлен = Ложь;
		
		Пока ВыборкаПоВладельцу.Следующий() Цикл
			
			ВСД_Соотвествие = ВыборкаПоВладельцу.элСоответствие.ПолучитьОбъект();
			ВСД_Соотвествие.ОсновноеСоответствие = Ложь;
				
			Если Не флагУстановлен Тогда
				ВСД_Соотвествие.ОсновноеСоответствие = Истина;
				флагУстановлен = Истина;
			КонецЕсли;
			
			ВСД_Соотвествие.Записать();
			
		КонецЦикла;
				
	КонецЦикла;
	
	кб99_ВСД.СообщитьИнфо("Выполнено");

КонецПроцедуры

&НаКлиенте
Процедура кнОбработатьСпрСоответствия(Команда)
	
	ОчиститьСообщения();
	кнОбработатьСпрСоответствияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВСДЭлементы(Команда)

	ОткрытьФорму("Обработка.кб99_СоздатьВсдПродукцию.Форма.ФормаСоздатьВСД_ЭлементыУФ");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВСД(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ПериодЗагрузкиВСД.ДатаНачала) 
			Или Не ЗначениеЗаполнено(ПериодЗагрузкиВСД.ДатаОкончания) Тогда
			
		кб99_ВСД.СообщитьПользователю("Не заполнен период",, "ПериодЗагрузкиВСД",, Отказ);
		
	ИначеЕсли Не ЗначениеЗаполнено(ТипВСД) и Не ЗначениеЗаполнено(СтатусВСД) Тогда
		
		кб99_ВСД.СообщитьПользователю("Выберите тип и/или статус ВСД",, "ТипВСД",, Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Состояние("Выполняется запрос ВСД",,"Пожалуйста подождите", БиблиотекаКартинок.kb99_wrench);
	
	ЗагрузитьВСДНаСервере(ПериодЗагрузкиВСД.ДатаНачала, ПериодЗагрузкиВСД.ДатаОкончания);
	
	ПоказатьОповещениеПользователя("Выполнено");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВСДНаСервере(ДатаНачала, ДатаОкончания)

	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Объект.Организация);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("vetDocumentType", 		?(ЗначениеЗаполнено(ТипВСД), ТипВСД, ""));	
	ПараметрыЗапроса.Вставить("vetDocumentStatus", 		?(ЗначениеЗаполнено(СтатусВСД), СтатусВСД, ""));	
	ПараметрыЗапроса.Вставить("Смещение", 				0);	
	ПараметрыЗапроса.Вставить("ПоступилиС",  			ДатаНачала);	
	ПараметрыЗапроса.Вставить("ПоступилиПо",			ДатаОкончания);	
	//ПараметрыЗапроса.Вставить("ОтправительХозСубъект", 	Объект.Отправитель_ХозСубъект);
	//ПараметрыЗапроса.Вставить("ОтправительПлощадка", 	Объект.Отправитель_Площадка);
	ПараметрыЗапроса.Вставить("ОтправительХозСубъект", 	Неопределено);
	ПараметрыЗапроса.Вставить("ОтправительПлощадка", 	Неопределено);
	ПараметрыЗапроса.Вставить("ПолучательПлощадка", 	Объект.Отправитель_Площадка);
	ПараметрыЗапроса.Вставить("ДокОснование", 			Неопределено);
	ПараметрыЗапроса.Вставить("Параметры", ПараметрыОрганизации);
	
	кб99_ВСД_Запросы.ПолучитьСписокВСД( ПараметрыЗапроса );
	
КонецПроцедуры


&НаСервере
Процедура кнПолучитьУсловияПеревозкиНаСервере()

	ПараметрыОргнаизации_ = кб99_ВСД.ЗагрузитьПараметры( ВыбранныйДокумент.Организация );
	Ответ = кб99_ВСД_Запросы.ВСД2_Транзакция_УсловияПеревозки_Отправить(ПараметрыОргнаизации_, ВыбранныйДокумент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьУсловияПеревозки(Команда)
	
	ОчиститьСообщения();
	кнПолучитьУсловияПеревозкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьОтветВетис(Команда)
	
	ОчиститьСообщения();
	кнПолучитьОтветВетисНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура кнПолучитьОтветВетисНаСервере()
	
	ПараметрыОргнаизации_ = кб99_ВСД.ЗагрузитьПараметры( ВыбранныйДокумент.Организация );									
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("Параметры", ПараметрыОргнаизации_ );		
	ПараметрыФункции.Вставить("ПолучитьОтветВетис", Ложь );
	ПараметрыФункции.Вставить("ApplicationID", кб99_ВСД_Общий.НайтиApplicationID( ВыбранныйДокумент ));
	ПараметрыФункции.Вставить("ДокОснование", ВыбранныйДокумент);
	ПараметрыФункции.Вставить("СделатьПаузу", Ложь);
	
	Ответ =  кб99_ВСД_Запросы.ПолучитьРезультат_ВСД2(ПараметрыФункции);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗапросыВСДНаСервере()
	
	кб99_РегламентныеЗадания.кб99_ВСД_УдалитьСтарыеЗапросы();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗапросыВСД(Команда)
	
	кб99_ВСД.СообщитьПользователю("Очистка регистра сведений, начало в "+ТекущаяДата());
	Состояние("Удаление справочников",, "Начало в "+ТекущаяДата()+" Подождите...", БиблиотекаКартинок.kb99_wrench);
	
	УдалитьЗапросыВСДНаСервере();
	
	кб99_ВСД.СообщитьПользователю("Обработка завершена "+ ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Процедура кнЗаполнитьУсловияПеревозкиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВСД2_транзакцияУсловияПеревозки.Ссылка КАК ВСДДок
		|ИЗ
		|	Документ.ВСД2_транзакция.УсловияПеревозки КАК ВСД2_транзакцияУсловияПеревозки
		|ГДЕ
		|	ВСД2_транзакцияУсловияПеревозки.удалить_GUID <> """"
		|	И НЕ ВСД2_транзакцияУсловияПеревозки.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВСД2_транзакцияУсловияПеревозки.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДокОбъект = ВыборкаДетальныеЗаписи.ВСДДок.ПолучитьОбъект();
		
		ПустыеДанныеЗаполнения = Новый Структура("удалить_Название,удалить_GUID,удалить_UUID,удалить_ВидПродукции,удалить_Решение");
		
		Для Каждого Стр Из ДокОбъект.УсловияПеревозки Цикл
			
			ДанныеЗаполнения = Новый Структура();
			ДанныеЗаполнения.Вставить("Наименование"	, Стр.удалить_Название);
			ДанныеЗаполнения.Вставить("GUID"			, Стр.удалить_GUID);
			ДанныеЗаполнения.Вставить("UUID"			, Стр.удалить_UUID);
			ДанныеЗаполнения.Вставить("ВидПродукции"	, Стр.удалить_ВидПродукции);
			ДанныеЗаполнения.Вставить("Решение"			, Стр.удалить_Решение);
			
			УсловиеПеревозки = кб99_ВСД_Запросы.НайтиУсловияПеревозки(ДанныеЗаполнения);
			Если ЗначениеЗаполнено( УсловиеПеревозки ) Тогда
				
				Стр.Условие = УсловиеПеревозки;				
				ЗаполнитьЗначенияСвойств( Стр, ПустыеДанныеЗаполнения );
						
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнитьУсловияПеревозки(Команда)
	
	Состояние("Выполняется обработка", , "Начало в "+ТекущаяДата()+" Подождите...", БиблиотекаКартинок.kb99_wrench);
	
	кнЗаполнитьУсловияПеревозкиНаСервере();
	
	кб99_ВСД.СообщитьПользователю("Обработка завершена "+ ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПараметрыИзХранилища()
	
	флСохранятьНастройкиДляТекущегоПользователя = Объект.флСохранятьНастройкиДляТекущегоПользователя;
	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры_СтарыйВариант( Объект.Организация );
	кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект, СписокКонстант );
	
	Объект.флСохранятьНастройкиДляТекущегоПользователя = флСохранятьНастройкиДляТекущегоПользователя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаНовуюВерсиюПараметров(Команда)
	
	ЗагрузитьПараметрыИзХранилища();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборКаталога_Завершение(Результат, Реквизит) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект[Реквизит] = Результат[0] + "\";
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКаталога(Реквизит)

	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.Каталог = ""; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Выберите каталог"; 
	
	Оповещение = Новый ОписаниеОповещения("ВыборКаталога_Завершение", ЭтаФорма, Реквизит);
    ДиалогОткрытия.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнтеграцииНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборКаталога("КаталогИнтеграции");
		
КонецПроцедуры

&НаКлиенте
Процедура КаталогЛоговНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборКаталога("КаталогЛогов");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранятьЗапросыXmlВФайлПриИзменении(Элемент)
	ЭтотОбъект.Элементы.КаталогЛогов.Видимость = Объект.СохранятьЗапросыXmlВФайл;
КонецПроцедуры
