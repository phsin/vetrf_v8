&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ОчиститьПлощадку;

#Область НемодальныеОкна
&НаКлиенте
Процедура ПредупреждениеПользователю(ТекстПредупреждения) Экспорт
    Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждения", ЭтаФорма);	
    ПоказатьПредупреждение( Оповещение,   ТекстПредупреждения,   0,   "Предупреждение" );
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеЗакрытияПредупреждения(Параметры) Экспорт	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьСообщенияНаСервере( ) 
    
	Попытка		
		Сообщения = ДлительныеОперации.СообщенияПользователю( Истина, ИдентификаторЗадания );
	Исключение
		Сообщения = кб99_ВСД_Общий.СообщенияПользователю( Истина, ИдентификаторЗадания );
	КонецПопытки;
	
 	Возврат Сообщения;
    
КонецФункции

// Реквизит на форме - текущая площадка = Объект Отправитель_Площадка
&НаКлиенте
Процедура Отправитель_ПлощадкаНаФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отбор по ХС включим
	// ГУИДХСдляОтбора = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Объект.Отправитель_ХозСубъект,"GUID");
	// ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	// ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ЗначениеОтбора = Новый Структура("ХозСубъект", Объект.Отправитель_ХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина, ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

// ************ Сведения о ХС и Площадках

&НаСервере
Функция кнХозСубъект_ПолучитьGuidПоИНН_НаСервере(ВыбХозСубъект) Экспорт
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;

		ПараметрыФункции["ВыбХозСубъект"] = ВыбХозСубъект;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос GUID ХозСубъекта'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ХозСубъект_ПолучитьGuidПоИНН_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ХозСубъект_ПолучитьGuidПоИНН( ПараметрыФункции, ВыбХозСубъект );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;	
КонецФункции

&НаКлиенте
Процедура кнХозСубъект_ПолучитьGuidПоИНН(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект)) Тогда
		ПредупреждениеПользователю("Не выбран Хозсубъект !");
		Возврат;	
	КонецЕсли;
	ПоказатьОповещениеПользователя("Выполняем запрос GUID ХозСубъекта",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	// ХС_ПолучитьGuid_Сервер(ВыбранныйХС);
	Результат = кнХозСубъект_ПолучитьGuidПоИНН_НаСервере(ВыбХозСубъект);
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция кнЗагрузитьПлощадкиПоХозСубъектуНаСервере(ВыбХозСубъект)	Экспорт
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
	
		ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
		ПараметрыФункции["ВыбХозСубъект"] = ВыбХозСубъект;
		ПараметрыФункции["ЗагрузитьПлощадку"] = Истина;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос GUID ХозСубъекта'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту( ПараметрыФункции, ВыбХозСубъект, Истина );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;	

КонецФункции

&НаКлиенте
Процедура кнЗагрузитьПлощадкиПоХозСубъекту(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	// ЗагрузитьПлощадки_Сервер(ВыбранныйХС);
	Результат = кнЗагрузитьПлощадкиПоХозСубъектуНаСервере( ВыбХозСубъект );	
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПлощадкиСпискомПоХозСубъекту_Сервер( )
	
	тзСвертка = Объект.Отгрузки.Выгрузить();
	тзСвертка.Свернуть("Отметка, Контрагент, ХозСубъект",);
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );	
	ПараметрыФункции.Вставить("тзКонтрагенты", тзСвертка );
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос Площадок, привязанных к ХозСубъекту'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Площадки_ЗагрузитьСписокПоХозСубъекту",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Площадки_ЗагрузитьСписокПоХозСубъекту( ПараметрыФункции, "" );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Для Каждого ДанныеСтроки Из Объект.Отгрузки Цикл
		ДанныеСтроки.Отметка = Ложь;
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоСпискуДокументов(Команда)

	ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Результат = ЗагрузитьПлощадкиСпискомПоХозСубъекту_Сервер( );
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыЗагрузкаПлощадок(РезультатВыбора, ДопПараметры) Экспорт
	// КопироватьДанныеФормы(РезультатВыбора, Объект);
	//// все данные объекта заполнились
	// Если ДопПараметры.ИмяКоманды = "ТутБылоПереданоИмяКоманды" Тогда
	//	// выполняем дополнительные процедуры, если они нужны
	// КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоНаименованию(Команда)
	Если ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура("ВыбХозСубъект, ВыбРегион", ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные.ХозСубъект, Объект.Регион );
	Иначе
		СтруктураПараметров = Новый Структура("ВыбХозСубъект, ВыбРегион","","");
	КонецЕсли;
	ОповещениеОВыборе  = Новый ОписаниеОповещения("ОткрытиеФормыЗагрузкаПлощадок", ЭтаФорма, Новый Структура("ИмяКоманды", Команда.Имя));
	ОткрытьФорму("Обработка.кб99_НайтиПлощадки.Форма.ФормаЗагрузкаПлощадокУФ",СтруктураПараметров, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отбор по ХС включим
	// ГУИДХСдляОтбора = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбранныйХС,"GUID");
	// ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	// ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ЗначениеОтбора = Новый Структура("ХозСубъект", ВыбХозСубъект);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

&НаСервере
Процедура кнХС_СоздатьНаСервере( ВыбХозСубъект )
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	кб99_ВСД_Запросы.ХозСубъект_Создать( ПараметрыОрганизации, ВыбХозСубъект );

КонецПроцедуры

&НаКлиенте
Процедура кнХС_СоздатьОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Создаем ХС в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнХС_СоздатьНаСервере( ВыбХозСубъект );
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнХС_Создать(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите ХС");
		Возврат;
	КонецЕсли;
	ТекстВопроса = "Создать ХС "+ВыбХозСубъект+" в Меркурий ?";
    Оповещение = Новый ОписаниеОповещения("кнХС_СоздатьОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры


&НаСервере
Функция кнПлощадкаПоХССоздатьНаСервере(ВыбХС)
	// ФООбъект = РеквизитФормыВЗначение("Объект");
	// СведенияОКонтрагенте = ФООбъект.ПолучитьСведенияОКонтрагенте(ВыбХС.Контрагент,ТекущаяДата());	
	СпрПл = Справочники.ВСД_Площадка.СоздатьЭлемент();
	СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
	СпрПл.Контрагент = ВыбХС.Контрагент.Ссылка;
	СпрПл.GuidХозСубъекта = ВыбХС.GUID;
	// Попытка СпрПл.Адрес = СведенияОКонтрагенте.ФактическийАдрес; Исключение КонецПопытки;
	СпрПл.Записать();
	кб99_ВСД.СообщитьИнфо("Создан ВСД_Площадка "+СпрПл);
	Возврат СпрПл.Ссылка;
КонецФункции

&НаКлиенте
Процедура кнПлощадкаПоХССоздатьОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыбраннаяПлощадка = кнПлощадкаПоХССоздатьНаСервере(ВыбХозСубъект);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура кнСоздатьПлощадкувМеркурийНаСервере(ВыбПлощадка)
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	кб99_ВСД_Запросы.Площадка_Создать( ПараметрыОрганизации, ВыбПлощадка );
	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПлощадкувМеркурий(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбраннаяПлощадка)) Тогда
		ПредупреждениеПользователю("Не указана Площадка 1С для создания в Меркурий");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Создаем площадку в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнСоздатьПлощадкувМеркурийНаСервере(ВыбраннаяПлощадка);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура кнПривязатьПлощадкуНаСервере(ВыбПлощадка)
	
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	кб99_ВСД_Запросы.Площадка_СвязатьСХозСубъектом( ПараметрыОрганизации, ВыбПлощадка );
	
КонецПроцедуры

&НаКлиенте
Процедура кнПривязатьПлощадку(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбраннаяПлощадка)) Тогда
		ПредупреждениеПользователю("Не указана Площадка для привязки к ХС");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Привязываем Площадку к ХС",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнПривязатьПлощадкуНаСервере(ВыбраннаяПлощадка);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры


// ************* Сведения о ХС и Площадках окончание

// *** Загрузка НСИ

&НаСервере
Функция ЗагрузитьЦелиНаСервере()
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос Цели транспортировки'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьЦели_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьЦели( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции
 
&НаКлиенте
Процедура ЗагрузитьЦели(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Классификатора Цели");
	Результат = ЗагрузитьЦелиНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
КонецПроцедуры
// *** Загрузка НСИ Окончание


&НаСервере
Процедура СохранитьПараметрыНаСервере()
	
	кб99_ВСД.СохранитьПараметры( Объект );
	
	_Организация = Объект.Организация;
	
	кб99_ВСД.СообщитьИнфо("Настройки сохранены для  - "+_Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметры(Команда)
	СохранитьПараметрыНаСервере();
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция кнИнициализацияНаСервере()
	// основные параметры
	Объект.НазваниеРеквизитаКоличество = "Количество";
	Объект.ПарамКоэффициентПересчетаКоличества = 1;
	Объект.ПарамЗнакСортировкиУбывание = Ложь;
	Объект.ПарамКолонкаСортировкиПартииСписания = "ДатаСрокГодности1";
	Объект.НазваниеРеквизитаКоличествоМест = "Количество";
	// Объект.ТермУсловияПеревозки = 1;
	Объект.ВСД_РезультатыИсследований = Перечисления.кб99_РезультатИсследования.VSERAW;
	Объект.ПарамЗаполнятьТранзакциюПриОтсутствииПартий = Ложь;	
	
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );	
	Если Объект.ОтправлятьВФоне Тогда 
	
		ИдентификаторЗадания = Неопределено;		
	
		НаименованиеЗадания = НСтр("ru = 'Ветис инициализация - загрузка справочников'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьВсеСправочники",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьВсеСправочники( ПараметрыФункции,"" );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура кнИнициализацияОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется начальная Инициализация",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		Результат = кнИнициализацияНаСервере();
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура кнИнициализация(Команда)
	Если ПустаяСтрока(Объект.param_username)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [param_username]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Объект.param_password)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [param_password]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Объект.param_issuer_id)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [issuer_id]");
		Возврат;
	КонецЕсли;
	
	ТВопроса = "Будет произведена загрузка классификаторов Меркурий 
	| и заполнены начальные данные. 
	|Операция может занять продолжительное время.";
	Оповещение = Новый ОписаниеОповещения("кнИнициализацияОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
	
КонецПроцедуры

// ************* Инициализация и сохранение параметров Окончание

// ************ Партии

&НаСервере
Функция ПолучитьПартии2_НаСервере( НачДата, КонДата )
	
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );	
	ПараметрыФункции.Вставить("ВыбПлощадка", Объект.Отправитель_Площадка);
	ПараметрыФункции.Вставить("ПартииСмещение", Объект.Смещение);
	ПараметрыФункции.Вставить("УдалятьПартии", флУдалятьПартии);
	ПараметрыФункции.Вставить("ТолькоАктуальныеПартии", флПартииНенулевые);
	ПараметрыФункции.Вставить("ПартияНачПериода", НачДата);
	ПараметрыФункции.Вставить("ПартияКонПериода", КонДата);
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;	
		
		НаименованиеЗадания = НСтр("ru = 'Ветис загрузка партий'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Партии2_Запрос_Отправить_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		АдресХранилища       = Результат.АдресХранилища;		
	Иначе;
		Ответ = кб99_ВСД_Запросы.Партии2_Запрос_Отправить( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПартии_ОтветНаВопрос(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Результат = ПолучитьПартии2_НаСервере( ПартииНач, КонецДня( ПартииКон ) );
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПоказатьОповещениеПользователя("Выполнено");
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии2(Команда)
	ТекстВопроса = "Получить партии площадки ["+Объект.Отправитель_Площадка+"] из Меркурия ?";

	Если ЗначениеЗаполнено(ПартииНач)  Тогда
		ТекстВопроса = ТекстВопроса + "
		|за период с "+ПартииНач+" по "+ПартииКон+"";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьПартии_ОтветНаВопрос", ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, ""  );    
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыЗагрузкиПартии(ВыбДата, Параметры) Экспорт
    Если ЗначениеЗаполнено( ВыбДата ) Тогда
		
		Результат = ПолучитьПартии2_НаСервере(ВыбДата, ТекущаяДата());
		
		Если Результат.ЗаданиеВыполнено Тогда
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено( Результат.ИдентификаторЗадания ) Тогда
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
		
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыЗагрузкиПартии", ЭтаФорма);	
    ВыбДата = ТекущаяДата()-30*60*60*30;
    ПоказатьВводДаты( Оповещение, ВыбДата , "Введите дату начала загрузки Партий",  ЧастиДаты.Дата);   	
КонецПроцедуры

&НаСервере
Процедура кнПолучитьПартии14НаСервере()
	//ПолучитьПартии(Объект.Отправитель_Площадка);
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии14Ответ(Ответ,Парам) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется загрузка Партий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнПолучитьПартии14НаСервере();
		ПоказатьОповещениеПользователя("Загрузка Партий завершена");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии14(Команда)
	
	ТВопроса = "Получить Партии по Площадке "+Объект.Отправитель_Площадка+" в Меркурий ";
	ТВопроса = ТВопроса + "
	| Операция может занять продолжительное время.";
	
    Оповещение = Новый ОписаниеОповещения("кнПолучитьПартии14Ответ",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    

КонецПроцедуры


// *********** Партии окончание

// *** На форме

// ===========================================================================
// Загрузка Классификаторов

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации( ФормаДлительнойОперации );
	
	// Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") Тогда
	//	Если ФормаДлительнойОперации.Открыта() Тогда
	//		ФормаДлительнойОперации.Закрыть();
	//	КонецЕсли;
	// КонецЕсли;	
	
КонецПроцедуры
&НаСервере
Функция ЗаданиеВыполнено() 
	Возврат ДлительныеОперации.ЗаданиеВыполнено( ИдентификаторЗадания );
КонецФункции

&НаСервере
Процедура ЗагрузитьПараметры( )
	//ФОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		Результат = ПолучитьИзВременногоХранилища( АдресХранилища );
		
		Если ЗначениеЗаполнено( Результат["Параметры"] ) Тогда 	
			кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект , Результат["Параметры"] );
		КонецЕсли;
	Исключение КонецПопытки;
	
	//ЗначениеВРеквизитФормы(ФОбъект, "Объект");			
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	МассивСообщений = ПолучитьСообщенияНаСервере( );
	Для Каждого Сообщение Из МассивСообщений Цикл
		Сообщение.Сообщить();
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Сообщить();
	КонецЦикла;
	
	Попытка
		Если ЗаданиеВыполнено() Тогда 
			
			//ЗагрузитьПараметры( );
			
			ЗакрытьФормуДлительнойОперации();
			Возврат;
		КонецЕсли;		
	Исключение
		ЗакрытьФормуДлительнойОперации();
		ВызватьИсключение;
	КонецПопытки;
 
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПродукциюНаСервере()
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
	
		ИдентификаторЗадания = Неопределено;	
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос продукции'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьПродукцию_Все",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьПродукцию_Все( ПараметрыФункции, "");
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьПродукцию( )
	ПоказатьОповещениеПользователя("Выполняется загрузка Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	
	Результат = ЗагрузитьПродукциюНаСервере( );	
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
 	
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьЕдИзмНаСервере( )
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
	
		ИдентификаторЗадания = Неопределено;
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос Единиц Измерения'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьЕдИзм(Команда)
	// СтруктураПараметров = ИнициализацияКлиент( УникальныйИдентификатор );	
	
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	
	Результат = кнЗагрузитьЕдИзмНаСервере( );	
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьСтраныНаСервере()
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
			
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка стран'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьСтраны_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьСтраны( ПараметрыФункции );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьСтраны(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	
	Результат = кнЗагрузитьСтраныНаСервере();	
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьРегионыНаСервере()
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
	
		ИдентификаторЗадания = Неопределено;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Регионы'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьРегионы_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;	
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьРегионы( ПараметрыФункции, Объект.Страна );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьРегионы(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Результат = кнЗагрузитьРегионыНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьГородаНаСервере()
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
	
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Города'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьГорода_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		// АдресХранилища       = Результат.АдресХранилища;	
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.ИнициализацияХС_ЗагрузитьГорода( ПараметрыФункции, Объект.Регион );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура кнЗагрузитьГорода(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Результат = кнЗагрузитьГородаНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция кнЗагрузитьФормыУпаковкиНаСервере()
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис запрос загрузка Форма упаковки'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.ЗаполнитьФормыУпаковки",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		кб99_ВСД_Запросы.ЗаполнитьФормыУпаковки( ПараметрыФункции, "" );
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура кнЗагрузитьФормыУпаковки(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Результат = кнЗагрузитьФормыУпаковкиНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

// **** Продукция
&НаСервере
Функция кнПолучитьСписокПродукцииНаСервере(ВыбПлощадка)
	
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	ПараметрыФункции["ВыбПлощадка"] = ВыбПлощадка;
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		НаименованиеЗадания = НСтр("ru = 'Ветис загрузка продукции площадки'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Продукция_Элемент_Получить_Список_По_Площадке_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		кб99_ВСД_Запросы.Продукция_Элемент_Получить_Список_По_Площадке( ПараметрыФункции, ВыбПлощадка);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнПолучитьСписокПродукцииОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Получаем список продукции по выбранной площадке",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		Результат = кнПолучитьСписокПродукцииНаСервере( ВыбПлощадкаПродукция );
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьСписокПродукции(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПлощадкаПродукция)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите Площадку");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнПолучитьСписокПродукцииОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Получить полный список продукции по площадке "+ВыбПлощадкаПродукция+"?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Функция кнПолучитьИнфоПродукцияНаСервере( Выб_ВСД_Продукция_Элемент )
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );

	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;

		ПараметрыФункции["Выб_ВСД_Продукция_Элемент"] = Выб_ВСД_Продукция_Элемент;
		
		НаименованиеЗадания = НСтр("ru = 'КБ99. Ветис загрузка партий'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Продукция_Элемент_Получить_Инфо_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Продукция_Элемент_Получить_Инфо( ПараметрыФункции, Выб_ВСД_Продукция_Элемент);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура кнПолучитьИнфоПродукция(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Получаем инфо о продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Результат = кнПолучитьИнфоПродукцияНаСервере( ВыбПродукция );
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Задание отработало, результат получен
		ПоказатьОповещениеПользователя("Выполнено");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Функция ИзменитьПродукциюНаСервере(Выб_ВСД_Продукция_Элемент, ВыбКоманда)
	ПараметрыФункции = кб99_ВСД_Общий.ПараметрыСервер( Объект );
	
	Если Объект.ОтправлятьВФоне Тогда 
		ИдентификаторЗадания = Неопределено;
		
		ПараметрыФункции["Выб_ВСД_Продукция_Элемент"] = Выб_ВСД_Продукция_Элемент;
		ПараметрыФункции["ВыбКоманда"] = ВыбКоманда;
		
		НаименованиеЗадания = НСтр("ru = 'Ветис создать продукцию'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне( УникальныйИдентификатор, 
			"кб99_ВСД_Запросы.Продукция_Элемент_Изменить_ВФоне",
			ПараметрыФункции,
			НаименованиеЗадания);
		
		// результат обработки
		АдресХранилища       = Результат.АдресХранилища;
		
		// для получения сообщений
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе;
		Ответ = кб99_ВСД_Запросы.Продукция_Элемент_Изменить( ПараметрыФункции, Выб_ВСД_Продукция_Элемент, ВыбКоманда);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура кнИзменитьПродукциюОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на изменение продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		Результат = ИзменитьПродукциюНаСервере(ВыбПродукция, "UPDATE");
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнИзменитьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнИзменитьПродукциюОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Изменить продукцию "+ВыбПродукция+" ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПродукциюОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на создание Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	   	
		Результат = ИзменитьПродукциюНаСервере(ВыбПродукция, "CREATE");
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнСоздатьПродукциюОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Создать продукцию "+ВыбПродукция+" у ХС "+Объект.Отправитель_ХозСубъект+" ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПродукциюОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на удаление Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		Результат = ИзменитьПродукциюНаСервере(ВыбПродукция,"DELETE");
		
		Если Результат.ЗаданиеВыполнено Тогда
			// Задание отработало, результат получен
			ПоказатьОповещениеПользователя("Выполнено");
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) Тогда
		кб99_ВСД.СообщитьИнфо("Укажите Продукцию");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнУдалитьПродукциюОтвет",ЭтаФорма);	
    ПоказатьВопрос(Оповещение, "Удалить продукцию "+ВыбПродукция+" в Меркурий?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект, СписокКонстант ); 
	
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = кб99_ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();	
	СписокКонстант = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	кб99_ВСД.ЗагрузитьПараметрыВОбработку( Объект, СписокКонстант ); 
		
КонецПроцедуры

&НаСервере
Процедура кнУдалитьПартииНаСервере(НачДата, КонДата)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_Партия.Ссылка,
	               |	ВСД_Партия.ДатаИзменения
	               |ИЗ
	               |	Справочник.ВСД_Партия КАК ВСД_Партия
	               |ГДЕ
	               |	ВСД_Партия.Получатель_Площадка = &Получатель_Площадка ";
	
	Запрос.УстановитьПараметр("Получатель_Площадка", Объект.Отправитель_Площадка);
	Если ЗначениеЗаполнено( ПартииНач ) Тогда 
		Запрос.Текст = Запрос.Текст + "
	    |	И ВСД_Партия.ДатаИзменения МЕЖДУ &НачДата И &КонДата";
		Запрос.УстановитьПараметр("НачДата", НачДата);
		Запрос.УстановитьПараметр("КонДата", КонДата);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПартияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПартияОбъект.УстановитьПометкуУдаления(Истина, Ложь);		
	КонецЦикла;
	кб99_ВСД.СообщитьИнфо("ВСД_Партии помечены на удаление");
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПартии(Команда)
	кнУдалитьПартииНаСервере( ПартииНач, ПартииКон );
КонецПроцедуры

&НаСервере
Процедура кнВерсия2ОбновитьСправочникиНаСервере()
	ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры( Объект.Организация );
	
	СпрПлощадки = Справочники.ВСД_Площадка.Выбрать();
	Пока СпрПлощадки.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(СпрПлощадки.ХозСубъект) Тогда 
			СпрОбъект = СпрПлощадки.ПолучитьОбъект();
			СпрОбъект.ХозСубъект = кб99_ВСД_Запросы.ХозСубъект_НайтиПоGUID(ПараметрыОрганизации, СпрПлощадки.GuidХозСубъекта );
			СпрОбъект.Записать();
			кб99_ВСД.СообщитьИнфо(СпрПлощадки.Наименование, СпрПлощадки.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_Соответсвия.Номенклатура,
	               |	ВСД_Соответсвия.ПродукцияЭлемент,
	               |	ВСД_Соответсвия1.Владелец КАК СпрНоменклатура,
	               |	КОЛИЧЕСТВО(ВСД_Соответсвия1.ПродукцияЭлемент) КАК КолвоПродукцияЭлемент
	               |ИЗ
	               |	РегистрСведений.ВСД_Соответсвия КАК ВСД_Соответсвия
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия1
	               |		ПО ВСД_Соответсвия.Номенклатура = ВСД_Соответсвия1.Владелец
	               |			И ВСД_Соответсвия.ПродукцияЭлемент = ВСД_Соответсвия1.ПродукцияЭлемент
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВСД_Соответсвия.Номенклатура,
	               |	ВСД_Соответсвия.ПродукцияЭлемент,
	               |	ВСД_Соответсвия1.Владелец";
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.КолвоПродукцияЭлемент=0 Тогда 
				СпрОб = Справочники.ВСД_Соответсвия.СоздатьЭлемент();
				СпрОб.Владелец = Выборка.Номенклатура;
				СпрОб.ПродукцияЭлемент = Выборка.ПродукцияЭлемент;
				СпрОб.Наименование =  СпрОб.ПродукцияЭлемент;
				СпрОб.Записать();
				кб99_ВСД.СообщитьИнфо("Записан "+СпрОб,СпрОб.Ссылка);
			КонецЕсли;
		КонецЦикла;
	
	Исключение 
	КонецПопытки
	
КонецПроцедуры

&НаКлиенте
Процедура кнВерсия2ОбновитьСправочники(Команда)
	кнВерсия2ОбновитьСправочникиНаСервере();
КонецПроцедуры

