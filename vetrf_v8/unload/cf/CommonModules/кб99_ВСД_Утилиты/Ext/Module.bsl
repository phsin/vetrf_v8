#Область ПрограммныйИнтерфейс

#Область БазовыеУтилиты

// Функция разделения строки для платформы 8.2 и выше
// 
// Параметры:
//  Имя - Строка - строка для разделения
//  ЗнакДелителя - Строка - разделитель
// 
// Возвращаемое значение:
//  Массив - массив подстрок
//
Функция СтрРазделить82(Имя, ЗнакДелителя) Экспорт
	
	// Проверка на доступность штатной функции СтрРазделить (доступна с платформы 8.3.5)
	// Используем платформенный метод СтрРазделить (1C:Platform API)
	Попытка
		Возврат СтрРазделить(Имя, ЗнакДелителя);
	Исключение
		// Для платформы 8.2 и ранних 8.3 - ручная реализация разделения строки
		Результат = Новый Массив;
		ИмяКопия = Имя;
		Позиция = Найти(ИмяКопия, ЗнакДелителя);
		
		Пока Позиция > 0 Цикл
			Результат.Добавить(Лев(ИмяКопия, Позиция - 1));
			ИмяКопия = Сред(ИмяКопия, Позиция + СтрДлина(ЗнакДелителя));
			Позиция = Найти(ИмяКопия, ЗнакДелителя);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИмяКопия) Тогда
			Результат.Добавить(ИмяКопия);
		КонецЕсли;
		
		Возврат Результат;
	КонецПопытки;
	
КонецФункции

// Получает серверный модуль менеджера объекта метаданных
// 
// Параметры:
//  Имя - Строка - полное имя объекта метаданных (например, "Справочники.Номенклатура")
// 
// Возвращаемое значение:
//  ОбщийМодульМенеджер - модуль менеджера объекта
//
Функция СерверныйМодульМенеджера(Имя) Экспорт
	
	ОбъектНайден = Ложь;
	
	ЧастиИмени = СтрРазделить82(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];
		
		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбъектНайден Тогда
		ВызватьИсключение("ОШИБКА ПОЛУЧЕНИЯ МОДУЛЯ");
	КонецЕсли;
	
	//@skip-check server-execution-safe-mode
	Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	
	Возврат Модуль;
	
КонецФункции

// Получает общий модуль по имени
// Используется для получения модулей типовой конфигурации
// 
// Параметры:
//  Имя - Строка - имя общего модуля или полное имя объекта (через точку)
// 
// Возвращаемое значение:
//  ОбщийМодуль, Неопределено - найденный модуль или Неопределено
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Попытка	
		Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
			//@skip-check server-execution-safe-mode
			Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
		ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
			Возврат СерверныйМодульМенеджера(Имя);
		Иначе
			Модуль = Неопределено;
		КонецЕсли;
	Исключение
		кб99_ВСД.СообщитьИнфо("Ошибка получения модуля Типовой конфигурации "+Имя+" "+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Модуль;
	
КонецФункции

// Проверяет, переопределена ли функция в модуле кб99_ВСД_Переопределения
// 
// Параметры:
//  ИмяФункции - Строка - имя функции для проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль, Неопределено - модуль с переопределением или Неопределено
//
Функция ФункцияПереопределена(ИмяФункции) Экспорт
 
 	// Проверка переопределения функции в Общем модуле ВСД_Переопределения
 	Модуль  = ОбщийМодуль("кб99_ВСД_Переопределения");
	Если Модуль = Неопределено Тогда
		Возврат Неопределено;
 	КонецЕсли;  
	
	Если Модуль.НайтиФункцию(ИмяФункции) Тогда 
		Возврат Модуль;
	Иначе
		// переопределения нет
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаССообщениями

// Получает сообщения пользователю, отфильтровывает служебные сообщения о состоянии длительной операции
// 
// Параметры:
//  УдалятьПолученные - Булево - Признак необходимости удаления полученных сообщений
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания
// 
// Возвращаемое значение:
//  Массив - ФиксированныйМассив - Массив объектов СообщениеПользователю
//
Функция СообщенияПользователю(УдалятьПолученные = Ложь, ИдентификаторЗадания = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДлительныеОперации") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// ДлительныеОперации.СообщенияПользователю() доступно с БСП 2.2.5, с БП 3.0.42
	МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
	Возврат МодульДлительныеОперации.СообщенияПользователю(УдалятьПолученные, ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументами

// Определяет тип объекта метаданных документа
// 
// Параметры:
//  ВидДокумента - ДокументСсылка - ссылка на документ
// 
// Возвращаемое значение:
//  Строка - тип документа ("Реализация", "Перемещение", "Производство" и т.д.)
//
Функция ОпределитьТипОбъектаМетаданных(ВидДокумента) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("ОпределитьТипОбъектаМетаданных");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.ОпределитьТипОбъектаМетаданных(ВидДокумента);
	КонецЕсли;
	
	Результат = Новый Структура("ТипДокумента, ИмяТЧ");
	
	Если ВидДокумента = "Корректировка" Тогда
		
		Если Метаданные.Документы.Найти("КорректировкаПриобретения") <> Неопределено Тогда
			// УТ 11, КА 2, ERP
			Результат.ТипДокумента = Тип("ДокументСсылка.КорректировкаПриобретения");
			Результат.ИмяТЧ = "Расхождения";
			 
		ИначеЕсли Метаданные.Документы.Найти("КорректировкаПоступления") <> Неопределено Тогда
			// БП 3, УТ 10.3, УПП 1.3, КА 1.1
			Результат.ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступления");
			Результат.ИмяТЧ = "Товары";
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Получает номер документа без префикса
// 
// Параметры:
//  ВыбДок - ДокументСсылка - ссылка на документ
// 
// Возвращаемое значение:
//  Строка - номер документа без префикса
//
Функция ПолучитьНомерДокБезПрефикса(ВыбДок) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьНомерДокБезПрефикса");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.ПолучитьНомерДокБезПрефикса(ВыбДок);
	КонецЕсли;
	
	// Получение номера документа (платформенное свойство Номер)
	НомерДокумента = СокрЛП(ВыбДок.Номер);
	
	// Если префикс отделен разделителем, убираем его
	ПозицияРазделителя = Найти(НомерДокумента, "-");
	Если ПозицияРазделителя > 0 Тогда
		НомерДокумента = Сред(НомерДокумента, ПозицияРазделителя + 1);
	КонецЕсли;
	
	Возврат НомерДокумента;
	
КонецФункции

// Получает номер автомобиля для документа
// 
// Параметры:
//  ДокОснование - ДокументСсылка - документ-основание
//  ПараметрыОрганизации - Структура - параметры организации
// 
// Возвращаемое значение:
//  Строка - номер автомобиля
//
Функция ПолучитьНомерАвто(ДокОснование, ПараметрыОрганизации) Экспорт
	
	ПереопределенныйМодуль = ФункцияПереопределена("ПолучитьНомерАвто");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.ПолучитьНомерАвто(ДокОснование, ПараметрыОрганизации);
	КонецЕсли;
	
	НомерАвтомобиля = "";
	
	// Проверка наличия реквизита НомерАвтомобиля в документе
	Если ЕстьРеквизитИлиСвойствоОбъекта(ДокОснование, "НомерАвтомобиля") Тогда
		НомерАвтомобиля = ДокОснование.НомерАвтомобиля;
	КонецЕсли;
	
	// Если не заполнен, берем из параметров организации
	Если Не ЗначениеЗаполнено(НомерАвтомобиля) 
		И ПараметрыОрганизации.Свойство("НомерАвто") Тогда
		НомерАвтомобиля = ПараметрыОрганизации.НомерАвто;
	КонецЕсли;
	
	Возврат НомерАвтомобиля;
	
КонецФункции

// Проверяет, является ли документ отгрузкой
// 
// Параметры:
//  ВыбДок - ДокументСсылка - ссылка на документ
// 
// Возвращаемое значение:
//  Булево - Истина, если документ является отгрузкой
//
Функция ЭтоДокументОтгрузка(ВыбДок) Экспорт

	ПереопределенныйМодуль = ФункцияПереопределена("ЭтоДокументОтгрузка");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.ЭтоДокументОтгрузка(ВыбДок);
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Проверяет, является ли документ перемещением
// 
// Параметры:
//  ВыбДок - ДокументСсылка - ссылка на документ
// 
// Возвращаемое значение:
//  Булево - Истина, если документ является перемещением
//
Функция ЭтоДокументПеремещение(ВыбДок) Экспорт

	ПереопределенныйМодуль = ФункцияПереопределена("ЭтоДокументПеремещение");
	Если ПереопределенныйМодуль <> Неопределено Тогда		
		Возврат ПереопределенныйМодуль.ЭтоДокументПеремещение(ВыбДок);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаботаСВСД

// Находит ApplicationID в справочнике ВСД2
// 
// Параметры:
//  Ссылка - СправочникСсылка - ссылка на элемент справочника
// 
// Возвращаемое значение:
//  Строка - найденный ApplicationID
//
Функция НайтиApplicationID(Ссылка) Экспорт 
	
	Возврат Справочники.кб99_ВСД2.НайтиПоРеквизиту("uuid", Строка(Ссылка.УникальныйИдентификатор())).ApplicationID;
	
КонецФункции

// Находит последний запрос для объекта
// 
// Параметры:
//  Объект - ДокументОбъект, СправочникОбъект, ДокументСсылка, СправочникСсылка - объект для поиска запроса
// 
// Возвращаемое значение:
//  Структура - последний запрос из регистра кб99_Запросы
//
Функция НайтиПоследнийЗапрос(Объект) Экспорт 
	
	// Используем метод ПолучитьПоследнее для периодического регистра сведений
	// Платформенный метод: РегистрыСведений.<Имя>.ПолучитьПоследнее(Период, Отбор)
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", Объект);
	Обращение = РегистрыСведений.кб99_Запросы.ПолучитьПоследнее(ТекущаяДатаСеанса(), Отбор);
	
	Возврат Обращение;
	
КонецФункции

// Проверяет владельца элемента справочника
// 
// Параметры:
//  спрЭлемент - СправочникСсылка - элемент справочника
//  Владелец_ - СправочникСсылка - ожидаемый владелец
// 
// Возвращаемое значение:
//  Булево - Истина, если владелец совпадает
//
Функция ПроверитьВладельцаСправочника(спрЭлемент, Владелец_) Экспорт
	
	Возврат спрЭлемент.Владелец = Владелец_;
	
КонецФункции

#КонецОбласти

#Область ОбщиеУтилиты

// Проверяет наличие реквизита или свойства у объекта
// 
// Параметры:
//  Объект - Произвольный - объект для проверки
//  ИмяРеквизита - Строка - имя реквизита или свойства
// 
// Возвращаемое значение:
//  Булево - Истина, если реквизит или свойство существует
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;

	// Если ТипЗнч(Объект) = Тип("Структура") 
	// 	Или ТипЗнч(Объект) = Тип("Соответствие") Тогда
	// 	Возврат Объект.Свойство(ИмяРеквизита);
	// КонецЕсли;
	
	// Попытка
	// 	// Попытка обращения к свойству объекта через вычисление
	// 	//Вычислить("Объект." + ИмяРеквизита);
	// 	Возврат Истина;
	// Исключение
	// 	Возврат Ложь;
	// КонецПопытки;
	
КонецФункции

// Сворачивает массив, удаляя дубликаты
// 
// Параметры:
//  Массив - Массив - исходный массив
// 
// Возвращаемое значение:
//  Массив - массив без дубликатов
//
Функция СвернутьМассив(Знач Массив) Экспорт
	
	Если Массив = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// Используем ТаблицаЗначений для свертки (платформенный метод)
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Значение");
	
	Для Каждого ЗначениеМассива Из Массив Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.Значение = ЗначениеМассива;
	КонецЦикла;
	
	ТаблицаЗначений.Свернуть("Значение");
	
	Возврат ТаблицаЗначений.ВыгрузитьКолонку("Значение");
	
КонецФункции

// Формирует строку из массива подстрок
// 
// Параметры:
//  Массив - Массив - массив строк
//  Разделитель - Строка - разделитель, по умолчанию ","
//  СокращатьНепечатаемыеСимволы - Булево - сокращать ли непечатаемые символы
// 
// Возвращаемое значение:
//  Строка - объединенная строка
//
Функция СтрокаИзМассиваПодстрок(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = "";
	
	Для Каждого Элемент Из Массив Цикл
		
		Подстрока = Строка(Элемент);
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ПустаяСтрока(Результат) Тогда
			Результат = Подстрока;
		Иначе
			Результат = Результат + Разделитель + Подстрока;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление периода для API ВЕТИС
// 
// Параметры:
//  НачалоПериода - Дата - начало периода
//  КонецПериода - Дата - конец периода
// 
// Возвращаемое значение:
//  Строка - представление периода в формате ВЕТИС
//
Функция ПредставлениеПериодаВЕТИС(Знач НачалоПериода = Неопределено, Знач КонецПериода = Неопределено) Экспорт 
	
	Если НачалоПериода = Неопределено Тогда
		НачалоПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если КонецПериода = Неопределено Тогда
		КонецПериода = НачалоПериода;
	КонецЕсли;
	
	Если НачалоПериода = КонецПериода Тогда
		// Формат даты для ВЕТИС: YYYY-MM-DDThh:mm:ss (ISO 8601)
		Возврат Формат(НачалоПериода, "ДФ=yyyy-MM-ddTHH:mm:ss");
	Иначе
		Возврат Формат(НачалоПериода, "ДФ=yyyy-MM-ddTHH:mm:ss") + " - " + Формат(КонецПериода, "ДФ=yyyy-MM-ddTHH:mm:ss");
	КонецЕсли;
	
КонецФункции

// Возвращает описание версии модуля
// 
// Возвращаемое значение:
//  Строка - версия модуля
//
Функция ОписаниеВерсии() Экспорт
	
	Возврат "2.9.1";
	
КонецФункции

#КонецОбласти

#КонецОбласти

