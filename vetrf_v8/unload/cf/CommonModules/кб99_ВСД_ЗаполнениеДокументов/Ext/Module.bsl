#Область ПрограммныйИнтерфейс

// Заполняет связанные документы для документа ВСД
// 
// Параметры:
//  ДокВСД - ДокументСсылка - ссылка на документ ВСД
// 
// Возвращаемое значение:
//  Произвольный - результат заполнения
//
Функция ЗаполнитьСвязанныеДокументы(ДокВСД) Экспорт
	
	ПереопределенныйМодуль = кб99_ВСД_Утилиты.ФункцияПереопределена("ЗаполнитьСвязанныеДокументы");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ЗаполнитьСвязанныеДокументы(ДокВСД);
	КонецЕсли;

КонецФункции

// Рассчитывает количество для ВСД с учетом коэффициента пересчета
// 
// Параметры:
//  ПараметрыОрганизации - Структура - параметры организации
//  СтрокаТЧДок - СтрокаТаблицыЗначений - строка табличной части документа
//  Продукция_Элемент - СправочникСсылка - элемент продукции (необязательно)
// 
// Возвращаемое значение:
//  Число - рассчитанное количество для ВСД
//
Функция РассчитатьКоличествоДляВСД(ПараметрыОрганизации, СтрокаТЧДок, Продукция_Элемент = "") Экспорт
	
	// вызов переопределения
	ПереопределенныйМодуль = кб99_ВСД_Утилиты.ФункцияПереопределена("РассчитатьКоличествоДляВСД");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.РассчитатьКоличествоДляВСД(ПараметрыОрганизации, СтрокаТЧДок, Продукция_Элемент);
	КонецЕсли;
	
	Рез = 0;
	Коэфф = 0;
	Попытка
		//Пересчет ШТ в КГ
		Версия = Лев(Метаданные.Версия,2);		
		Если Метаданные.Имя = "УправлениеТорговлей" И Версия="11" Тогда 				
			Если СтрокаТЧДок.Номенклатура.ВесИспользовать Тогда
				Если СтрокаТЧДок.Номенклатура.ВесЗнаменатель>0 Тогда 
					Коэфф=СтрокаТЧДок.Номенклатура.ВесЧислитель/СтрокаТЧДок.Номенклатура.ВесЗнаменатель;
				Иначе
					Коэфф=0;
				КонецЕсли;
			КонецЕсли;
		Иначе //остальные считаем с учетом параметра [ПарамКоэффициентПересчетаКоличества]		
			
			КПересчета = ПараметрыОрганизации["ПарамКоэффициентПересчетаКоличества"]; 
			Попытка
				Коэфф = Число(КПересчета);
			Исключение
				Коэфф = 0;
			КонецПопытки;
			
			Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
				Коэфф = 1;
			ИначеЕсли Строка(Коэфф)	= КПересчета Тогда
				Коэфф = Число(КПересчета);
			Иначе //реквизитСтрокиДока.
				_Точка = Найти(КПересчета,".");
				ИмяРекв = Сред(КПересчета,1,_Точка-1);
				ИмяПодРекв = Сред(КПересчета,_Точка+1);
				Коэфф = СтрокаТЧДок[ИмяРекв];
				_Точка = Найти(ИмяПодРекв,".");
				Пока _Точка > 0 Цикл
					ИмяРекв = Сред(ИмяПодРекв,1,_Точка-1);
					ИмяПодРекв = Сред(ИмяПодРекв,_Точка+1);
					Коэфф = Коэфф[ИмяРекв];
					_Точка = Найти(ИмяПодРекв,".");
				КонецЦикла;
				Если НЕ ТипЗнч(Коэфф) = Тип("Число") Тогда
					Коэфф = Коэфф[ИмяПодРекв];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		кб99_ВСД.СообщитьИнфо("Указан неверный параметр [ПарамКоэффициентПересчетаКоличества]");
		кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());
		Рез = 0;
	КонецПопытки;
	
	Если Коэфф = 0 Тогда
		кб99_ВСД.СообщитьИнфо("Коэфф пересчета "+КПересчета+" для "+СтрокаТЧДок.Номенклатура + " равен 0 - ставлю 1" );
		Коэфф = 1;
	КонецЕсли;
	
	Попытка
		Рез = СтрокаТЧДок[ ПараметрыОрганизации["НазваниеРеквизитаКоличество"] ]*Коэфф;
	Исключение
		кб99_ВСД.СообщитьИнфо("Указан неверный параметр [НазваниеРеквизитаКоличество] ");
		кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());
		Рез = 0;
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

// Выгружает табличную часть документа в таблицу значений
// 
// Параметры:
//  Док - ДокументСсылка - документ-основание
//  ПараметрыОрганизации - Структура - параметры организации
// 
// Возвращаемое значение:
//  ТаблицаЗначений - выгруженная табличная часть
//
Функция ВыгрузитьТч(Док, ПараметрыОрганизации = "") Экспорт
	
	// вызов переопределения
	ПереопределенныйМодуль = кб99_ВСД_Утилиты.ФункцияПереопределена("ВыгрузитьТч");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ВыгрузитьТч(Док, ПараметрыОрганизации);
	КонецЕсли;	
	
	// Загрузка параметров организации, если не переданы
	Если НЕ ЗначениеЗаполнено(ПараметрыОрганизации) Тогда 
		ПараметрыОрганизации = кб99_ВСД.ЗагрузитьПараметры(Док.Организация);
	КонецЕсли;
	
	// Создание результирующей таблицы значений с необходимой структурой
	ТаблицаРезультат = СоздатьТаблицуВыгрузкиТЧ();
	
	// Получение табличной части документа-основания (обычной или корректировки)
	ТаблицаОснование = ПолучитьТабличнуюЧастьДокумента(Док, ПараметрыОрганизации);
	
	// Определение контрагента документа
	Контрагент = ПолучитьКонтрагентаДокумента(Док);
	
	// Обработка строк табличной части
	Для Каждого СтрокаОснования Из ТаблицаОснование.ТаблицаТоваров Цикл
		
		// Обработка корректировок (пропуск положительных расхождений)
		Если ТаблицаОснование.ЭтоКорректировка Тогда
			Если НЕ ОбработатьСтрокуКорректировки(СтрокаОснования, ТаблицаОснование.СтруктураКорректировки, ПараметрыОрганизации) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Получение элемента продукции ВСД по номенклатуре
		ВСДПродукцияЭлемент = кб99_ВСД.Продукция_Элемент_ПолучитьПоНоменклатуре(СтрокаОснования.Номенклатура, Контрагент);
		
		// Проверка наличия продукции и обработка согласно настройкам
		Если НЕ ЗначениеЗаполнено(ВСДПродукцияЭлемент) Тогда
			Если ПараметрыОрганизации["ПропускатьПустыеСвойства"] Тогда
				Продолжить; // Пропускаем строку с пустой продукцией
			Иначе
				кб99_ВСД.СообщитьИнфо("[" + СтрокаОснования.Номенклатура + "] -> не указан ВСД_Продукция_Элемент");
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение строки результата
		СтрокаРезультата = ТаблицаРезультат.Добавить();
		ЗаполнитьСтрокуВыгрузкиТЧ(СтрокаРезультата, СтрокаОснования, ВСДПродукцияЭлемент, Контрагент, ПараметрыОрганизации);
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;

КонецФункции

// Получает артикул номенклатуры для ВСД
// 
// Параметры:
//  ПараметрыОрганизации - Структура - параметры организации
//  НоваяСтрока - СтрокаТаблицыЗначений - строка табличной части
//  СтрокаОснования - СтрокаТаблицыЗначений - строка основания
//  ДокСсылка - ДокументСсылка - ссылка на документ
// 
// Возвращаемое значение:
//  Строка - артикул номенклатуры
//
Функция ПолучитьАртикулНоменклатуры(ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка) Экспорт
	
	ПереопределенныйМодуль = кб99_ВСД_Утилиты.ФункцияПереопределена("ПолучитьАртикулНоменклатуры");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ПолучитьАртикулНоменклатуры(ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка);
	КонецЕсли;
	
	Ответ = НоваяСтрока.Продукция_Элемент.Артикул;
	Возврат Ответ;
	
КонецФункции

// Заполняет табличную часть документа ВСД на основании документа-основания
// 
// Параметры:
//  ПараметрыОрганизации - Структура - параметры организации
//  ДанныеЗаполнения - ДокументСсылка - документ-основание
//  докСсылка - ДокументОбъект - заполняемый документ ВСД
//  тзАктуальныхПартий - ТаблицаЗначений - таблица актуальных партий (необязательно)
//  ВыбТермУсловиеПеревозки - СправочникСсылка - термические условия перевозки (необязательно)
//  Контрагент - СправочникСсылка - контрагент (необязательно)
// 
// Возвращаемое значение:
//  Булево - Истина, если заполнение выполнено успешно
//
Функция ЗаполнитьТабЧастьВСД(ПараметрыОрганизации, ДанныеЗаполнения = Неопределено, докСсылка, тзАктуальныхПартий = Неопределено, ВыбТермУсловиеПеревозки = Неопределено, Контрагент = Неопределено) Экспорт

	// вызов переопределения
	ПереопределенныйМодуль = кб99_ВСД_Утилиты.ФункцияПереопределена("ЗаполнитьТабЧастьВСД");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ЗаполнитьТабЧастьВСД(ПараметрыОрганизации, ДанныеЗаполнения, докСсылка, тзАктуальныхПартий, ВыбТермУсловиеПеревозки, Контрагент);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		тзЭлементыОснования = ВыгрузитьТЧ(ДанныеЗаполнения.Ссылка, ПараметрыОрганизации);
		Если ЗначениеЗаполнено(ВыбТермУсловиеПеревозки) Тогда
			Отбор = Новый Структура("ТермУсловияПеревозки", ВыбТермУсловиеПеревозки);
			тзЭлементыКсписанию = тзЭлементыОснования.Скопировать(Отбор);
		Иначе
			тзЭлементыКсписанию = тзЭлементыОснования.Скопировать();
		КонецЕсли;
 	КонецЕсли;
	
	Если докСсылка.Получатель_ХозСубъект.ПерсональныеПараметрыСписанияПартий Тогда 
		ПолеСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамКолонкаСортировкиПартииСписания;
		ЗнакСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамЗнакСортировкиУбывание;
	Иначе 
		ПолеСортировкиПокупателя = Неопределено;
		ЗнакСортировкиПокупателя = Неопределено;
	КонецЕсли;
	ПартииКСписанию = кб99_ВСД.тзПартииСписанияПоТзПродукция_Элемент(ПараметрыОрганизации, тзЭлементыКсписанию, тзАктуальныхПартий, ПолеСортировкиПокупателя, ЗнакСортировкиПокупателя, Контрагент);
	
	Если (ПартииКСписанию.Количество() = 0) и НЕ(ПараметрыОрганизации["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"]) Тогда
		кб99_ВСД.СообщитьИнфо("Нет актуальных партий для создания ВСД по "+ ?(ДанныеЗаполнения = Неопределено,"Переданным данным",ДанныеЗаполнения.Ссылка));
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрокаТовары Из ПартииКСписанию Цикл
		НоваяСтрока = докСсылка.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
		ЗаполнитьРеквизитыСтрокиВСД(ПараметрыОрганизации, НоваяСтрока, ТекСтрокаТовары, докСсылка);
	КонецЦикла;
	
КонецФункции

// Заполняет табличную часть документа ВСД на основании таблицы значений
// 
// Параметры:
//  ПараметрыОрганизации - Структура - параметры организации
//  тзЭлементыОснования - ТаблицаЗначений - таблица элементов основания
//  докСсылка - ДокументОбъект - заполняемый документ ВСД
//  тзАктуальныхПартий - ТаблицаЗначений - таблица актуальных партий (необязательно)
//  ВыбТермУсловиеПеревозки - СправочникСсылка - термические условия перевозки (необязательно)
// 
// Возвращаемое значение:
//  Булево - Истина, если заполнение выполнено успешно
//
Функция ЗаполнитьТабЧастьВСДпоТЗ(ПараметрыОрганизации, тзЭлементыОснования, докСсылка, тзАктуальныхПартий = Неопределено, ВыбТермУсловиеПеревозки = Неопределено) Экспорт

	// вызов переопределения
	ПереопределенныйМодуль = кб99_ВСД_Утилиты.ФункцияПереопределена("ЗаполнитьТабЧастьВСДпоТЗ");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.ЗаполнитьТабЧастьВСДпоТЗ(ПараметрыОрганизации, тзЭлементыОснования, докСсылка, тзАктуальныхПартий, ВыбТермУсловиеПеревозки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбТермУсловиеПеревозки) Тогда
		Отбор = Новый Структура("ТермУсловияПеревозки", ВыбТермУсловиеПеревозки);
		тзЭлементыКсписанию = тзЭлементыОснования.Скопировать(Отбор);
	Иначе
		тзЭлементыКсписанию = тзЭлементыОснования.Скопировать();
	КонецЕсли;
 
	Если докСсылка.Получатель_ХозСубъект.ПерсональныеПараметрыСписанияПартий Тогда 
		ПолеСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамКолонкаСортировкиПартииСписания;
		ЗнакСортировкиПокупателя = докСсылка.Получатель_ХозСубъект.ПарамЗнакСортировкиУбывание;
	Иначе 
		ПолеСортировкиПокупателя = Неопределено;
		ЗнакСортировкиПокупателя = Неопределено;
	КонецЕсли;
	ПартииКСписанию = кб99_ВСД.тзПартииСписанияПоТзПродукция_Элемент(ПараметрыОрганизации, тзЭлементыКсписанию, тзАктуальныхПартий, ПолеСортировкиПокупателя, ЗнакСортировкиПокупателя);
	
	Если (ПартииКСписанию.Количество() = 0) и НЕ(ПараметрыОрганизации["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"]) Тогда
		кб99_ВСД.СообщитьИнфо("Нет актуальных партий для создания ВСД ", тзЭлементыОснования);
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрокаТовары Из ПартииКСписанию Цикл
		НоваяСтрока = докСсылка.Товары.Добавить();			
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
		ЗаполнитьРеквизитыСтрокиВСД(ПараметрыОрганизации, НоваяСтрока, ТекСтрокаТовары, докСсылка);
	КонецЦикла;
	
КонецФункции

// Заполняет корректировочный ВСД на основании ВСД со статусом WITHDRAWN
// 
// Параметры:
//  ПараметрыОрганизации - Структура - параметры организации
//  ДокументОснование - ДокументСсылка - документ-основание
//  Документ - ДокументОбъект - заполняемый документ ВСД
//
Процедура ЗаполнитьКорректировочныйВСД(ПараметрыОрганизации, ДокументОснование, Документ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	кб99_ВСД2.Продукция_Элемент КАК Продукция_Элемент,
	|	кб99_ВСД2.Продукция КАК Продукция,
	|	кб99_ВСД2.ВидПродукции КАК ВидПродукции,
	|	кб99_ВСД2.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	кб99_ВСД2.Количество КАК Количество,
	|	кб99_ВСД2.UUID КАК UUID_ВСД,
	|	кб99_ВСД2.GTIN КАК GTIN,
	|	кб99_ВСД2.Артикул КАК Артикул,
	|	кб99_ВСД2.РезультатыИсследований КАК РезультатыИсследований,
	|	кб99_ВСД2.Цель КАК Цель
	|ИЗ
	|	Справочник.кб99_ВСД2 КАК кб99_ВСД2
	|ГДЕ
	|	кб99_ВСД2.ДокументОснование = &ДокументОснование
	|	И кб99_ВСД2.СтатусВСД = &СтатусВСД";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("СтатусВСД", Перечисления.кб99_СтатусВСД.WITHDRAWN);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		стрТовары = Документ.Товары.Добавить();
		стрТовары.КлючСтроки = Новый УникальныйИдентификатор;
		ЗаполнитьЗначенияСвойств(стрТовары, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает количество потребительских упаковок
// 
// Параметры:
//  СтрокаУпак - СтрокаТаблицыЗначений - строка с данными об упаковке
//  СтрокаОснование - СтрокаТаблицыЗначений - строка основания
// 
// Возвращаемое значение:
//  Число - количество потребительских упаковок
//
Функция РассчитатьКоличествоПотребительскихУпаковок(СтрокаУпак, СтрокаОснование) Экспорт
	
	// вызов переопределения
	ПереопределенныйМодуль = кб99_ВСД_Утилиты.ФункцияПереопределена("РассчитатьКоличествоПотребительскихУпаковок");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		Возврат ПереопределенныйМодуль.РассчитатьКоличествоПотребительскихУпаковок(СтрокаУпак, СтрокаОснование);
	КонецЕсли;

	Номенклатура = СтрокаОснование.Номенклатура;
	
	// Инициализация по умолчанию (исправлена Проблема 14)
	Коэфф = 1;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Цел(СтрокаОснование.Количество / Коэфф);
	КонецЕсли;
	
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(Номенклатура, "ВесИспользовать") Тогда 
		Если Номенклатура.ВесИспользовать Тогда
			Если Номенклатура.ВесЗнаменатель>0 Тогда 
				Коэфф=Номенклатура.ВесЧислитель/Номенклатура.ВесЗнаменатель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Финальная проверка перед делением (исправлена Проблема 16)
	Если Коэфф = 0 Тогда
		Коэфф = 1;
		кб99_ВСД.СообщитьИнфо("Коэффициент пересчета равен нулю для " + Номенклатура + ", используется значение 1");
	КонецЕсли;
	
	Возврат Цел(СтрокаОснование.Количество / Коэфф);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет реквизиты строки ВСД
// 
// Параметры:
//  ПараметрыОрганизации - Структура - параметры организации
//  НоваяСтрока - СтрокаТаблицыЗначений - строка для заполнения
//  СтрокаОснования - СтрокаТаблицыЗначений - строка основания
//  ДокСсылка - ДокументОбъект - ссылка на документ
//
Процедура ЗаполнитьРеквизитыСтрокиВСД(ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка) Экспорт
	
	// вызов переопределения	
	ПереопределенныйМодуль = кб99_ВСД_Утилиты.ФункцияПереопределена("ЗаполнитьРеквизитыСтрокиВСД");
	Если ПереопределенныйМодуль <> Неопределено Тогда
		ПереопределенныйМодуль.ЗаполнитьРеквизитыСтрокиВСД(ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка);
		Возврат;
	КонецЕсли;
	
	// Основные реквизиты продукции (с проверкой наличия в структуре строки)
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Продукция") Тогда
		НоваяСтрока.Продукция = НоваяСтрока.Продукция_Элемент.Продукция;
	КонецЕсли;
	
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "ВидПродукции") Тогда
		НоваяСтрока.ВидПродукции = НоваяСтрока.Продукция_Элемент.ВидПродукции;
	КонецЕсли;
	
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "НаименованиеПродукции") Тогда
		НоваяСтрока.НаименованиеПродукции = НоваяСтрока.Продукция_Элемент.Наименование;
	КонецЕсли;
	
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "ВидПроисхожденияНеПищевойПродукции") Тогда
		НоваяСтрока.ВидПроисхожденияНеПищевойПродукции = НоваяСтрока.Продукция_Элемент.ВидПроисхожденияНеПищевойПродукции;
	КонецЕсли;
	
	// Результаты исследований (с проверкой наличия реквизита Партия)
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "РезультатыИсследований") Тогда
		Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Партия") Тогда
			НоваяСтрока.РезультатыИсследований = НоваяСтрока.Партия.vetDocument.РезультатыИсследований;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.РезультатыИсследований) Тогда
			НоваяСтрока.РезультатыИсследований = ПараметрыОрганизации["ВСД_РезультатыИсследований"];
		КонецЕсли;
	КонецЕсли;
	
	// GTIN и Артикул
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "GTIN") Тогда
		НоваяСтрока.GTIN = НоваяСтрока.Продукция_Элемент.GTIN;
	КонецЕсли;
	
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Артикул") Тогда
		НоваяСтрока.Артикул = ПолучитьАртикулНоменклатуры(ПараметрыОрганизации, НоваяСтрока, СтрокаОснования, ДокСсылка);
	КонецЕсли;
	
	// Ключ строки
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "КлючСтроки") Тогда
		НоваяСтрока.КлючСтроки = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	// Идентификатор строки
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "ИдентификаторСтроки") Тогда
		Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОснования, "ИдентификаторСтроки") Тогда
			НоваяСтрока.ИдентификаторСтроки = СтрокаОснования.ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
	// Особые отметки
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "ОсобыеОтметки") Тогда
		НоваяСтрока.ОсобыеОтметки = НоваяСтрока.Продукция_Элемент.ОсобыеОтметки;
	КонецЕсли;
	
	// Цель (с проверкой наличия реквизита)
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Цель") Тогда
		НоваяСтрока.Цель = НоваяСтрока.Продукция_Элемент.ВидПродукции.Цель;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Цель) Тогда 
			НоваяСтрока.Цель = ПараметрыОрганизации["ВСДЦель"];
		КонецЕсли;
	КонецЕсли;
	
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(докСсылка, "УровниУпаковки") Тогда 
		Если НЕ(ЗначениеЗаполнено( ПараметрыОрганизации["ПарамНомерУровняУпаковкиДляВСД"] )) или НЕ(ЗначениеЗаполнено( ПараметрыОрганизации["ПарамФормаУпаковкиДляВСД"])) Тогда
			Возврат;	
		КонецЕсли;
		// Упаковка на уровнях
		Попытка
			Если ЗначениеЗаполнено(СтрокаОснования.Упаковки) Тогда
				Если Цел(СтрокаОснования.Упаковки/СтрокаОснования.Количество*НоваяСтрока.Количество) = 0 Тогда
					кб99_ВСД.СообщитьИнфо("Нулевое кол-во упаковки у "+СтрокаОснования.Продукция_Элемент+" в "+ДокСсылка);	
				Иначе
					СтрокаУпак = докСсылка.УровниУпаковки.Добавить(); 
					СтрокаУпак.СтрокаПродукции = НоваяСтрока.КлючСтроки;
					СтрокаУпак.Количество = Цел(СтрокаОснования.Упаковки/СтрокаОснования.Количество*НоваяСтрока.Количество); //Пропорционально Распределенному количеству
					Если СтрокаУпак.Количество = 0 Тогда
						СтрокаУпак.Количество = 1;	
					КонецЕсли;
					СтрокаУпак.НомерУровня = ПараметрыОрганизации["ПарамНомерУровняУпаковкиДляВСД"];
					СтрокаУпак.ФормаУпаковки = ПараметрыОрганизации["ПарамФормаУпаковкиДляВСД"];
					//Маркировки
					СтрокаМарк = докСсылка.Маркировка.Добавить();
					СтрокаМарк.Строкапродукции = СтрокаУпак.СтрокаПродукции;
					СтрокаМарк.НомерУровня = СтрокаУпак.НомерУровня;
					СтрокаМарк.Класс = Перечисления.кб99_Маркировка.UNDEFINED;
					СтрокаМарк.Маркировка = НоваяСтрока.Партия.Производитель_Площадка.Наименование;
					Если Не ЗначениеЗаполнено(СтрокаМарк.Маркировка) Тогда
						СтрокаМарк.Маркировка = ПараметрыОрганизации.Отправитель_Площадка.Наименование;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение 
			кб99_ВСД.СообщитьИнфо(ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Создает таблицу значений для выгрузки табличной части
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками для выгрузки
//
Функция СоздатьТаблицуВыгрузкиТЧ()
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Номенклатура");
	ТаблицаРезультат.Колонки.Добавить("Продукция_Элемент");
	ТаблицаРезультат.Колонки.Добавить("Количество");
	ТаблицаРезультат.Колонки.Добавить("Упаковки");
	ТаблицаРезультат.Колонки.Добавить("СерияНоменклатуры");
	ТаблицаРезультат.Колонки.Добавить("ТермУсловияПеревозки");
	ТаблицаРезультат.Колонки.Добавить("Контрагент");
	ТаблицаРезультат.Колонки.Добавить("ВидПродукции");
	ТаблицаРезультат.Колонки.Добавить("Коэффициент");
	ТаблицаРезультат.Колонки.Добавить("ИдентификаторСтроки");
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Получает табличную часть документа-основания с учетом типа документа
// 
// Параметры:
//  Док - ДокументСсылка - документ-основание
//  ПараметрыОрганизации - Структура - параметры организации
// 
// Возвращаемое значение:
//  Структура - содержит:
//    ТаблицаТоваров - ТаблицаЗначений - выгруженная табличная часть
//    ЭтоКорректировка - Булево - признак документа корректировки
//    СтруктураКорректировки - Структура - параметры корректировки (если применимо)
//
Функция ПолучитьТабличнуюЧастьДокумента(Док, ПараметрыОрганизации)
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаТоваров", Неопределено);
	Результат.Вставить("ЭтоКорректировка", Ложь);
	Результат.Вставить("СтруктураКорректировки", Неопределено);
	
	СтруктураДокументаКорректировки = кб99_ВСД_Утилиты.ОпределитьТипОбъектаМетаданных("Корректировка");
	
	Если ТипЗнч(Док) = СтруктураДокументаКорректировки.ТипДокумента Тогда
		// Документ корректировки - используем специальную табличную часть
		Результат.ТаблицаТоваров = Док[СтруктураДокументаКорректировки.ИмяТЧ].Выгрузить();
		Результат.ЭтоКорректировка = Истина;
		Результат.СтруктураКорректировки = СтруктураДокументаКорректировки;
	Иначе
		// Обычный документ - используем стандартную табличную часть
		ПереопределяемыеПоляЗапроса = кб99_ВСД_Общий.ПолучитьПредставлениеПолейДокументаВЗапрос();
		Результат.ТаблицаТоваров = Док[ПереопределяемыеПоляЗапроса.НаименованиеТабличнойЧастиТовары].Выгрузить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает контрагента из документа, если он есть
// 
// Параметры:
//  Док - ДокументСсылка - документ-основание
// 
// Возвращаемое значение:
//  СправочникСсылка, Неопределено - контрагент или Неопределено
//
Функция ПолучитьКонтрагентаДокумента(Док)
	
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(Док, "Контрагент") Тогда
		Возврат Док.Контрагент;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Обрабатывает строку документа корректировки
// 
// Параметры:
//  СтрокаДокумента - СтрокаТаблицыЗначений - строка для обработки
//  СтруктураКорректировки - Структура - структура документа корректировки
//  ПараметрыОрганизации - Структура - параметры организации
// 
// Возвращаемое значение:
//  Булево - Истина, если строку нужно включить в результат
//
Функция ОбработатьСтрокуКорректировки(СтрокаДокумента, СтруктураКорректировки, ПараметрыОрганизации)
	
	ИмяРеквизитаКоличество = ПараметрыОрганизации["НазваниеРеквизитаКоличество"];
	
	// Обработка табличной части "Расхождения"
	Если СтруктураКорректировки.ИмяТЧ = "Расхождения" Тогда
		
		Если СтрокаДокумента[ИмяРеквизитаКоличество] >= 0 Тогда
			// Пропускаем положительные расхождения
			Возврат Ложь;
		КонецЕсли;
		
		// Инвертируем отрицательное количество
		СтрокаДокумента[ИмяРеквизитаКоличество] = -СтрокаДокумента[ИмяРеквизитаКоличество];
		
	// Обработка табличной части "Товары"
	ИначеЕсли СтруктураКорректировки.ИмяТЧ = "Товары" Тогда
		
		Расхождение = СтрокаДокумента.Количество - СтрокаДокумента.КоличествоДоИзменения;
		
		Если Расхождение >= 0 Тогда
			// Пропускаем положительные расхождения
			Возврат Ложь;
		КонецЕсли;
		
		// Используем абсолютное значение отрицательного расхождения
		СтрокаДокумента.Количество = -Расхождение;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Рассчитывает коэффициент пересчета для строки
// 
// Параметры:
//  Количество - Число - количество продукции
//  КоличествоУпаковок - Число - количество упаковок
//  Номенклатура - СправочникСсылка - ссылка на номенклатуру (для сообщений)
// 
// Возвращаемое значение:
//  Число - рассчитанный коэффициент (не меньше 1)
//
Функция РассчитатьКоэффициентУпаковки(Количество, КоличествоУпаковок, Номенклатура = Неопределено)
	
	Если КоличествоУпаковок = 0 Тогда
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			кб99_ВСД.СообщитьИнфо("Количество упаковок равно нулю для " + Номенклатура);
		КонецЕсли;
		Возврат 1;
	КонецЕсли;
	
	Возврат Количество / КоличествоУпаковок;
	
КонецФункции

// Заполняет строку результата выгрузки табличной части
// 
// Параметры:
//  СтрокаРезультата - СтрокаТаблицыЗначений - строка для заполнения
//  СтрокаОснования - СтрокаТаблицыЗначений - строка-источник
//  ВСДПродукцияЭлемент - СправочникСсылка - элемент продукции ВСД
//  Контрагент - СправочникСсылка, Неопределено - контрагент
//  ПараметрыОрганизации - Структура - параметры организации
//
Процедура ЗаполнитьСтрокуВыгрузкиТЧ(СтрокаРезультата, СтрокаОснования, ВСДПродукцияЭлемент, Контрагент, ПараметрыОрганизации)
	
	// Основные реквизиты
	СтрокаРезультата.Контрагент = Контрагент;
	СтрокаРезультата.Номенклатура = СтрокаОснования.Номенклатура;
	СтрокаРезультата.Продукция_Элемент = ВСДПродукцияЭлемент;
	СтрокаРезультата.Количество = РассчитатьКоличествоДляВСД(ПараметрыОрганизации, СтрокаОснования, ВСДПродукцияЭлемент);
	СтрокаРезультата.ВидПродукции = ВСДПродукцияЭлемент.ВидПродукции;
	
	// Серия номенклатуры (используем проверку наличия реквизита)
	Если ПараметрыОрганизации["ПарамИспользоватьСерииПродукции"] Тогда
		Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОснования, "Серия") Тогда
			СтрокаРезультата.СерияНоменклатуры = СтрокаОснования.Серия;
		КонецЕсли;
	КонецЕсли;
	
	// Термические условия перевозки (приоритет у продукции)
	Если ЗначениеЗаполнено(ВСДПродукцияЭлемент.ТермическиеУсловияПеревозки) Тогда
		СтрокаРезультата.ТермУсловияПеревозки = ВСДПродукцияЭлемент.ТермическиеУсловияПеревозки;
	Иначе
		СтрокаРезультата.ТермУсловияПеревозки = ПараметрыОрганизации["ТермическиеУсловияПеревозки"];
	КонецЕсли;
	
	// Упаковки и коэффициент пересчета
	ЗаполнитьУпаковкиИКоэффициент(СтрокаРезультата, СтрокаОснования, ПараметрыОрганизации);
	
	// Идентификатор строки (если есть)
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОснования, "ИдентификаторСтроки") Тогда
		СтрокаРезультата.ИдентификаторСтроки = СтрокаОснования.ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет упаковки и коэффициент пересчета в строке результата
// 
// Параметры:
//  СтрокаРезультата - СтрокаТаблицыЗначений - строка для заполнения
//  СтрокаОснования - СтрокаТаблицыЗначений - строка-источник
//  ПараметрыОрганизации - Структура - параметры организации
//
Процедура ЗаполнитьУпаковкиИКоэффициент(СтрокаРезультата, СтрокаОснования, ПараметрыОрганизации)
	
	ИмяРеквизитаКоличествоМест = ПараметрыОрганизации["НазваниеРеквизитаКоличествоМест"];
	
	// Проверяем наличие реквизита количества мест в строке основания
	Если кб99_ВСД_Утилиты.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОснования, ИмяРеквизитаКоличествоМест) Тогда
		
		КоличествоМест = СтрокаОснования[ИмяРеквизитаКоличествоМест];
		
		Если ЗначениеЗаполнено(КоличествоМест) Тогда
			// Используем реквизит количества мест из документа
			СтрокаРезультата.Упаковки = КоличествоМест;
			СтрокаРезультата.Коэффициент = РассчитатьКоэффициентУпаковки(
				СтрокаРезультата.Количество,
				СтрокаРезультата.Упаковки,
				СтрокаОснования.Номенклатура
			);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если реквизита нет или он пустой - округляем количество
	СтрокаРезультата.Упаковки = Окр(СтрокаРезультата.Количество, 0);
	СтрокаРезультата.Коэффициент = РассчитатьКоэффициентУпаковки(
		СтрокаРезультата.Количество,
		СтрокаРезультата.Упаковки
	);
	
КонецПроцедуры

#КонецОбласти

