// Общий модуль для работы с формами интеграции ГИС Меркурий
// Содержит логику управления партиями, отгрузками и табличными частями форм

#Область ПрограммныйИнтерфейс

#Область РаботаСПартиями

// Уменьшает количество актуальных партий на основе уже распределенных в незавершенных ВСД
// 
// Параметры:
//  ТаблицаАктуальныхПартий - ТаблицаЗначений - таблица с актуальными остатками партий
//  ТаблицаОтгрузок - ТаблицаЗначений - таблица отгрузок с незавершенными ВСД
//
Процедура УменьшитьАктуальныеПартииНаРаспределенные(ТаблицаАктуальныхПартий, ТаблицаОтгрузок) Экспорт
	
	// Уменьшаем актуальные партии на неотправленные ВСД
	// Подбираем уже заполненные, но не отправленные ВСД
	// Выбираем ВСЕ документы, т.к. они могут быть не отмечены, но в них есть эти партии к отправке
	
	ТаблицаВСД = ТаблицаОтгрузок.Скопировать();
	ТаблицаВСД.Свернуть("ВСД", "");
	
	Для Каждого СтрокаТаблицы Из ТаблицаВСД Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВСД) Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропускаем проведенные и зарегистрированные документы
		Если СтрокаТаблицы.ВСД.Проведен ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.ВСД.СтатусВСД) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаТоваровВСД = СтрокаТаблицы.ВСД.Товары.Выгрузить();
		ТаблицаТоваровВСД.Свернуть("Партия", "Количество");
		
		Для Каждого СтрокаВСД Из ТаблицаТоваровВСД Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаВСД.Партия) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ТаблицаАктуальныхПартий.Найти(СтрокаВСД.Партия, "Партия");
			
			Если НайденнаяСтрока <> Неопределено Тогда
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаВСД.Количество;
				
				Если НайденнаяСтрока.Количество < 0 Тогда
					кб99_ВСД.СообщитьИнфо("В заполненных ранее ВСД на отправку обнаружено ПРЕВЫШЕНИЕ количества имеющейся партии по " +
						НайденнаяСтрока.Продукция_Элемент + "; (№ записи : " + СокрЛП(НайденнаяСтрока.Партия.НомерЗаписи) + ") ; документ " + СтрокаТаблицы.ВСД);
					НайденнаяСтрока.Количество = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Удаляем полностью распределенные партии из списка актуальных
	НайденнаяСтрока = ТаблицаАктуальныхПартий.Найти(0, "Количество");
	Пока НайденнаяСтрока <> Неопределено Цикл
		ТаблицаАктуальныхПартий.Удалить(НайденнаяСтрока);
		НайденнаяСтрока = ТаблицаАктуальныхПартий.Найти(0, "Количество");
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает таблицу требуемых партий из отмеченных документов
//
// Параметры:
//  ТаблицаОтгрузок - ТаблицаЗначений - отгрузки для обработки
//  ПараметрыОрганизации - Структура - параметры организации
//  РеквизитГрузополучатель - Число - код реквизита грузополучателя
//
// Возвращаемое значение:
//  Структура - содержит:
//    * ТаблицаПартий - ТаблицаЗначений - требуемые партии
//    * ПолеСортировкиПокупателя - Строка - поле для сортировки
//    * ЗнакСортировкиПокупателя - Булево - признак сортировки по убыванию (LIFO)
//
Функция ПодготовитьТребуемыеПартии(ТаблицаОтгрузок, ПараметрыОрганизации, РеквизитГрузополучатель) Экспорт
	
	ВремПартии = Новый ТаблицаЗначений;   
	ВремПартии.Колонки.Добавить("Номенклатура");
	ВремПартии.Колонки.Добавить("ВСД_Продукция_Элемент");
	ВремПартии.Колонки.Добавить("КоличествоСписания");
	ВремПартии.Колонки.Добавить("СерияНоменклатуры");
	ВремПартии.Колонки.Добавить("Документ");
	ВремПартии.Колонки.Добавить("ТермУсловияПеревозки");
	ВремПартии.Колонки.Добавить("Контрагент");
	ВремПартии.Колонки.Добавить("ВидПродукции");
	ВремПартии.Колонки.Добавить("ИдентификаторСтроки");
	
	ПолеСортировкиПокупателя = Неопределено;
	ЗнакСортировкиПокупателя = Неопределено;
	
	Для Каждого СтрОтгрузки Из ТаблицаОтгрузок Цикл
		
		Если НЕ СтрОтгрузки.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка заполнения грузополучателя
		Если НЕ ЗначениеЗаполнено(СтрОтгрузки.Грузополучатель) Тогда
			ПолеГрузополучатель = ПолучитьИмяРеквизитаГрузополучателя(РеквизитГрузополучатель);
			кб99_ВСД.СообщитьИнфо("В документе " + СтрОтгрузки.Док + " не заполнен реквизит " + ПолеГрузополучатель + " -> Пропускаю");
			Продолжить;
		КонецЕсли;
		
		// Контроль уже отправленного/удаленного ВСД
		Если ЗначениеЗаполнено(СтрОтгрузки.ВСД) Тогда
			кб99_ВСД.СообщитьИнфо("Для " + СтрОтгрузки.Док + " уже создан " + СтрОтгрузки.ВСД + " ->Пропускаю");
			Продолжить;
		КонецЕсли;
		
		// Выгружаем товары из документа
		ТаблицаТоваров = кб99_ВСД_ЗаполнениеДокументов.ВыгрузитьТЧ(СтрОтгрузки.Док, ПараметрыОрганизации);
		Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
			СтрокаПартий = ВремПартии.Добавить();
			СтрокаПартий.Номенклатура = СтрокаТоваров.Номенклатура;
			СтрокаПартий.ВСД_Продукция_Элемент = СтрокаТоваров.Продукция_Элемент;
			СтрокаПартий.КоличествоСписания = СтрокаТоваров.Количество;
			СтрокаПартий.СерияНоменклатуры = СтрокаТоваров.СерияНоменклатуры;
			СтрокаПартий.Документ = СтрОтгрузки.Док;
			СтрокаПартий.Контрагент = СтрОтгрузки.Контрагент;
			СтрокаПартий.ТермУсловияПеревозки = СтрокаТоваров.ТермУсловияПеревозки;
			СтрокаПартий.ВидПродукции = СтрокаТоваров.ВидПродукции;
			СтрокаПартий.ИдентификаторСтроки = СтрокаТоваров.ИдентификаторСтроки;
		КонецЦикла;
		
		// Определение персональных параметров сортировки партий
		Если СтрОтгрузки.Площадка.ПерсональныеПараметрыСписанияПартий Тогда 
			ПолеСортировкиПокупателя = СтрОтгрузки.Площадка.ПарамКолонкаСортировкиПартииСписания;
			ЗнакСортировкиПокупателя = СтрОтгрузки.Площадка.ПарамЗнакСортировкиУбывание;
			
			Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда 
				кб99_ВСД.СообщитьИнфо("! Сортировка партий в Площадке [" + СтрОтгрузки.Площадка + "] = " + 
					ПолеСортировкиПокупателя + " сортировка по LIFO = " + ЗнакСортировкиПокупателя);
			КонецЕсли;
			
		ИначеЕсли СтрОтгрузки.ХозСубъект.ПерсональныеПараметрыСписанияПартий Тогда 
			ПолеСортировкиПокупателя = СтрОтгрузки.ХозСубъект.ПарамКолонкаСортировкиПартииСписания;
			ЗнакСортировкиПокупателя = СтрОтгрузки.ХозСубъект.ПарамЗнакСортировкиУбывание;
			
			Если ПараметрыОрганизации["ВыводитьПодробнуюИнформацию"] Тогда 
				кб99_ВСД.СообщитьИнфо("! Сортировка партий в ХозСубъекте [" + СтрОтгрузки.ХозСубъект + "] = " + 
					ПолеСортировкиПокупателя + " сортировка по LIFO = " + ЗнакСортировкиПокупателя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВремПартии.Свернуть("ВСД_Продукция_Элемент, СерияНоменклатуры, Номенклатура, Документ, ТермУсловияПеревозки, Контрагент, ВидПродукции, ИдентификаторСтроки", "КоличествоСписания");
	ВремПартии.Сортировать("ВСД_Продукция_Элемент");
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаПартий", ВремПартии);
	Результат.Вставить("ПолеСортировкиПокупателя", ПолеСортировкиПокупателя);
	Результат.Вставить("ЗнакСортировкиПокупателя", ЗнакСортировкиПокупателя);
	
	Возврат Результат;
	
КонецФункции

// Распределяет требуемые партии по актуальным остаткам
//
// Параметры:
//  ТребуемыеПартии - ТаблицаЗначений - требуемые к списанию партии
//  АктуальныеПартии - ТаблицаЗначений - актуальные остатки партий
//  ПараметрыОрганизации - Структура - параметры организации
//
// Возвращаемое значение:
//  ТаблицаЗначений - распределенные партии с количеством
//
Функция РаспределитьПартииПоОстаткам(ТребуемыеПартии, АктуальныеПартии, ПараметрыОрганизации) Экспорт
	
	РаспределенныеПартии = Новый ТаблицаЗначений;
	РаспределенныеПартии.Колонки.Добавить("Номенклатура");
	РаспределенныеПартии.Колонки.Добавить("Продукция_Элемент");
	РаспределенныеПартии.Колонки.Добавить("Партия");
	РаспределенныеПартии.Колонки.Добавить("Остаток");
	РаспределенныеПартии.Колонки.Добавить("Количество");
	РаспределенныеПартии.Колонки.Добавить("КоличествоСписания");
	РаспределенныеПартии.Колонки.Добавить("ПолеСортировки");
	РаспределенныеПартии.Колонки.Добавить("Документ");
	РаспределенныеПартии.Колонки.Добавить("ТермическиеУсловияПеревозки");
	РаспределенныеПартии.Колонки.Добавить("ВидПродукции");
	РаспределенныеПартии.Колонки.Добавить("ИдентификаторСтроки");
	
	Для Каждого СтрокаТребуемых Из ТребуемыеПартии Цикл
		
		// Подбираем партии по продукции
		СтрокиПартий = кб99_ВСД.ПодобратьПартииПоПродукцияЭлемент(
			ПараметрыОрганизации, 
			АктуальныеПартии, 
			СтрокаТребуемых.ВСД_Продукция_Элемент, 
			СтрокаТребуемых.КоличествоСписания, 
			СтрокаТребуемых.СерияНоменклатуры, 
			СтрокаТребуемых.Номенклатура, 
			СтрокаТребуемых.Контрагент
		);
		
		// Если партий нет - добавляем строку с нулевым количеством
		Если СтрокиПартий.Количество() = 0 Тогда
			НоваяСтрока = РаспределенныеПартии.Добавить();
			ЗаполнитьСтрокуРаспределенияБезПартии(НоваяСтрока, СтрокаТребуемых);
			кб99_ВСД.СообщитьИнфо("Нет партий для [" + СтрокаТребуемых.ВСД_Продукция_Элемент + "]");
			Продолжить;
		КонецЕсли;
		
		// Добавляем найденные партии
		Для Каждого СтрокаПартии Из СтрокиПартий Цикл
			НоваяСтрока = РаспределенныеПартии.Добавить();
			ЗаполнитьСтрокуРаспределенияСПартией(НоваяСтрока, СтрокаТребуемых, СтрокаПартии);
		КонецЦикла;
		
		// Если партий недостаточно - добавляем остаток без партии
		Если СтрокиПартий.Итог("Количество") < СтрокаТребуемых.КоличествоСписания Тогда
			НоваяСтрока = РаспределенныеПартии.Добавить();
			ЗаполнитьСтрокуРаспределенияСНехваткой(НоваяСтрока, СтрокаТребуемых, СтрокиПартий.Итог("Количество"));
		КонецЕсли;
		
	КонецЦикла;
	
	РаспределенныеПартии.Сортировать("Документ, Номенклатура, Продукция_Элемент, ТермическиеУсловияПеревозки");
	
	Возврат РаспределенныеПартии;
	
КонецФункции

// Обновляет надписи на форме, отображающие статус и ошибки последнего запроса
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления надписей
//
Процедура ОбновитьНадписи(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос = кб99_ВСД_Утилиты.НайтиПоследнийЗапрос( Объект.Ссылка );
	Форма.ApplicationID = Запрос.ApplicationID;
	Форма.СтатусЗапроса = Запрос.СтатусЗапроса;
	
	Если ЗначениеЗаполнено( Запрос.Ошибки ) Тогда
		Форма.Элементы.Ошибки.Видимость = Истина;
		Форма.Ошибки = Запрос.Ошибки;
	Иначе
		Форма.Элементы.Ошибки.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

// Устанавливает условное оформление для формы с отображением статусов запросов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой настраивается оформление
//
Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	Форма.УсловноеОформление.Элементы.Очистить();
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.Статус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "COMPLETED";
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
	
	//
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.Статус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "REJECTED";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	//
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.Статус.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "IN_PROCESS";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗапроса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "ACCEPTED";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Золотой);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает имя реквизита грузополучателя по его коду
//
// Параметры:
//  КодРеквизита - Число - код реквизита грузополучателя
//
// Возвращаемое значение:
//  Строка - имя реквизита
//
Функция ПолучитьИмяРеквизитаГрузополучателя(КодРеквизита)
	
	Если КодРеквизита = 0 Тогда
		Возврат "Контрагент";
	ИначеЕсли КодРеквизита = 1 Тогда
		Возврат "АдресДоставки";
	ИначеЕсли КодРеквизита = 2 Тогда
		Возврат "Партнер";
	ИначеЕсли КодРеквизита = 3 Тогда
		Возврат "Грузополучатель";
	Иначе
		Возврат "Договор";
	КонецЕсли;
	
КонецФункции

// Заполняет строку распределения для случая отсутствия партии
//
// Параметры:
//  НоваяСтрока - СтрокаТаблицыЗначений - строка для заполнения
//  ИсходнаяСтрока - СтрокаТаблицыЗначений - исходные данные
//
Процедура ЗаполнитьСтрокуРаспределенияБезПартии(НоваяСтрока, ИсходнаяСтрока)
	
	НоваяСтрока.Документ = ИсходнаяСтрока.Документ;
	НоваяСтрока.ТермическиеУсловияПеревозки = ИсходнаяСтрока.ТермУсловияПеревозки;
	НоваяСтрока.Номенклатура = ИсходнаяСтрока.Номенклатура;
	НоваяСтрока.Продукция_Элемент = ИсходнаяСтрока.ВСД_Продукция_Элемент;
	НоваяСтрока.КоличествоСписания = ИсходнаяСтрока.КоличествоСписания;
	НоваяСтрока.Количество = 0;
	НоваяСтрока.ВидПродукции = ИсходнаяСтрока.ВидПродукции;
	НоваяСтрока.ИдентификаторСтроки = ИсходнаяСтрока.ИдентификаторСтроки;
	
	Попытка
		НоваяСтрока.ПолеСортировки = кб99_ВСД_Запросы.ДатаXML(ИсходнаяСтрока.СерияНоменклатуры);
	Исключение
		// Игнорируем ошибки преобразования даты - оставляем поле пустым
		НоваяСтрока.ПолеСортировки = "";
	КонецПопытки;
	
КонецПроцедуры

// Заполняет строку распределения для случая наличия партии
//
// Параметры:
//  НоваяСтрока - СтрокаТаблицыЗначений - строка для заполнения
//  ТребуемаяСтрока - СтрокаТаблицыЗначений - требуемая партия
//  СтрокаПартии - СтрокаТаблицыЗначений - найденная партия
//
Процедура ЗаполнитьСтрокуРаспределенияСПартией(НоваяСтрока, ТребуемаяСтрока, СтрокаПартии)
	
	НоваяСтрока.Номенклатура = ТребуемаяСтрока.Номенклатура;
	НоваяСтрока.Документ = ТребуемаяСтрока.Документ;
	НоваяСтрока.Партия = СтрокаПартии.Партия;
	НоваяСтрока.Продукция_Элемент = СтрокаПартии.Партия.Продукция_Элемент;
	НоваяСтрока.Количество = СтрокаПартии.Количество;
	НоваяСтрока.КоличествоСписания = СтрокаПартии.Количество;
	НоваяСтрока.ПолеСортировки = СтрокаПартии.ПолеСортировки;
	НоваяСтрока.ТермическиеУсловияПеревозки = ТребуемаяСтрока.ТермУсловияПеревозки;
	НоваяСтрока.Остаток = НоваяСтрока.Партия.Количество;
	НоваяСтрока.ВидПродукции = ТребуемаяСтрока.ВидПродукции;
	НоваяСтрока.ИдентификаторСтроки = ТребуемаяСтрока.ИдентификаторСтроки;
	
КонецПроцедуры

// Заполняет строку распределения для случая нехватки партий
//
// Параметры:
//  НоваяСтрока - СтрокаТаблицыЗначений - строка для заполнения
//  ТребуемаяСтрока - СтрокаТаблицыЗначений - требуемая партия
//  РаспределеноКоличество - Число - уже распределенное количество
//
Процедура ЗаполнитьСтрокуРаспределенияСНехваткой(НоваяСтрока, ТребуемаяСтрока, РаспределеноКоличество)
	
	НоваяСтрока.Номенклатура = ТребуемаяСтрока.Номенклатура;
	НоваяСтрока.Документ = ТребуемаяСтрока.Документ;
	НоваяСтрока.Продукция_Элемент = ТребуемаяСтрока.ВСД_Продукция_Элемент;
	НоваяСтрока.КоличествоСписания = ТребуемаяСтрока.КоличествоСписания - РаспределеноКоличество;
	НоваяСтрока.ТермическиеУсловияПеревозки = ТребуемаяСтрока.ТермУсловияПеревозки;
	НоваяСтрока.ВидПродукции = ТребуемаяСтрока.ВидПродукции;
	НоваяСтрока.Количество = 0;
	НоваяСтрока.ИдентификаторСтроки = ТребуемаяСтрока.ИдентификаторСтроки;
	
	Попытка
		НоваяСтрока.ПолеСортировки = кб99_ВСД_Запросы.ДатаXML(ТребуемаяСтрока.СерияНоменклатуры);
	Исключение
		// Игнорируем ошибки преобразования даты - оставляем поле пустым
		НоваяСтрока.ПолеСортировки = "";
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
